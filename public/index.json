[{"content":"Blog Free Discussion Area Welcome everyone to share your thoughts and opinions in the comments section of the blog!\nThis website is equipped with giscus, a comment system based on GitHub Discussions. Visitors can leave comments and feedback on the site using GitHub! 📋🖋️\nI will respond to all comments and feedback as soon as possible. 🥰\nIf needed, you can also contact me directly via email: authoritysharing@gmail.com 博客的自由交流区 欢迎大家在博客的评论区分享自己的想法和意见！\n本网站配置了 giscus，这是一个基于 GitHub Discussions 实现的评论系统。访客能够通过 GitHub 在网站上留下评论和反馈！ 📋🖋️\n所有的评论和意见，我会尽快回复所有评论和反馈。🥰\n如有需要，也可以直接通过邮件与我联系：authoritysharing@gmail.com ","permalink":"//localhost:1313/posts/%E7%95%99%E8%A8%80%E6%9D%BF/","summary":"\u003ch1 id=\"blog-free-discussion-area\"\u003eBlog Free Discussion Area\u003c/h1\u003e\n\u003cp\u003eWelcome everyone to share your thoughts and opinions in the comments section of the blog!\u003c/p\u003e\n\u003cp\u003eThis website is equipped with \u003ca href=\"https://giscus.app/zh-CN\"\u003egiscus\u003c/a\u003e, a comment system based on \u003ca href=\"https://docs.github.com/en/discussions\"\u003eGitHub Discussions\u003c/a\u003e. Visitors can leave comments and feedback on the site using GitHub! 📋🖋️\u003c/p\u003e\n\u003cp\u003eI will respond to all comments and feedback as soon as possible. 🥰\u003c/p\u003e\n\u003cp\u003eIf needed, you can also contact me directly via email: \u003ca href=\"mailto:authoritysharing@gmail.com\"\u003eauthoritysharing@gmail.com \u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"博客的自由交流区\"\u003e博客的自由交流区\u003c/h1\u003e\n\u003cp\u003e欢迎大家在博客的评论区分享自己的想法和意见！\u003c/p\u003e","title":"留言板📑Message Board ➡️ 在此留言"},{"content":"Draft cwgo server \u0026ndash;type RPC \u0026ndash;module github.com/cloudwego/biz-demo/gomall/demo/demo_thrift \u0026ndash;service demo_thrift \u0026ndash;idl ../../idl/echo.thrift\n不要心急, 每个人都有自己的时区\n社会 8 - 自然 8 - 生命 5 - 文化 3\n对话 - 图书馆 - 课程询问 - 生活 - 师生\n想法 存放仓库, 存放物品 , 订阅 , 存放100年 , 放入海底 托福计划 托福死莽 100分必须上分 cpp 进度学习 坚持 字节训练营学习 身材管理 健身 托福 100 101\n听力是重点\n加油加油加油 🗽🗽🗽🗽🗽🗽🗽🌎 一定要定点突破 一个一个 上午 阅读 1 篇(词汇题积累) 背作文 背单词 早上背书 听力1篇 下午 口语 (克服听力) 2 tasks 晚上 听力 + 阅读1篇 周末 写作文 , 写完背范文 6:30 起床 出门 阅读 20 \u0026mdash;\u0026gt; 28 加多 8 分 8分\n听力 20 \u0026mdash;\u0026gt; 28 加多 8 分 8分\n口语 15 \u0026mdash;\u0026gt; 23 上分 8 分 8分\n写作 18 \u0026mdash;\u0026gt; 23 上分 5 分 5分\n","permalink":"//localhost:1313/posts/000aaadraft/","summary":"\u003ch1 id=\"draft\"\u003eDraft\u003c/h1\u003e\n\u003chr\u003e\n\u003cp\u003ecwgo server \u0026ndash;type RPC \u0026ndash;module github.com/cloudwego/biz-demo/gomall/demo/demo_thrift  \u0026ndash;service demo_thrift  \u0026ndash;idl ../../idl/echo.thrift\u003c/p\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003e不要心急, 每个人都有自己的时区\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e社会 8 - 自然 8  - 生命 5 - 文化 3\u003c/p\u003e\n\u003cp\u003e对话 - 图书馆 - 课程询问 - 生活 - 师生\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"想法\"\u003e想法\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e存放仓库, 存放物品 , 订阅 , 存放100年 , 放入海底\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch1 id=\"托福计划\"\u003e托福计划\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e托福死莽  \u003cstrong\u003e100分\u003c/strong\u003e必须上分\u003c/li\u003e\n\u003cli\u003ecpp 进度学习 坚持\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e字节训练营学习\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e身材管理 健身\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"托福-100\"\u003e托福 100\u003c/h1\u003e\n\u003cp\u003e101\u003c/p\u003e","title":"草稿"},{"content":"问题 我的网站在复制代码时，会把行号也一起复制下来。我尝试了很多办法，但最终决定：\n既然解决不了问题，那就干脆消灭问题吧！😆\n解决办法 在hugo.yaml文件直接增加以下代码, 这段代码的作用是禁用代码块中的行号显示。\nmarkup: highlight: lineNumbers: false ","permalink":"//localhost:1313/posts/%E8%A7%A3%E5%86%B3hugo%E5%A4%8D%E5%88%B6%E8%A1%8C%E5%8F%B7%E9%97%AE%E9%A2%98%E7%9A%84%E5%8A%9E%E6%B3%95/","summary":"\u003ch1 id=\"问题\"\u003e问题\u003c/h1\u003e\n\u003cp\u003e我的网站在复制代码时，会把行号也一起复制下来。我尝试了很多办法，但最终决定：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e既然解决不了问题，那就干脆消灭问题吧！😆\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"解决办法\"\u003e解决办法\u003c/h1\u003e\n\u003cp\u003e在\u003ccode\u003ehugo.yaml\u003c/code\u003e文件直接增加以下代码, 这段代码的作用是禁用代码块中的行号显示。\u003c/p\u003e","title":"解决hugo复制行号问题的办法"},{"content":"Cpp各类模板设置 插入代码模板 \u0026#34;nameXXX\u0026#34;: { \u0026#34;prefix\u0026#34;: \u0026#34;XXX操作码\u0026#34;, \u0026#34;body\u0026#34;: [ \u0026#34;xxxxxx\u0026#34;, \u0026#34;xxxxxx\u0026#34;, \u0026#34;yyyyyy\u0026#34;, \u0026#34;yyyyyy\u0026#34;, \u0026#34;$0\u0026#34; ] }, 头文件 #pragma GCC optimize(\u0026#34;O2\u0026#34;) #include\u0026lt;bits/stdc++.h\u0026gt; #include \u0026lt;iostream\u0026gt; // cin/cout #include \u0026lt;cstdio\u0026gt; // printf/scanf #include \u0026lt;algorithm\u0026gt; #include \u0026lt;vector\u0026gt; // 容器 #include \u0026lt;string\u0026gt; // 字符串 #include \u0026lt;stack\u0026gt; // 栈 #include \u0026lt;queue\u0026gt; // 队列 #include \u0026lt;unordered_map\u0026gt; // 哈希表 #include \u0026lt;unordered_set\u0026gt; // 哈希表 set #include \u0026lt;memory\u0026gt; // 智能指针 #include \u0026lt;functional\u0026gt; #include \u0026lt;numeric\u0026gt; #include \u0026lt;ranges\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;bitset\u0026gt; #include \u0026lt;cmath\u0026gt; using namespace std; typedef long long ll; // long long为ll typedef long double ld; // long doubleld typedef pair\u0026lt;int, int\u0026gt; pii; // pair\u0026lt;int, int\u0026gt;pii typedef pair\u0026lt;ll, ll\u0026gt; pll; // pair\u0026lt;ll, ll\u0026gt;pll typedef vector\u0026lt;int\u0026gt; vi; // vector\u0026lt;int\u0026gt;vi const long long inf = numeric_limits\u0026lt;long long\u0026gt;::max(); // 无穷大 const int N = 100100; // 100 百 , 100100 十万 , 1100100 一百万 , 100100100 一亿 void Mysolve(){ } int main(){ ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); //---------优化 Mysolve(); return 0; } cpp.json 设置\n{ \u0026#34;HEADER\u0026#34;: { \u0026#34;prefix\u0026#34;: \u0026#34;H\u0026#34;, \u0026#34;body\u0026#34;: [ \u0026#34;#pragma GCC optimize(\\\u0026#34;O2\\\u0026#34;)\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;#include\u0026lt;bits/stdc++.h\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;iostream\u0026gt; // cin/cout\u0026#34;, \u0026#34;#include \u0026lt;cstdio\u0026gt; // printf/scanf\u0026#34;, \u0026#34;#include \u0026lt;algorithm\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;vector\u0026gt; // 容器\u0026#34;, \u0026#34;#include \u0026lt;string\u0026gt; // 字符串\u0026#34;, \u0026#34;#include \u0026lt;stack\u0026gt; // 栈\u0026#34;, \u0026#34;#include \u0026lt;queue\u0026gt; // 队列\u0026#34;, \u0026#34;#include \u0026lt;unordered_map\u0026gt; // 哈希表\u0026#34;, \u0026#34;#include \u0026lt;unordered_set\u0026gt; // 哈希表 set\u0026#34;, \u0026#34;#include \u0026lt;memory\u0026gt; // 智能指针\u0026#34;, \u0026#34;#include \u0026lt;functional\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;numeric\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;ranges\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;cstring\u0026gt; \u0026#34;, \u0026#34;#include \u0026lt;bitset\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;cmath\u0026gt;\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;using namespace std;\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;typedef long long ll; // long long为ll\u0026#34;, \u0026#34;typedef long double ld; // long doubleld\u0026#34;, \u0026#34;typedef pair\u0026lt;int, int\u0026gt; pii; // pair\u0026lt;int, int\u0026gt;pii\u0026#34;, \u0026#34;typedef pair\u0026lt;ll, ll\u0026gt; pll; // pair\u0026lt;ll, ll\u0026gt;pll\u0026#34;, \u0026#34;typedef vector\u0026lt;int\u0026gt; vi; // vector\u0026lt;int\u0026gt;vi\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;const long long inf = numeric_limits\u0026lt;long long\u0026gt;::max(); // 无穷大\u0026#34;, \u0026#34;const int N = 100100; // 100100 十万 , 1100100 一百万 , 100100100 一亿\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;void Mysolve(){\u0026#34;, \u0026#34; \u0026#34;, \u0026#34;}\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;int main(){\u0026#34;, \u0026#34; ios::sync_with_stdio(false);\u0026#34;, \u0026#34; cin.tie(NULL);\u0026#34;, \u0026#34; cout.tie(NULL);\u0026#34;, \u0026#34; //---------优化\u0026#34;, \u0026#34;\u0026#34;, \u0026#34; Mysolve();\u0026#34;, \u0026#34; return 0;\u0026#34;, \u0026#34;}\u0026#34;, \u0026#34;$0\u0026#34; ] }, } leetcode模板 \u0026#34;leetcode\u0026#34;: { \u0026#34;prefix\u0026#34;: \u0026#34;lc\u0026#34;, \u0026#34;body\u0026#34;: [ \u0026#34;#pragma GCC optimize(\\\u0026#34;O2\\\u0026#34;)\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;#include\u0026lt;bits/stdc++.h\u0026gt;\u0026#34;, \u0026#34;using namespace std;\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;const long long inf = numeric_limits\u0026lt;long long\u0026gt;::max();\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;$0\u0026#34; ] }, 算法模板\n高精度算法 ","permalink":"//localhost:1313/posts/cppvscode%E6%A8%A1%E6%9D%BF/","summary":"\u003ch1 id=\"cpp各类模板设置\"\u003eCpp各类模板设置\u003c/h1\u003e\n\u003ch2 id=\"插入代码模板\"\u003e插入代码模板\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e\u0026#34;nameXXX\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026#34;prefix\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;XXX操作码\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026#34;body\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;xxxxxx\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;xxxxxx\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;yyyyyy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;yyyyyy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;$0\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"头文件\"\u003e头文件\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#pragma GCC optimize(\u0026#34;O2\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u0026lt;bits/stdc++.h\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e      \u003c/span\u003e\u003cspan class=\"c1\"\u003e// cin/cout\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// printf/scanf\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;algorithm\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 容器\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 字符串\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stack\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e         \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 栈\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;queue\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e         \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 队列\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unordered_map\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 哈希表\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unordered_set\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 哈希表 set\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;memory\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 智能指针\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;functional\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;numeric\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;ranges\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstring\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;bitset\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cmath\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e       \u003cspan class=\"c1\"\u003e// long long为ll\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eld\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// long doubleld\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epii\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// pair\u0026lt;int, int\u0026gt;pii\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epll\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// pair\u0026lt;ll, ll\u0026gt;pll\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003evi\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// vector\u0026lt;int\u0026gt;vi\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003einf\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 无穷大\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e100100\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 100 百 , 100100 十万 , 1100100 一百万 , 100100100 一亿\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eMysolve\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eios\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esync_with_stdio\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ecin\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etie\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etie\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//---------优化\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eMysolve\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003ecpp.json 设置\u003c/p\u003e","title":"CppVsCode代码快捷模板"},{"content":"灵神题单 分享｜如何科学刷题？ - 力扣（LeetCode）\n前言 怎么刷算法题？按照什么顺序刷题？如何科学地刷题训练？\n如果你刚接触力扣，还不熟悉基本编程语法和常用库函数，推荐刷力扣官方的入门题单：\n「新」动计划 · 编程入门 编程基础 0 到 1 有了一些简单题的积累，就可以开始刷我的题单啦~\n分享｜如何科学刷题？ - 力扣（LeetCode） 打开链接 找灵神\n滑动窗口与双指针（定长/不定长/单序列/双序列/三指针） 二分算法（二分答案/最小化最大值/最大化最小值/第K小） 单调栈（基础/矩形面积/贡献法/最小字典序） 网格图（DFS/BFS/综合应用） 位运算（基础/性质/拆位/试填/恒等式/思维） 图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径） 动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望） 常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树） 数学算法（数论/组合/概率期望/博弈/计算几何/随机算法） 贪心与思维（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造） 链表、二叉树与一般树（前后指针/快慢指针/DFS/BFS/直径/LCA） 字符串（KMP/Z函数/Manacher/字符串哈希/AC自动机/后缀数组/子序列自动机） 对于动态规划，至少要做 100 100 道才算入门。\n优点：突击训练特定知识点，可以掌握常用算法套路。按照题单专题刷，一个套路可以解决多个题目，刷题效率高。此外，做同一个专题下的题目，相当于在从不同的角度去观察、思考同一个算法，这能让你更加深刻地理解算法的本质。\n缺点：提前知道题目类型，跳过了一些思考步骤。但比赛/笔试是不会告诉你这题是什么类型的，把 DP 想成贪心的大有人在。可以结合下面的训练方法，锻炼自己判断题目类型的能力。\n训练方法 A 要点：\n按照专题刷题。同一个专题下的题目，套路是一样的，刷题效率杠杠滴~ 从易到难，量力而行。题目已经按照难度分整理好了，按照顺序刷就行~ 推荐先刷【滑动窗口】和【二分】题单，这是两个最基础的算法，套路也较为固定，刷题过程中还可以学到一些做题技巧。其他题单可以按照自己的兴趣选择。\n请结合【基础算法精讲】学习。\n推荐安装 这个插件，可以在题单中自动标记做过的题目。\n训练方法 B 随机刷题，注意控制难度范围，太简单和太难的题目都不能让你进入「心流通道」。\n打开 难度练习。 在设置中关闭算法标签。 选择适合自己的难度范围，开刷！ 优点：做题时不知道题目类型，可以训练实战能力。\n缺点：知识点有些零散，适合已经掌握常用算法的同学查漏补缺，检验自己的学习成果。\n训练方法 C 如果时间很少，可以突击训练 HOT 100。\n最好能默写下来程度\nLeetCode 热题 100 - 学习计划 - 力扣（LeetCode）全球极客挚爱的技术成长平台\n作者：灵茶山艾府 链接：https://leetcode.cn/circle/discuss/RvFUtj/ 来源：力扣（LeetCode） 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n","permalink":"//localhost:1313/posts/leetcode%E5%88%B7%E9%A2%98%E9%A2%98%E5%8D%95/","summary":"\u003ch1 id=\"灵神题单\"\u003e灵神题单\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://leetcode.cn/circle/discuss/RvFUtj/\"\u003e分享｜如何科学刷题？ - 力扣（LeetCode）\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e前言\n怎么刷算法题？按照什么顺序刷题？如何科学地刷题训练？\u003c/p\u003e\n\u003cp\u003e如果你刚接触力扣，还不熟悉基本编程语法和常用库函数，推荐刷力扣官方的入门题单：\u003c/p\u003e","title":"Leetcode刷题题单"},{"content":"Xshell突出显示配置 将命名为 XshellColor.hls 的文件准备好。\n将该文件放置到以下目录： C:\\Users\\Your_name\\Documents\\NetSarang Computer\\7\\Xshell\\HighlightSet Files\n（请将 Your_name 替换为您的实际用户名）\n打开 Xshell 后，即可在颜色设置中选择该高亮配置文件。\n我这是黑暗版风格, 偏护眼\n[Keyword_0] TermBackColor=1 Underline=1 Bold=0 Strikeout=0 Keyword=[_a-z0-9-]+(.[_a-z0-9-]+)*@[a-z0-9-]+(.[a-z0-9-]+)* Description=Email address BackColorIndex=286 UseRegex=1 Italic=0 Enable=0 TextColorIndex=286 CaseSens=0 [Keyword_1] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(?=(\\b|\\D))(((\\d{1,2})|(1\\d{1,2})|(2[0-4]\\d)|(25[0-5]))\\.){3}((\\d{1,2})|(1\\d{1,2})|(2[0-4]\\d)|(25[0-5]))(?=(\\b|\\D))\\s* Description=IPv4 BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=295 CaseSens=0 [Keyword_2] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=[\\[ ]?\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*\\]? Description=IPv6 BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=294 CaseSens=0 [Keyword_3] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(\\berror\\b)|(\\bfail(ed)?\\b)|(\\bfalse\\b)|(\\bdown\\b)|(\\blocked\\b) Description=error, fail, false, down BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=290 CaseSens=0 [Keyword_4] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(\\bactive(d)?\\b)|(\\bsuccess(ful(ly)?)?\\b)|(\\btrue\\b)|(\\bok\\b)|(\\bup\\b)|(\\brunning\\b)|(\\bdeployed\\b)|(\\bunlocked\\b) Description=active, success, true, ok, up BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=291 CaseSens=0 [Keyword_5] TermBackColor=1 Underline=1 Bold=1 Strikeout=0 Keyword=(\\bstart(ed|ing)?\\b)|(\\bbegin(ning)?\\b)|(\\benable(d)?\\b)|(\\bcreate(d)?\\b)|(\\bopen\\b) Description=start, begin, enable, create, open BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=291 CaseSens=0 [Keyword_6] TermBackColor=1 Underline=1 Bold=1 Strikeout=0 Keyword=(\\bstop(ped)?\\b)|(\\bend\\b)|(\\bfinish(ed)?\\b)|(\\bdisable(d)?\\b)|(\\bdelete(d)?\\b)|(\\bclose(d)?\\b) Description=stop, end, finish, disable, delete BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=293 CaseSens=0 [Keyword_7] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(\\bwarn(ing)?\\b)|(\\binactive\\b)|(\\bunknown\\b) Description=warn, inactive, unknown BackColorIndex=292 UseRegex=1 Italic=1 Enable=1 TextColorIndex=282 CaseSens=0 [Colors] Colors=000000,00E4FF,000040,0080FF,400000,C08080,8080FF,C0C0C0,555555,5555FF,55FF55,55FFFF,FF5555,FF55FF,FFFF55,FFFFFF [Keyword_8] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(\\binfo\\b) Description=info BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=291 CaseSens=0 [Keyword_9] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=\\bDEBUG\\b Description=debug BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=293 CaseSens=0 [info] Version=1.1 Count=12 [Keyword_10] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=\\/\\b(\\d|([1-9]\\d)|(1[01]\\d)|(12[0-8]))\\b Description=CIDR BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=284 CaseSens=0 [Keyword_11] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=([a-zA-Z0-9._-]+@([a-zA-Z0-9_-]+\\.)+[a-zA-Z0-9_-]+) Description=Email Regex BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=286 CaseSens=0 ","permalink":"//localhost:1313/posts/xshell%E4%B8%BB%E9%A2%98%E9%85%8D%E8%89%B2%E6%96%87%E4%BB%B6/","summary":"\u003ch1 id=\"xshell突出显示配置\"\u003e\u003ccode\u003eXshell\u003c/code\u003e突出显示配置\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e将命名为 \u003cstrong\u003e\u003ccode\u003eXshellColor.hls\u003c/code\u003e\u003c/strong\u003e 的文件准备好。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e将该文件放置到以下目录：\n\u003cstrong\u003e\u003ccode\u003eC:\\Users\\Your_name\\Documents\\NetSarang Computer\\7\\Xshell\\HighlightSet Files\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e（请将 \u003ccode\u003eYour_name\u003c/code\u003e 替换为您的实际用户名）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e打开 Xshell 后，即可在颜色设置中选择该高亮配置文件。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e我这是黑暗版风格, 偏护眼\u003c/p\u003e","title":"Xshell主题配色文件"},{"content":"加上具体的例子 Add specific examples 帮我理顺并润色以上内容 help me organize and refine the content above. 科学写作专家 - 学术写作 want you to act as an expert in scientific writing, l will provide you with some paragraphs in English and your task is to improve the spelling, grammar clarity, conciseness and overalreadability of the text providedwhile breaking down longsentences, reducing repetitionand providing improvementsuggestions. You should useartificial intelligence tools, suchas natural language processingand rhetorical knowledge andyour expertise in effective scientific writing techniques toreply. Provide the output as a markdown table with the head in Chinese. The first column is the originasentence, and the secondcolumn is the sentence afterediting and the third columnprovides explanation in Chinese Please edit the following text in a scientific tone: ","permalink":"//localhost:1313/posts/ai%E6%8F%90%E7%A4%BA%E8%AF%8D%E6%B1%87%E6%80%BB/","summary":"\u003ch1 id=\"加上具体的例子\"\u003e加上具体的例子\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eAdd\u003c/span\u003e \u003cspan class=\"nx\"\u003especific\u003c/span\u003e \u003cspan class=\"nx\"\u003eexamples\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"帮我理顺并润色以上内容\"\u003e帮我理顺并润色以上内容\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ehelp\u003c/span\u003e \u003cspan class=\"n\"\u003eme\u003c/span\u003e \u003cspan class=\"n\"\u003eorganize\u003c/span\u003e \u003cspan class=\"n\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003erefine\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003econtent\u003c/span\u003e \u003cspan class=\"n\"\u003eabove\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"科学写作专家---学术写作\"\u003e科学写作专家 - 学术写作\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ewant\u003c/span\u003e \u003cspan class=\"n\"\u003eyou\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e \u003cspan class=\"n\"\u003eact\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003ean\u003c/span\u003e \u003cspan class=\"n\"\u003eexpert\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003escientific\u003c/span\u003e \u003cspan class=\"n\"\u003ewriting\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"n\"\u003ewill\u003c/span\u003e \u003cspan class=\"n\"\u003eprovide\u003c/span\u003e \u003cspan class=\"n\"\u003eyou\u003c/span\u003e \u003cspan class=\"k\"\u003ewith\u003c/span\u003e \u003cspan class=\"n\"\u003esome\u003c/span\u003e \u003cspan class=\"n\"\u003eparagraphs\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eEnglish\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003eyour\u003c/span\u003e \u003cspan class=\"n\"\u003etask\u003c/span\u003e \u003cspan class=\"ow\"\u003eis\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e \u003cspan class=\"n\"\u003eimprove\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003espelling\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003egrammar\u003c/span\u003e \u003cspan class=\"n\"\u003eclarity\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003econciseness\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003eoveralreadability\u003c/span\u003e \u003cspan class=\"n\"\u003eof\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"n\"\u003eprovidedwhile\u003c/span\u003e \u003cspan class=\"n\"\u003ebreaking\u003c/span\u003e \u003cspan class=\"n\"\u003edown\u003c/span\u003e \u003cspan class=\"n\"\u003elongsentences\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ereducing\u003c/span\u003e \u003cspan class=\"n\"\u003erepetitionand\u003c/span\u003e \u003cspan class=\"n\"\u003eproviding\u003c/span\u003e \u003cspan class=\"n\"\u003eimprovementsuggestions\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"n\"\u003eYou\u003c/span\u003e \u003cspan class=\"n\"\u003eshould\u003c/span\u003e \u003cspan class=\"n\"\u003euseartificial\u003c/span\u003e \u003cspan class=\"n\"\u003eintelligence\u003c/span\u003e \u003cspan class=\"n\"\u003etools\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esuchas\u003c/span\u003e \u003cspan class=\"n\"\u003enatural\u003c/span\u003e \u003cspan class=\"n\"\u003elanguage\u003c/span\u003e \u003cspan class=\"n\"\u003eprocessingand\u003c/span\u003e \u003cspan class=\"n\"\u003erhetorical\u003c/span\u003e \u003cspan class=\"n\"\u003eknowledge\u003c/span\u003e \u003cspan class=\"n\"\u003eandyour\u003c/span\u003e \u003cspan class=\"n\"\u003eexpertise\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eeffective\u003c/span\u003e \u003cspan class=\"n\"\u003escientific\u003c/span\u003e \u003cspan class=\"n\"\u003ewriting\u003c/span\u003e \u003cspan class=\"n\"\u003etechniques\u003c/span\u003e \u003cspan class=\"n\"\u003etoreply\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"n\"\u003eProvide\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003eoutput\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003emarkdown\u003c/span\u003e \u003cspan class=\"n\"\u003etable\u003c/span\u003e \u003cspan class=\"k\"\u003ewith\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003ehead\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eChinese\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"n\"\u003eThe\u003c/span\u003e \u003cspan class=\"n\"\u003efirst\u003c/span\u003e \u003cspan class=\"n\"\u003ecolumn\u003c/span\u003e \u003cspan class=\"ow\"\u003eis\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003eoriginasentence\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003esecondcolumn\u003c/span\u003e \u003cspan class=\"ow\"\u003eis\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003esentence\u003c/span\u003e \u003cspan class=\"n\"\u003eafterediting\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003ethird\u003c/span\u003e \u003cspan class=\"n\"\u003ecolumnprovides\u003c/span\u003e \u003cspan class=\"n\"\u003eexplanation\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eChinese\u003c/span\u003e \u003cspan class=\"n\"\u003ePlease\u003c/span\u003e \u003cspan class=\"n\"\u003eedit\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003efollowing\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003escientific\u003c/span\u003e \u003cspan class=\"n\"\u003etone\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"heading\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-1\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-2\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-3\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-4\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-5\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-6\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-7\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-8\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-9\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-10\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-11\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-12\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-13\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-14\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-15\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-16\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-17\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-18\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-19\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-20\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-21\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-22\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-23\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-24\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-25\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-26\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-27\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-28\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-29\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-30\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-31\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-32\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-33\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-34\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-35\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-36\"\u003e\u003c/h1\u003e","title":"AI提示词汇总"},{"content":"什么是加密 ","permalink":"//localhost:1313/posts/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E5%92%8C%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%9A%84%E6%80%9D%E8%80%83/","summary":"\u003ch1 id=\"什么是加密\"\u003e什么是加密\u003c/h1\u003e","title":"对称加密和非对称加密的思考"},{"content":" 我的 vscode 的设置.json文件\n2024.11.12 设置 { \u0026#34;editor.fontSize\u0026#34;: 16, \u0026#34;cph.general.autoShowJudge\u0026#34;: false, \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;editor.formatOnType\u0026#34;: true, \u0026#34;files.autoSave\u0026#34;: \u0026#34;afterDelay\u0026#34;, \u0026#34;git.confirmSync\u0026#34;: false, \u0026#34;chat.editor.fontSize\u0026#34;: 18, \u0026#34;window.zoomLevel\u0026#34;: 1, \u0026#34;editor.mouseWheelZoom\u0026#34;: true, \u0026#34;editor.wordWrap\u0026#34;: \u0026#34;on\u0026#34;, \u0026#34;debug.onTaskErrors\u0026#34;: \u0026#34;debugAnyway\u0026#34;, \u0026#34;explorer.confirmDelete\u0026#34;: false, \u0026#34;extensions.experimental.affinity\u0026#34;: { \u0026#34;asvetliakov.vscode-neovim\u0026#34;: 1 }, \u0026#34;workbench.settings.applyToAllProfiles\u0026#34;: [ \u0026#34;editor.fontSize\u0026#34; ], \u0026#34;go.delveConfig\u0026#34;: {}, \u0026#34;[javascript]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;esbenp.prettier-vscode\u0026#34; }, \u0026#34;[markdown]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;esbenp.prettier-vscode\u0026#34; }, \u0026#34;[prisma]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;Prisma.prisma\u0026#34; }, \u0026#34;[typescript]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;esbenp.prettier-vscode\u0026#34; }, \u0026#34;[typescriptreact]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;esbenp.prettier-vscode\u0026#34; }, \u0026#34;editor.codeActionsOnSave\u0026#34;: { \u0026#34;source.addMissingImports\u0026#34;: \u0026#34;explicit\u0026#34;, \u0026#34;source.organizeImports\u0026#34;: \u0026#34;explicit\u0026#34; }, \u0026#34;editor.cursorSmoothCaretAnimation\u0026#34;: \u0026#34;on\u0026#34;, \u0026#34;editor.cursorSurroundingLines\u0026#34;: 5, \u0026#34;editor.fontFamily\u0026#34;: \u0026#34;CaskaydiaCove Nerd Font\u0026#34;, \u0026#34;editor.fontLigatures\u0026#34;: true, \u0026#34;python.analysis.completeFunctionParens\u0026#34;: true, \u0026#34;editor.fontSize\u0026#34;: 18, \u0026#34;editor.fontWeight\u0026#34;: \u0026#34;300\u0026#34;, \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;editor.inlineSuggest.enabled\u0026#34;: true, \u0026#34;editor.lineNumbers\u0026#34;: \u0026#34;relative\u0026#34;, \u0026#34;editor.linkedEditing\u0026#34;: true, \u0026#34;editor.smoothScrolling\u0026#34;: true, \u0026#34;editor.stickyScroll.enabled\u0026#34;: true, \u0026#34;editor.suggest.insertMode\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;editor.suggestFontSize\u0026#34;: 14, \u0026#34;editor.wordWrap\u0026#34;: \u0026#34;on\u0026#34;, \u0026#34;errorLens.fontStyleItalic\u0026#34;: true, \u0026#34;everforest.italicKeywords\u0026#34;: true, \u0026#34;explorer.confirmDelete\u0026#34;: false, \u0026#34;explorer.confirmDragAndDrop\u0026#34;: false, \u0026#34;extensions.autoUpdate\u0026#34;: \u0026#34;onlyEnabledExtensions\u0026#34;, \u0026#34;extensions.ignoreRecommendations\u0026#34;: false, \u0026#34;files.exclude\u0026#34;: { \u0026#34;**/node_modules\u0026#34;: true }, \u0026#34;prettier.semi\u0026#34;: false, \u0026#34;prettier.singleAttributePerLine\u0026#34;: true, \u0026#34;prettier.singleQuote\u0026#34;: true, \u0026#34;prettier.trailingComma\u0026#34;: \u0026#34;all\u0026#34;, \u0026#34;projectManager.git.baseFolders\u0026#34;: [ \u0026#34;$home/workspace\u0026#34; ], \u0026#34;projectManager.sortList\u0026#34;: \u0026#34;Recent\u0026#34;, \u0026#34;sortJSON.orderOverride\u0026#34;: [ \u0026#34;name\u0026#34;, \u0026#34;version\u0026#34;, \u0026#34;main\u0026#34;, \u0026#34;module\u0026#34;, \u0026#34;types\u0026#34;, \u0026#34;typings\u0026#34;, \u0026#34;files\u0026#34;, \u0026#34;publishConfig\u0026#34;, \u0026#34;repository\u0026#34;, \u0026#34;scripts\u0026#34;, \u0026#34;prefix\u0026#34;, \u0026#34;description\u0026#34;, \u0026#34;body\u0026#34; ], \u0026#34;sortJSON.orderUnderride\u0026#34;: [ \u0026#34;resolutions\u0026#34;, \u0026#34;dependencies\u0026#34;, \u0026#34;devDependencies\u0026#34;, \u0026#34;peerDependencies\u0026#34;, \u0026#34;cSpell.userWords\u0026#34; ], \u0026#34;typescript.preferences.importModuleSpecifier\u0026#34;: \u0026#34;relative\u0026#34;, \u0026#34;typescript.updateImportsOnFileMove.enabled\u0026#34;: \u0026#34;always\u0026#34;, \u0026#34;update.showReleaseNotes\u0026#34;: false, \u0026#34;vim.foldfix\u0026#34;: true, \u0026#34;vim.highlightedyank.color\u0026#34;: \u0026#34;rgba(230, 97, 89, 0.7)\u0026#34;, \u0026#34;vim.highlightedyank.enable\u0026#34;: true, \u0026#34;vim.highlightedyank.textColor\u0026#34;: \u0026#34;white\u0026#34;, \u0026#34;vim.hlsearch\u0026#34;: true, \u0026#34;vim.leader\u0026#34;: \u0026#34;\u0026lt;space\u0026gt;\u0026#34;, \u0026#34;vim.normalModeKeyBindingsNonRecursive\u0026#34;: [ { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;r\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.rename\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;w\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;:w!\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;q\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;:q!\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;x\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;:x!\u0026#34; ] }, { \u0026#34;after\u0026#34;: [ \u0026#34;g\u0026#34;, \u0026#34;g\u0026#34;, \u0026#34;V\u0026#34;, \u0026#34;G\u0026#34; ], \u0026#34;before\u0026#34;: [ \u0026#34;\u0026lt;c-a\u0026gt;\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;\u0026lt;leader\u0026gt;\u0026#34;, \u0026#34;k\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.showHover\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;[\u0026#34;, \u0026#34;d\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.marker.prev\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;]\u0026#34;, \u0026#34;d\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.marker.next\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;\u0026lt;leader\u0026gt;\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;a\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.quickFix\u0026#34; ] }, { \u0026#34;after\u0026#34;: [ \u0026#34;^\u0026#34; ], \u0026#34;before\u0026#34;: [ \u0026#34;H\u0026#34; ] }, { \u0026#34;after\u0026#34;: [ \u0026#34;$\u0026#34; ], \u0026#34;before\u0026#34;: [ \u0026#34;L\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;i\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;extension.toggleBool\u0026#34; ] } ], \u0026#34;vim.useSystemClipboard\u0026#34;: true, \u0026#34;window.zoomLevel\u0026#34;: 1, \u0026#34;workbench.iconTheme\u0026#34;: \u0026#34;Monokai Pro Icons\u0026#34;, \u0026#34;workbench.settings.editor\u0026#34;: \u0026#34;json\u0026#34;, \u0026#34;workbench.startupEditor\u0026#34;: \u0026#34;readme\u0026#34;, \u0026#34;zenMode.hideLineNumbers\u0026#34;: false, \u0026#34;vsicons.dontShowNewVersionMessage\u0026#34;: true, \u0026#34;[jsonc]\u0026#34;: { \u0026#34;editor.quickSuggestions\u0026#34;: { \u0026#34;strings\u0026#34;: true }, \u0026#34;editor.suggest.insertMode\u0026#34;: \u0026#34;replace\u0026#34; }, \u0026#34;terminal.integrated.defaultProfile.windows\u0026#34;: \u0026#34;Command Prompt\u0026#34;, \u0026#34;terminal.explorerKind\u0026#34;: \u0026#34;external\u0026#34;, \u0026#34;security.workspace.trust.enabled\u0026#34;: false, \u0026#34;typescript.disableAutomaticTypeAcquisition\u0026#34;: true, \u0026#34;git.enableSmartCommit\u0026#34;: true, \u0026#34;git.openRepositoryInParentFolders\u0026#34;: \u0026#34;always\u0026#34;, \u0026#34;files.autoGuessEncoding\u0026#34;: true, \u0026#34;code-runner.languageIdToFileExtensionMap\u0026#34;: { \u0026#34;bat\u0026#34;: \u0026#34;.bat\u0026#34;, \u0026#34;powershell\u0026#34;: \u0026#34;.ps1\u0026#34;, \u0026#34;typescript\u0026#34;: \u0026#34;.ts\u0026#34; }, \u0026#34;vim.easymotion\u0026#34;: true, // \u0026#34;editor.formatOnType\u0026#34;: true, // \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;go.formatTool\u0026#34;: \u0026#34;gofmt\u0026#34;, \u0026#34;[go]\u0026#34;: { \u0026#34;editor.insertSpaces\u0026#34;: true, \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;editor.codeActionsOnSave\u0026#34;: { \u0026#34;source.organizeImports\u0026#34;: \u0026#34;explicit\u0026#34; }, \u0026#34;editor.suggest.snippetsPreventQuickSuggestions\u0026#34;: false }, \u0026#34;animations.Install-Method\u0026#34;: \u0026#34;Custom CSS and JS\u0026#34;, \u0026#34;apc.imports\u0026#34;: [ \u0026#34;file:///c:/Users/zhang/.vscode/extensions/brandonkirbyson.vscode-animations-2.0.3/dist/updateHandler.js\u0026#34; ], \u0026#34;animations.CursorAnimation\u0026#34;: true, \u0026#34;animations.CursorAnimationOptions\u0026#34;: { \u0026#34;Color\u0026#34;: \u0026#34;#ffb6c1\u0026#34;, \u0026#34;TrailLength\u0026#34;: 8 }, \u0026#34;animations.Smooth-Mode\u0026#34;: false, \u0026#34;marscode.codeCompletionPro\u0026#34;: { \u0026#34;enableCodeCompletionPro\u0026#34;: true }, \u0026#34;marscode.enableCodelens\u0026#34;: { \u0026#34;enableInlineUnitTest\u0026#34;: false, \u0026#34;enableInlineDocumentation\u0026#34;: false }, \u0026#34;vscode_custom_css.imports\u0026#34;: [ \u0026#34;file:///c:/Users/zhang/.vscode/extensions/brandonkirbyson.vscode-animations-2.0.4/dist/updateHandler.js\u0026#34; ] } ","permalink":"//localhost:1313/posts/vscodesetting%E9%85%8D%E7%BD%AE/","summary":"\u003cblockquote\u003e\n\u003cp\u003e我的 \u003ccode\u003evscode\u003c/code\u003e 的设置\u003ccode\u003e.json\u003c/code\u003e文件\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"20241112-设置\"\u003e2024.11.12 设置\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontSize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;cph.general.autoShowJudge\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.formatOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.formatOnType\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;files.autoSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;afterDelay\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;git.confirmSync\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;chat.editor.fontSize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;window.zoomLevel\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.mouseWheelZoom\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.wordWrap\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;on\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;debug.onTaskErrors\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;debugAnyway\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;explorer.confirmDelete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;extensions.experimental.affinity\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;asvetliakov.vscode-neovim\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;workbench.settings.applyToAllProfiles\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;editor.fontSize\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;go.delveConfig\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[javascript]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;esbenp.prettier-vscode\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[markdown]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;esbenp.prettier-vscode\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[prisma]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Prisma.prisma\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[typescript]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;esbenp.prettier-vscode\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[typescriptreact]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;esbenp.prettier-vscode\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.codeActionsOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;source.addMissingImports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;explicit\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;source.organizeImports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;explicit\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.cursorSmoothCaretAnimation\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;on\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.cursorSurroundingLines\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontFamily\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;CaskaydiaCove Nerd Font\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontLigatures\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;python.analysis.completeFunctionParens\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontSize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontWeight\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;300\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.formatOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.inlineSuggest.enabled\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.lineNumbers\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;relative\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.linkedEditing\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.smoothScrolling\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.stickyScroll.enabled\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.suggest.insertMode\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;replace\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.suggestFontSize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e14\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.wordWrap\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;on\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;errorLens.fontStyleItalic\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;everforest.italicKeywords\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;explorer.confirmDelete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;explorer.confirmDragAndDrop\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;extensions.autoUpdate\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;onlyEnabledExtensions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;extensions.ignoreRecommendations\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;files.exclude\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;**/node_modules\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;prettier.semi\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;prettier.singleAttributePerLine\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;prettier.singleQuote\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;prettier.trailingComma\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;all\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;projectManager.git.baseFolders\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;$home/workspace\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;projectManager.sortList\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Recent\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;sortJSON.orderOverride\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;main\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;module\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;types\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;typings\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;files\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;publishConfig\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;repository\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;scripts\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;prefix\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;body\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;sortJSON.orderUnderride\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;resolutions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;dependencies\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;devDependencies\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;peerDependencies\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;cSpell.userWords\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;typescript.preferences.importModuleSpecifier\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;relative\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;typescript.updateImportsOnFileMove.enabled\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;always\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;update.showReleaseNotes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.foldfix\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.highlightedyank.color\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;rgba(230, 97, 89, 0.7)\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.highlightedyank.enable\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.highlightedyank.textColor\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;white\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.hlsearch\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;space\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.normalModeKeyBindingsNonRecursive\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;r\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.rename\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;w\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;:w!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;q\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;:q!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;x\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;:x!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;after\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;g\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;g\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;V\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;G\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;c-a\u0026gt;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;leader\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;k\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.showHover\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;[\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;d\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.marker.prev\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;d\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.marker.next\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;leader\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;c\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.quickFix\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;after\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;^\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;H\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;after\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;$\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;L\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;i\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;extension.toggleBool\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.useSystemClipboard\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;window.zoomLevel\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;workbench.iconTheme\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Monokai Pro Icons\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;workbench.settings.editor\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;json\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;workbench.startupEditor\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;readme\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;zenMode.hideLineNumbers\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vsicons.dontShowNewVersionMessage\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[jsonc]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.quickSuggestions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;strings\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.suggest.insertMode\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;replace\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;terminal.integrated.defaultProfile.windows\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Command Prompt\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;terminal.explorerKind\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;external\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;security.workspace.trust.enabled\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;typescript.disableAutomaticTypeAcquisition\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;git.enableSmartCommit\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;git.openRepositoryInParentFolders\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;always\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;files.autoGuessEncoding\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;code-runner.languageIdToFileExtensionMap\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;bat\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.bat\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;powershell\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.ps1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;typescript\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.ts\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.easymotion\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"c1\"\u003e// \u0026#34;editor.formatOnType\u0026#34;: true,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// \u0026#34;editor.formatOnSave\u0026#34;: true,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;go.formatTool\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;gofmt\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[go]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.insertSpaces\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.formatOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.codeActionsOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;source.organizeImports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;explicit\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.suggest.snippetsPreventQuickSuggestions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;animations.Install-Method\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Custom CSS and JS\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;apc.imports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;file:///c:/Users/zhang/.vscode/extensions/brandonkirbyson.vscode-animations-2.0.3/dist/updateHandler.js\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;animations.CursorAnimation\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;animations.CursorAnimationOptions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;Color\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;#ffb6c1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;TrailLength\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;animations.Smooth-Mode\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;marscode.codeCompletionPro\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;enableCodeCompletionPro\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;marscode.enableCodelens\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;enableInlineUnitTest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;enableInlineDocumentation\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vscode_custom_css.imports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;file:///c:/Users/zhang/.vscode/extensions/brandonkirbyson.vscode-animations-2.0.4/dist/updateHandler.js\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"VsCodeSetting配置"},{"content":"通过hugo创建md文件 打开power shell , 输入 cd E:\\HugoSite\\Hugo\\CooperZhang (目标文件夹) 进入目标位置后 , 输入 hugo new content content\\posts\\要创建的md文件名称.md 回车 , 完成创建 ","permalink":"//localhost:1313/posts/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87hugo%E5%88%9B%E5%BB%BAmarkdown%E6%96%87%E4%BB%B6/","summary":"\u003ch1 id=\"通过hugo创建md文件\"\u003e通过hugo创建md文件\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e打开power shell , 输入 \u003ccode\u003e cd E:\\HugoSite\\Hugo\\CooperZhang\u003c/code\u003e (目标文件夹)\u003c/li\u003e\n\u003cli\u003e进入目标位置后 , 输入\u003ccode\u003e hugo new content content\\posts\\要创建的md文件名称.md\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e回车 , 完成创建\u003c/li\u003e\n\u003c/ol\u003e","title":"如何通过hugo创建markdown文件"},{"content":"goMall电商项目 搭建环境 选择 goland 脚手架 IDL\ncwgo : 自动生成客服端和服务端的代码 thriftgo : protobuf : 服务注册 与 服务发现 分布式部署\n计算机科学的问题都可以通过增加一层来解决 注册中心 配置管理 数据操作 前端 ","permalink":"//localhost:1313/posts/gomall%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE/","summary":"\u003ch1 id=\"gomall电商项目\"\u003egoMall电商项目\u003c/h1\u003e\n\u003ch2 id=\"搭建环境\"\u003e搭建环境\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e选择 goland\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"脚手架\"\u003e脚手架\u003c/h2\u003e\n\u003cp\u003eIDL\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003ecwgo\u003c/strong\u003e : 自动生成客服端和服务端的代码\u003c/li\u003e\n\u003cli\u003ethriftgo :\u003c/li\u003e\n\u003cli\u003eprotobuf :\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"服务注册-与-服务发现\"\u003e服务注册 与 服务发现\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e分布式部署\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003col\u003e\n\u003cli\u003e计算机科学的问题都可以通过增加一层来解决\u003c/li\u003e\n\u003cli\u003e注册中心\u003c/li\u003e\n\u003cli\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"配置管理\"\u003e配置管理\u003c/h2\u003e\n\u003ch2 id=\"数据操作\"\u003e数据操作\u003c/h2\u003e\n\u003ch2 id=\"前端\"\u003e前端\u003c/h2\u003e","title":"GoMall电商项目"},{"content":" 正常: 买入 加粗: 卖出 名称 时间 成交额 💵 发仔 2024.1016 1535 发仔 2024.1104 1651 +116 ","permalink":"//localhost:1313/posts/economyz/","summary":"\u003cul\u003e\n\u003cli\u003e正常: 买入\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e加粗: 卖出\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: center\"\u003e名称\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e时间\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e成交额\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e💵\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e发仔\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e2024.1016\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e1535\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003cstrong\u003e发仔\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003cstrong\u003e2024.1104\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003cstrong\u003e1651\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003cstrong\u003e+116\u003c/strong\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"EconomyZ"},{"content":"字节训练营 结营要求 刷题打卡 \u0026gt; 50\n每天3题\n博客要写至少6篇\n课程 第一门课程 Go 语言上手-基础语言，也就是说现在你们听的这门课程。 主要讲述语言基础语法、入门实战 第二门课程 Go 语言上手-工程实践 主要讲述 并发编程、依赖管理、单元测试、项目实战 第三门课程 高质量编程与性能调优实战。主要讲述 编码规范、性能优化建议、性能分析工具使用、性能优化流程 第四门课程 高性能 Go 语言发行版优化与落地实践。主要讲述 自动内存管理、Go 内存管理及优化、编译器和静态分析、Go 编译器优化 并发编程 协程 通道 sync 测试 HTTP协议 超文本传输协议包含\n请求行 请求头 请求体 传输的包大部分是4k以下\n“Benchmark” “Benchmark” 是一个评估性能或效率的标准或测试。\n在计算机科学和程序开发中，它通常指以下几个方面：\n性能测试： 用于衡量程序、算法或系统在特定条件下的运行效率。常见的基准测试包括处理速度、内存使用、响应时间等。 基准工具： 一些工具和框架专门用于执行基准测试，帮助开发者比较不同实现或版本的性能表现。例如，Go 语言内置的 testing 包支持基准测试，通过 Benchmark 函数来评估代码执行的速度。 行业标准： 行业内的基准参考，用于对比不同产品或服务的性能。例如，计算机硬件的性能基准，可以帮助用户选择合适的设备。 基准测试示例（Go 语言） 在 Go 语言中，你可以使用以下方式进行基准测试：\npackage main import ( \u0026#34;testing\u0026#34; ) // 被测试的函数 func add(a, b int) int { return a + b } // 基准测试 func BenchmarkAdd(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { add(1, 2) } } 刷题笔记 打开抖音互联网发生什么 熟悉TCP/IP , 计算机网络\n协议 打开抖音发生了什么过程 连入互联网 路由 , 交换机 , 网络虚拟化 跨网段 路由不是对称的: 多路 图 路由协议 工作在ip层 但也没这么简单 路由不改IP地址 , 路由是改Mac 找到发包口 ARP协议 广播 , 免费ARP协议 ARP代理 IPV6 , ip冲突情况 解决方案 IP协议 , mac 地址不能代替ip地址 , 向下兼容 协议 ipv4 不够用 , 解决 , NAT , 网路打通后 , 视频下载\n网络传输 , 数据包 DNS请求 UDP协议 , 分片 , 丢包 , 传输效率 和质量 TCP 协议 3次握手 , timewait , HTTP / HTTP 1.1 HTTPS 加密 SSL/TLS 握手 , 对称和非对称加密 网络架构给抖音提质 网络提速\n网络提速 HTTP2.0 , 多路复用 , stream , TCP丢包怎么办 , 对头阻塞 如何解决 , QUIC / HTTP3.0 , UDP 还是TCP , kernel 还是usersapce , 0 RRT , 弱网优势 路径优化\n数据中心分布 同运营商访问 , 通过解析 分析IP 静态资源 路径优化 CDN , 静态缓存 , 边缘机房 \u0026mdash;\u0026gt; 汇聚机房 \u0026mdash;\u0026gt; 核心机房 访问 动态API 播放 评论接口 , 路径优化 DSA 网络稳定\n容灾概念 , 故障发生 - 故障感知- 自动切换 - 服务恢复 故障排除: 故障明确 - 故障止损 - 分段排查 (客户端 , 服务端 , 中间链路) 故障预防 : 监控报警 - 故障演练 - 故障降级 / 止损 网络接入的问题 域名系统\nhost管理 , 面临很多问题 域名系统 替换 host 域名购买 , 配置迁移 开放外部用户访问 , 建设外部网站 自建DNS服务器\nDNS查询过程 DNS 记录类型 权威DNS系统架构 接入HTTPS\n对称加密 和 非对称加密 SSL的 通信过程 证书链 使用 HTTPS 接入全站加速\n全站加速 = 静态加速 + 动态加速\n静态加速 CDN , 缓存 动态加速 DCDN , 原理 , 全站加速应用场景 : 用户登录 : 动态加速 , 短视频加载观看 : 静态加速 , 网页浏览 : 静态加速 + 动态加速 ","permalink":"//localhost:1313/posts/%E5%AD%97%E8%8A%82%E8%AE%AD%E7%BB%83%E8%90%A5%E8%AE%B0%E5%BD%95/","summary":"\u003ch1 id=\"字节训练营\"\u003e字节训练营\u003c/h1\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241101193517595\" loading=\"lazy\" src=\"../img/image-20241101193517595.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241101193517595\" loading=\"lazy\" src=\"./img/image-20241101193517595.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"结营要求\"\u003e结营要求\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e刷题打卡 \u0026gt; 50\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e每天3题\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e博客要写至少6篇\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"课程\"\u003e课程\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e第一门课程 Go 语言上手-基础语言，也就是说现在你们听的这门课程。 主要讲述语言基础语法、入门实战\u003c/li\u003e\n\u003cli\u003e第二门课程 Go 语言上手-工程实践 主要讲述 并发编程、依赖管理、单元测试、项目实战\u003c/li\u003e\n\u003cli\u003e第三门课程 高质量编程与性能调优实战。主要讲述 编码规范、性能优化建议、性能分析工具使用、性能优化流程\u003c/li\u003e\n\u003cli\u003e第四门课程 高性能 Go 语言发行版优化与落地实践。主要讲述 自动内存管理、Go 内存管理及优化、编译器和静态分析、Go 编译器优化\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241101230232086\" loading=\"lazy\" src=\"../img/image-20241101230232086.png\"\u003e\u003c/p\u003e","title":"字节训练营记录"},{"content":"二分 整数二分算法模板 —— 模板题 AcWing 789. 数的范围\ncpp除法默认是向下取整: 如 5 / 2 = 2 上取整 ==\u0026gt; 5 / 2 = 3 ==\u0026gt; 5+1 \u0026gt;\u0026gt; 1\n下取整 ==\u0026gt; 5 / 2 = 2\n\u0026gt;\u0026gt; 右移运算符（Bitwise Right Shift）\n用于将一个整数的二进制位向右移动指定的位数。每右移一位，相当于将数值除以 2。\nint x = 8; // 二进制 1000 int y = x \u0026gt;\u0026gt; 2; // 结果是 2，二进制 0010 模板 整数数组必须是升序排列\nL和R 都是下标\n确定 mid(坐标) , 然后套模板\n**L L L mid mid+1 r r r\t//mid 在左边 , mid = L + r \u0026raquo; 1 , 自动取左 **\n(尽量选 mid 在左边)\nL L L mid-1 mid r r r //mid 在右边 , mid = L + r + 1 \u0026raquo; 1\nbool check(int x) { /* ... */ } // 检查x是否满足某种性质 // 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用： l l l mid mid+1 r r r\t//mid 在左边 , l + r \u0026gt;\u0026gt; 1 , 自动取左 int bsearch_1(int l, int r) { while (l \u0026lt; r) { int mid = l + r \u0026gt;\u0026gt; 1; if (check(mid)) r = mid; // check()判断mid是否满足性质 else l = mid + 1; } return l; } // 向上取整 // ------------------------------------------------------------------------ // 向下取整 // 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用： l l l mid-1 mid r r r //mid 在右边 , l + r + 1 \u0026gt;\u0026gt; 1 int bsearch_2(int l, int r) { while (l \u0026lt; r) { int mid = l + r + 1 \u0026gt;\u0026gt; 1; if (check(mid)) l = mid; else r = mid - 1; } return l; } 如果数据单调, 意味着可以二分\n二分就是找两段不同性质数据的分界点\n浮点数二分算法模板 —— 模板题 AcWing 790. 数的三次方根\nbool check(double x) {/* ... */} // 检查x是否满足某种性质 double bsearch_3(double l, double r) { const double eps = 1e-6; // eps 表示精度，取决于题目对精度的要求 while (r - l \u0026gt; eps) { double mid = (l + r) / 2; if (check(mid)) r = mid; else l = mid; } return l; } 前缀和 作用 : 快速求出一个区间的和 , O(1) S[i] 为前缀和\nS[i] = a[1]+ a[2] + .... + a[i] , S[0] = 0 (默认) S[i] = S[i-1] + a[i] 求a数组中任意区间[l,r]的和 : S[r] - S[l-1] , 注意是求的是第 L 个 到 第 R 个数的和 (不是下标) s[R] = a[1] + ... + a[L-1] + a[L] + ... + a[R] s[L - 1] = a[1] + ... + a[L-1] //结论 s[R] - s[L - 1] = a[L] + ... + a[R] 差分 yxc: 差分是前缀和的逆运算 a1 a2 ... an //数组前缀和 构造 b1 b2 ... bn 使得 ai = b1 + b2 + ... + bi b1 = a1 b2 = a2 - a1 b3 = a3 - a2 ... bn = a_n - a_n-1 可以实现 O(1) 时间把某一个数组区间的每一个值加上一个值 X\nexample: // a 是原数组 , b 是差分数组 b_l + x b_r+1 - x 一开始可以把a看成 0 0 0 \u0026hellip; 0 通过插入insert操作得到a数组 void insert(int l, int r, int c) { b[l] += c; b[r + 1] -= c; } 林小鹿: 类似于数学中的求导和积分，差分可以看成前缀和的逆运算。 差分数组：\n首先给定一个原数组a：a[1], a[2], a[3],,,,,, a[n];\n然后我们构造一个数组b ： b[1] ,b[2] , b[3],,,,,, b[i];\n使得 a[i] = b[1] + b[2 ]+ b[3] +,,,,,, + b[i]\n也就是说，a数组是b数组的前缀和数组，反过来我们把b数组叫做a数组的差分数组。换句话说，每一个a[i]都是b数组中从头开始的一段区间和。\n考虑如何构造差分b数组？\n最为直接的方法\n如下：\na[0 ]= 0; b[1] = a[1] - a[0]; b[2] = a[2] - a[1]; b[3] =a [3] - a[2]; ........ b[n] = a[n] - a[n-1]; 我们只要有b数组，通过前缀和运算，就可以在O(n) 的时间内得到a数组 。\n知道了差分数组有什么用呢？ 别着急，慢慢往下看。\n话说有这么一个问题：\n给定区间[l ,r ]，让我们把a数组中的[ l, r]区间中的每一个数都加上c,即 a[l] + c , a[l+1] + c , a[l+2] + c ,,,,,, a[r] + c;\n暴力做法是for循环l到r区间，时间复杂度O(n)，如果我们需要对原数组执行m次这样的操作，时间复杂度就会变成O(n*m)。有没有更高效的做法吗? 考虑差分做法。\n始终要记得，a数组是b数组的前缀和数组，比如对b数组的b[i]的修改，会影响到a数组中从a[i]及往后的每一个数。\n首先让差分b数组中的 b[l] + c ,a数组变成 a[l] + c ,a[l+1] + c,,,,,, a[n] + c;\n然后我们打个补丁，b[r+1] - c, a数组变成 a[r+1] - c,a[r+2] - c,,,,,,,a[n] - c;\n为啥还要打个补丁？\nb[l] + c，效果使得a数组中 a[l]及以后的数都加上了c(红色部分)，但我们只要求l到r区间加上c, 因此还需要执行 b[r+1] - c,让a数组中a[r+1]及往后的区间再减去c(绿色部分)，这样对于a[r] 以后区间的数相当于没有发生改变。\n因此我们得出一维差分结论：给a数组中的[ l, r]区间中的每一个数都加上c,只需对差分数组b做 b[l] + = c, b[r+1] - = c。时间复杂度为O(1), 大大提高了效率。\n//差分 时间复杂度 o(m) #include\u0026lt;iostream\u0026gt; using namespace std; const int N = 1e5 + 10; int a[N], b[N]; int main() { int n, m; scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;n, \u0026amp;m); for (int i = 1; i \u0026lt;= n; i++) { scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i]); b[i] = a[i] - a[i - 1]; //构建差分数组 } int l, r, c; while (m--) { scanf(\u0026#34;%d%d%d\u0026#34;, \u0026amp;l, \u0026amp;r, \u0026amp;c); b[l] += c; //将序列中[l, r]之间的每个数都加上c b[r + 1] -= c; } for (int i = 1; i \u0026lt;= n; i++) { a[i] = b[i] + a[i - 1]; //前缀和运算 printf(\u0026#34;%d \u0026#34;, a[i]); } return 0; } 双指针 (双指针) O(n) 必要条件 先考虑暴力方式 确定目标数组的单调性 i从 0开始 从前往后遍历 j从 m - 1开始 从后向前遍历 #include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; const int N = 10001; int a[N], b[N]; int main() { int n, m, x; cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m \u0026gt;\u0026gt; x; for (int i = 0; i \u0026lt; n; i++) cin \u0026gt;\u0026gt; a[i]; for (int i = 0; i \u0026lt; m; i++) cin \u0026gt;\u0026gt; b[i]; // sort(a,a+n); // sort(b,b+m); //必须保证两个数组都是单调的 for (int i = 0, j = m - 1; i \u0026lt; n; i++) { while( j \u0026gt;= 0 \u0026amp;\u0026amp; a[i] + b[j] \u0026gt; x) { j--; } if(a[i] + b[j] == x) { cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; j; break; } } return 0; } #include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; const int N = 100100; int a[N], b[N]; int main() { int n; cin \u0026gt;\u0026gt; n; for (int i = 0; i \u0026lt; n; i++) { cin \u0026gt;\u0026gt; a[i]; } int ans = 0; for (int i = 0, j = 0; i \u0026lt; n; i++) { b[a[i]]++; while (b[a[i]] \u0026gt; 1) { b[a[j]]--; j++; } ans = max(ans, i - j + 1); } cout \u0026lt;\u0026lt; ans; return 0; } 归并排序 分治 模板 void merge_sort(int q[], int l, int r) { if (l \u0026gt;= r) return; int mid = l + r \u0026gt;\u0026gt; 1; merge_sort(q, l, mid); merge_sort(q, mid + 1, r); int k = 0, i = l, j = mid + 1; while (i \u0026lt;= mid \u0026amp;\u0026amp; j \u0026lt;= r) if (q[i] \u0026lt;= q[j]) tmp[k ++ ] = q[i ++ ]; else tmp[k ++ ] = q[j ++ ]; while (i \u0026lt;= mid) tmp[k ++ ] = q[i ++ ]; while (j \u0026lt;= r) tmp[k ++ ] = q[j ++ ]; for (i = l, j = 0; i \u0026lt;= r; i ++, j ++ ) q[i] = tmp[j]; } L L L r r r\n确定分界点 递归排序 left right 归并 \u0026ndash; 合二为一 多路归并 重点是 merge() 函数\n贡献法 是一种数学思想 原本是对矩阵的行进行操作, 换一种方式, 变成对矩阵的列进行操作 孤独的区间 , 只有1个 n➡️ 0 1 2 \u0026hellip; n 所有区间⬇️ 子串是连续的\n日期问题 求闰年模板 const int months[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; // 一三五七八十蜡，三十一天永不差 // 一、1、3、5、7、8、10、12 每月31天，4、6、9、11为30天。 二、2月正常为28天，如果为闰年，则多一天为29天。 int is_leap(int year) //判断闰年 { if (year % 4 == 0 \u0026amp;\u0026amp; year % 100 || year % 400 == 0) return 1; return 0; } int get_days(int y, int m) { if ( m == 2) return 28 + is_leap(y); } int months[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; bool check(int date) // 判断日期是否合法 { int year = date / 10000; int month = date % 10000 / 100; int day = date % 100; if (!day || month \u0026lt; 0 || month \u0026gt; 12) return false; if (month != 2 \u0026amp;\u0026amp; day \u0026gt; months[month]) return false; if (month == 2) { if ((year % 4 == 0 \u0026amp;\u0026amp; year % 100 != 0) || (year % 400 == 0)) // 闰年特判 { if (day \u0026gt; 29) return false; } else { if (day \u0026gt; 28) return false; } } return true; } 求区间天数 思想是计算各个日期到公元1.1.1的天数, 再将计算结果相减+1 , 得到结果\n模板\nint months[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; //\t一 三 五 七 八 十 蜡，三十一天永不差 //或 const int months[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;string\u0026gt; using namespace std; int months[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; int day(int n) { int y = n / 10000; // 年 int m = n % 10000 / 100; // 月 int d = n % 10000 % 100; // 日 // 首先更新一下计算年份的二月天数有多少 // 闰年包括普通闰年和世纪闰年 // 普通闰年年分是4倍数不是100倍数（），世纪闰年是400的倍数， // 即100的倍数不是4的倍数不是闰年，如1900 // 判断闰年 if (y % 4 == 0 \u0026amp;\u0026amp; y % 100 != 0 || y % 400 == 0) months[2] = 29; else // 不加这个会错 months[2] = 28; //统计当前年份的总天数 (今年的天数) while (m--) d += months[m]; //计算从公元1年开始开始，一直到\u0026lt;去年\u0026gt;最后一天,不是到0000年 while (y--) d += (y % 4 == 0 \u0026amp;\u0026amp; y % 100 != 0 || y % 400 == 0 ? 366 : 365); // 闰年366天，平年365天 return d; } int main() { int a, b; while (cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b) cout \u0026lt;\u0026lt; abs(day(a) - day(b)) + 1 \u0026lt;\u0026lt; endl; // 由题所示“如果两个日期是连续的我们规定他们之间的天数为两天”，因此我们加一 return 0; } 区间合并 任意多个区间的范围有交集, 快速把这几个区间合并\n贪心思想\n模板ycx\n// 将所有存在交集的区间合并 void merge(vector\u0026lt;PII\u0026gt; \u0026amp;segs) { vector\u0026lt;PII\u0026gt; res; sort(segs.begin(), segs.end()); int st = -2e9, ed = -2e9; for (auto seg : segs) if (ed \u0026lt; seg.first) { if (st != -2e9) res.push_back({st, ed}); st = seg.first, ed = seg.second; } else ed = max(ed, seg.second); if (st != -2e9) res.push_back({st, ed}); segs = res; } 按区间左端点排序\nstart_________________________end 三种情况⬇️\n​ f\u0026mdash;\u0026ndash;s 在区间内 这情况等于不用操作 ​ f\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-s 右端点超出 ​ f\u0026mdash;\u0026mdash;\u0026mdash;-s 全部超出 void merge(vector\u0026lt;Pii\u0026gt; \u0026amp;segment) { vector\u0026lt;Pii\u0026gt; ans; sort(segment.begin(), segment.end()); // 默认排序左端点 int start = -2e9, end = -2e9; for (auto seg : segment) { if (end \u0026lt; seg.first) { if (start != -2e9) // 没有交集 ans.push_back({start, end}); start = seg.first, end = seg.second; } else { end = max(end, seg.second); //合并情况不添加ans } } if (start != -2e9) // 防止vector是空集 , 空集就是也是一个区间 ans.push_back({start, end}); segment = ans; } 递归 ","permalink":"//localhost:1313/posts/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%A4%87%E6%88%98/","summary":"\u003ch1 id=\"二分\"\u003e二分\u003c/h1\u003e\n\u003ch2 id=\"整数二分算法模板\"\u003e\u003cem\u003e整数\u003c/em\u003e二分算法模板\u003c/h2\u003e\n\u003cp\u003e—— 模板题 AcWing 789. 数的范围\u003c/p\u003e\n\u003cp\u003ecpp除法默认是向下取整: 如 \u003ccode\u003e5 / 2 = 2 \u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e上取整 ==\u0026gt; \u003ccode\u003e5 / 2 = 3\u003c/code\u003e  ==\u0026gt;  \u003ccode\u003e5+1 \u0026gt;\u0026gt; 1\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e下取整 ==\u0026gt; \u003ccode\u003e5 / 2 = 2\u003c/code\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003e\u0026gt;\u0026gt; \u003c/code\u003e \u003cstrong\u003e右移运算符（Bitwise Right Shift）\u003c/strong\u003e\u003c/p\u003e","title":"蓝桥杯备战"},{"content":"参考链接: CSDN Qt Creator打造VScode one dark pro主题配色\n代码部分\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;style-scheme version=\u0026#34;1.0\u0026#34; name=\u0026#34;One Dark\u0026#34;\u0026gt; \u0026lt;style name=\u0026#34;Text\u0026#34; foreground=\u0026#34;#abb2bf\u0026#34; background=\u0026#34;#282c34\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Link\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Selection\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LineNumber\u0026#34; foreground=\u0026#34;#4b5363\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;SearchResult\u0026#34; background=\u0026#34;#324365\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;SearchScope\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Parentheses\u0026#34; underlineColor=\u0026#34;#61afef\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;ParenthesesMismatch\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;AutoComplete\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;CurrentLine\u0026#34; background=\u0026#34;#3a3f4b\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;CurrentLineNumber\u0026#34; foreground=\u0026#34;#777c87\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Occurrences\u0026#34; background=\u0026#34;#324365\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Occurrences.Unused\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;DashUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Occurrences.Rename\u0026#34; background=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Number\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;String\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Type\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Local\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Global\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Field\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Static\u0026#34; foreground=\u0026#34;#61afef\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;VirtualMethod\u0026#34; foreground=\u0026#34;#61afef\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Function\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Keyword\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;PrimitiveType\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Operator\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Overloaded Operator\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Punctuation\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Preprocessor\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Label\u0026#34; foreground=\u0026#34;#e06c75\u0026#34; bold=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Comment\u0026#34; foreground=\u0026#34;#5c6370\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Doxygen.Comment\u0026#34; foreground=\u0026#34;#5c6370\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Doxygen.Tag\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;VisualWhitespace\u0026#34; foreground=\u0026#34;#3c4049\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlLocalId\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlExternalId\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlTypeId\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlRootObjectProperty\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlScopeObjectProperty\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlExternalObjectProperty\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;JsScopeVar\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;JsImportVar\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;JsGlobalVar\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlStateName\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Binding\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DisabledCode\u0026#34; foreground=\u0026#34;#5c6370\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;AddedLine\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;RemovedLine\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffFile\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffLocation\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffFileLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#e5c07b\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffContextLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#56b6c2\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffSourceLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#be5046\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffSourceChar\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffDestLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#789353\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffDestChar\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#98c379\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogChangeLine\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogAuthorName\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogCommitDate\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogCommitHash\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogCommitSubject\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogDecoration\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Warning\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;WarningContext\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;DotLine\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Error\u0026#34; underlineColor=\u0026#34;#e06c75\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;ErrorContext\u0026#34; underlineColor=\u0026#34;#e06c75\u0026#34; underlineStyle=\u0026#34;DotLine\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Declaration\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;FunctionDefinition\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;OutputArgument\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LastStyleSentinel\u0026#34;/\u0026gt; \u0026lt;/style-scheme\u0026gt; 主题设置\n[General] ThemeName=One Dark PreferredStyles=Fusion DefaultTextEditorColorScheme=onedark.xml [Palette] shadowBackground=ff21252b text=ffabb2bf textDisabled=99abb2bf textHighlighted=ffd7dae0 toolBarItem=ffabb2bf toolBarItemDisabled=99abb2bf fancyBarsNormalTextColor=ffabb2bf fancyBarsBoldTextColor=ffabb2bf hoverBackground=ff31363f selectedBackground=ff3a3f4b selectedBackgroundText=ffd7dae0 normalBackground=ff282c34 alternateBackground=ff31363f error=ffe06c75 warning=ffe5c07b success=ff98c379 message=ff61afef splitter=ff181a1f textColorLink=61afef textColorLinkVisited=c678dd backgroundColorDisabled=ff21252b [Colors] ;DS controls theme START DScontrolBackground=normalBackground DScontrolOutline=splitter DStextColor=text DSdisabledTextColor=textDisabled DSpanelBackground=ff454444 DShoverHighlight=hoverBackground DScolumnBackground=ff363636 DSfocusEdit=normalBackground DSfocusDrag=ff565656 DScontrolBackgroundPressed=selectedBackground DScontrolBackgroundChecked=selectedBackground DSinteraction=selectedBackground DSsliderActiveTrack=ff7a7a7a DSsliderInactiveTrack=ff4d4d4d DSsliderHandle=ff4b5362 DSsliderActiveTrackHover=ff7f7f7f DSsliderInactiveTrackHover=ff505050 DSsliderHandleHover=ff7a7a7a DSsliderActiveTrackFocus=ffaaaaaa DSsliderInactiveTrackFocus=ff7a7a7a DSsliderHandleFocus=ff1d545c DSerrorColor=error DScontrolBackgroundDisabled=backgroundColorDisabled DScontrolOutlineDisabled=ff4d4d4d DStextColorDisabled=textDisabled DStextSelectionColor=selectedBackground DStextSelectedTextColor=selectedBackgroundText DSscrollBarTrack=ff4d4d4d DSscrollBarHandle=ff4b5362 DScontrolBackgroundInteraction=ff4d4d4d DStranslationIndicatorBorder=splitter DSsectionHeadBackground=alternateBackground DSchangedStateText=message DS3DAxisXColor=error DS3DAxisYColor=success DS3DAxisZColor=message ;DS controls theme END BackgroundColorAlternate=alternateBackground BackgroundColorDark=shadowBackground BackgroundColorHover=hoverBackground BackgroundColorNormal=normalBackground BackgroundColorDisabled=backgroundColorDisabled BackgroundColorSelected=selectedBackground BadgeLabelBackgroundColorChecked=text BadgeLabelBackgroundColorUnchecked=text BadgeLabelTextColorChecked=normalBackground BadgeLabelTextColorUnchecked=normalBackground CanceledSearchTextColor=error ComboBoxArrowColor=toolBarItem ComboBoxArrowColorDisabled=toolBarItemDisabled ComboBoxTextColor=fancyBarsNormalTextColor DetailsButtonBackgroundColorHover=hoverBackground DetailsWidgetBackgroundColor=shadowBackground DockWidgetResizeHandleColor=splitter DoubleTabWidget1stSeparatorColor=splitter DoubleTabWidget1stTabActiveTextColor=text DoubleTabWidget1stTabBackgroundColor=normalBackground DoubleTabWidget1stTabInactiveTextColor=text DoubleTabWidget2ndSeparatorColor=toolBarItemDisabled DoubleTabWidget2ndTabActiveTextColor=text DoubleTabWidget2ndTabBackgroundColor=selectedBackground DoubleTabWidget2ndTabInactiveTextColor=text EditorPlaceholderColor=shadowBackground FancyToolBarSeparatorColor=toolBarItemDisabled FancyTabBarBackgroundColor=shadowBackground FancyTabBarSelectedBackgroundColor=selectedBackground FancyTabWidgetDisabledSelectedTextColor=toolBarItemDisabled FancyTabWidgetDisabledUnselectedTextColor=toolBarItemDisabled FancyTabWidgetEnabledSelectedTextColor=fancyBarsBoldTextColor FancyTabWidgetEnabledUnselectedTextColor=fancyBarsBoldTextColor FancyToolButtonHoverColor=hoverBackground FancyToolButtonSelectedColor=selectedBackground FutureProgressBackgroundColor=shadowBackground IconsBaseColor=toolBarItem IconsDisabledColor=toolBarItemDisabled IconsInfoColor=message IconsInfoToolBarColor=message IconsWarningColor=warning IconsWarningToolBarColor=warning IconsErrorColor=error IconsErrorToolBarColor=error IconsRunColor=success IconsRunToolBarColor=success IconsStopColor=error IconsStopToolBarColor=error IconsInterruptColor=message IconsInterruptToolBarColor=message IconsDebugColor=toolBarItem IconsNavigationArrowsColor=warning IconsBuildHammerHandleColor=b06112 IconsBuildHammerHeadColor=toolBarItem IconsModeWelcomeActiveColor=success IconsModeEditActiveColor=message IconsModeDesignActiveColor=warning IconsModeDebugActiveColor=message IconsModeProjectActiveColor=success IconsModeAnalyzeActiveColor=message IconsModeHelpActiveColor=warning IconsCodeModelKeywordColor=ff777777 IconsCodeModelClassColor=ffc0b550 IconsCodeModelStructColor=ff53b053 IconsCodeModelFunctionColor=ffd34373 IconsCodeModelVariableColor=ff2bbbcc IconsCodeModelEnumColor=ffc0b550 IconsCodeModelMacroColor=ff476ba0 IconsCodeModelAttributeColor=ff316511 IconsCodeModelUniformColor=ff994899 IconsCodeModelVaryingColor=ffa08833 IconsCodeModelOverlayBackgroundColor=normalBackground IconsCodeModelOverlayForegroundColor=text InfoBarBackground=shadowBackground InfoBarText=text MenuBarEmptyAreaBackgroundColor=shadowBackground MenuBarItemBackgroundColor=shadowBackground MenuBarItemTextColorDisabled=textDisabled MenuBarItemTextColorNormal=text MenuItemTextColorDisabled=textDisabled MenuItemTextColorNormal=text MiniProjectTargetSelectorBackgroundColor=shadowBackground MiniProjectTargetSelectorBorderColor=shadowBackground MiniProjectTargetSelectorSummaryBackgroundColor=normalBackground MiniProjectTargetSelectorTextColor=fancyBarsNormalTextColor PanelStatusBarBackgroundColor=shadowBackground PanelsWidgetSeparatorLineColor=splitter PanelTextColorDark=text PanelTextColorMid=text PanelTextColorLight=textHighlighted ProgressBarColorError=error ProgressBarColorFinished=success ProgressBarColorNormal=message ProgressBarTitleColor=text ProgressBarBackgroundColor=alternateBackground SplitterColor=splitter TextColorDisabled=textDisabled TextColorError=error TextColorHighlight=textHighlighted TextColorHighlightBackground=hoverBackground TextColorLink=textColorLink TextColorLinkVisited=textColorLinkVisited TextColorNormal=text ToggleButtonBackgroundColor=shadowBackground ToolBarBackgroundColor=shadowBackground TreeViewArrowColorNormal=hoverBackground TreeViewArrowColorSelected=text OutputPanes_DebugTextColor=text OutputPanes_ErrorMessageTextColor=error OutputPanes_MessageOutput=message OutputPanes_NormalMessageTextColor=text OutputPanes_StdErrTextColor=error OutputPanes_StdOutTextColor=text OutputPanes_WarningMessageTextColor=warning OutputPanes_TestPassTextColor=success OutputPanes_TestFailTextColor=error OutputPanes_TestXFailTextColor=error OutputPanes_TestXPassTextColor=message OutputPanes_TestSkipTextColor=message OutputPanes_TestWarnTextColor=warning OutputPanes_TestFatalTextColor=error OutputPanes_TestDebugTextColor=text OutputPaneButtonFlashColor=error OutputPaneToggleButtonTextColorChecked=fancyBarsNormalTextColor OutputPaneToggleButtonTextColorUnchecked=fancyBarsNormalTextColor Debugger_LogWindow_LogInput=ff56b6c2 Debugger_LogWindow_LogStatus=message Debugger_LogWindow_LogTime=error Debugger_WatchItem_ValueNormal=text Debugger_WatchItem_ValueInvalid=textDisabled Debugger_WatchItem_ValueChanged=error Debugger_Breakpoint_TextMarkColor=message Welcome_TextColor=text Welcome_ForegroundPrimaryColor=text Welcome_ForegroundSecondaryColor=text Welcome_BackgroundColor=normalBackground Welcome_ButtonBackgroundColor=normalBackground Welcome_DividerColor=splitter Welcome_HoverColor=hoverBackground Welcome_LinkColor=textColorLink Welcome_DisabledLinkColor=textDisabled Timeline_TextColor=text Timeline_BackgroundColor1=normalBackground Timeline_BackgroundColor2=shadowBackground Timeline_DividerColor=splitter Timeline_HighlightColor=selectedBackground Timeline_PanelBackgroundColor=alternateBackground Timeline_PanelHeaderColor=normalBackground Timeline_HandleColor=ff4b5362 Timeline_RangeColor=selectedBackground VcsBase_FileStatusUnknown_TextColor=text VcsBase_FileAdded_TextColor=success VcsBase_FileModified_TextColor=warning VcsBase_FileDeleted_TextColor=error VcsBase_FileRenamed_TextColor=message VcsBase_FileUnmerged_TextColor=error Bookmarks_TextMarkColor=message TextEditor_SearchResult_ScrollBarColor=success TextEditor_CurrentLine_ScrollBarColor=message ProjectExplorer_TaskError_TextMarkColor=error ProjectExplorer_TaskWarn_TextMarkColor=warning CodeModel_Error_TextMarkColor=error CodeModel_Warning_TextMarkColor=warning QmlDesigner_BackgroundColor=normalBackground QmlDesigner_HighlightColor=selectedBackground QmlDesigner_FormEditorSelectionColor=message QmlDesigner_FormEditorForegroundColor=normalBackground QmlDesigner_BackgroundColorDarkAlternate=shadowBackground QmlDesigner_BackgroundColorDarker=splitter QmlDesigner_BorderColor=splitter QmlDesigner_ButtonColor=normalBackground QmlDesigner_TabDark=shadowBackground QmlDesigner_TabLight=text QmlDesigner_FormeditorBackgroundColor=normalBackground QmlDesigner_AlternateBackgroundColor=alternateBackground QmlDesigner_ScrollBarHandleColor=ff4b5362 PaletteWindow=shadowBackground PaletteWindowText=text PaletteBase=normalBackground PaletteAlternateBase=alternateBackground PaletteButton=shadowBackground PaletteBrightText=error PaletteText=text PaletteButtonText=text PaletteButtonTextDisabled=textDisabled PaletteToolTipBase=hoverBackground PaletteHighlight=selectedBackground PaletteDark=shadowBackground PaletteHighlightedText=selectedBackgroundText PaletteToolTipText=text PaletteLink=textColorLink PaletteLinkVisited=textColorLinkVisited PaletteWindowDisabled=backgroundColorDisabled PaletteWindowTextDisabled=textDisabled PaletteBaseDisabled=backgroundColorDisabled PaletteTextDisabled=textDisabled [Flags] ComboBoxDrawTextShadow=false DerivePaletteFromTheme=true DrawIndicatorBranch=true DrawSearchResultWidgetFrame=false DrawTargetSelectorBottom=false DrawToolBarHighlights=false DrawToolBarBorders=false ApplyThemePaletteGlobally=true FlatToolBars=true FlatSideBarIcons=true FlatProjectsMode=true FlatMenuBar=true ToolBarIconShadow=true WindowColorAsBase=true DarkUserInterface=true [Gradients] DetailsWidgetHeaderGradient\\1\\color=normalBackground DetailsWidgetHeaderGradient\\1\\pos=1 DetailsWidgetHeaderGradient\\size=1 ","permalink":"//localhost:1313/posts/qt%E4%B8%BB%E9%A2%98onedark%E8%AE%BE%E7%BD%AE/","summary":"\u003cp\u003e参考链接:  CSDN  \u003ca href=\"https://blog.csdn.net/qq_41980754/article/details/119861293\"\u003eQt Creator打造VScode one dark pro主题配色\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e代码部分\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\n\u0026lt;style-scheme version=\u0026#34;1.0\u0026#34; name=\u0026#34;One Dark\u0026#34;\u0026gt;\n  \u0026lt;style name=\u0026#34;Text\u0026#34; foreground=\u0026#34;#abb2bf\u0026#34; background=\u0026#34;#282c34\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Link\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Selection\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LineNumber\u0026#34; foreground=\u0026#34;#4b5363\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;SearchResult\u0026#34; background=\u0026#34;#324365\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;SearchScope\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Parentheses\u0026#34; underlineColor=\u0026#34;#61afef\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;ParenthesesMismatch\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;AutoComplete\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;CurrentLine\u0026#34; background=\u0026#34;#3a3f4b\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;CurrentLineNumber\u0026#34; foreground=\u0026#34;#777c87\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Occurrences\u0026#34; background=\u0026#34;#324365\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Occurrences.Unused\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;DashUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Occurrences.Rename\u0026#34; background=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Number\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;String\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Type\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Local\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Global\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Field\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Static\u0026#34; foreground=\u0026#34;#61afef\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;VirtualMethod\u0026#34; foreground=\u0026#34;#61afef\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Function\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Keyword\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;PrimitiveType\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Operator\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Overloaded Operator\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Punctuation\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Preprocessor\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Label\u0026#34; foreground=\u0026#34;#e06c75\u0026#34; bold=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Comment\u0026#34; foreground=\u0026#34;#5c6370\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Doxygen.Comment\u0026#34; foreground=\u0026#34;#5c6370\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Doxygen.Tag\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;VisualWhitespace\u0026#34; foreground=\u0026#34;#3c4049\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlLocalId\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlExternalId\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlTypeId\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlRootObjectProperty\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlScopeObjectProperty\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlExternalObjectProperty\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;JsScopeVar\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;JsImportVar\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;JsGlobalVar\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlStateName\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Binding\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DisabledCode\u0026#34; foreground=\u0026#34;#5c6370\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;AddedLine\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;RemovedLine\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffFile\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffLocation\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffFileLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#e5c07b\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffContextLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#56b6c2\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffSourceLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#be5046\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffSourceChar\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffDestLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#789353\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffDestChar\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#98c379\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogChangeLine\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogAuthorName\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogCommitDate\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogCommitHash\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogCommitSubject\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogDecoration\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Warning\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;WarningContext\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;DotLine\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Error\u0026#34; underlineColor=\u0026#34;#e06c75\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;ErrorContext\u0026#34; underlineColor=\u0026#34;#e06c75\u0026#34; underlineStyle=\u0026#34;DotLine\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Declaration\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;FunctionDefinition\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;OutputArgument\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LastStyleSentinel\u0026#34;/\u0026gt;\n\u0026lt;/style-scheme\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e主题设置\u003c/p\u003e","title":"Qt主题oneDark设置"},{"content":"在 Go 语言中，cnt := [2]int{} cnt 是一个变量，使用短变量声明 (:=) 定义。 [2]int 表示这是一个长度为 2 的 数组，数组的元素类型是 int。 {} 表示这个数组被初始化为零值，也就是所有的元素都被初始化为整型的零值 0。 示例代码 package main import \u0026#34;fmt\u0026#34; func main() { cnt := [2]int{} fmt.Println(cnt) // 输出: [0 0] } 细节 数组是固定长度的，[2]int 表示它的长度为 2，如果需要动态长度的集合，可以使用切片 ([]int)。\n如果你想明确初始化数组的值，可以写成这样：\ncnt := [2]int{1, 2} fmt.Println(cnt) // 输出: [1 2] 如果只部分初始化，未赋值的部分会使用零值：\ncnt := [2]int{1} fmt.Println(cnt) // 输出: [1 0] range循环时需要注意点 错误的代码：\nbanSet := make(map[string]struct{}) for word := range bannedWords { banSet[word] = struct{}{} } 是不正确的，因为 range 关键字在 Go 语言中用于遍历集合（如数组、切片、映射、字符串等）时，会同时返回索引和值。\n在你的写法中，for word := range bannedWords 只返回了 bannedWords 的索引（即数组或切片的索引），而不是你实际想要的单词。\n正确的写法应该是：\nbanSet := make(map[string]struct{}) for _, word := range bannedWords { banSet[word] = struct{}{} } 解释： for _, word := range bannedWords： range bannedWords 会返回两个值：第一个是索引，第二个是 bannedWords 中的每个元素（即单词）。 你用 _ 来忽略索引，因为你只关心单词 word。 为什么不能直接使用 for word := range bannedWords？ range bannedWords 实际上返回的是索引和值，for word := range bannedWords 只取了第一个值，也就是索引，而不是你期望的单词。 你需要第二个值（单词）来填充 banSet，因此你必须使用 for _, word := range bannedWords。 总结： 你需要在遍历 bannedWords 时获取每个单词的值，因此必须用 for _, word := range bannedWords。\n","permalink":"//localhost:1313/posts/go%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/","summary":"\u003ch1 id=\"在-go-语言中cnt--2int\"\u003e在 Go 语言中，\u003ccode\u003ecnt := [2]int{}\u003c/code\u003e\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecnt\u003c/code\u003e 是一个变量，使用短变量声明 (\u003ccode\u003e:=\u003c/code\u003e) 定义。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e[2]int\u003c/code\u003e 表示这是一个长度为 \u003ccode\u003e2\u003c/code\u003e 的 \u003cstrong\u003e数组\u003c/strong\u003e，数组的元素类型是 \u003ccode\u003eint\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e{}\u003c/code\u003e 表示这个数组被初始化为零值，也就是所有的元素都被初始化为整型的零值 \u003ccode\u003e0\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"示例代码\"\u003e示例代码\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003ecnt\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecnt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 输出: [0 0]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"细节\"\u003e细节\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e数组是固定长度的，\u003ccode\u003e[2]int\u003c/code\u003e 表示它的长度为 \u003ccode\u003e2\u003c/code\u003e，如果需要动态长度的集合，可以使用切片 (\u003ccode\u003e[]int\u003c/code\u003e)。\u003c/p\u003e","title":"Go的使用记录"},{"content":"Interstellar 星际穿越 My favorite movie, without a doubt.\n我最爱的电影。\n","permalink":"//localhost:1313/posts/interstellar/","summary":"\u003ch1 id=\"interstellar-星际穿越\"\u003eInterstellar 星际穿越\u003c/h1\u003e\n\u003cp\u003eMy favorite movie, \u003cstrong\u003ewithout a doubt\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e我最爱的电影。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20241009_233455.207.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20241009_233455.207.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20240917_220015.066.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20240917_220015.066.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20241019_170922.638.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20241019_170922.638.png\"\u003e\u003c/p\u003e","title":"Interstellar"},{"content":" 自我介绍 python有过深入了解吗？ 面向过程和面向对象哪一块用的比较多？那你用面向对象做了哪些工作 说一下C++的编译过程，编译过程中宏定义和const的区别是什么？在大型工程中用const好一些还是宏定义好一些？ 内联函数有了解过吗？讲一下。 虚函数 内联函数和虚函数谁的执行效率更快？为什么？那静态函数呢 静态函数和普通函数运行效率有什么差距吗？ 进程和线程？进程内存分布讲一下 堆和栈的区别 堆里面申请内存有哪些方式？new和malloc的区别 在构造函数里面能调用虚函数吗？为什么？如果子类在构造函数中调用了父类的虚函数会发生什么？ 在析构函数里面能不能抛出异常？如果抛出会发生什么 C++内存泄漏有哪些？一个类既不继承也不是子类，内部也没有虚函数，那他的析构函数需要声明为虚函数吗 C++发生内存泄漏有什么好的办法来解决这个问题？ 智能指针的实现原理是什么？循环引用如何解决 TCP和UDP的区别？ 平时玩游戏吗？LOL。你觉得LOL的战斗逻辑是如何发送到客户端上的？TCP还是UDP 平时有了解过帧同步和状态同步吗？ 设计模式有了解过吗？单例模式主要用于什么情况 比较大型的MVCC了解过吗 如果让你来设计一个LOL商城系统，有一些商城的数据，你会如何用代码来建这个商城？ 有1W个数字，找出最大的10个数字 O(N)的排序有哪些？讲一下基数排序和桶排序 20G的字符串，只有4G的内存，找到出现最多的前10个的字符串？ GPU的渲染(管线)了解过吗？图形学有学过吗？ 你为什么会选择来做游戏？更倾向于做客户端还是服务器的？ dota了解吗 给我简单介绍了一下帧同步和状态同步，然后有一个moba的游戏，使用帧同步还是状态同步？ 玩游戏时掉帧后恢复是使用的帧同步还是状态同步？ 提问环节：比较关注实习生的哪些技能和知识？核心的还是学习和反应能力，反应快的，有面向对象的大工程的经验。 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0421%E7%BD%91%E6%98%93%E4%BA%92%E5%A8%B1/","summary":"\u003col\u003e\n\u003cli\u003e自我介绍\u003c/li\u003e\n\u003cli\u003epython有过深入了解吗？\u003c/li\u003e\n\u003cli\u003e面向过程和面向对象哪一块用的比较多？那你用面向对象做了哪些工作\u003c/li\u003e\n\u003cli\u003e说一下C++的编译过程，编译过程中宏定义和const的区别是什么？在大型工程中用const好一些还是宏定义好一些？\u003c/li\u003e\n\u003cli\u003e内联函数有了解过吗？讲一下。\u003c/li\u003e\n\u003cli\u003e虚函数\u003c/li\u003e\n\u003cli\u003e内联函数和虚函数谁的执行效率更快？为什么？那静态函数呢\u003c/li\u003e\n\u003cli\u003e静态函数和普通函数运行效率有什么差距吗？\u003c/li\u003e\n\u003cli\u003e进程和线程？进程内存分布讲一下\u003c/li\u003e\n\u003cli\u003e堆和栈的区别\u003c/li\u003e\n\u003cli\u003e堆里面申请内存有哪些方式？new和malloc的区别\u003c/li\u003e\n\u003cli\u003e在构造函数里面能调用虚函数吗？为什么？如果子类在构造函数中调用了父类的虚函数会发生什么？\u003c/li\u003e\n\u003cli\u003e在析构函数里面能不能抛出异常？如果抛出会发生什么\u003c/li\u003e\n\u003cli\u003eC++内存泄漏有哪些？一个类既不继承也不是子类，内部也没有虚函数，那他的析构函数需要声明为虚函数吗\u003c/li\u003e\n\u003cli\u003eC++发生内存泄漏有什么好的办法来解决这个问题？\u003c/li\u003e\n\u003cli\u003e智能指针的实现原理是什么？循环引用如何解决\u003c/li\u003e\n\u003cli\u003eTCP和UDP的区别？\u003c/li\u003e\n\u003cli\u003e平时玩游戏吗？LOL。你觉得LOL的战斗逻辑是如何发送到客户端上的？TCP还是UDP\u003c/li\u003e\n\u003cli\u003e平时有了解过帧同步和状态同步吗？\u003c/li\u003e\n\u003cli\u003e设计模式有了解过吗？单例模式主要用于什么情况\u003c/li\u003e\n\u003cli\u003e比较大型的MVCC了解过吗\u003c/li\u003e\n\u003cli\u003e如果让你来设计一个LOL商城系统，有一些商城的数据，你会如何用代码来建这个商城？\u003c/li\u003e\n\u003cli\u003e有1W个数字，找出最大的10个数字\u003c/li\u003e\n\u003cli\u003eO(N)的排序有哪些？讲一下基数排序和桶排序\u003c/li\u003e\n\u003cli\u003e20G的字符串，只有4G的内存，找到出现最多的前10个的字符串？\u003c/li\u003e\n\u003cli\u003eGPU的渲染(管线)了解过吗？图形学有学过吗？\u003c/li\u003e\n\u003cli\u003e你为什么会选择来做游戏？更倾向于做客户端还是服务器的？\u003c/li\u003e\n\u003cli\u003edota了解吗\u003c/li\u003e\n\u003cli\u003e给我简单介绍了一下帧同步和状态同步，然后有一个moba的游戏，使用帧同步还是状态同步？\u003c/li\u003e\n\u003cli\u003e玩游戏时掉帧后恢复是使用的帧同步还是状态同步？\u003c/li\u003e\n\u003cli\u003e提问环节：比较关注实习生的哪些技能和知识？核心的还是学习和反应能力，反应快的，有面向对象的大工程的经验。\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0421网易互娱"},{"content":"2020.4.18\n一面 50min 在C++里面我们什么时候会把析构函数写为虚函数呢 C++中引用和指针有什么样的区别 右值引用，移动语义和完美转发在C++11中起到的作用 简单介绍一下RAII这个机制 简单介绍一下http请求和响应的结构 状态码分为几个类别 301和302这两个状态码有什么样的区别呢 断点续传的功能206 服务器什么时候返回304这个状态码，需要带上一些什么样的特征呢 能简单的介绍一下chunk transfer是一种什么样的传输方式呢 简单介绍一下linux下常用的IO多路复用模型 用epoll实现一个server时浏览器主动关闭了一个连接那么epoll收到的是什么事件呢 简单介绍一下惊群的现象是一个什么样的现象，有什么的办法解决这个现象呢 linux下单进程最大连接数受到哪些因素的限制呢 time_wait起到的作用，有什么办法降低这种状态的数量 编程题：编辑距离 二面 60min 讲一下进程和线程的区别 分页和分段的区别是什么 死锁和如何避免死锁 介绍一下TCP协议和UDP协议的区别 客户端发起连接以后，突然断电了，客户端断开了连接，会产生什么影响 TCP半连接状态解释一下 https密钥交互过程 close_wait的状态 499状态码 myisam和innoDB的区别 B+的调整过程 联合索引和最左原则 我们有哪些分表原则，在什么情况下使用这些分表原则 深浅拷贝解释一下，深浅拷贝的效率上有什么区别呢 栈溢出的原因 讲一下堆和栈的区别 编程题：判环和leetcode原题简化路径 三面 30min 输入网址后发生了什么 我经常会用一些CDN进行静态和动态的加速这个了解吗 DNS解析的时候DNS污染是怎么回事 mysql在分表时是怎么做的 mysql出现慢查询都有哪些原因 什么样的sql会产生IO瓶颈，什么样的sql会产生CPU瓶颈 TCP改成两次握手会产生什么现象，会有问题吗 http和https的区别是什么 编程题：矩阵中最长递增路径 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0418%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/","summary":"\u003cp\u003e2020.4.18\u003c/p\u003e\n\u003ch2 id=\"一面-50min\"\u003e一面 50min\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e在C++里面我们什么时候会把析构函数写为虚函数呢\u003c/li\u003e\n\u003cli\u003eC++中引用和指针有什么样的区别\u003c/li\u003e\n\u003cli\u003e右值引用，移动语义和完美转发在C++11中起到的作用\u003c/li\u003e\n\u003cli\u003e简单介绍一下RAII这个机制\u003c/li\u003e\n\u003cli\u003e简单介绍一下http请求和响应的结构\u003c/li\u003e\n\u003cli\u003e状态码分为几个类别\u003c/li\u003e\n\u003cli\u003e301和302这两个状态码有什么样的区别呢\u003c/li\u003e\n\u003cli\u003e断点续传的功能206\u003c/li\u003e\n\u003cli\u003e服务器什么时候返回304这个状态码，需要带上一些什么样的特征呢\u003c/li\u003e\n\u003cli\u003e能简单的介绍一下chunk transfer是一种什么样的传输方式呢\u003c/li\u003e\n\u003cli\u003e简单介绍一下linux下常用的IO多路复用模型\u003c/li\u003e\n\u003cli\u003e用epoll实现一个server时浏览器主动关闭了一个连接那么epoll收到的是什么事件呢\u003c/li\u003e\n\u003cli\u003e简单介绍一下惊群的现象是一个什么样的现象，有什么的办法解决这个现象呢\u003c/li\u003e\n\u003cli\u003elinux下单进程最大连接数受到哪些因素的限制呢\u003c/li\u003e\n\u003cli\u003etime_wait起到的作用，有什么办法降低这种状态的数量\u003c/li\u003e\n\u003cli\u003e编程题：编辑距离\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"二面-60min\"\u003e二面 60min\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e讲一下进程和线程的区别\u003c/li\u003e\n\u003cli\u003e分页和分段的区别是什么\u003c/li\u003e\n\u003cli\u003e死锁和如何避免死锁\u003c/li\u003e\n\u003cli\u003e介绍一下TCP协议和UDP协议的区别\u003c/li\u003e\n\u003cli\u003e客户端发起连接以后，突然断电了，客户端断开了连接，会产生什么影响\u003c/li\u003e\n\u003cli\u003eTCP半连接状态解释一下\u003c/li\u003e\n\u003cli\u003ehttps密钥交互过程\u003c/li\u003e\n\u003cli\u003eclose_wait的状态\u003c/li\u003e\n\u003cli\u003e499状态码\u003c/li\u003e\n\u003cli\u003emyisam和innoDB的区别\u003c/li\u003e\n\u003cli\u003eB+的调整过程\u003c/li\u003e\n\u003cli\u003e联合索引和最左原则\u003c/li\u003e\n\u003cli\u003e我们有哪些分表原则，在什么情况下使用这些分表原则\u003c/li\u003e\n\u003cli\u003e深浅拷贝解释一下，深浅拷贝的效率上有什么区别呢\u003c/li\u003e\n\u003cli\u003e栈溢出的原因\u003c/li\u003e\n\u003cli\u003e讲一下堆和栈的区别\u003c/li\u003e\n\u003cli\u003e编程题：判环和leetcode原题简化路径\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"三面-30min\"\u003e三面 30min\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e输入网址后发生了什么\u003c/li\u003e\n\u003cli\u003e我经常会用一些CDN进行静态和动态的加速这个了解吗\u003c/li\u003e\n\u003cli\u003eDNS解析的时候DNS污染是怎么回事\u003c/li\u003e\n\u003cli\u003emysql在分表时是怎么做的\u003c/li\u003e\n\u003cli\u003emysql出现慢查询都有哪些原因\u003c/li\u003e\n\u003cli\u003e什么样的sql会产生IO瓶颈，什么样的sql会产生CPU瓶颈\u003c/li\u003e\n\u003cli\u003eTCP改成两次握手会产生什么现象，会有问题吗\u003c/li\u003e\n\u003cli\u003ehttp和https的区别是什么\u003c/li\u003e\n\u003cli\u003e编程题：矩阵中最长递增路径\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0418字节跳动"},{"content":"腾讯深圳4月8号 在你看来epoll是个什么样的东西，边沿触发和水平触发的模式 epoll的通知机制 线程和进程的区别 多线程和多进程的选择上以什么作为考量 堆的数据结构（可能应该写一个类，然后封装一些函数） C++内存模型 static会被放在导出符号表里吗 网络层和传输层最大的区别是什么 TCP头部有哪些 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0408%E8%85%BE%E8%AE%AF%E6%B7%B1%E5%9C%B3/","summary":"\u003ch2 id=\"腾讯深圳4月8号\"\u003e腾讯深圳4月8号\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e在你看来epoll是个什么样的东西，边沿触发和水平触发的模式\u003c/li\u003e\n\u003cli\u003eepoll的通知机制\u003c/li\u003e\n\u003cli\u003e线程和进程的区别\u003c/li\u003e\n\u003cli\u003e多线程和多进程的选择上以什么作为考量\u003c/li\u003e\n\u003cli\u003e堆的数据结构（可能应该写一个类，然后封装一些函数）\u003c/li\u003e\n\u003cli\u003eC++内存模型\u003c/li\u003e\n\u003cli\u003estatic会被放在导出符号表里吗\u003c/li\u003e\n\u003cli\u003e网络层和传输层最大的区别是什么\u003c/li\u003e\n\u003cli\u003eTCP头部有哪些\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0408腾讯深圳"},{"content":"腾讯成都 自我介绍 详细讲一下你的项目 并发量和数据传输效率 TCP拥塞机制 进程有几种状态 事务要满足几个特性 B+树特征是什么样的 B+树查询过程 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0402%E8%85%BE%E8%AE%AF%E6%88%90%E9%83%BD/","summary":"\u003ch2 id=\"腾讯成都\"\u003e腾讯成都\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e自我介绍\u003c/li\u003e\n\u003cli\u003e详细讲一下你的项目\u003c/li\u003e\n\u003cli\u003e并发量和数据传输效率\u003c/li\u003e\n\u003cli\u003eTCP拥塞机制\u003c/li\u003e\n\u003cli\u003e进程有几种状态\u003c/li\u003e\n\u003cli\u003e事务要满足几个特性\u003c/li\u003e\n\u003cli\u003eB+树特征是什么样的\u003c/li\u003e\n\u003cli\u003eB+树查询过程\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0402腾讯成都"},{"content":" 自我介绍 项目web服务器提问(跟socket相关的事件有哪些？epoll监听了socket哪些事件？用的什么模式水平触发还是边沿触发模式？你用的是阻塞IO还是非阻塞IO，为什么用非阻塞?) C++多态是怎么实现的？答到虚函数表指针就就结束了 构造函数可以是虚函数吗？不可以，为什么？ 析构函数可以是虚函数吗？可以。根据我回答扩展的一个问题：父类析构不是虚函数，他的子类有一个父类指针指向子类的对象，然后我释放这个父类指针的时候会调用子类的虚构函数吗？不会。我觉得应该应该回答继承时的虚构顺序，当时没想起。如果不会调用析构函数，子类会被释放吗？不会。面试官主动放弃该话题。 简单说一下new/delete和malloc和free C++11用过哪些？auto, unordered_map, 智能指针 TCP黏包问题如何解决？ TCP的拥塞控制？我答了拥塞窗口。他想听慢重传和快恢复 TIME_WAIT状态解释一下，如何解决这个问题？端口复用 A和B建立连接以后，A拔掉网线,那这个时候B和A的连接还在吗？哪一方会发现呢？不要答心跳包。面试官主动放弃该话题。 说一下多进程和多线程的区别。线程共享哪些内容。 又TM扯到项目中的线程数了。线程的模型是什么样的。 还有什么想问我的？问了他这个岗位做啥的。面向企业的视频会议。 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0306cvte/","summary":"\u003col\u003e\n\u003cli\u003e自我介绍\u003c/li\u003e\n\u003cli\u003e项目web服务器提问(跟socket相关的事件有哪些？epoll监听了socket哪些事件？用的什么模式水平触发还是边沿触发模式？你用的是阻塞IO还是非阻塞IO，为什么用非阻塞?)\u003c/li\u003e\n\u003cli\u003eC++多态是怎么实现的？答到虚函数表指针就就结束了\u003c/li\u003e\n\u003cli\u003e构造函数可以是虚函数吗？不可以，为什么？\u003c/li\u003e\n\u003cli\u003e析构函数可以是虚函数吗？可以。根据我回答扩展的一个问题：父类析构不是虚函数，他的子类有一个父类指针指向子类的对象，然后我释放这个父类指针的时候会调用子类的虚构函数吗？不会。我觉得应该应该回答继承时的虚构顺序，当时没想起。如果不会调用析构函数，子类会被释放吗？不会。面试官主动放弃该话题。\u003c/li\u003e\n\u003cli\u003e简单说一下new/delete和malloc和free\u003c/li\u003e\n\u003cli\u003eC++11用过哪些？auto, unordered_map, 智能指针\u003c/li\u003e\n\u003cli\u003eTCP黏包问题如何解决？\u003c/li\u003e\n\u003cli\u003eTCP的拥塞控制？我答了拥塞窗口。他想听慢重传和快恢复\u003c/li\u003e\n\u003cli\u003eTIME_WAIT状态解释一下，如何解决这个问题？端口复用\u003c/li\u003e\n\u003cli\u003eA和B建立连接以后，A拔掉网线,那这个时候B和A的连接还在吗？哪一方会发现呢？不要答心跳包。面试官主动放弃该话题。\u003c/li\u003e\n\u003cli\u003e说一下多进程和多线程的区别。线程共享哪些内容。\u003c/li\u003e\n\u003cli\u003e又TM扯到项目中的线程数了。线程的模型是什么样的。\u003c/li\u003e\n\u003cli\u003e还有什么想问我的？问了他这个岗位做啥的。面向企业的视频会议。\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0306CVTE"},{"content":"webbench 测压软件 最高并发3W\nwebbench做测试时自身也会消耗CPU和内存资源，为了测试准确，需要将webbench安装在别的服务器上。\ntar -xzvf webbench-1.5.tar.gz cd webbench-1.5 apt-get install ctags make \u0026amp;\u0026amp; make install 测试\nwebbench -c 1000 -t 5 http://127.0.0.1:9999/index.html //1000个客户端 5秒钟时间 github git clone https://github.com/SYaoJun/WebServer.git //把仓库中的内容拷贝到linux系统中 回调函数 函数指针本身是指针变量，指向某个函数的入口地址。\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; int run(void(*step)(void)){ //回调函数的传参是声明的格式 int cnt = 0; while(1){ if(step != NULL) step(); cnt++; sleep(1); } return 0; } void cb(void){ //回调函数 puts(\u0026#34;记秒到时\u0026#34;); } int main(){ run(cb); return 0; } gcc cb.c main.c 信号函数 raise(SIGSEGV) //自己给自己进程发送信号 11 abort() //终止当前进程 测试1s打印多少个数\nalarm函数\n#include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main(){ alarm(1); //计时1s 到时后内核发送一个sigalarm信号终止 for(int i = 0;;i++) printf(\u0026#34;%d\\n\u0026#34;, i); return 0; } setitimer函数\n#include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;sys/time.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int my_alarm(int sec){ struct itimerval it, oldit; it.it_value.tv_sec = sec; //定时长度 it.it_value.tv_usec = 0; //微秒 it.it_interval.tv_sec = 0; //周期定时 it.it_interval.tv_usec = 0; int ret = setitimer(ITIMER_REAL, \u0026amp;it, \u0026amp;oldit); if(ret == -1){ perror(\u0026#34;setitimer error\u0026#34;); exit(1); } return oldit.it_value.tv_sec; } int main(){ my_alarm(1); //计时1s 到时后内核发送一个sigalarm信号终止 for(int i = 0;;i++) printf(\u0026#34;%d\\n\u0026#34;, i); return 0; } 创建线程 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; void* func(void* arg){ //必须为这种类型 printf(\u0026#34;in thread : thread id: %lu, process id: %u\\n\u0026#34;, pthread_self(), getpid()); } int main(void){ //创建线程 pthread_t tid; //重命名的unsigned long 类型 //创建线程API pthread_create(arg1, agr2, arg3, arg4) //arg1: 传入的线程tid地址 //arg2: 线程属性 通常设置为NULL //arg3: 线程执行的任务 函数指针 //arg4: 参数3传递的参数 printf(\u0026#34;in main 1 : thread id: %lu, process id: %u\\n\u0026#34;, pthread_self(), getpid()); int ret = pthread_create(\u0026amp;tid, NULL, func, NULL); if(ret != 0){ perror(\u0026#34;pthread_create error\u0026#34;); exit(1); } sleep(1); //主线程 等待子线程执行完毕 printf(\u0026#34;in main 2 : thread id: %lu, process id: %u\\n\u0026#34;, pthread_self(), getpid()); return 0; } 创建多个子线程 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; void* func(void* arg){ //必须为这种类型 int i = (int)arg; printf(\u0026#34;%dth thread id: %lu, process id: %u\\n\u0026#34;, i, pthread_self(), getpid()); } int main(void){ //创建线程 pthread_t tid; //重命名的unsigned long 类型 //创建线程API pthread_create(arg1, agr2, arg3, arg4) //arg1: 传入的线程tid地址 //arg2: 线程属性 通常设置为NULL //arg3: 线程执行的任务 函数指针 //arg4: 参数3传递的参数 int n = 5, ret; for(int i = 0; i \u0026lt; n; i++){ ret = pthread_create(\u0026amp;tid, NULL, func, (void*)i); if(ret != 0){ fprintf(stderr, \u0026#34;%s pthread_create error\u0026#34;, strerror(ret)); exit(1); } pthread_detach(tid); } sleep(n); //主线程 等待子线程执行完毕 return 0; } mysql使用 mysql在linux环境下结合C语言的使用\nsudo apt-get install mysql-client mysql-server //先安装mysql sudo apt-get install libmysql++-dev //安装库 先启动mysql库 设置好密码 然后使用c程序连接\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;mysql/mysql.h\u0026gt; int main(){ MYSQL mysql; MYSQL_RES *res; MYSQL_ROW row; int i, j; char *query = \u0026#34;select * from people;\u0026#34;; mysql_init(\u0026amp;mysql); //初始化 if(!mysql_real_connect(\u0026amp;mysql,\u0026#34;localhost\u0026#34;,\u0026#34;root\u0026#34;,\u0026#34;password\u0026#34;,\u0026#34;yaojun\u0026#34;,3306,NULL,0)){ //连接数据库 printf(\u0026#34;Error in connecting\u0026#34;); } if(mysql_query(\u0026amp;mysql,query)){ //查询数据库 printf(\u0026#34;Error in querying\u0026#34;); } res = mysql_store_result(\u0026amp;mysql); while(row = mysql_fetch_row(res)){ //读取数据库中的一行 for(i=0;i\u0026lt;mysql_num_fields(res);i++){ fprintf(stdout,\u0026#34;%s \u0026#34;,row[i]); } printf(\u0026#34;\\n\u0026#34;); } mysql_free_result(res); //释放 mysql_close(\u0026amp;mysql); //关闭 return 0; } 编译的命令\ngcc sql.c -lmysqlclient //生成a.out文件 执行 指针和数组 char str[]=\u0026#34;hello\u0026#34;; //字符串含\\0 6字节 char *url =\u0026#34;hello\u0026#34;; //指针64位机 8字节 cout\u0026lt;\u0026lt;sizeof(str)\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;sizeof(url)\u0026lt;\u0026lt;endl; CGI服务器 原理：输出到某个文件描述符上的内容直接发送到客户端连接对应的socket上，此处我们模拟了把服务器端输出到标准输出的内容，直接发送给客户端。\n测试\ntelnet 127.0.0.1 6666 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;netinet/in.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; //命令行参数指定IP和端口 int main(int argc, char *argv[]){ if(argc \u0026lt;= 2){ printf(\u0026#34;at least 3 arguments: file ip port, but you give %d\\n\u0026#34;, argc); return 1; } const char* ip = argv[1]; int port = atoi(argv[2]); int lfd, cfd, ret; struct sockaddr_in serv_addr, clie_addr; lfd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 assert(lfd \u0026gt;= 0); serv_addr.sin_family = AF_INET; serv_addr.sin_port = htons(port); inet_pton(AF_INET, ip, \u0026amp;serv_addr.sin_addr); //端口复用 此处没有卵用 int opt = 1; setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); ret = bind(lfd, (struct sockaddr *)\u0026amp;serv_addr, sizeof(serv_addr) ); assert(ret != -1); ret = listen(lfd, 128); //最大同时连接数 assert(ret != -1); socklen_t clie_addr_len; //套接字长度 clie_addr_len = sizeof(clie_addr); cfd = accept(lfd, (struct sockaddr*)\u0026amp;clie_addr, \u0026amp;clie_addr_len ); if(cfd \u0026lt; 0){ printf(\u0026#34;accept error: %d\u0026#34;, errno); }else{ close(STDOUT_FILENO); dup(cfd); //创建一个新的文件描述符 该文件描述符和原文件描述符指向相同的文件 管道和网络连接 printf(\u0026#34;good night! daisy!\\n\u0026#34;); close(cfd); } close(lfd); return 0; } EPOLLONESHOT事件 一个socket上的某个事件被触发多次，可能产生2个不同的线程处理同一个socket。我们期望的是一个socket在任一时刻都只被一个线程处理。对于注册了EPOLLONESHOT事件的文件描述符，操做系统最多触发其上注册的一个可读可写或者异常事件一次。注册了EPOLLONESHOT事件的socket一旦被某个线程处理完毕，应立即重置这个socket上的EPOLLONESHOT事件。\n监听socket不应设置为EPOLLONESHOT。\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;netinet/in.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;sys/epoll.h\u0026gt; #define MAX_SIZE 1024 //自定义的结构体 struct fds{ int epollfd; int sockfd; }; //设置文件描述符为非阻塞 void setnonblocking(int fd){ int old_option = fcntl(fd, F_GETFL); int new_option = old_option | O_NONBLOCK; fcntl(fd, F_SETFL, new_option); } //添加到epoll内核事件表中 void addfd(int epollfd, int fd, bool oneshot){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET; if(oneshot){ event.events |= EPOLLONESHOT; } epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, \u0026amp;event); //挂到红黑树上 setnonblocking(fd); //设置非阻塞 主要用在读写上 } //重置EPOLLONESHOT事件 void reset_oneshot(int epollfd, int fd){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET | EPOLLONESHOT; epoll_ctl(epollfd, EPOLL_CTL_MOD, fd, \u0026amp;event); //修改注册事件 } //工作线程 void* worker(void* arg){ int sockfd = ((fds*)arg)-\u0026gt;sockfd; int epollfd = ((fds*)arg)-\u0026gt;epollfd; printf(\u0026#34;start new thread to receive data on fd: %d\\n\u0026#34;, sockfd); char buf[MAX_SIZE]; memset(buf, \u0026#39;\\0\u0026#39;, MAX_SIZE); //循环读取sockfd上的数据 直到收到EAGAIN while(1){ int ret = recv(sockfd, buf, MAX_SIZE-1, 0); if(ret == 0){ close(sockfd); printf(\u0026#34;foreiner closed the connection\\n\u0026#34;); break; }else if(ret \u0026lt; 0){ if(errno == EAGAIN){ reset_oneshot(epollfd ,sockfd); printf(\u0026#34;read later\\n\u0026#34;); break; } }else{ printf(\u0026#34;get connection: %s\\n\u0026#34;, buf); //休眠5s模拟数据处理过程 sleep(5); } } printf(\u0026#34;end thread receiving data on fd: %d\\n\u0026#34;, sockfd); } //命令行参数指定IP和端口 int main(int argc, char *argv[]){ if(argc \u0026lt;= 2){ printf(\u0026#34;at least 3 arguments: file ip port, but you give %d\\n\u0026#34;, argc); return 1; } const char* ip = argv[1]; int port = atoi(argv[2]); int lfd, cfd, ret; struct sockaddr_in serv_addr, clie_addr; lfd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 assert(lfd \u0026gt;= 0); serv_addr.sin_family = AF_INET; serv_addr.sin_port = htons(port); inet_pton(AF_INET, ip, \u0026amp;serv_addr.sin_addr); //端口复用 此处没有卵用 int opt = 1; setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); ret = bind(lfd, (struct sockaddr *)\u0026amp;serv_addr, sizeof(serv_addr) ); assert(ret != -1); ret = listen(lfd, 128); //最大同时连接数 assert(ret != -1); epoll_event events[MAX_SIZE]; //返回的数组上限 int epollfd = epoll_create(10); assert(epollfd != -1); //注意监听的套接字不能设置为oneshot addfd(epollfd, lfd, false); //挂上红黑树监听 printf(\u0026#34;addfd\\n\u0026#34;); while(1){ ret = epoll_wait(epollfd, events, MAX_SIZE, -1); //永远不超时 if(ret \u0026lt; 0){ printf(\u0026#34;epoll failure\\n\u0026#34;); break; } for(int i = 0; i \u0026lt; ret; i++){ //循环处理有响应的事件 int sockfd = events[i].data.fd; if(sockfd == lfd){ //如果是监听事件则建立新的连接 printf(\u0026#34;lfd\\n\u0026#34;); socklen_t clie_addr_len; //套接字长度 clie_addr_len = sizeof(clie_addr); cfd = accept(lfd, (struct sockaddr*)\u0026amp;clie_addr, \u0026amp;clie_addr_len ); assert(cfd \u0026gt;= 0); //注册为oneshot事件 addfd(epollfd, cfd, true); //刚刚这里加入的事件加错了 }else if(events[i].events \u0026amp; EPOLLIN){ pthread_t tid; fds fds_for_new_worker; fds_for_new_worker.epollfd = epollfd; fds_for_new_worker.sockfd = sockfd; //新启动一个线程为sockfd服务 pthread_create(\u0026amp;tid, NULL, worker, (void*)\u0026amp;fds_for_new_worker); // pthread_detach(tid); //线程分离 } } } close(lfd); return 0; } 信号屏蔽字 主要函数\nsigaddset() sigprocmask() sigpending() 使用kill发送信号\nkill -6 PID 测试程序\n#include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;signal.h\u0026gt; void print(sigset_t* ped){ for(int i = 0; i \u0026lt; 32; i++){ if(sigismember(ped, i)==1){ putchar(\u0026#39;1\u0026#39;); }else putchar(\u0026#39;0\u0026#39;); } printf(\u0026#34;\\n\u0026#34;); } int main(void){ sigset_t myset, oldset, ped; sigemptyset(\u0026amp;myset); //设置自定义信号集 sigaddset(\u0026amp;myset, SIGINT); sigaddset(\u0026amp;myset, SIGSEGV); sigaddset(\u0026amp;myset, SIGQUIT); sigaddset(\u0026amp;myset, SIGABRT); //设置信号屏蔽字 sigprocmask(SIG_BLOCK, \u0026amp;myset, \u0026amp;oldset); while(1){ sigpending(\u0026amp;ped); print(\u0026amp;ped); sleep(2); } return 0; } sigaction信号捕捉函数 #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;signal.h\u0026gt; void docatch(int signo){ printf(\u0026#34;%d signal has been catched!\\n\u0026#34;, signo); } int main(void){ struct sigaction act; act.sa_handler = docatch; sigemptyset(\u0026amp;act.sa_mask); sigaddset(\u0026amp;act.sa_mask, SIGINT); sigaddset(\u0026amp;act.sa_mask, SIGSEGV); sigaddset(\u0026amp;act.sa_mask, SIGQUIT); act.sa_flags = 0; //默认属性 在信号函数处理期间 本信号再次到达默认屏蔽 sigaction(SIGINT, \u0026amp;act, NULL); while(1); return 0; } 统一事件源 把信号事件的处理放到epoll监听事件中去处理，统一了事件源。当调用信号处理函数时，信号处理函数通过管道将信息传达给epoll上的读端监听事件，再在主循环中处理事件。\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;netinet/in.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;sys/epoll.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #define MAX_SIZE 1024 //自定义的结构体 static int pipefd[2]; struct fds{ int epollfd; int sockfd; }; //设置文件描述符为非阻塞 void setnonblocking(int fd){ int old_option = fcntl(fd, F_GETFL); int new_option = old_option | O_NONBLOCK; fcntl(fd, F_SETFL, new_option); } //添加到epoll内核事件表中 void addfd(int epollfd, int fd, bool oneshot){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET; if(oneshot){ event.events |= EPOLLONESHOT; } epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, \u0026amp;event); //挂到红黑树上 setnonblocking(fd); //设置非阻塞 主要用在读写上 } //信号处理函数 void sig_handler(int sig){ int save_errno = errno; int msg = sig; //我猜想这里重新定义变量的原因在于传的是指针 同时为了保证可重入 send(pipefd[1], (char*)\u0026amp;msg, 1, 0); //pipefd[1]是非阻塞的如果发不出去直接返回 errno = save_errno; } //设置信号处理 void addsig(int sig){ struct sigaction sa; memset(\u0026amp;sa, \u0026#39;\\0\u0026#39;, sizeof(sa)); sa.sa_handler = sig_handler; sa.sa_flags |= SA_RESTART; sigfillset(\u0026amp;sa.sa_mask); // sigaddset(\u0026amp;sa.sa_mask, SIGSEGV); assert(sigaction(sig, \u0026amp;sa, NULL) != -1); //注册监听的信号 } //命令行参数指定IP和端口 int main(int argc, char *argv[]){ if(argc \u0026lt;= 2){ printf(\u0026#34;at least 3 arguments: file ip port, but you give %d\\n\u0026#34;, argc); return 1; } const char* ip = argv[1]; int port = atoi(argv[2]); int lfd, cfd, ret; struct sockaddr_in serv_addr, clie_addr; lfd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 assert(lfd \u0026gt;= 0); serv_addr.sin_family = AF_INET; serv_addr.sin_port = htons(port); inet_pton(AF_INET, ip, \u0026amp;serv_addr.sin_addr); //端口复用 此处没有卵用 int opt = 1; setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); //忽略SIGPIPE信号 signal(SIGPIPE, SIG_IGN); ret = bind(lfd, (struct sockaddr *)\u0026amp;serv_addr, sizeof(serv_addr) ); assert(ret != -1); ret = listen(lfd, 128); //最大同时连接数 assert(ret != -1); epoll_event events[MAX_SIZE]; //返回的数组上限 int epollfd = epoll_create(10); assert(epollfd != -1); //注意监听的套接字不能设置为oneshot addfd(epollfd, lfd, false); //挂上红黑树监听 /*使用socketpair创建全双工的管道*/ ret = socketpair(PF_UNIX, SOCK_STREAM, 0, pipefd); assert(ret != -1); setnonblocking(pipefd[1]); //把写入的管道端置为非阻塞 addfd( epollfd, pipefd[0], false); //设置为oneshot /*设置一些信号的处理函数*/ addsig(SIGHUP); addsig(SIGCHLD); addsig(SIGTERM); addsig(SIGINT); addsig(SIGSEGV); bool stop_server = false; while(!stop_server){ printf(\u0026#34;epoll_wait...\\n\u0026#34;); ret = epoll_wait(epollfd, events, MAX_SIZE, -1); //永远不超时 if((ret \u0026lt; 0) \u0026amp;\u0026amp; (errno != EINTR)){ //这里要设置 被系统调用打断的不算失败 errno不是ret perror(\u0026#34;epoll failure\u0026#34;); exit(1); } for(int i = 0; i \u0026lt; ret; i++){ //循环处理有响应的事件 int sockfd = events[i].data.fd; if(sockfd == lfd){ //如果是监听事件则建立新的连接 socklen_t clie_addr_len; //套接字长度 clie_addr_len = sizeof(clie_addr); cfd = accept(lfd, (struct sockaddr*)\u0026amp;clie_addr, \u0026amp;clie_addr_len ); assert(cfd \u0026gt;= 0); //注册为oneshot事件 addfd(epollfd, cfd, true); /*如果就绪的文件描述符是pipefd[0],就处理信号*/ }else if((sockfd == pipefd[0]) \u0026amp;\u0026amp;(events[i].events \u0026amp; EPOLLIN)){ char buf[MAX_SIZE]; int num = recv(pipefd[0], buf, sizeof(buf), 0); if(num == -1) continue; else if(num == 0) continue; else{ //可能管道有多个信号满足 每次读出一个字符进行处理 for(int j = 0; j \u0026lt; num; j++){ switch(buf[j]){ case SIGSEGV: puts(\u0026#34;段错误信号已处理，收到请回答！\u0026#34;); break; case SIGCHLD: case SIGHUP: continue; case SIGTERM: case SIGINT: stop_server = true;break; } } } }else{} } } printf(\u0026#34;close fds\\n\u0026#34;); close(lfd); close(pipefd[0]); close(pipefd[1]); return 0; } 单例模式 #include \u0026lt;iostream\u0026gt; #include \u0026lt;atomic\u0026gt; #include \u0026lt;mutex\u0026gt; using namespace std; class Singleton{ private: //无法调用构造函数 Singleton(); Singleton(const Singleton\u0026amp; other); public: static Singleton* getInstance(); static Singleton* m_instance; } Singleton* Singleton::m_instance = nullptr; //懒汉式 单线程版 Singleton* Singleton::getInstance(){ if(m_instance == nullptr){ m_instance = new Singleton(); } return m_instance; } //多线程版 Singleton* Singleton::getInstance(){ LOCK lock; if(m_instance == nullptr){ m_instance = new Singleton(); } return m_instance; } 当前时间 #include \u0026lt;time.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main(void){ time_t tm; time(\u0026amp;tm); char time_string[128]; ctime_r(\u0026amp;tm, time_string); printf(\u0026#34;%s\u0026#34;, time_string); return 0; } 初阶日志系统 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;mutex\u0026gt; #include \u0026lt;atomic\u0026gt; using namespace std; class Logger{ public: static Logger* get_instance(); static Logger* log; static mutex log_mutex; static void write_log(int level, char* s); static void create_file(); static int fd; private: Logger(); Logger(const Logger\u0026amp; other); ~Logger(); }; Logger* Logger::log = NULL; mutex Logger::log_mutex; int Logger::fd = 0; Logger::Logger(){}; Logger::~Logger(){ if(log != NULL){ delete log; log = NULL; } close(fd); } Logger* Logger::get_instance(){ if(log == NULL){ log_mutex.lock(); if(log == NULL){ log = new Logger(); } log_mutex.unlock(); } return log; } void Logger::create_file(){ fd = open(\u0026#34;logger.txt\u0026#34;, O_RDWR|O_CREAT|O_TRUNC, 777); assert(fd \u0026gt; 0); } void Logger::write_log(int level, char* s){ int n = strlen(s); log_mutex.lock(); write(fd, s, n); log_mutex.unlock(); } 单例模式 //C++11 atomic std::atomic\u0026lt;Logger*\u0026gt; Logger::log; std::mutex Logger::log_mutex; Logger* Logger::get_instance(){ Logger* tmp = log.load(std::memory_order_relaxed); std::atomic_thread_fence(std::memory_order_acquire); //获取内存fence if(tmp == NULL){ std::lock_guard\u0026lt;std::mutex\u0026gt; lock(log_mutex); tmp = log.load(std::memory_order_relaxed); if(tmp == NUll){ tmp = new Logger; std::atomic_thread_fence(std::memory_order_release); //释放内存fence log.store(tmp, std::memory_order_relaxed); } } return tmp; } 主线程测试 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026#34;logger.h\u0026#34; void* func(void* arg){ char buf[1024]; sprintf(buf, \u0026#34;thread id: %lu, process id: %u\\n\u0026#34;, pthread_self(), getpid()); Logger::log-\u0026gt;write_log(2, buf); } int main(void){ pthread_t tid; //重命名的unsigned long 类型 Logger::log-\u0026gt;create_file(); int n = 5, ret; for(int i = 0; i \u0026lt; n; i++){ // int t = i; ret = pthread_create(\u0026amp;tid, NULL, func, NULL); if(ret != 0){ fprintf(stderr, \u0026#34;%s pthread_create error\u0026#34;, strerror(ret)); exit(1); } pthread_detach(tid); } sleep(n-4); //主线程 等待子线程执行完毕 return 0; } 时间堆 把监听文件描述符加入后，就启动定时器。\nexec函数族 在一个程序中运行另一个程序。当进程调用exec函数时，该进程的用户空间代码和数据完全被新程序替换。调用exec并不创建新进程，所以调用exec前后进程的ID并不改变。\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; int main(){ pid_t pid = fork(); if(pid == -1){ perror(\u0026#34;fork error!\u0026#34;); exit(-1); }else if(pid == 0){ execlp(\u0026#34;ls\u0026#34;, \u0026#34;anythingok\u0026#34;, \u0026#34;-l\u0026#34;, \u0026#34;-a\u0026#34;, NULL); }else if(pid \u0026gt; 0){ sleep(1); puts(\u0026#34;parent over!\u0026#34;); } return 0; } 管道 #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(){ pid_t fd[2]; pipe(fd); //创建管道 int ret = fork(); if(ret \u0026gt; 0){ //父进程 父写 fd[0]读 fd[1]写 close(fd[0]); char *str =\u0026#34;hello world\\n\u0026#34;; write(fd[1], str, strlen(str)); sleep(1); }else if(ret == 0){ //子进程 子读 fd[1]关闭 close(fd[1]); char buf[1024]; int n = read(fd[0], buf, sizeof(buf)); //写到显示器上 write(1, buf, n); } return 0; } CGI使用管道和exec实现 hello里面的输入和输出都被重定向了\n#include\u0026lt;stdio.h\u0026gt; #include\u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; int main(int agrc, char* argv[]){ char bf[100]; read(STDIN_FILENO, bf, sizeof(bf)); sprintf(bf, \u0026#34;Content-Type:text/html;\\r\\n\\r\\nhello world, 你好!\u0026#34;); printf(\u0026#34;%s\u0026#34;, bf); return 0; } 主进程调用已经编译完毕的hello可执行文件\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; int main(){ pid_t pid; int status; int cgi_input[2]; int cgi_output[2]; char buf[1024]; /*创建输入管道*/ if(pipe(cgi_input) \u0026lt; 0){ perror(\u0026#34;pipe error\u0026#34;); exit(1); } /*创建输出管道*/ if(pipe(cgi_output) \u0026lt; 0){ perror(\u0026#34;pipe error\u0026#34;); exit(1); } /*创建子进程*/ if((pid = fork()) \u0026lt; 0){ perror(\u0026#34;fork error!\u0026#34;); exit(-1); } if(pid == 0){ dup2(cgi_input[0], 0); /*将子进程的STDIN重定向到cgi_input[0]*/ dup2(cgi_output[1], 1); /*将子进程的STDOUT重定向到cgi_output[1]*/ /*关闭剩余的两端*/ close(cgi_input[1]); close(cgi_output[0]); /*执行exec文件 即cgi*/ execl(\u0026#34;hello\u0026#34;, \u0026#34;anythingok\u0026#34;, NULL); exit(0); }else if(pid \u0026gt; 0){ /*父进程先给子进程发送数据 然后等待子进程执行完 再读数据*/ /*关闭不用的两个端口*/ close(cgi_input[0]); close(cgi_output[1]); char tmp[100]=\u0026#34;hello child process\u0026#34;; int len = strlen(tmp); /*父进程先写数据*/ write(cgi_input[1], tmp, len); /*父进程阻塞等待读入*/ int n = read(cgi_output[0], buf, sizeof(buf)); int ret = write(STDOUT_FILENO, buf, n); /*关闭管道*/ close(cgi_input[1]); close(cgi_output[0]); waitpid(pid, \u0026amp;status, 0); } return 0; } 多线程服务器 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;sys/epoll.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #include \u0026lt;dirent.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; #define SERV_PORT 9999 #define MAXSIZE 2048 void wait_child(int signo){ while(waitpid(0, NULL, WNOHANG) \u0026gt; 0); return; } int createlistenfd(){ struct sockaddr_in servaddr; int ret; int fd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 if(fd == -1){ perror(\u0026#34;socket error\u0026#34;); exit(1); } //初始化servaddr结构体 bzero(\u0026amp;servaddr, sizeof(servaddr)); servaddr.sin_family = AF_INET; servaddr.sin_port = htons(SERV_PORT); servaddr.sin_addr.s_addr = htonl(INADDR_ANY); //端口复用 int opt = 1; setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); //绑定端口 ret = bind(fd, (struct sockaddr *)\u0026amp;servaddr, sizeof(servaddr)); if (ret == -1){ perror(\u0026#34;bind error\u0026#34;); exit(1); } //设置监听上限 ret = listen(fd, 128); if(ret==-1){ perror(\u0026#34;listen error\u0026#34;); exit(1); } return fd; } void work(int cfd, char* s){ char filename[100]={0}; sscanf(s, \u0026#34;GET /%s\u0026#34;, filename); char *mime; if(strstr(s, \u0026#34;.html\u0026#34;)) mime = \u0026#34;text/html\u0026#34;; else if(strstr(s, \u0026#34;.jpg\u0026#34;)) mime=\u0026#34;image/jpeg\u0026#34;; //构建响应头 发给客户端 // printf(\u0026#34;%s\\n\u0026#34;, filename); char response[MAXSIZE]; sprintf(response, \u0026#34;HTTP/1.1 200 OK\\r\\nContent-Type: %s\\r\\n\\r\\n\u0026#34;, mime); //读取具体的文件内容 int filefd = open(filename, O_RDONLY); if(filefd == -1){ perror(\u0026#34;open error\u0026#34;); sleep(0.5); filefd = open(filename, O_RDONLY); //很奇怪 为什么睡几秒钟之后再打开就不会出错了 if(filefd == -1) exit(1); } int len = strlen(response); int n = read(filefd, response+len, sizeof(response)-len); write(cfd, response, len+n); close(filefd); } int main(void){ int lfd = createlistenfd(); struct sockaddr_in clientaddr; socklen_t clientaddrlen = sizeof(clientaddr); //这是一个传出参数 //accept接受连接请求 pid_t pid; int cfd; while(1){ cfd = accept(lfd, (struct sockaddr *)\u0026amp;clientaddr, \u0026amp;clientaddrlen); if (cfd == -1){ perror(\u0026#34;accept error\u0026#34;); exit(1); } //创建子线程 主线程负责监听和回收子进程 pid = fork(); if(pid \u0026lt; 0){ perror(\u0026#34;fork error\u0026#34;); exit(1); } else if(pid == 0) break; else{ close(cfd); //关闭接收文件描述符 signal(SIGCHLD, wait_child); } } if(pid == 0){ close(lfd); //关闭监听文件描述符 //打印客户端IP和port char buf[MAXSIZE] = {0}; printf(\u0026#34;client IP: %s, client port: %d\\n\u0026#34;, inet_ntop(AF_INET, \u0026amp;clientaddr.sin_addr, buf, sizeof(buf)), ntohs(clientaddr.sin_port)); int n = read(cfd, buf, sizeof(buf)); if(n==0){ close(cfd); } // write(1, buf, n); else work(cfd, buf); } return 0; } 处理客户端注册信息的cgi 存在一些问题，每个网页好像没有传输完成，浏览器总是转圈。 需要结合上面hello程序查询数据库，hello程序的注册还没完善，只能做到查询。等以后有空再做吧。 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;netinet/in.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;sys/epoll.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; #define MAX_SIZE 1024 //自定义的结构体 struct fds{ int epollfd; int sockfd; }; //设置文件描述符为非阻塞 void setnonblocking(int fd){ int old_option = fcntl(fd, F_GETFL); int new_option = old_option | O_NONBLOCK; fcntl(fd, F_SETFL, new_option); } //添加到epoll内核事件表中 void addfd(int epollfd, int fd, bool oneshot){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET; if(oneshot){ event.events |= EPOLLONESHOT; } epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, \u0026amp;event); //挂到红黑树上 setnonblocking(fd); //设置非阻塞 主要用在读写上 } //移除epoll事件 void removefd(int epollfd, int fd){ epoll_ctl(epollfd, EPOLL_CTL_DEL, fd, NULL); close(fd); } //重置EPOLLONESHOT事件 void reset_oneshot(int epollfd, int fd){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET | EPOLLONESHOT; epoll_ctl(epollfd, EPOLL_CTL_MOD, fd, \u0026amp;event); //修改注册事件 } void accept_request(int epollfd, int sockfd, char *s){ char method[32], filename[32], account[32], password[32], phone[32]; sscanf(s, \u0026#34;%s /%s\u0026#34;, method, filename); if(strcasecmp(method, \u0026#34;POST\u0026#34;) == 0){ int len = strlen(s); int i; for(i = 0; i \u0026lt; len; i++){ if(i+2\u0026lt;len \u0026amp;\u0026amp; s[i]==\u0026#39;\\n\u0026#39; \u0026amp;\u0026amp; s[i+1]==\u0026#39;\\r\u0026#39;) break; } int j; i=i+12; for(j = 0; s[i+j]!=\u0026#39;\u0026amp;\u0026#39;; j++) account[j] = s[j+i]; i = i+j+6; for(j = 0; s[i+j]!=\u0026#39;\u0026amp;\u0026#39;; j++) password[j] = s[j+i]; /*2020.4.7成功解析出来账号和密码*/ pid_t pid; int status; int cgi_input[2]; int cgi_output[2]; char buff[1024]; /*创建输入管道*/ if(pipe(cgi_input) \u0026lt; 0){ perror(\u0026#34;pipe error\u0026#34;); exit(1); } /*创建输出管道*/ if(pipe(cgi_output) \u0026lt; 0){ perror(\u0026#34;pipe error\u0026#34;); exit(1); } /*创建子进程*/ if((pid = fork()) \u0026lt; 0){ perror(\u0026#34;fork error!\u0026#34;); exit(-1); } if(pid == 0){ dup2(cgi_input[0], 0); /*将子进程的STDIN重定向到cgi_input[0]*/ dup2(cgi_output[1], 1); /*将子进程的STDOUT重定向到cgi_output[1]*/ /*关闭剩余的两端*/ close(cgi_input[1]); close(cgi_output[0]); /*执行exec文件 即cgi*/ execl(\u0026#34;hello\u0026#34;, \u0026#34;anythingok\u0026#34;, NULL); exit(0); }else if(pid \u0026gt; 0){ /*父进程先给子进程发送数据 然后等待子进程执行完 再读数据*/ /*关闭不用的两个端口*/ close(cgi_input[0]); close(cgi_output[1]); /*父进程先写数据*/ int len = strlen(account); write(cgi_input[1], account, len); /*父进程阻塞等待读入*/ int n = read(cgi_output[0], buff, sizeof(buff)); if(strcmp(buff, password)==0\u0026amp;\u0026amp;strlen(password) != 0){ puts(\u0026#34;密码正确\u0026#34;); }else{ puts(\u0026#34;密码错误\u0026#34;); strcpy(filename, \u0026#34;register.html\u0026#34;); } // int ret = write(STDOUT_FILENO, buf, n); /*关闭管道*/ close(cgi_input[1]); close(cgi_output[0]); waitpid(pid, \u0026amp;status, 0); } } puts(filename); char mime[64]; if(strstr(s, \u0026#34;.html\u0026#34;)) strcpy(mime,\u0026#34;text/html\u0026#34;); else if(strstr(s, \u0026#34;.jpg\u0026#34;)) strcpy(mime,\u0026#34;image/jpeg\u0026#34;); char response[MAX_SIZE+MAX_SIZE]; sprintf(response, \u0026#34;HTTP/1.1 200 OK\\r\\nContent-Type: %s\\r\\n\\r\\n\u0026#34;, mime); int filefd = open(filename, O_RDONLY); if(filefd == -1){ perror(\u0026#34;open error\u0026#34;); exit(1); } int len = strlen(response); int n = read(filefd, response+len, sizeof(response)-len); write(sockfd, response, len+n); close(filefd); } //工作线程 void* worker(void* arg){ int sockfd = ((fds*)arg)-\u0026gt;sockfd; int epollfd = ((fds*)arg)-\u0026gt;epollfd; char buf[MAX_SIZE]; memset(buf, \u0026#39;\\0\u0026#39;, MAX_SIZE); //循环读取sockfd上的数据 直到收到EAGAIN while(1){ int ret = recv(sockfd, buf, MAX_SIZE-1, 0); if(ret == 0){ removefd(epollfd, sockfd); printf(\u0026#34;foreiner closed the connection\\n\u0026#34;); break; }else if(ret \u0026lt; 0){ if(errno == EAGAIN){ // reset_oneshot(epollfd ,sockfd); printf(\u0026#34;read later\\n\u0026#34;); break; } }else{ printf(\u0026#34;get connection:\\n\u0026#34;); //休眠5s模拟数据处理过程 accept_request(epollfd, sockfd, buf); sleep(5); break; } } } //命令行参数指定IP和端口 int main(int argc, char *argv[]){ if(argc \u0026lt; 2){ printf(\u0026#34;at least 2 arguments: file port, but you give %d\\n\u0026#34;, argc); return 1; } int port = atoi(argv[1]); int lfd, cfd, ret; struct sockaddr_in serv_addr, clie_addr; lfd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 assert(lfd \u0026gt;= 0); /*初始化服务器端的套接字地址*/ serv_addr.sin_family = AF_INET; serv_addr.sin_port = htons(port); serv_addr.sin_addr.s_addr = htonl(INADDR_ANY); //端口复用 此处没有卵用 int opt = 1; setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); ret = bind(lfd, (struct sockaddr *)\u0026amp;serv_addr, sizeof(serv_addr) ); assert(ret != -1); ret = listen(lfd, 128); //最大同时连接数 assert(ret != -1); epoll_event events[MAX_SIZE]; //返回的数组上限 int epollfd = epoll_create(10); assert(epollfd != -1); //注意监听的套接字不能设置为oneshot addfd(epollfd, lfd, false); //挂上红黑树监听 while(1){ ret = epoll_wait(epollfd, events, MAX_SIZE, -1); //永远不超时 if(ret \u0026lt; 0){ printf(\u0026#34;epoll failure\\n\u0026#34;); break; } for(int i = 0; i \u0026lt; ret; i++){ //循环处理有响应的事件 int sockfd = events[i].data.fd; if(sockfd == lfd){ //如果是监听事件则建立新的连接 socklen_t clie_addr_len; //套接字长度 clie_addr_len = sizeof(clie_addr); cfd = accept(lfd, (struct sockaddr*)\u0026amp;clie_addr, \u0026amp;clie_addr_len ); assert(cfd \u0026gt;= 0); //注册为oneshot事件 addfd(epollfd, cfd, false); //刚刚这里加入的事件加错了 }else if(events[i].events \u0026amp; EPOLLIN){ pthread_t tid; fds fds_for_new_worker; fds_for_new_worker.epollfd = epollfd; fds_for_new_worker.sockfd = sockfd; //新启动一个线程为sockfd服务 pthread_create(\u0026amp;tid, NULL, worker, (void*)\u0026amp;fds_for_new_worker); // pthread_detach(tid); //线程分离 } } } close(lfd); return 0; } 线程中调用fork函数 pthread_atfork函数确保fork调用后父进程和子进程都拥有一个清楚的锁状态。每个线程都可以独立的设置信号掩码。\nwaitpid回收子进程 #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; void sigchild_handler(int sig){ //在执行SIGCHLD信号期间 可能有多个SIGCHLD到达，但是未决信号集只记录一次。 //所以需要调用while循环回收再退出 while(waitpid(-1, NULL, WNOHANG) \u0026gt; 0){ puts(\u0026#34;回收成功\u0026#34;); } return; } int main(){ pid_t pid; int n = 5, i; signal(SIGCHLD, sigchild_handler); for(i = 0; i \u0026lt; n; i++){ pid = fork(); if(pid \u0026lt; 0){ perror(\u0026#34;fork error\u0026#34;); exit(1); }else if(pid == 0) break; //子进程 直接退出 } if(i \u0026lt; n){ //子进程 sleep(i); printf(\u0026#34;I am %dth child.\\n\u0026#34;, i); }else{ while(1){ //父进程不退出 sleep(1); printf(\u0026#34;I am parent %u\\n\u0026#34;, getpid()); } } return 0; } 自旋锁 线程同步的一种方式。使用自旋锁的线程会反复检查锁变量是否可用。自旋锁不会让出CPU，一种忙等待状态。死循环等待锁被释放。自旋锁避免了进程或线程上下文的开销。自旋锁不适合在单CPU中使用。\n#include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; const int N = 1e7; int num = 0; pthread_spinlock_t spin_lock; void *producer(void *){ int times = N; while(times--){ pthread_spin_lock(\u0026amp;spin_lock); ++num; pthread_spin_unlock(\u0026amp;spin_lock); } } void *comsumer(void*){ int times = N; while(times--){ pthread_spin_lock(\u0026amp;spin_lock); --num; pthread_spin_unlock(\u0026amp;spin_lock); } } int main(){ pthread_spin_init(\u0026amp;spin_lock, 0); pthread_t th1, th2; pthread_create(\u0026amp;th1, NULL, \u0026amp;producer, NULL); pthread_create(\u0026amp;th2, NULL, \u0026amp;comsumer, NULL); pthread_join(th1, NULL); pthread_join(th2, NULL); printf(\u0026#34;num = %d\\n\u0026#34;, num); return 0; } 条件变量 条件变量本身不是锁，但它可以造成线程阻塞。通常与互斥锁配合使用。给多线程提供一个汇合的场所。\npthread_cond_wait(\u0026amp;cond, \u0026amp;mutex) 1. 阻塞等待该条件变量直到满足 2.释放已经掌握的互斥锁 3.满足条件后重新拿锁 #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; const int MAX_BUF = 100; int num = 0; pthread_cond_t cond = PTHREAD_COND_INITIALIZER; pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; void *producer(void *){ while(true){ pthread_mutex_lock(\u0026amp;mutex); while(num \u0026gt;= MAX_BUF){ //由于阻塞解除时，只有一个物品可用 但是却有多个线程解除阻塞 所以需要循环检测一次 //满了 等待消费者消费 pthread_cond_wait(\u0026amp;cond, \u0026amp;mutex); printf(\u0026#34;缓冲区满了 等待消费者消费\\n\u0026#34;); } //生产一个物品 ++num; printf(\u0026#34;生产一个产品，当前产品数量为：%d\\n\u0026#34;, num); sleep(1); pthread_mutex_unlock(\u0026amp;mutex); //通知消费者可消费了 pthread_cond_signal(\u0026amp;cond); printf(\u0026#34;通知消费者...\\n\u0026#34;); sleep(1); } } void *comsumer(void*){ while(true){ pthread_mutex_lock(\u0026amp;mutex); while(num \u0026lt;= 0){ //缓冲区为空 等待生产者生产 pthread_cond_wait(\u0026amp;cond, \u0026amp;mutex); printf(\u0026#34;缓冲区空了 等待生产者生产\\n\u0026#34;); } //生产一个物品 --num; printf(\u0026#34;消费一个产品，当前产品数量为：%d\\n\u0026#34;, num); sleep(1); pthread_mutex_unlock(\u0026amp;mutex); //通知消费者可消费了 pthread_cond_signal(\u0026amp;cond); printf(\u0026#34;通知生产者...\\n\u0026#34;); } } int main(){ pthread_t th1, th2; pthread_create(\u0026amp;th1, NULL, \u0026amp;producer, NULL); pthread_create(\u0026amp;th2, NULL, \u0026amp;comsumer, NULL); pthread_join(th1, NULL); pthread_join(th2, NULL); printf(\u0026#34;num = %d\\n\u0026#34;, num); return 0; } ","permalink":"//localhost:1313/posts/006%E9%A1%B9%E7%9B%AE/","summary":"\u003ch2 id=\"webbench\"\u003ewebbench\u003c/h2\u003e\n\u003cp\u003e测压软件 最高并发3W\u003c/p\u003e\n\u003cp\u003ewebbench做测试时自身也会消耗CPU和内存资源，为了测试准确，需要将webbench安装在别的服务器上。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etar -xzvf webbench-1.5.tar.gz\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e webbench-1.5\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eapt-get install ctags\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emake \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e make install\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e测试\u003c/p\u003e","title":"006项目"},{"content":"单例模式 class A{ public: static A* getInstance(); static A* instance; private: A(); ~A(); }; A* A::instance = nullptr; //内存读写reorder不安全 导致双检查锁失效 //先分配内存 再执行构造器 最后返回给实例 //编译器的优化 A* A::getInstance(){ //读没有问题 写就有问题 //锁前检查 锁的粒度过大 锁后检查安全性 if(instance==nullptr){ mutex.lock(); if(instance==nullptr) instance = new A(); mutex.unlock(); } return instance; } 快排 归并 堆排 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; using namespace std; //快排 时间复杂度 平均nlogn 空间复杂度O(1) void quick_sort(int arr[], int l, int r){ if(l \u0026gt;= r) return; int x = arr[l+r \u0026gt;\u0026gt; 1]; int i = l-1, j = r+1; while(i \u0026lt; j){ while(arr[++i] \u0026lt; x); while(arr[--j] \u0026gt; x); if(i \u0026lt; j) swap(arr[i], arr[j]); } quick_sort(arr, l, j); quick_sort(arr, j+1, r); } //归并 //时间复杂度NlongN 空间复杂度N int tmp[105]; void merge_sort(int arr[], int l, int r){ if(l \u0026gt;= r) return; int mid = (l + r)\u0026gt;\u0026gt;1; merge_sort(arr, l, mid); merge_sort(arr, mid+1, r); //合并 int i = l, j = mid+1, k = 0; while(i \u0026lt;= mid \u0026amp;\u0026amp; j \u0026lt;= r){ //i和j注意了 if(arr[i] \u0026lt; arr[j]) tmp[k++] = arr[i++]; else tmp[k++] = arr[j++]; } while(i \u0026lt;= mid) tmp[k++] = arr[i++]; while(j \u0026lt;= r) tmp[k++] = arr[j++]; for(int i = 0; i \u0026lt; k; i++){ arr[l+i] = tmp[i]; } } //大根堆 把大交换上去 void heapify(int arr[], int r, int n){ int i = 2*r+1, j = 2*r+2; int mx = r; if(i \u0026lt; n \u0026amp;\u0026amp; arr[i] \u0026gt; arr[mx]) mx = i; if(j \u0026lt; n \u0026amp;\u0026amp; arr[j] \u0026gt; arr[mx]) mx = j; if(mx != r) { swap(arr[mx], arr[r]); heapify(arr, mx, n); } } //堆排序 堆化 堆顶取出交换到末尾去 void heap_sort(int arr[], int n){ for(int i = n; i \u0026gt;= 0; i--){ heapify(arr, i, n); //当前的点 总共的点 } //交换完成 for(int i = n-1; i \u0026gt;= 0; i--){ swap(arr[0], arr[i]); heapify(arr, 0, i); //总量减1 } } int main(){ int arr[]{1,93,6,45,2,7,8,45,2123,239,0,3}; int n = 12; // merge_sort(arr, 0, n-1); //如果从0编号 那么儿子节点为2i+1 2i+2 //最后一个节点是啥 heap_sort(arr, n); for(int i = 0; i \u0026lt; n; i++) printf(\u0026#34;%d \u0026#34;, arr[i]); puts(\u0026#34;\u0026#34;); return 0; } kmp算法 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;string\u0026gt; using namespace std; int Next[105]; void getNext(string p){ //按照左神讲的 考查的是当前位置的前一个字符串的最长前后缀 Next[0] = -1; Next[1] = 0; int cn = 0, i = 2; int n = p.size(); while(i \u0026lt; n){ if(p[cn] == p[i-1]) Next[i++] = ++cn; else if(cn) cn = Next[cn]; else Next[i++] = 0; //前后缀为0 } } void kmp(string p, string s){ //首先求next数组 getNext(p); int i = 0, j = 0; int m = s.size(); int n = p.size(); while(i \u0026lt; m \u0026amp;\u0026amp; j \u0026lt; n){ if(s[i] == p[j]) i++, j++; else if(Next[j] == -1) i++; //开头不匹配 else j = Next[j]; if(j==n){ cout\u0026lt;\u0026lt;i-n\u0026lt;\u0026lt;endl; //起始位置 j = Next[j-1]; i--; } } } int main(){ string text = \u0026#34;helloworldllo\u0026#34;; string pattern = \u0026#34;llo\u0026#34;; kmp(pattern, text); return 0; } LRU算法 strcpy和memcpy #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;string\u0026gt; #include \u0026lt;cstring\u0026gt; using namespace std; //内存拷贝函数 按字节拷贝 void* my_memcpy(void* dest, void* src, size_t count){ if(dest == NULL || src == NULL) return NULL; char* pdest = (char*) dest; char* psrc = (char*) src; while(count--){ *pdest++ = *psrc++; } return dest; } //字符串拷贝函数 仅用来拷贝字符串 char* my_strcpy(char* dest, const char* src){ if(dest == NULL || src ==NULL) return NULL; char* pdest = dest; while((*dest++ = *src++) != \u0026#39;\\0\u0026#39;); return pdest; } int main(){ char src[] =\u0026#34;hello\u0026#34;; char dest[100]; //my_memcpy(dest, src, strlen(src)); my_strcpy(dest, src); printf(\u0026#34;%s\\n\u0026#34;, src); return 0; } string类 class String{ public: String(const char* str = NULL); //通用构造函数 String(const String\u0026amp; str); //拷贝构造函数 ~String(); String\u0026amp; operator+(const String \u0026amp;str); String\u0026amp; operator+=(const String \u0026amp;str); char\u0026amp; operator[](const int n) const; String operator=(const String \u0026amp;str) const; bool operator==(const String \u0026amp;str)const; bool operator\u0026lt;(const String \u0026amp;str) const; bool operator\u0026lt;(const String \u0026amp;str) const; size_t size const; //获取长度 //流运算符\u0026gt;\u0026gt; \u0026lt;\u0026lt; private: char* data; //字符串 size_t length; //长度 } String::String(const char* str){ //通用构造函数 if(!str){ length = 0; data = new char[1]; *data=\u0026#39;\\0\u0026#39;; }else{ length = strlen(str); //对空指针调用strlen会导致内存错误 data = new char[length+1]; strcpy(data, str); } } String::String(const String\u0026amp; str){ //拷贝构造 length = str.length; data = new char[length+1]; strcpy(data, str.data); } //析构 String::~String(){ delete []data; length = 0; } //赋值重载 String\u0026amp; String::operator=(const String \u0026amp;str){ delete []data; length = str.length; data = new char[length+1]; strcpy(data, str.data); return *this; } 智能指针shared_ptr #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; using namespace std; template \u0026lt;typename T\u0026gt; class SmartPtr{ private: T * ptr; int* use_count(); SmartPtr(T* p); SmartPtr(const SmartPtr\u0026lt;T\u0026gt; \u0026amp; orig);//拷贝 SmartPtr\u0026lt;T\u0026gt;\u0026amp; operator=(const SmartPtr\u0026lt;T\u0026gt;\u0026amp; orig); ~SmartPtr(); } SmartPtr::SmartPtr(T* p){ ptr = p; *use_count = 1; } SmartPtr::~SmartPtr(){ //析构 delete ptr; ptr = nullptr; delete use_count; use_count = nullptr; } int main(){ return 0; } 写一个函数在main函数执行前先运行 #include \u0026lt;iostream\u0026gt; using namespace std; class Hello{ public: Hello(){ cout\u0026lt;\u0026lt;\u0026#34;before main!\u0026#34;\u0026lt;\u0026lt;endl; } }; Hello w; //全局变量在main之前执行 int main(){ cout\u0026lt;\u0026lt;\u0026#34;I am main\u0026#34;\u0026lt;\u0026lt;endl; return 0; } 匿名管道pipe #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(){ pid_t fd[2]; pipe(fd); //创建管道 int ret = fork(); if(ret \u0026gt; 0){ //父进程 父写 fd[0]读 fd[1]写 close(fd[0]); char *str =\u0026#34;hello world\\n\u0026#34;; write(fd[1], str, strlen(str)); sleep(1); }else if(ret == 0){ //子进程 子读 fd[1]关闭 close(fd[1]); char buf[1024]; int n = read(fd[0], buf, sizeof(buf)); //写到显示器上 write(1, buf, n); } return 0; } rand7产生rand10 leetcode470\nclass Solution { public: int rand10() { int t; while(true){ t = rand7() + (rand7()-1) * 7; if(t \u0026lt;= 40) return t%10 +1; }; return 0; } }; 反转二叉树 class Solution { public: TreeNode* invertTree(TreeNode* root) { //遍历所有点 然后交换左右孩子 dfs(root); return root; } void dfs(TreeNode* root){ if(!root) return; dfs(root-\u0026gt;left); dfs(root-\u0026gt;right); swap(root-\u0026gt;left, root-\u0026gt;right); } }; ","permalink":"//localhost:1313/posts/005%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","summary":"\u003ch2 id=\"单例模式\"\u003e单例模式\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eclass\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nl\"\u003epublic\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nf\"\u003egetInstance\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nl\"\u003eprivate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nf\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t    \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"nf\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//内存读写reorder不安全 导致双检查锁失效\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//先分配内存 再执行构造器 最后返回给实例\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//编译器的优化 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"nf\"\u003egetInstance\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e//读没有问题 写就有问题 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\u003cspan class=\"c1\"\u003e//锁前检查 锁的粒度过大 锁后检查安全性 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003emutex\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003einstance\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"nf\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003emutex\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eunlock\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"快排-归并-堆排\"\u003e快排 归并 堆排\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//快排 时间复杂度 平均nlogn 空间复杂度O(1) \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003equick_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eswap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003equick_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003equick_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//归并\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//时间复杂度NlongN  空间复杂度N\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e105\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003emerge_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003emerge_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"nf\"\u003emerge_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e//合并\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//i和j注意了\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//大根堆 把大交换上去\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eheapify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003emx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003emx\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003emx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003emx\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003emx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emx\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eswap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003emx\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eheapify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emx\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//堆排序 堆化 堆顶取出交换到末尾去\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eheap_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eheapify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//当前的点 总共的点\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//交换完成\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eswap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eheapify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//总量减1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[]{\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e93\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2123\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e239\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// merge_sort(arr, 0, n-1);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e//如果从0编号 那么儿子节点为2i+1 2i+2\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e//最后一个节点是啥\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nf\"\u003eheap_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%d \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003eputs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"kmp算法\"\u003ekmp算法\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e105\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003egetNext\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//按照左神讲的 考查的是当前位置的前一个字符串的最长前后缀\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecn\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ecn\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ecn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecn\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ecn\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ecn\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//前后缀为0\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003ekmp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//首先求next数组\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nf\"\u003egetNext\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//开头不匹配\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//起始位置\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;helloworldllo\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003epattern\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;llo\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003ekmp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epattern\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"lru算法\"\u003eLRU算法\u003c/h2\u003e\n\u003ch2 id=\"strcpy和memcpy\"\u003estrcpy和memcpy\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstring\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//内存拷贝函数 按字节拷贝\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nf\"\u003emy_memcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edest\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epdest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epsrc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epdest\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epsrc\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//字符串拷贝函数 仅用来拷贝字符串\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nf\"\u003emy_strcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edest\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epdest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"sc\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003epdest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//my_memcpy(dest, src, strlen(src));\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nf\"\u003emy_strcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%s\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"string类\"\u003estring类\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eclass\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nl\"\u003epublic\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//通用构造函数\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//拷贝构造函数\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e+=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//获取长度\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e//流运算符\u0026gt;\u0026gt; \u0026lt;\u0026lt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"nl\"\u003eprivate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//字符串\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//长度\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//通用构造函数\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sc\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003estrlen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//对空指针调用strlen会导致内存错误\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003estrcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//拷贝构造\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003estrcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//析构\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e::~\u003c/span\u003e\u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edelete\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//赋值重载\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edelete\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003estrcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"智能指针shared_ptr\"\u003e智能指针shared_ptr\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstring\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003etemplate\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kr\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eclass\u003c/span\u003e \u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nl\"\u003eprivate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nf\"\u003euse_count\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eorig\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//拷贝\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eorig\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eptr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003euse_count\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e::~\u003c/span\u003e\u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e  \u003cspan class=\"c1\"\u003e//析构\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003edelete\u003c/span\u003e \u003cspan class=\"n\"\u003eptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eptr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edelete\u003c/span\u003e \u003cspan class=\"n\"\u003euse_count\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003euse_count\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"写一个函数在main函数执行前先运行\"\u003e写一个函数在main函数执行前先运行\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eHello\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003eHello\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;before main!\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eHello\u003c/span\u003e \u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//全局变量在main之前执行 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;I am main\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"匿名管道pipe\"\u003e匿名管道pipe\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unistd.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003epid_t\u003c/span\u003e \u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003epipe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//创建管道\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003efork\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//父进程 父写 fd[0]读 fd[1]写\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"nf\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;hello world\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nf\"\u003estrlen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003esleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//子进程 子读 fd[1]关闭\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"nf\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1024\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e//写到显示器上\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"nf\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"rand7产生rand10\"\u003erand7产生rand10\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://leetcode-cn.com/problems/implement-rand10-using-rand7/\"\u003eleetcode470\u003c/a\u003e\u003c/p\u003e","title":"005数据结构"},{"content":"B+树 具有n个关键字的节点含有n个分支。而在B树中，具有n个关键字的节点含有n+1个节点。 B+树的叶子节点包含了所有关键字，并且包含信息。 B+树非叶子节点只起索引作用，不存数据。 B+数在叶子节点使用指针将前后磁盘块中的索引连接起来，形成一个线性链表，方便范围查询。 什么是索引 索引是数据表中对字段进行排序的一种数据结构。常用的索引有\nB树 哈希索引 全文索引 Rtree索引\nAVL树，B树，B+树，红黑树，哈希表。\n哈希表和B树不利于范围查找。红黑树在数据量大的时候性能会下降。\n**聚集索引：**数据和索引在一起的。\n**非聚集索引：**索引文件和数据文件是分离的。\n联合索引：对多个字段同时建立的索引。Mysql从左到右的使用索引中的字段，一个查询可以只使用索引中的一部份，但只能是最左侧部分，跳跃索引查询就会导致索引失效。\nB树和B+树的区别 B树：叶节点具有相同的深度，所有索引元素不重复，节点中的数据索引从左到右递增排列。 B+树：非叶子节点不存储数据，只存储索引，叶子节点包含了全部的关键字且存储数据。叶子节点用指针连接从左往右递增排序，提高区间访问的性能。 mysql存储引擎myISAM和InnoDB 存储引擎是基于表的，而不是数据库。\nInnoDB引擎：支持事务，行锁（适合高并发），支持外键。mysql5.5版本后的默认存储引擎 myISAM引擎：不支持事务，不支持外键，支持表锁。优势是访问的速度快。mysql5.5版本前的默认存储引擎。myISAM索引文件和数据文件是分离的。查询较多的更新较少的情况下使用myisam存储引擎。 数据库三大范式 数据库中的所有字段都是不可分割的原子值 满足第一范式的前提下，除主键外的每一列都必须完全依赖于主键。如果不完全依赖，只能发生在联合主键下。 满足第二范式的前提下，除开主键列的其他列之间不能有传递依赖关系。 事务的四个特性ACID 事务是作为单个逻辑工作单元执行的一系列操作。要么完全执行，要么完全不执行。\n**原子性 ：**同一事务中多个操作不能分割，必须是一个整体。 **一致性 ：**事务操作前后的总量保持一致。 **隔离性 ：**多个事务之间的操作互不干扰。 **持久性：**事务提交以后，对数据库中数据的改变是永久的。 事务隔离级别 事务分为四个隔离级别：分别是读未提交，读提交，可重复读，串行化。从前往后隔离级别依次递增，同时执行效率依次下降。mysql的默认隔离级别是可重复读。\n读未提交：会产生脏读，即一个事务读取了另一个事务未提交的内容。 读提交：可以解决脏读问题，但是会产生不可重复读，即一个事务在执行的过程中得到的结果不一致。 可重复读：可以解决不可重复读的问题，但会产生幻读，即一个事务无法看到另一个事务已经提交的内容。 **串行化：**可以解决幻读问题。当同一张表被另一个事务操作时，其他事务的写操作是不可以进行的，进入串行化排队，直到另一个结束，同时还为超时的情况下才可以继续执行。 set global transaction isolation level read committed # 修改隔离级别\u0026#39; select @@x_isolation # 查看隔离级别 主键和外键约束 主键：**唯一且非空。**一个表有且只能由一个主键约束。创建主键会自动创建对应的索引，同样删除主键，对应的索引也会被删除。\n外键约束：如果定义了外键约束，主表中没有的数据在子表中是不可以被使用的。主表中的记录被子表引用，是不可以被删除的。\ninner join 和 left join 等值联接：inner join返回两个表中联接字段相等的行 左联接：left join 返回左表所有记录和右表中联接字段相等的记录，如果左表中的记录在右边不存在，则对应字段设为null。 redis 是C语言编写的基于内存可持久化的key-value内存数据库，使用的是epoll单线程模型。常用的数据结构有set， list，string, hash, sorted set。\n查询 分组查询：count() sum() max() min() avg()\n聚合查询：7种 A B A∪B A∩B A - A∩B B - A∩B A∪B - A∩B\n左连接： A - A∩B 右连接：B - A∩B 内连接：A∩B\n悲观锁和乐观锁 悲观锁： 每次去拿数据时都认为别人会修改，所以每次在拿数据的时候都会上锁。悲观锁由数据库自己实现，共享锁和排他锁是悲观锁的不同实现。悲观锁的缺点：效率低，并行差，增加死锁的概率。 乐观锁：每次去拿数据都认为别人不会修改，所以不会上锁。乐观锁适用于读多，写少的场景。乐观锁常见的实现方式：版本号机制和CAS自旋算法。乐观锁的缺点：ABA问题，循环时间长开销大，只能保证一个共享变量的原子操作。 explain 查看执行计划 使用explain关键字可以模拟优化器执行sql查询语句，从而知道mysql是如何处理sql语句的。分析查询语句或表结构的性能瓶颈。\nexplain + sql语句 show profile 用来分析当前会话中语句执行的资源消耗情况。\n什么时候应该创建索引 频繁查询字段 什么时候不应该创建索引 where条件里用不到的字段 频繁更新的字段 表记录太少\u0026lt;300W 重复且平均的表字段 B+树 B+树是B树的变形，B+树非叶子节点只存索引，不存数据，叶子节点存储所有的索引和数据。B+树三层可以存储上百万条数据，磁盘IO最多三次，每次读取磁盘块到内存后，使用二分查找找到索引的位置。\nB+树是聚集索引，数据和索引在一起。B+树使用指针将叶子节点的连接起来。\nB树 是一种多路平衡二叉树，m阶B树，每个节点最多可以有m-1关键字。所有叶子节点在同一层。每个节点保存索引和数据。\n索引 索引是按照某个字段排序的数据结构。\nACID 事务时单个逻辑工作单元的一系列操作。\n原子性：事务的操作是不可分割的，要么完全成功，要么完全失败。\n一致性：事务操作前后的总量保持不变。\n隔离性：事务之间的操作应该相互隔离。\n持久性：事务一旦提交后，数据库中的值不可更改。\n事务的隔离级别 读未提交：产生脏读，即一个事务可以读取另一个事务未提交的内容。 读提交：解决脏读，产生不可重复读，即事务的两次读取结果不一致。 可重复读：解决不可重复读，但是会产生幻读，即一个事务明明提交了，但是在另一个事务中没有更新。 串行化：当两个事务都在写入内容时，必须排队，当两个事务提交后，才可以执行后续事务。 数据库三大范式 数据库中的所有字段都是不可分割的原子值 在满足第一范式的前提下，除开主键外的其他列都必须完全依赖于主键。 在满足第二范式的前提下，除开主键外的其他列之间不能有传递依赖关系。 myisam和innoDB myisam不支持事务，不支持外键，支持表锁。查询速度较快。适合读多更新少的表。\ninnoDB支持事务，支持外键，支持行锁，因为锁的粒度比较小，所以适合高并发。\n持久化 利用永久性存储介质将数据进行保存，在特定的时间将保存的数据进行恢复的机制叫做持久化。确保数据安全。\n将当前数据状态进行保存，快照形式。RDB 将数据的操作过程进行保存，日志形式。AOF ","permalink":"//localhost:1313/posts/004%E6%95%B0%E6%8D%AE%E5%BA%93/","summary":"\u003ch2 id=\"b树\"\u003eB+树\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e具有n个关键字的节点含有n个分支。而在B树中，具有n个关键字的节点含有n+1个节点。\u003c/li\u003e\n\u003cli\u003eB+树的叶子节点包含了所有关键字，并且包含信息。\u003c/li\u003e\n\u003cli\u003eB+树非叶子节点只起索引作用，不存数据。\u003c/li\u003e\n\u003cli\u003eB+数在叶子节点使用指针将前后磁盘块中的索引连接起来，形成一个线性链表，方便范围查询。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"什么是索引\"\u003e什么是索引\u003c/h2\u003e\n\u003cp\u003e索引是数据表中对\u003cstrong\u003e字段\u003c/strong\u003e进行排序的一种\u003cstrong\u003e数据结构\u003c/strong\u003e。常用的索引有\u003c/p\u003e","title":"004数据库"},{"content":"volatile 用来告诉编译器不要对该变量做任何优化，编译器每次操作该变量时，一定要从内存中取出，而不是使用寄存器中与存在的值，因为值可能已经发生了改变。\n应用场景：\n并行设备的硬件寄存器（如状态寄存器）。 多线程中共享变量。 const 用于限定变量，函数和指针不可改变。\nconst限定全局变量时，变量放在静态区。const限定局部变量时，变量放在栈区。 const修饰类中的成员函数时，表示不可对类的对象更改，如果需要更改类中的成员变量，可以使用mutable关键字。 内联函数和宏定义 宏定义在预编译时展开，内联函数在编译时展开。 宏定义只是简单的文本替换，不进行参数的有效性检查。内联函数会进行类型检查，然后将函数体嵌入到目标代码中。 宏定义不加括号容易出错。内联函数没有普通函数的栈操作，效率很高，但是不正确的时候内联函数会导致代码体积过大。 static 静态全局变量，静态局部变量，静态成员变量，静态成员函数\n静态全局变量和静态局部变量都放在静态区，只在声明时初始化一次，仅在本文件中可见，变量在程序运行期间一直存在。静态局部变量的作用域范围仅在局部，下次调用紧接着上次调用的结果值改变。 静态成员函数和静态成员变量没有this指针，必须通过类名才能访问。 malloc 和 new malloc和free是库函数，new和delete是运算符，可以重载。 malloc申请内存时需要指定内存大小，返回一个void*类型，通常需要强转。new申请内存时无需指定内存大小，返回一个对应类型的指针。 malloc不进行初始化。new在创建非内部类型的对象时，调用构造函数初始化，消亡时会调用析构函数。 malloc申请失败时返回null指针，new申请失败时抛出异常。 指针和引用 引用创建时必须初始化，初始化后不可以改变。指针创建时可以不初始化，初始化时需要分配内存，初始化后也可以改变。引用比指针安全。 引用不存在空值引用，指针可以指向空值 引用的本质是指针常量，由编译器完成转换。 extern 可以被其他源文件调用。 告诉编译器，extern限定的代码使用C语言的编译和连接方式。因为C++支持重载，而C不支持，所以可能导致函数编译后的名称不一致，从而找不到对应的函数。 多态的原理 多态分为静态多态和动态多态。静态多态是通过重载和模板实现的，动态多态是通过继承和虚函数实现的。\n动态多态是让基类的指针或引用指向派生类的对象实现的。定义为虚函数的基类，编译器会自动创建一个虚函数表，派生类在继承时会继承这个虚函数表，每个创建的对象拥有一个虚函数表指针，这个指针指向虚函数表，如果派生类重写了基类的虚函数，则对应的虚函数表入口地址发生了更新。虚函数表为所有对象所共享，通常放在代码段。\n什么是进程 进程是分配资源的基本单位，是程序运行的实例。进程通常分为数据段，代码段和进程控制块。进程的地址空间相互独立，一个进程不可访问另一个进程的数据。进程切换时的开销相对于线程来说比较大，需要保存寄存器的值和刷新块表，切换地址空间等。\n进程间的通信方式 有名管道pipe 无名管道fifo 消息队列 共享内存 信号量 信号 套接字 线程是什么 线程是CPU调度的基本单位。线程是进程的一个执行流程。一个进程中可以由多个线程。线程共享进程的地址空间。线程自身几乎不拥有系统资源，除了栈和寄存器。线程间的通信较为容易。但是需要同步。常用的同步机制有互斥锁，读写锁，信号量，条件变量。\n线程共享 进程打开的文件描述符表 进程ID和组ID 信号的处理方式 打开的工作目录 进程的地址空间(堆区，栈区，共享区) 线程独享 线程ID 线程的寄存器 线程的栈 信号屏蔽字 线程优先级 错误返回码errno 信号 信号是一种不精确的通信方式。常用的信号有15号信号，杀死进程 29号进程 11号段错误\nhttp和https的区别 https是安全版的http协议。\nget和post的区别 get用来获取资源，post用来创建资源。\nget将数据放在url地址栏中，使用问号与url分割，数据间用取地址符分割。post将数据放在请求体中。\n安全性上get放在url容易暴露隐私信息，而post放在请求体中可以适当的避免。\nget在传输的数据受url地址栏的限制，post不受这种限制\nget的操作是幂等的，多次操作产生的影响相同，而post是非幂等的\nB树和B+树的区别 B树是多叉平衡树，**M阶的B树，每个节点最多有M-1个关键字，**每个节点的关键字都按照从小到大的顺序排列，因此查询时可以使用二分查找法。\nB树中所有叶子节点都位于同一层，每个节点都存有索引和数据。\nB树的优点在于查询单个数据时，由于每个key都存有对应的date，查询到后可以直接取回。\nB+树非叶子节点只存索引不存数据，每个叶子节点增加一个指向相邻接叶子节点的指针，所有的节点都存在叶子节点。B+树的优点在于范围查询时，可以利用相邻的指针获得指定范围内的数据。\n网络拥塞 慢启动 拥塞避免 快速重传 快恢复 TCP和udp的区别 tcp面向连接的可靠的流式协议，具有超时重传和确认等机制。\nudp面向无连接的报文协议，发出去就不管了，收则全收，丢则全丢。\n智能指针 unique_ptr\nshared_ptr\nweak_ptr\n四种强制类型转换 const_cast去掉const属性的转换，包括const指针和引用\nstatic_cast用于低风险的转换，比如字符型转整形\ndynamic_cast 用于具有继承关系的派生类和子类的转换，当基类转为子类时，如果转换失败会返回NULL\nreinterpret_cast 任何类型都能转，风险较高\npost和put的区别 post用来创建资源，put用来更新资源\npost是非幂等的，put是幂等的。\n8中请求方法：\nhttp 1.0: get post head\nhttp 1.1: put delete options connect trace\nmmu内存管理器 主要作用：虚拟内存到物理内存的地址映射。 设置修改内存访问级别。\n虚拟内存的作用 解决主存容量有限 分隔进程，保证进程空间彼此独立不受干扰 基于局部性原理进行页面替换 虚拟内存的大小由计算机的地址总线决定\ncache名字和TLB命中没有必然联系，是两种独立的机制。\nCPU和Cache之间交换的单位是字节，Cache和内存之间交换的单位是块。\ncoredump文件 gdb可以用于分析coredump文件。coredump文件含有进程被终止时内存/CPU寄存器和各种函数调用栈的信息。\n产生coredump文件的原因：\n内存访问越界 多线程使用了线程不安全的函数 多线程读写的数据未加锁保护 栈溢出 core文件没有符号表信息，必须结合可执行文件才可调试\n模板特化 全特化：模板参数被指定未确定的类型\n偏特化：模板参数没有被全部确定，需要编译器在编译时进行确定。只能偏特化类模板，不能偏特化函数模板。\n别名模板和变量模板属于语法糖\n元编程 在编译时计算出运行时需要的常数，类型和代码的方法。\n右值引用 右值引用指向要被销毁的对象。右值要么是字面常量，要么是在表达式求值过程中创建的临时对象。\nmove函数将左值转换为右值，调用move函数后源对象只能赋值或销毁。\noverride override在子类中标记某个函数，表示想要覆盖已有的虚函数，如果没有覆盖，编译器会报错。\n加作用域运算符调用特定类的虚函数\n内联函数的优劣 优点：减少函数调用的开销，包括寄存器值的保存和实参的拷贝等。 缺点：增加函数体积，可能导致cache装不下，从而减少了cache的命中率。 inline只是一个请求，编译器有权拒绝。\n拷贝构造函数 调用场景：\n一个对象以值传递传参 一个对象以值传递的方式从函数返回 一个对象通过另一个对象初始化 空类 占有一个字节\n有构造，析构，拷贝，赋值运算符，取地址运算符。\n构造函数可以被重载，析构函数不可以被重载且不能带参数。\nexplicit explicit取消隐式转换，类中构造函数默认是implicit\nexplicit关键字的作用是防止类构造哈桑农户的隐式自动转换，只对有一个参数的构造函数有效。\n堆和栈的区别 申请方式不同。栈由操作系统自动分配，堆需要程序员自己申请。 生长方向不同。栈由高地址向地址生长，是一块连续的内存区域。堆由地址向高地址生长，是不连续的内存区域。在一个链表中记录空间内存地址。 分配速度。栈由系统分配，速度较快。堆使用new分配，速度较慢，且容易产生内部碎片。 C++ 和python的区别 python是解析性语言，无需编译，方便快捷，跨平台性很好。\nC++是编译型语言，先编译后执行，编译后通常不能跨平台。\npython使用严格的缩进来表示不同级别的代码块，在C++中使用花括号。\n索引 select语句调用函数后就不会用到索引\nstatic的作用 static可以用来修饰函数和变量。修饰全局变量和局部变量时都是放在静态区，static变量只初始化一次，在程序结束时销毁，全局和局部的区别在于作用域不同。static可以修饰普通成员函数，表明这个函数只在本文件中有效。static修饰类成员变量是，这些变量为这个类所共享，static修饰类成员函数时，也是所有对象共享这个函数，该函数中没有this指针。同时static类成员函数中只能调用static修饰的函数。\n静态存储区 存放的static修饰的全局变量和局部变量，const修饰的变量以及字符串。 数据段和静态区的区别 数据段存放的是代码的二进制指令。静态区是变量。\n虚函数的实现机制 每个含有虚函数的类都有一个虚函数表，类创建的对象都由编译器自动生成一个虚函数表指针来指向虚函数表。子类继承时会继承这个虚函数表，在子类中如果重写了父类定义的虚函数，这个虚函数中的对应内容会替换为重写的内容。当父类指针或引用指向子类对象时，调用对用对应的虚函数时会根据虚函数表指针找到虚函数表，然后从表中找到重写的虚函数入口地址，然后实现对应的行为。虚函数使代码更具有扩展性。\npython的多态 子类继承父类，子类重写父类的函数，调用时就自动调用了子类的函数。\nC++和python的区别 C++是编译型语言，需要先编译再执行，编译后通常不可以跨平台。 python是解释型语言，直接运行，跨平台好。上手快，容易浮于表面不够深入。 python带来的收益 快速上手机器学习和深度学习，直接调用大量的库函数。\nSTL底层容器和实现原理 vector是动态数组，分配连续的内存，2倍扩容。 list双向表，插入删除效率高。 map和set红黑树，有序的容器。 stack和queue底层可能都是数组实现 unordered_map和unordered_set哈希表。 array栈上分配的数组执行效率快。 tuple元组多数据类型的集合。 快排 基于交换和分治的算法， 平均nlogn 最坏n平方\n四次挥手 主动关闭方发送FIN标志位，自身状态进入FIN_WAIT_1被动关闭方收到FIN后，发送ACK确认，自身进入CLOSE_WAIT状态，当主动关闭方收到ACK后，进入FIN_WAIT_2状态，此时主动关闭方只能接收数据，不能发送数据，因为TCP是全双工的，所以要等待被动关闭方关闭后才结束。此时进行了两次挥手，双方进入半关闭状态。当被动关闭方需要关闭时，发送FIN标志位，发出后自身状态进入LAST_ACK状态，如果对方收到FIN标志位后，发送ACK应答，自身进入TIME_WAIT状态，等待2MSL后关闭连接。等待的2MSL是报文在网络传输中一个来回的长度。确保最后一个ACK能被对方收到。\nstatic关键字 static可以修饰普通函数变量和类成员函数和变量。\nstatic修饰普通变量时，分为全局变量和局部变量，两者都保存在静态区，并且只初始化一次，在整个程序运行期间一直存在。全局变量和局部变量的区别是作用域不同。 static修饰普通函数时，说明此函数只在本文件中可见，防止多个文件的同名冲突。 static修饰类中的成员变量时，必须在类中声明，在类外初始化，初始化的时候分配内存，所有的static成员变量为所有对象共享。 static修饰类中的成员函数时，只能调用static的变量和函数，没有this指针，所有对象共享这个函数，可以使用类名直接调用。 变量分为全局变量和局部变量，static修饰全局变量时，表示这个变量只在本文件中可见\nconst关键字 const用于限定变量指针和函数不可改变，方便编译器做类型检查。\ncons修饰变量时必须初始化。const全局变量通常放在静态区，const局部变量放在栈区。 cosnt修饰成员函数时，函数中的成员变量不可更改，如果要修改成员变量需要声明为mutable const修饰指针有两种，常量指针和指针常量，常量指针是指针的指向的值不可改变，而指针的指向可以改变。指针常量是指向不可变，而值可变。 const和define的区别 const明确指定类型，编译器对类型做检查，而define没有类型也不 检查。 const分配内存，而define不分配。 const在编译期处理，而define在预编译期进行宏替换。define的宏替换不加括号会产生严重的影响。 指针和引用的区别 指针保存的是所指对象的地址，而引用是所指对象的别名。指针通过解引用间接访问所指的对象，而引用直接访问。 指针可以有多级，而引用最多两级。当有两个取地址符时，是右值引用，右值引用可以减少深拷贝的次数。 指针定义时可以不初始化，即使初始化后也可以改变。而引用定义时必须初始化，初始化后不可以改变。 引用的本质是指针常量，编译器帮助转换。指针常量的指向不可以改变，值可以变。 define与内联函数的区别 内联函数是一个函数，在编译期插入到调用的地方，而define在预处理期进行替换。 内联函数避免了函数调用时的压栈和参数拷贝等操作，提高了性能。 内联函数对参数有类型检查。define不加括号容易出错。 new和malloc的区别 malloc是库函数，new是运算符 malloc只分配内存不初始化，而new不仅分配内存也初始化。new分配内存以后自动调用构造函数。 malloc分配内存时必须指定内存大小，而new可以自动计算。malloc分配完成后返回的是void*类型，需要强转，而new返回的是对应类型的指针。 malloc分配内存失败时返回NULL，而new分配内存失败时抛出bad_alloc异常。 http和https的区别 两者都是用于客户端和服务器端通信。\nhttps是http的安全版。\n主要区别在于：\nhttp是明文传输，https是密文传输。 http默认端口是80， https的默认443 https需要验证服务器端的身份，如果CA证书不正确则会中断通信。 CA证书需要成本，加密解密的过程增加CPU和内存的开销。 https增加了ssl层，用于确保传输的安全性。\n通信前先进行ssl层的握手，首先客户端ssl版本号和加密组件发送给服务器端。\n服务器端筛选出可用的ssl版本号和加密算法同时加上CA证书发送给客户端。\n客户端验证CA证书的有效性，如果无效则中断通信。\n若有效客户端发送加密的pre-master secret随机密码串，这一步使用的是非对称加密，用于协商后面对称加密的密钥，所以这一步不能被篡改和截获。客户端得到服务器端的响应后，且验证通过后，后续就使用对称加密加密算法进行加密。然后进行TCP三次握手。\nhttp1.0和http1.1的区别 http1.0只支持短连接，即一次通信完成后就立即断开\nhttp1.1支持长连接，一次TCP建立以后，可以进行多次请求。\nhttp1.0只提供了三种请求方法：get post head\nhttp1.1增加了五种请求方法：put delete connect trace options\nhttp1.1增加了许多状态码，比如100 continue 表示已经收到，等待后续的资源。206 partial content 部分资源\nhttp1.1支持一个物理主机上可以有多个虚拟主机共用一个IP\n","permalink":"//localhost:1313/posts/%E5%85%AB%E8%82%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","summary":"\u003ch2 id=\"volatile\"\u003evolatile\u003c/h2\u003e\n\u003cp\u003e用来告诉编译器不要对该变量做任何优化，编译器每次操作该变量时，一定要从内存中取出，而不是使用寄存器中与存在的值，因为值可能已经发生了改变。\u003c/p\u003e\n\u003cp\u003e应用场景：\u003c/p\u003e","title":"八股基础"},{"content":"逻辑用语千万条，第一首先往里套。 首先，其次，然后，最后。 第一，第二，第三，第四。 书籍 《C++ primer》 第五版 《后台开发》 徐晓鑫 《linux高性能服务器编程》 游双 《redis设计与实现》黄健宏 《muduo库》陈硕 static static的使用可以分为两类，一类是用在普通变量和函数上，另一类是用在类中。\n普通变量分为全局变量和局部变量。声明为静态全局变量是在全局区分配内存，并且只在当前文件可见，在文件之外是不可见的。其他文件定义同名变量不会发生冲突。变量的值只在第一次执行时进行初始化。声明为静态局部变量时与全局变量类似，只是作用域为局部作用域。 静态普通函数，只在当前文件中可见，其他文件中定义同名函数不会发生冲突。 static用在类中，首先是静态成员变量，**在类中声明，类外初始化。**所有对象共享一份数据。 然后是静态成员函数：所有对象共享同一个函数，静态成员函数只能访问静态成员变量。 多态 多态分类两大类：静态多态和动态多态。静态多态是重载和模板。动态多态：也叫运行时多态，是通过继承和虚函数实现的。在具有继承关系的子类中，子类重写父类的虚函数，通过父类引用或指针指向子类对象时，产生不同的行为叫做多态。\n多态的核心在于虚函数表指针，每个对象都有一个虚函数表指针，虚函数表指针指向一张虚函数表，表中记录了虚函数的入口地址，如果子类重写虚函数后，这个地址就会替换掉。多态的好处在于更方便程序的扩展，坏处在于每个对象多了一个4字节的指针，同时每次查询虚函数表需要耗时。\n智能指针 C++11有3个智能指针，分别是unique_ptr, shared_ptr和weak_ptr\nunique_ptr独享指针的所有权，无法进行拷贝构造赋值的操作，只能通过move函数进行所有权的转换。 shared_ptr共享对象，它使用引用计数来保存当前有多少个智能指针在引用这个对象，当引用计数降为0时，对象会被销毁。 weak_ptr称为弱引用，用于辅助shared_ptr正常工作，主要解决shared_ptr可能会产生的环形引用问题。weak_ptr不会增加对象的引用计数，共享指针可以直接赋值给弱指针，同时弱指针可以使用lock函数来获取shared_ptr对象 malloc和new malloc和new都是在堆上开辟内存，进行动态的管理。\nnew是操作符，malloc是库函数 malloc只负责开辟内存，没有初始化功能。new不但能开辟内存，还可以初始化。 malloc必须指定开辟内存的大小，并且返回类型为void*，因此malloc的返回值一般都需要进行类型转换。new可以自动计算出所需内存的大小，并且返回指定类型的指针。 malloc和new如果操作是内置数据类型两者基本类似，不同在于申请失败时。malloc申请失败时返回**NULL。**new申请失败抛出异常。 自定义类型时，new先调用operator new函数申请空间，然后在申请的空间上执行构造函数。 C++内存模型 从高地址到低地址\n环境变量和命令行参数 栈区 共享区 堆区 未初始化数据段.bss 初始化数据段.data 代码段.text 指针和引用的区别 指针保存的是所指对象的地址，而引用是所指对象的别名。指针需要通过解引用间接访问对象的值，引用可以直接访问。 指针可以有多级指针，而引用最多两级。并且两个取地址符是右值引用。右值引用是为了减少深拷贝的次数。 指针可以不初始化，即使初始化以后也可以改变。而引用必须初始化，同时初始化以后不许改变。 引用的本质是指针常量。指针常量不可以修改指向，但是可以修改指向的值。常量指针刚好与之相反。 vector底层原理 首先，vector的基类是三根指针，分别是start/finish/end_of_storage用来指示当前分配到的空间所用的起始位置，终止位置和容量尾部。然后，当finish指针到达end_of_storage的位置时，操作系统会寻找当前容量大小2倍的连续内存空间，并且将旧内存中的数据拷贝到新内存，然后释放旧内存。其次，如果重新分配了内存，原来的迭代器就会失效。频繁的开辟新内存比较耗时。如果可以预知使用的大小，可以使用reserve函数，预先开辟足够大的空间。或者使用swap函数收缩内存空间。\n代码生成可执行文件的过程 主要分为四个步骤\n预编译阶段：对g++编译器指定-E参数，生成.i文件。这个阶段的主要工作是将所有的宏展开，去掉所有的条件预编译指令，将所有的头文件包含进来，删除注释等。 编译阶段：对g++编译器指定-S参数，生成.s汇编文件。这个阶段的主要工作是对代码的语法，语义和词法等进行分析。 汇编阶段: 对g++编译器指定-c参数，生成.o二进制文件。 链接阶段：将各个模块之间的相互引用处理好。把所有的静态库用到的目标文件装入程序中，并进行统一编址，然后进行重定位，即逻辑地址到物理地址的转换。 静态库与动态库 静态库：命名方式为lib开头加上自定义的静态库名，然后以.a结尾。静态库实际上是一组目标文件的集合，再链接阶段与调用的程序生成可执行文件。静态库的优点在于：**代码加载速度快，发布程序时，不需要提供对应的库；**缺点时：可执行文件体积大，**同时如果静态库有修改，调用的程序需要重新编译，**而编译的耗时比较久。 动态库：命名方式为lib开头加上自定义的动态库名，然后以.so结尾。动态库首先生成与位置无关的目标文件，然后再运行时加载到内存。优点是：动态库可以共享，节省了系统资源，动态库进行修改后，无需重新编译。缺点是加载速度比静态链接慢，发布程序时，需要提供动态库。 符号表 每个目标文件除了拥有自己的数据和二进制代码外，还提供了3个表：\n**未解决符号表：**提供了所有在该编译单元里引用但是定义并不是在本编译单元的符号及其出现的地址。【引用无定义】将extern声明的变量置入未解决符号表。【外部链接】 **导出符号表：**提供了本编译单元具有定义，并且愿意提供给其他单元使用的符号及地址。【有定义肯让外用】普通变量及其函数被置入导出符号表。 **地址重定向表：**提供了本编译单元所有对自身地址的引用的记录。static声明的全局变量放入地址重定位表中。【内部链接】 指针常量 int* const p = \u0026amp;a 指针常量必须初始化，一旦初始化完成，就不能再修改它的值，即指针的指向不可变。\n引用的本质是指针常量\n声明和定义的区别 声明是告诉编译器有这个变量和函数的存在，但是需要到其它地方去寻找。 定义包含了声明，但是声明不包含定义。 定义时才分配存储空间。 C和C++的区别 设计思想上： C是面向过程的结构化语言，CPP是面向对象的语言 语法上： CPP具有三大特性，封装继承多态 CPP相对于C增加了许多类型安全的功能，比如四种强制类型转换 CPP支持范式编程，如模板类，函数模板等 struct和class的区别 共同点：C++中，可以用struct和class定义类，都可以继承。\n不同点：struct默认继承权限和默认访问权限时public class类的默认继承权限和访问权限时private。\nvolatile关键字 对类型额外修饰的作用，类似于const。告诉编译器不要对这样的对象进行优化，因为该对象的值可能在程序的控制或检测之外被改变。\nconst关键字 const 可以用于限定变量，指针和函数不可改变，同时明确制定了类型，可以方便编译器做类型检查，也增加了代码的可读性。\nconst修饰变量必须初始化。如果是全局的const变量，通常放在静态区。在局部声明的const变量放在栈区。\nconst修饰成员函数时，函数中的成员变量不可改变，除非该变量特别声明为mutable\nconst可以用来修饰指针，称为常量指针const int *p 指针的指向可以改变，但是不能改变指针指向的值。\nconst修饰常量的指针叫做指针常量，int* const p 指针的指向不可以修改，指针指向的值可以修改。指针常量必须初始化。\nconst可以明确指定类型，而宏定义没有数据类型。\ndefine宏是在预处理阶段展开。const常量是编译运行阶段使用。\n宏定义不分配内存，变量定义分配内存。\nextern关键字 引入同一模块在其他文件中定义的全局变量和函数。 如果在C++里调用了C库定义函数，那么需要使用extern \u0026quot;C\u0026quot; 标识这个函数，告诉编译器使用C的方式进行编译，防止C++的编译方式导致命名重整，无法找到对应的C函数。命名重整的原因在于**C++支持函数重载，而C不支持。**所以C++编译时增加了函数参数的标识符。 extern通常放在为解决符号表中，表示定义不在本文件而引用的变量。 this关键字 解决同名冲突 返回对象本身 this指针的本质是指针常量，指针的指向不可以修改。\nmove函数 将左值强制转换为右值引用，右值引用可以减少一次对象的析构和对象的构造。\n右值引用可以减少深拷贝的次数。\n段错误 段错误通常发生在**访问非法内存地址的时候。**系统会发送一个SIGSEGV11号信号告诉当前进程，进程采取默认的捕获方式，即终止进程。\n野指针 试图修改字符串常量的内容 auto关键字 让编译器能够根据初始值的类型推断变量的类型。当处理复杂类型，比如STL中的类型时，优势最明显。auto p = vt.begin()\n四种强制类型转换 static_cast 低风险的转换，比如整数转浮点数，字符型转整形 const_cast 去掉const关键字的转换，可以去掉带const的指针和引用 dynamic_cast 使具有继承关系的基类转换为派生类，如果不可以转换则返回NULL reinterpret_cast 指针或引用的转换，风险较高 RTTI run time type identification 运行时类型识别。**常常结合typeid()和dynamic_cast实现。**可以根据当前调用的指针是何种类型，经过dynamic_cast转换后，调用非虚函数。**dynamic_cast只能用于指针和引用的转换，要转换的类型中必须包含虚函数，转换成功返回子类的地址，失败返回NULL。**typeid返回一个type_info对象的引用。\n构造函数不能是虚函数 虚函数是通过虚函数表指针来调用的，而虚函数表指针存在对象内存空间。当一个对象调用构造函数时，该对象还没有实例化，即没有分配内存空间，所以虚函数表指针无法找到。\n析构函数尽量是虚函数 析构函数不是虚函数容易引起内存泄漏。\n为了实现多态的动态绑定，通常将基类指针指向派生类对象，当指针销毁时，如果析构函数不是虚函数，根据析构函数在继承中的调用顺序，则派生类对象将不会被析构，造成内存泄漏。\n析构函数不能抛出异常 析构函数抛异常，则异常点之后的的程序不会执行，如果异常点之后有释放资源的操作，则这部分资源无法释放，导致内存泄漏。noexcept\n内存泄漏 不再需要使用的内存单元，没有及时释放。memcheck和valgrind检测内存泄漏的工具。使用RAII资源获取就是初始化和智能指针。\n野指针 一些内存的单元已被释放，之前指向它的指针还在被使用。\nvector和list的区别 vector是动态数组，在内存中分配一块连续的内存空间，因此可以使用下标进行快速的随机访问。但是删除和插入需要移动大量的元素。 list是双向链表，在内存中是不连续的空间，由指针将不同的地址连接在一起。list的插入和删除操作都是O(1)的。 数组必须事先设定固定的长度，不能动态的增减，可能会造成资源浪费。链表可以动态的增减。 浅拷贝 由于编译器默认的拷贝构造函数只是简单的位拷贝，可能会导致内存的重复释放。解决浅拷贝的办法通常使用深拷贝，即自己实现拷贝构造函数，在堆上重新分配内存。\n内存对齐 union最大成员所占的整数倍，同时能容纳其他的成员。union中变量共用内存，应以最长的为准。\nstruct按照成员的声明顺序，依次安排内存，偏移量为成员大小的整数倍，最后结构体的大小为最大成员所占大小的整数倍。在C++中，空结构体和空类的内存所占大小为1个字节。C中空结构体所占大小为0。\n为什么要有内存对齐：1. 硬件原因：**加速CPU的访问速度。**因为CPU和内存数据交换的基本单位是块，块的大小为2的n次方字节。内存未对齐可能需要多次访问内存。2. 平台原因：不是所有的平台都支持任意地址的数据访问。\n#include \u0026lt;iostream\u0026gt; using namespace std; typedef union{ long long i; //8 bytes int k[5]; //4 bytes 最长的成员不是20 char c; // 1 byte }UDATE; //联合体共用内存 最长成员为8字节 结果要为8的倍数 同时要能容纳其他成员，即大于等于20字节 所以为24字节 struct data{ int cat; // 4 bytes UDATE cow; //24 bytes 但是需要先拆开来 最长成员为8字节 double dog; //8 bytes }too; //结构体顺序考虑，结果为最大成员的整数倍，如果后一个成员的长度的开始位置不是整数倍需要填充字节 //cat占4个字节 填充4个字节 //起始位置为8 满足整数倍 cow占用24字节 //起始位置为32 满足整数倍 doule占用4字节 //所以结构体总共占用40字节，同时40也是8的倍数。 UDATE temp; int main(){ cout\u0026lt;\u0026lt;sizeof(temp)\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt; sizeof(struct data)\u0026lt;\u0026lt;endl; //24 40 return 0; } gdb调试 gdb可以用于分析coredump文件，coredump文件中含有当进程被终止时内存，cpu寄存器和各种函数堆栈信息等。\n设置断点 b 120 运行 r 打印遍历p number 查看堆栈bt 查看循环中的变量 i 单步运行n ","permalink":"//localhost:1313/posts/003c++%E8%AF%AD%E8%A8%80/","summary":"\u003ch2 id=\"逻辑用语千万条第一首先往里套\"\u003e逻辑用语千万条，第一首先往里套。\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e首先，其次，然后，最后。\u003c/li\u003e\n\u003cli\u003e第一，第二，第三，第四。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"书籍\"\u003e书籍\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e《C++ primer》 第五版\u003c/li\u003e\n\u003cli\u003e《后台开发》 徐晓鑫\u003c/li\u003e\n\u003cli\u003e《linux高性能服务器编程》 游双\u003c/li\u003e\n\u003cli\u003e《redis设计与实现》黄健宏\u003c/li\u003e\n\u003cli\u003e《muduo库》陈硕\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"static\"\u003estatic\u003c/h2\u003e\n\u003cp\u003estatic的使用可以分为两类，一类是用在\u003cstrong\u003e普通变量和函数\u003c/strong\u003e上，另一类是\u003cstrong\u003e用在类中\u003c/strong\u003e。\u003c/p\u003e","title":"003C++语言"},{"content":"TCP头部 16位源端口 16位目的端口 32位序号 32位确认序号 4位TCP头部长度 单位为4字节 6位标志位 16位滑动窗口 16位校验和 16位紧急指针 注意：TCP的包没有IP地址，只有源端口和目的端口。一个TCP连接需要4个元组来表示一个连接。（源端口，目的端口，源IP，目的IP）\n为什么建立连接需要3次握手 主要是初始化序列号和协商最大报文段长度。\n粘包问题 udp不存在粘包的问题，因为udp是个数据包协议，也就是两段数据间有界限的。要么收不到，要么全收。\n产生粘包的原因：nagle算法为了改善网络传输效率，延迟发送数据。应用层由于某些原因不能及时取出TCP的数据，导致TCP缓冲区存放了多段数据。\n解决方式：封包和拆包。包头存放一个变量记录包体的长度。在所发送的内容前，加上发送内容的长度。\nHTTP原理 http协议是应用层协议，通过请求响应的方式在客户端和服务器端进行通信。\nhttp协议是以明文的方式进行传输，并且是无状态的通信协议。\nhttp与https的区别 传输方式：http是**明文传输，极易被监听和篡改。**而https加入了ssl层，数据经过了加密，从而保护了传输数据的隐私和完整性。 身份认证： http没有身份认证，而https经过证书颁发机构的多重认证。 连接端口：http为80 https为443 实现成本：http基本没有成本，https需要申请证书，同时在加密解密上需要消耗更多的CPU资源，访问速度有可能降低。 加锁的图标显示 谷歌和百度搜索的排名会对非https的排名有影响 私钥能解密，但是不能确认是哪个客户端发送的消息，任何人都可以抵赖。为了防止抵赖，可以使用数字签名。\nhttps是http的安全版，在http的基础上增加了SSL安全层。\n基于性能的考虑，https一般使用非对称加密算法获得密钥，再用对称加密算法对消息内容进行加密。\nhttps发送请求的过程：\n第一步，客户端和服务器端交换SSL版本和加密组件列表，同时服务器端将密钥和签名证书发给客户端。 第二步：客户端根据证书和密钥进行验证，通过以后协商传输的密钥。这一步使用非对称加密算法。 第三步：当双方都获得密钥，且校验码没有问题。则进行TCP三次握手，此时采用对称加密算法，提高效率。 http1.0 与 http1.1的区别 **长连接：**HTTP 1.1支持长连接和请求的流水线处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟。 带宽优化： HTTP/1.1中在请求消息中引入了range头域，它允许只请求资源的某个部分。 **新增响应状态码：**100 continue 已经收到第一部分，正等待剩余部分。 101 switch protocols 服务器已确认切换协议。 **host头域：**允许物理主机上多个虚拟主机共享一个IP 缓存机制更灵活，新增control-cache头域 增加了5个请求方法：put delete connect options trace get和post的区别 都是http的请求方式。\n区别在于：\n**用途上：**get一般用于获取资源，post一般用于创建资源。 位置上：get请求的的数据会在地址栏上显示出来，以问号分割url与传输数据，多个参数用取地址符连接。而post的数据放在请求体中。 **安全性上：**优于get将信息显示在地址栏，所以对于用户密码等个人隐私信息很不安全，而post放在请求体中，在安全性上要稍微好点。 **长度限制：**get使用地址栏发送数据，而地址栏的长度是有限的。 **幂等性上：**get操作没有副作用，多次操作产生的副作用相同，所以get是幂等的，而post用于创建资源是会又副作用的，所以post不是幂等的。 cookie和session cookie和session都是跟踪会话的机制。\n**存储位置：**cookie保存在客户端用来记录信息和确定用户身份，session保存在服务端同样用来记录和确定身份。 **安全性：**cookie放在客户端很容易被查看或者破解，没有session安全。 关联性：session的运行依赖于session id 而session id 存在cookie中。如果浏览器禁止了cookie，可以使用url地址重写来传递session id **性能上：**session会在有效期内存在于服务器的数据库或者文件，当请求过多时，服务器性能会下降。 **大小上：**单个cookie保存的大小不能超过4k 使用cookie来管理session以弥补http中无状态特性。通过对set-cookie头域写入session ID可以免登录，提高访问的效率。\n握手优化：session缓存， session key 放在内存，有内存消耗， 负载均衡后找不session key。session ticket 集群可以共享。\nTCP和UDP的区别 TCP: 面向连接的安全的流式协议，连接的时候进行三次握手，数据发送的时候会进行数据确认，数据丢失之后，会进行数据重传。 确认和重传机制。 UDP: 面向无连接的不安全的报文传输，发出去就不管了，收则全收，丢则全丢。 3次握手和4次挥手 TCP三次握手：客户端向服务器端：发送SYN=1和序号seq 服务器端向客户端：回应确定信号同意连接ACK=1以及自己的连接请求SYN=1还有序号seq 客户端回应服务器端：ACK=1告诉对方它已经知道了服务器端同意，连接成功。\nTCP四次挥手：主动关闭方发送关闭信号，被动关闭方收到信号。然后进入半关闭状态，关闭的一方能接收数据但是不能发送数据。 等到另一个未关闭的一方，发起关闭信号以后，进入TIME_WAIT状态，等待对方2MSL之后，彻底关闭。\n3次握手55555555 客户端发起连接，也就是C语言中的connect函数，发送一个SYN=1的标志位，同时携带一个序号。\n服务器端有一个accept函数，用于响应连接。服务器端响应连接后回复一个ACK=1的标志位，并且也发送一个SYN=1的标志位建立连接。\n客户端收到服务器端的ACK应答以后，说明建立成功。两者都同时进入established状态。同时accept和connect函数调用成功，并返回1。\n4次挥手55555555 主动关闭方向被动关闭放发送FIN标志位，表示要断开连接。被动关闭方同意关闭，并回发ACK标志位。此时主动关闭放进入FIN_WAIT_2状态。以后主动关闭方仍然可以接收数据，但是不可以再发送数据。\n当另一方也决定关闭时，会发送FIN标志位，接收方回复ACK同意关闭，并且自身进入Time_wait状态，等待2MSL时长后关闭。发送方如果收到ACK应答后，就直接关闭，如果没有收到会一直发FIN标志位。\n滑动窗口 流量控制：防止发送方发的太快，耗尽接收方的资源。\n控制机制：滑动窗口\n在TCP报文的头部有一个16位的窗口大小，用于告诉发送方接收方可用的缓冲区大小。\n拥塞窗口 拥塞控制：防止发送方发的太快，使网络来不及处理，从而导致网络拥塞。\n控制机制：拥塞窗口\n慢启动 拥塞避免 快重传 快恢复 **慢启动：**为了防止大量数据瞬间注入网络，引起网络阻塞。慢启动算法设定，最开始窗口为1个最大报文长度。一个传输轮次增加一倍的窗口大小。当达到慢开始门限后，执行拥塞避免算法。 拥塞避免： 每个传输轮次将窗口增加一个单位，即加法增长。 快重传： 当收到3个重复确认以后，执行快恢复算法。慢开始门限和发送窗口减半，然后发缺失的数据，进行加法增长，重新进入拥塞避免阶段。 **快恢复：**慢开始门限减半，发送拥塞窗口设定为门限加3。如果后面依旧收到重复的ACK则进行加法增长窗口，如果收到新的ACK，则拥塞窗口设定为慢开始门限的值，并重新进入拥塞避免阶段。 超时进入的是慢启动，重复确认才进入快恢复。\n选择性重传在options中left edge和right edge告诉发送方已经收到的报文序号\nTCP粘包问题 **udp不会出现粘包。**发送方发送的若干包数据到接收方接收时，包粘在了一起。\n造成粘包的原因时因为发送端延迟发送或者接收方没有及时接收缓冲区中的数据。\n通常可以使用以下三种方式来解决\n编程时设定立即发送的操作指令 把数据长度与消息一起发送。 使用特殊标记来区分消息的间隔 HTTP和HTTPS有什么不同 HTTP协议是一种使用明文数据传输的网络协议。HTTPS协议可以理解为HTTP协议的升级，就是在HTTP的基础上增加了**数据加密。**在数据进行传输之前，对数据进行加密，然后再发送到服务器。这样，就算数据被第三者所截获，但是由于数据是加密的，所以你的个人信息让然是安全的。这就是HTTP和HTTPS的最大区别。\n在浏览器地址栏键入URL，按下回车之后会经历以下流程 浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;（递归式和迭代式） 解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接; 浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器; 服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器; 释放 TCP连接; 浏览器将该 html 文本并显示内容; UDP如何做到可靠 想要做到可靠，必须要做到**无重复，无丢失，无错误，无失序。**借鉴TCP的可靠机制\n发送时进行编号 接收方收到数据发出应答信号（超时重传，3次确认重传） 增加校验位 NAT DNS ARP NAT用于实现从内部IP地址到外部IP地址的映射 DNS提供域名到IP地址的映射或者反过来 ARP提供IP到MAC地址的映射 DNS 基于UDP的协议\n递归查询：父域名代替当前服务器递归查询，最后依次返回 迭代查询：父域名服务器告诉当前服务器下一次查询的位置 http状态码 100 continue 等待继续发送 200 ok 请求成功 206 patial content 部分资源 301 永久重定向 302 临时重定向 307 400 客户端请求报文语法错误 403 禁止访问 404 资源不存在 408 请求超时 500 服务器内部错误 503 服务器不可用 http 2.0 SPDY 二进制分帧 多路复用 首部压缩 服务器推送 http 3.0 QUIC+UDP 0 RTT 没有队头阻塞的多路复用 前向纠错 网络安全 **sql注入：**用户提交一段数据库查询代码，根据程序返回的结果获得它想得知的数据。 dos攻击： 让运行的服务器呈停止状态。集中请求造成资源过载，攻击安全漏洞使服务停止。 TCP原理 面向连接，可靠的，基于字节流的传输层协议\n七层模型 物数网传会表应\nping是从应用层直接使用网络层的ICMP协议的，不经过传输层。原始套接字直接使用网络层的IP。\n两台电脑通信：网线+不同的IP地址和子网掩码，即处于同一网段。\nTCP和UDP可以同时使用相同的端口。\n应用程序可以同时使用TCP和UDP两个协议。\nhub集线器 可以实现多个IP主机通信，但是hub的实现方式是广播，容易产生拥堵。\nswitch交换机 是集线器的升级版，可以广播可单播。ARP不知道对方MAC地址时，先广播6个ff的MAC地址，所有网卡都会接收，但是只有目的IP会单播回应，其他的都会丢弃。然后发送方收到正确的MAC后再单播传输数据。\nARP攻击 给两个MAC地址响应ARP广播的目的IP，经由中间人，窃取信息后再转发到正确的地址。\n默认网关 在同一个交换机连接的网络中，属于同一网段，用不到默认网关。网关用来传递两个不同网段的通信，默认网关通常是路由器。当通信的数据不在当前网段时，即发给默认网关。路由器就是用来连接不同网段的，用来构建一个更大的网络。在传输不同的网段信息时，源IP和目的IP是不变的，源MAC和目的MAC是改变的，每经过一个路由器修改一次，记录的是下一次的目的，和这一次的发送MAC。\n延迟确认 ack会随着响应数据发送给对方，如果没有响应的数据就会等待200ms左右，在这期间如果有对方确认到达则立即发送。如果200ms后仍然没有数据需要发送则单独发送ACK。目的是节省带宽。\nNagle算法 没有已发送未确认报文段时，立即发送数据。 存在未确认报文段时，达到mss时再发。 同时有nagle算法和延迟确认存在时会导致网络效率下降，通常会关闭延迟确认和nagle算法。\nsetsockopt(s,IPPROTO_TCP,TCP_QUICKACK,(int*){1}, sizeof(int)); //关闭延迟确认 setsockopt(client_fd, SOL_TCP, TCP_NODELAY,(int[]){1}, sizeof(int)); //关闭nagle算法 忽略SIGPIPE信号 客户端和服务器端连接建立后，若某一端关闭连接，而另一端仍然向它写数据，第一次写数据后会收到RST响应，第二次写数据时，内核会向进程发送一个SIGPIPE信号，通知进程此连接已断开，而这个信号的默认处理方式是终止进程，服务器直接关闭。\nsignal(SIGPIPE, SIG_IGN) SIGSEGV 11 访问地址无效 SIGIO 29异步通知信号 SIGKILL 9 无条件终止\n传输层与网络层的区别 传输层位于网络层之上，为不同主机上的应用进程提供逻辑通信。端到端传输。 网络层负责ip数据报的产生以及ip数据包在网络中的路由转发。 状态码499 服务器端处理的时间过长，客户端主动关闭了连接。\n分块编码 transfer-encoding:chunked 响应头域 它允许服务器发送给客户端的数据分成多个部分，并且不需要预先直到发送数据的总大小。\nclose_wait 基本的思想就是要检测出对方已经关闭的socket，然后关闭它。维持一个心跳包或者设置一个超时时间。\n","permalink":"//localhost:1313/posts/002%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","summary":"\u003ch2 id=\"tcp头部\"\u003eTCP头部\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e16位源端口\u003c/li\u003e\n\u003cli\u003e16位目的端口\u003c/li\u003e\n\u003cli\u003e32位序号\u003c/li\u003e\n\u003cli\u003e32位确认序号\u003c/li\u003e\n\u003cli\u003e4位TCP头部长度  单位为4字节\u003c/li\u003e\n\u003cli\u003e6位标志位\u003c/li\u003e\n\u003cli\u003e16位滑动窗口\u003c/li\u003e\n\u003cli\u003e16位校验和\u003c/li\u003e\n\u003cli\u003e16位紧急指针\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e注意：\u003cstrong\u003eTCP的包没有IP地址\u003c/strong\u003e，只有源端口和目的端口。一个TCP连接需要4个元组来表示一个连接。（源端口，目的端口，源IP，目的IP）\u003c/p\u003e","title":"002计算机网络"},{"content":"阻塞IO和非阻塞IO 阻塞的文件描述符为阻塞IO 非阻塞的文件描述符为非阻塞IO 同步IO和异步IO 同步IO向应用程序通知的是IO就绪事件。要求用户代码自行执行读写操作，将数据从内核缓冲区读入用户缓冲区。 异步IO向应用程序通知的是IO完成事件 。由内核来执行IO读写操作。在linux环境下，aio.h头文件定义的函数提供了对异步IO的支持。 事件处理模式 reactor 同步IO模型通常用于实现reactor模式。要求主线程只负责监听文件描述符是否有事件发生，有的话就立即将该事件通知工作线程。 proactor 异步IO模型通常用于实现proactor模式。也可以用同步IO模拟出proactor模式。proactor将所有IO操作都交给主线程和内核来处理，工作线程仅仅负责业务逻辑。 Reactor模式的工作流程 主线程往epoll内核事件表中注册socket上的就绪事件。 主线程调用epoll_wait等待socket上有数据可读。 当socket上有数据可读时，epoll_wait通知主线程。主线程将socket可读事件放入请求队列。 睡眠在请求队列上的某个工作线程被唤醒，它从socket读取数据，并处理客户请求，然后往epoll内核事件表中注册该socket上的写就绪事件。 主线程调用epoll_wait等待socket可写。 当socket可写时，epoll_wait通知主线程。主线程将socket可写事件放入请求队列。 睡眠在请求队列上的某个工作线程被唤醒，它往socket上写入服务器处理客户请求的结果。 并发模式 半同步半异步模式：同步线程用于处理客户逻辑，异步线程用于处理IO事件。异步线程监听到客户请求后，就将其封装成请求对象并插入到请求队列中，请求队列将通知某个工作在同步模式下的工作线程来读取并处理该请求对象。半同步半反应堆模式采用的事件处理模式是reactor模式：它要求工作线程自己从socket上读取客户请求和往socket写入服务器应答。半同步半反应堆也可以模拟proactor模式，即由主线程来完成数据的读写。在这种情况下，主线程会将应用程序数据，任务类型等信息封装为一个任务对象，然后将其插入请求队列。工作线程从请求对象取得任务对象以后，可直接处理无需执行读写操作。\n问题：主线程和工作线程共享请求队列需要加锁。工作线程较少时可能产生请求任务堆积。\n领导者追随者模式\n在IO模型中，同步和异步区分的是内核向应用程序通知的是何种事件，是就绪事件还是完成事件，以及该由谁来完成IO读写，是应用程序还是内核。\n在并发模式中，同步指的是程序完全按照代码序列的顺序执行。异步指的是程序的执行需要由系统事件来驱动。常见的系统事件包括中断和信号。\n虚拟地址空间 **虚拟地址是操作系统管理内存的一种方式。**方便不同进程使用的虚拟地址彼此隔离。方便物理内存中不相邻的内存在虚拟地址上视为连续的来使用。虚拟地址和物理地址的映射是通过MMU页表进行的。虚拟内存对实际内存有保护作用。\n什么是进程 进程是系统进行资源分配的基本单位，是程序加载到内存后的执行过程。进程一般由数据段，代码段和进程控制块三部分组成。系统通过进程控制块感知进程的存在并对进程进行控制。由于进程之间空间相互独立，多进程比多线程更安全，一个进程基本上不会影响另外一个进程。\n进程三种状态 创建：创建PCB 就绪 运行 阻塞 终止: 归还PCB 什么是线程 线程是CPU调度的基本单位。一个进程可以包含多个线程，线程自己基本不拥有系统资源，但是它可以和同属于一个进程的其他线程共享进程所拥有的全部资源。多线程之间对内存共享，线程间通信可以直接基于共享内存来实现，比多进程之间通信更轻量。多线程之间切换不需要切换虚拟内存空间、文件描述符等，所以线程的上下文切换也比多进程轻量。\n进程fork以后，遵循读时共享写时复制的机制。\n父子进程长期共享：文件描述符和mmap建立的映射区。\n子进程的进程ID，定时器，未决信号集和父进程不同。\n多进程和多线程的应用场景 一般不同任务间需要大量的通信，使用多线程的场景比多进程多。IO密集型。\n但是多进程有更高的容错性，一个进程的崩溃不会导致整个系统的崩溃，在任务安全性较高的情况下，采用多进程。CPU密集型。\n进程线程的本质区别 进程更安全，一个进程完全不会影响另外的进程。 进程间通信比线程间通信的性能差很多。 线程切换开销更低。 IPC进程间通信55555555555 无名管道pipe（血缘关系的进程） 有名管道fifo （无血缘关系的进程） 共享内存 信号(开销小) 消息队列 信号量 套接字 进程间同步 文件锁 信号量 线程间同步 互斥锁 读写锁(读时共享，写时互斥) 条件变量 信号量(互斥锁的升级版) 自旋锁(可以避免进程或线程上下文的开销) 线程共享资源 文件描述符表（打开的文件） 进程用户ID和进程组ID 进程的**内存地址空间.**text代码段 .data数据段 .bss heap堆区 全局变量 静态变量 每种信号的处理方式 进程的当前目录 线程独享资源 线程栈 寄存器组的值 线程ID 错误返回码errno变量 线程信号屏蔽字 线程优先级 进程调度方式 抢占式：立马停止。 非抢占式：时间片用完或者等待资源时，再调用另一个进程。 进程调度算法 先来先服务 短作业优先 优先级调度 时间片轮转 高响应比优先 管道 管道是一种伪文件，实质为内核缓冲区 大小为4K 内核借用环形队列实现\n管道是半双工的，数据只能单向流动，不可重复读取，只能用于有血缘关系的进程\nLinux命令 find命令，用来查找文件。常用的按照名字查找-name，按照文件类型查找-type，linux常用的文件类型有七种，普通文件，目录文件，管道，套接字，软链接，块设备，字符设备。还可以按照文件大小查询-size。 grep命令，按照文件内容来查找。使用规则是grep option pattern file ps aux curl命令 访问一个网页 df查看磁盘大小 du查看目录大小 free -h 查看内存大小和使用情况 top查看系统的实时负载 netstat -ta 查看监听的TCP stat 获取文件属性 file 查看文件类型 sudo iptables -L 查看防火墙状态 sudo vim etc/sysctl.conf 查看TCP属性 大端字节序和小端字节序 大端字节序：网络字节序（高位存低位） 小端字节序：主机字节序，现代PC机采用小端字节序（低位存低位，高位存高位） 比如0x1f3f5f7f 地址0x1000 0x1001 0x1002 0x1003\n大端法：7f存在0x1003 5f存0x1002 3f存0x1001 1f存0x1000 低存高\n小端法：7f存在0x1000 5f存0x1001 3f存0x1002 1f存0x1003 低存低\nsocket服务器端所用函数 socket 创建socket文件描述符 bind 绑定IP和端口号 listen 监听 accept 接受连接 处理客户端的业务\nsocket客户端所用函数 socket 创建套接字文件描述符 bind 绑定IP和端口号（也可以隐式绑定） connect 尝试连接服务器 处理服务器端的业务\n五种网络IO模型 同步阻塞IO\n同步非阻塞IO\nIO多路复用\n信号驱动IO\n异步IO\nselect与poll、epoll的各自的优缺点和区别 select是跨平台的，windows、linux、unix系统下都有 poll在linux和unix下有 epoll是linux特有，epoll的要义就是高效的监视多个socket 多路IO监听时没有动静，监听会休眠监听。 讲讲epoll的边沿触发和水平触发 水平触发：如果epoll_wait缓冲区有数据则直接返回。 边沿触发：如果一次没有读完epoll_wait缓冲区中的数据，则只有当另外有数据再写入时，才返回。 使用边沿触发和非阻塞IO来达到水平触发的效果，减少了epoll_wait的调用次数，提高了效率。 边沿触发可以只读取缓存区中前面的部分信息，进而分析后面的信息是否有用，如果无用则直接丢弃。 Libevent库 是一个开源的库，封装了socket和IO多路转接，用于高并发服务器的开发。跨平台可移植性好。跨平台，线程安全，基于reactor模式实现的高效网络库。\n协程 协程是一种用户态的轻量级线程。协程的开销远远小于线程的开销。\n协程是一种比线程更加轻量级的存在，一个线程可以拥有多个协程。 无论是进程还是线程，都是由操作系统所管理的。而协程不是被OS所管理，而完全是由程序所控制(也就是在用户态执行)。\n信号 信号是一种不精确通信。\n常用的信号有SIGKILL 9 无条件终止信号，SIGSEGV 11 无效存储访问 SIGPOLL 8 轮询事件信号。\n信号有三种处理方式：忽略，捕获，默认。\nkill命令向进程发送信号\n什么是死锁 因为资源调度的方式不合理或者资源的稀缺性，导致进程间的相互等待。\n死锁的四个必要条件：互斥条件，请求和保持条件，环路等待条件，不可剥夺条件。\n死锁的预防只要破坏死锁产生的四个必要条件。通常采用预先静态分配方法，可以破坏请求和保持条件。\n死锁的避免：采用银行家算法，只要系统处于安全状态，系统便可避免死锁。\n死锁的解决：撤销进程，剥夺资源。\n僵尸进程和孤儿进程 僵尸进程：子进程死亡，而父进程没有进行回收 waitpid回收指定进程 孤儿进程：父进程死亡，而子进程仍然存活，但是系统会让init进程领养孤儿进程。 fork函数 fork函数用来创建子进程 一次调用，两次返回。在父进程中返回子进程的PID，在子进程中返回0\nexec族 在程序中调用另一个可执行程序，但是进程ID不改变。\n网络编程IO 服务器通常需要处理三类事件：IO事件，信号及定时事件。\n事件处理模式：reactor和proactor\n同步IO模型通常用于实现reactor模式\n异步IO则用于实现proactor模式\n什么是reactor模式 它要求主线程只负责监听文件描述符上是否有事件发生，有的话立即将该事件通知工作线程。读写数据，接受新的连接以及处理客户请求均在工作线程中完成。\n什么是proactor模式 它将所有IO操作都交给主线程和内核来处理，工作线程仅仅负责业务逻辑。\nmmap存储映射 将磁盘空间映射到进程空间，**使进程可以采用指针的方式操作这段内存，**而不用调用read和write函数。提高了读写的效率，同时也可以实现进程间的通信。\n异步IO原理 底层将数据准备好后，内核会给进程发送一个异步通知信号SIGIO29通知进程，然后进程调用信号处理函数去读数据，没准备好，数据就忙自己的事情。\nselect poll epoll select单个进程打开的文件描述符有上限，为1024或者2048。select对于有响应的事件需要轮询来查找满足要求的事件。每次调用select都需要把文件描述符集合从用户态拷贝到内核态。 poll描述fd的集合是链式的，解决了打开文件描述符数量的限制。同样需要轮询满足事件的文件描述符。也需要进行用户态和内核态的文件描述符拷贝。poll是水平触发。 epoll使用了mmap内存映射技术和红黑树的数据结构。通过三个函数来监听多个文件描述符，同时不随数量的上升效率呈线性的下降。mmap内存读写快于IO读写，及时共享映射内存的改变。 ","permalink":"//localhost:1313/posts/001%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","summary":"\u003ch2 id=\"阻塞io和非阻塞io\"\u003e阻塞IO和非阻塞IO\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e阻塞的文件描述符\u003c/strong\u003e为阻塞IO\u003c/li\u003e\n\u003cli\u003e非阻塞的文件描述符为非阻塞IO\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"同步io和异步io\"\u003e同步IO和异步IO\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e同步IO向应用程序通知的是\u003cstrong\u003eIO就绪事件\u003c/strong\u003e。要求用户代码自行执行读写操作，将数据从内核缓冲区读入用户缓冲区。\u003c/li\u003e\n\u003cli\u003e异步IO向应用程序通知的是\u003cstrong\u003eIO完成事件\u003c/strong\u003e 。由内核来执行IO读写操作。在linux环境下，aio.h头文件定义的函数提供了对异步IO的支持。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"事件处理模式\"\u003e事件处理模式\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003ereactor 同步IO模型通常用于实现reactor模式。要求主线程只负责监听文件描述符是否有事件发生，有的话就立即将该事件通知工作线程。\u003c/li\u003e\n\u003cli\u003eproactor 异步IO模型通常用于实现proactor模式。也可以用同步IO模拟出proactor模式。proactor将所有IO操作都交给主线程和内核来处理，工作线程仅仅负责业务逻辑。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"reactor模式的工作流程\"\u003eReactor模式的工作流程\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e主线程往epoll内核事件表中注册socket上的就绪事件。\u003c/li\u003e\n\u003cli\u003e主线程调用epoll_wait等待socket上有数据可读。\u003c/li\u003e\n\u003cli\u003e当socket上有数据可读时，epoll_wait通知主线程。主线程将socket可读事件放入请求队列。\u003c/li\u003e\n\u003cli\u003e睡眠在请求队列上的某个工作线程被唤醒，它从socket读取数据，并处理客户请求，然后往epoll内核事件表中注册该socket上的写就绪事件。\u003c/li\u003e\n\u003cli\u003e主线程调用epoll_wait等待socket可写。\u003c/li\u003e\n\u003cli\u003e当socket可写时，epoll_wait通知主线程。主线程将socket可写事件放入请求队列。\u003c/li\u003e\n\u003cli\u003e睡眠在请求队列上的某个工作线程被唤醒，它往socket上写入服务器处理客户请求的结果。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"并发模式\"\u003e并发模式\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e半同步半异步模式：同步线程用于处理客户逻辑，异步线程用于处理IO事件。异步线程监听到客户请求后，就将其封装成请求对象并插入到请求队列中，请求队列将通知某个工作在同步模式下的工作线程来读取并处理该请求对象。半同步半反应堆模式采用的事件处理模式是reactor模式：它要求工作线程自己从socket上读取客户请求和往socket写入服务器应答。半同步半反应堆也可以模拟proactor模式，即\u003cstrong\u003e由主线程来完成数据的读写\u003c/strong\u003e。在这种情况下，主线程会将应用程序数据，\u003cstrong\u003e任务类型等信息封装为一个任务对象\u003c/strong\u003e，\u003cstrong\u003e然后将其插入请求队列\u003c/strong\u003e。\u003cstrong\u003e工作线程从请求对象取得任务对象以后，可直接处理无需执行读写操作。\u003c/strong\u003e\u003c/p\u003e","title":"001操作系统"},{"content":"综合writing 模板 Both the passage and the lecture explore the topic about \u0026hellip;. The reading passage proclaims that \u0026hellip;. While in the lecture , the professor uses three specific perspectives to contradict what the reading states .\nFirst and foremost , the reading part holds the belief that \u0026hellip;. because \u0026hellip;. However , the lecturer doubts the view by stating that \u0026hellip; In order to strength his own point , the professor further explains that \u0026hellip;\nMoreover , the reading maintains that \u0026hellip;.. since \u0026hellip;.. The professor in the lecture , on the contrary , points out that \u0026hellip;. The professor defends his own point with the example of \u0026hellip;.\nLast but not least , the reading material believes/states that \u0026hellip; because \u0026hellip; Nevertheless , the professor argues that \u0026hellip;. For instance , \u0026hellip;.\nBoth the passage and the lecture explore the topic about .... The reading passage proclaims that .... While inthe lecture , the professor uses three specific perspectives to contradict what the reading states . First and foremost , the reading part holds the belief that .... because .... However , the lecturer doubts the view by stating that ... In order to strength his own point , the professor further explains that ... Moreover , the reading maintains that ..... since ..... The professor in the lecture , on the contrary , points out that .... The professor defends his own point with the example of .... Last but not least , the reading material believes/states that ... because ... Nevertheless , the professor argues that .... For instance , .... 讨论writing 模板 As far as I\u0026rsquo;m concerned , I tend to be in favor of the argument that \u0026hellip;. My view is going to be illustrated by following reasons and examples.\nTo start with , just as XXX has said , \u0026hellip;\nIn addition , \u0026hellip;\n150 - 160\nAs far as I\u0026#39;m concerned , I tend to be in favor of the argument that .... To start with , just as XXX has said , ... In addition , ... 科技 产品 消费 效率 心理需求 心理满足 As far as I am concerned buying the newest technological devices would be a wise choice . My view is going to be illustrated by the following reasons and examples.\nTo start with , the newest technological devices help users to improve their efficiency , no matter in work or study . It should be emphasized that along with the accelerating development of the whole society , a higher efficiency becomes more and more important . It allows individuals to accomplish more tasks within relatively certain time limits , which in turn strengthens one\u0026rsquo;s competitiveness and offers them a higher chance to succeed. In that case , buying new technological devices serves better in assisting the person to get high efficiency . To be specific , there is no doubt that new technological devices generally have advantages compared with existing ones . For example, they may offer some new functions or improve existing ones , and all these factors play an essential role in helping people achieve their aims more effectively , removing the barriers as well as difficulties. As a result , people who use new technological devices are capable of finishing tasks more quickly . In other words , new technological devices guarantee high efficiency.\nIn addition , using the newest technological devices also brings individuals the benefit of realizing their higher needs. Thanks to the development of the economy and technology, people in current society have almost fulfilled their basic needs related to survival and safety . Under such circumstances , they have begun to realize those need that are at a higher level . Those needs are usually more psychological and social , which makes the choice of buying the newest technological devices reasonable . To give more details , people using the newest technological devices are able to enjoy the feeling of happiness and satisfaction after they buy it immediately since this behavior continuously implies to them that they have the right and the ability to enjoy the best things. Besides , people who possess the newest devices usually can grab the attention of people surrounding them , which enables them to enclose relationship with others and even harvest other people\u0026rsquo;s respect or envy . All factors listed above , psychological feelings and connections with others , are just what nowadays people mainly are pursuing , and it supports my standpoint that buying the newest devices , rather than adopting them when they are well-adopted , is worth the effort .\nAs far as I am concerned , I tend to be in favor of the argument that people should like to pursue the devices of the newest version. My view is going to illustrated by following reasons and example.\nTo start with, just as Mike has said, the newest technological devices help users to improve their efficiency, no matter in work or study. It should be emphasized that along with the accelerating development of the whole society , a higher efficiency becomes more and more important. It allows individuals to accomplish more tasks within relatively certain time limits , which in turn strengthens one\u0026rsquo;s competitiveness and offers them a higher chance to succeed.\nIn addition , using the newest technological devices also brings individuals the benefit of realizing their higher needs. To be more specific , people using the newest technological devices are able to enjoy the feeling of happiness and satisfaction after they buy it immediately .\nsince this behavior continuously implies to them that they have the right and the ability to enjoy the best things.\n创造力 As far as I am concerned , I tend to be in favor of the argument that the power of creativity far outweighs that basic knowledge in terms of successful inventions. My view is going to illustrated by following reasons and example. To start with , just as Mike has said , the power of creativity far exceeds the power of basic knowledge. For instance , Bell is commonly credited with inventing the first practical telephone by taking advantage of his creativity and numerous endeavors. It is precisely due to his creativity that such scientific breakthroughs have been made. In addition , in the modern world , similar evidence could be also be traced . Steve Jobs , co-founders and former CEO of Apple , shocked the world with his creative electronic products whose superior functions and qualities can never be matched. 压力 健康 生活压力\nAs far as I am concerned , I tend to be in favor of the argument that government should arouse people\u0026rsquo;s awareness of importance of physical soundness. My view is going to be illustrated by following reasons and example. To start with , just as Mike has said , with the acceleration of social development , people , especially young people , are confronted with unprecedentedly fierce competition . For instance , they need to work very hard to guarantee a decent life , which causes them much(way) heavier pressure than before. Under such circumstances , most of them are prone to in a sub-health state . In summary , government should increase access to public exercise equipment in neighborhood , raising people\u0026rsquo;s awareness of the importance of doing exercise regularly through the mass media , which is the government\u0026rsquo;s responsibility. 因特网 科技 社会发展 生活方式\nAs far as I am concerned , I tend to be in favor of the argument that Internet is a treasure trove of information , which offers knowledge on any given topic under the sun. My view is going to be illustrated by following reasons and examples. To start with , just as Mike has said , search engines make information accessible on various subject matters such as government law and services , trade and conferences , market information , new innovations , and technical support , and even dispense advise on love and relationship matters. In addition , it has become common practice to seek assistance from the web in order to research and gather resources for homework , office presentations , and supplement one\u0026rsquo;s own research . The web also updates news about the latest breakthroughs in the field of medicine , technology , and other domains of science . 兴趣 爱好\nAs far as I am concerned , I tend to be in favor of the argument that young students should not decrease an abundance of time that teaching students about music and art . My view is going to be illustrated by following reasons and examples .\nTo start with , just as Mike has said , we should emphasize what is conveyed in the famous saying: \u0026lsquo;Interest is the best teacher.\u0026rsquo; Evidently , the primary step toward a person\u0026rsquo;s success is to have an emotional preference . In fact , interest constitutes the biggest impetus in learning , keeping one refreshed and preventing feelings of boredom and tiredness .\nIn addition , numerous epoch-making accomplishments in the scientific world owe much to the initial interest of the scientists. Therefore , students shouldn\u0026rsquo;t be compelled to increase the time spent on any knowledge field , but rather to keep a balance among all knowledge fields.\n学生是否要 gap \u0026mdash; 兴趣 As far as I am concerned , I tend to be in favor of the argument that students should take at least a year off to work or travel before they begin studying at a university when students finish their high school , which can be beneficial for students to discover their interests. My view is going to be illustrated by the following reasons and examples.\nTo start with , just as Mike has said , the famous saying goes , \u0026quot; Interest is the best teacher.\u0026quot; Evidently , the primary step toward a person\u0026rsquo;s success is to have an emotional preference. In fact , interest constitutes the biggest impetus in learning , keeping one refreshed and preventing feelings of boredom and tiredness. Therefore , it is helpful that spending at least a year work or travel before getting the university education , which is one of the best ways to figure out personal passion if students want to be successful in their future careers.\n以 成绩 评分 As far as I am concerned , I tend to be in favor of the argument that performance should be the only criterion when teachers give grades. My view is going to be illustrated by following reasons and examples . To start with , just as Mike has said , such a strategy would show fairness , which is an important factor to motivate students. The lack of motivation would undoubtedly pose negative effects on student\u0026rsquo;s studies . Consequently , it would even have a lasting effect on their future life. In addition , giving grades based on performance , instead of effort , also means a clear standard . It would be hard for teachers to tell whether a student is working hard or not during the process. It is totally subjective . In contrast , the performance , in other words , the results , cannot tell lies , making the performance-based criteria a wiser one . Do you agree or disagree with the following statement? It is often not a good thing for people to move to a new town or country because they lose their old friends. Use specific reasons and examples to support your answer.\n搬家 好不好 As far as I am concerned , I tend to be in favor of the argument that people wouldn\u0026rsquo;t lose their friends because they move to a new town or country. My view is going to be illustrated by following reasons and example. To start with , just as Mike has said , with the development of society , the infrastructure make it convenient as well as time-saving to travel another town or country, which means people can still meet up with friends easily . Going to a new town or country can also push individuals to broaden their perspectives and see the world in a distinctive way. In addition , the opportunities of being successful in future career are enhanced by settling in a big city . Simultaneously , I believe that the greatest predictor of being successful in the future career is how many hours are devoted to goal , rather than spending too much time with friends . 参考\nTo start with, as Mike mentioned, the development of society has made travel between towns and countries more convenient and time-saving. This means that people can still meet up with friends easily. Moving to a new place can also encourage individuals to broaden their perspectives and see the world in new ways.\nIn addition, settling in a big city can enhance opportunities for future career success. However, I believe that the greatest predictor of success is how many hours one devotes to their goals, rather than spending too much time with friends.\n帮助他人 with the development of \u0026hellip;\u0026hellip;.. = due to the refinement of \u0026hellip;\u0026hellip;\u0026hellip; = As advances in = through the improvement of \u0026hellip;\u0026hellip;\u0026hellip; = due to the advancement of\nAs far as I am concerned , I tend to be in favor of the argument that currently, many people are accepted assistance from others people more readily than before . My view is going to be illustrated by following reason and example. To start with , just as Mike has said , due to the advancement of society , people are wealthier than before , individuals are more likely to spend more time to care about other , someone needs help , since the social responsibility would be powerful enough to push them to help other. In addition , take me for example , every time I see the homeless or someone needs help , I will lend them a hand , holding up social responsibility as much as possible. In this action , it is social harmony that is strongly promoted. ","permalink":"//localhost:1313/posts/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/","summary":"\u003ch1 id=\"综合writing\"\u003e综合writing\u003c/h1\u003e\n\u003ch2 id=\"模板\"\u003e模板\u003c/h2\u003e\n\u003cp\u003eBoth the passage and the lecture explore the topic about  \u0026hellip;.  The reading passage proclaims that \u0026hellip;. While in the lecture , the professor uses three specific \u003cstrong\u003eperspectives\u003c/strong\u003e to contradict what the reading states .\u003c/p\u003e\n\u003cp\u003eFirst and foremost , the reading part holds the belief that \u0026hellip;. because \u0026hellip;. However , the lecturer doubts the view by stating that \u0026hellip; In order to strength his own point , the professor further explains that \u0026hellip;\u003c/p\u003e","title":"英语学习"},{"content":"测试数据范围 时间复杂度 对应数据量 O(n) 1,000,000 O(log N) 100,000 O(n^2) 1,000 O(n^3) 100 特殊情况 10 滑动窗口 动态规划 DP dp分析, 两个角度\n状态表示 集合: 前i个数, 总和为j的所有方案 属性: 状态计算 01背包 n = 4 // 4件物品 m = 5 // 背包最大容量为 5 测试样例 4 5 1 2 2 4 3 4 4 5 j i 状态f[i][j]定义：前 i 个物品，背包容量 j 下的最优解（最大价值）\n前i个物品的价值 1 2 3 4 5 0 0 0 0 0 0 1 2 2 2 2 2 2 2 4 6 6 6 3 2 4 6 6 8 4 2 4 6 6 8 第i个物品的数据 1 2 3 4 volume 1 2 3 4 weight 2 4 4 5 单调栈 合并区间 模板\n排序数组 更新合并左右端点 vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; merge(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; \u0026amp;intervals) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; ans; if (intervals.empty()) return ans; sort(intervals.begin(), intervals.end()); // 先排序 int l = intervals[0][0], r = intervals[0][1]; // 左右端点 for (int i = 1; i \u0026lt; intervals.size(); i++) // 第二数组开始遍历 { if (intervals[i][0] \u0026gt; r) // 第二数组的左端点大于上一数组的右端点, 则保存上一数组 { ans.push_back({l, r}); l = intervals[i][0], r = intervals[i][1]; // 更新左右端点 } else { r = max(r, intervals[i][1]); // 否则更新右端点 } } ans.push_back({l, r}); return ans; } 迪杰斯特拉算法 快速幂 模板\n快速幂 —— 模板题 AcWing 875. 快速幂 求 m^k mod p，时间复杂度 O(logk)。\nint qmi(int m, int k, int p) { int res = 1 % p, t = m; while (k) { if (k\u0026amp;1) res = res * t % p; t = t * t % p; k \u0026gt;\u0026gt;= 1; } return res; } 并查集 ","permalink":"//localhost:1313/posts/algorithm_study/","summary":"\u003ch1 id=\"测试数据范围\"\u003e测试数据范围\u003c/h1\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: center\"\u003e时间复杂度\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e对应数据量\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eO(n)\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e1,000,000\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eO(log N)\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e100,000\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eO(n^2)\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e1,000\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eO(n^3)\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e100\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e特殊情况\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e10\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch1 id=\"滑动窗口\"\u003e滑动窗口\u003c/h1\u003e\n\u003ch1 id=\"动态规划-dp\"\u003e动态规划 DP\u003c/h1\u003e\n\u003cp\u003edp分析, 两个角度\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e状态表示\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003e集合: 前\u003ccode\u003ei\u003c/code\u003e个数, 总和为\u003ccode\u003ej\u003c/code\u003e的所有方案\u003c/li\u003e\n\u003cli\u003e属性:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e状态计算\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"01背包\"\u003e01背包\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 4件物品\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 背包最大容量为 5 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e测试样例\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: center\"\u003e\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003ej\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003ei\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e状态\u003ccode\u003ef[i][j]\u003c/code\u003e定义：\u003cstrong\u003e前 i 个物品\u003c/strong\u003e，\u003cstrong\u003e背包容量 j\u003c/strong\u003e 下的最优解（\u003cstrong\u003e最大价值\u003c/strong\u003e）\u003c/p\u003e","title":"算法学习记录"},{"content":"emplace用法 emplace 是 C++ 中用于容器（如 std::vector, std::map, std::unordered_map 等）的一种方法，允许你在容器中直接构造元素，而不需要先构造再复制或移动。这通常可以提高性能，减少不必要的对象拷贝。\n与 insert 类似\n使用 emplace 的主要特点： 直接在容器中构造：emplace 会接受构造元素所需的所有参数，并在容器的内部直接创建该对象。 避免多次拷贝：与 push_back 或 insert 不同，emplace 不会执行隐式拷贝构造，这样可以避免额外的开销。 示例： 以下是一个使用 std::vector 和 std::unordered_map 的例子，说明 emplace 的使用：\n使用 std::vector #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; class Point { public: int x, y; Point(int x, int y) : x(x), y(y) {} }; int main() { std::vector\u0026lt;Point\u0026gt; points; // 使用 emplace 方法直接构造 Point 对象 points.emplace_back(1, 2); points.emplace_back(3, 4); for (const auto\u0026amp; point : points) { std::cout \u0026lt;\u0026lt; \u0026#34;Point(\u0026#34; \u0026lt;\u0026lt; point.x \u0026lt;\u0026lt; \u0026#34;, \u0026#34; \u0026lt;\u0026lt; point.y \u0026lt;\u0026lt; \u0026#34;)\u0026#34; \u0026lt;\u0026lt; std::endl; } return 0; } 使用 std::unordered_map #include \u0026lt;iostream\u0026gt; #include \u0026lt;unordered_map\u0026gt; #include \u0026lt;string\u0026gt; int main() { std::unordered_map\u0026lt;std::string, int\u0026gt; map; // 使用 emplace 插入键值对 map.emplace(\u0026#34;apple\u0026#34;, 10); map.emplace(\u0026#34;banana\u0026#34;, 20); for (const auto\u0026amp; pair : map) { std::cout \u0026lt;\u0026lt; pair.first \u0026lt;\u0026lt; \u0026#34;: \u0026#34; \u0026lt;\u0026lt; pair.second \u0026lt;\u0026lt; std::endl; } return 0; } 总结： emplace 方法是通过 完美转发 构造元素，可以显著提升性能。 它适用于任何需要插入或添加元素的 STL 容器。 min_element 查找最小元素函数 std::min_element 是 C++ 标准库 \u0026lt;algorithm\u0026gt; 中的一个非常有用的算法函数，它用于在指定范围内查找最小元素。下面我会详细解释 min_element 的用法，以及使用解引用操作符 * 的相关内容。\n1. std::min_element 函数原型 template\u0026lt;class ForwardIt\u0026gt; ForwardIt min_element(ForwardIt first, ForwardIt last); 参数： first: 指向范围开始的迭代器（包含）。 last: 指向范围结束的迭代器（不包含）。 返回值：返回指向容器内最小元素的迭代器。如果范围为空，则返回 last。 用法步骤 包含必要的头文件： 使用 min_element 之前，确保包含 \u0026lt;algorithm\u0026gt; 头文件。 指定范围： 使用容器的 begin() 和 end() 方法来指定需要查找最小元素的范围。 获取最小值： 使用解引用操作符 * 获取迭代器指向的值。 2. 示例代码 以下是一个简单的示例，使用 std::min_element 查找 std::vector 中的最小值：\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;algorithm\u0026gt; int main() { std::vector\u0026lt;int\u0026gt; numbers = {3, 1, 4, 1, 5, 9, 2, 6}; // 使用 min_element 查找最小元素 auto minIt = std::min_element(numbers.begin(), numbers.end()); if (minIt != numbers.end()) { // 使用解引用获取最小值 int minValue = *minIt; std::cout \u0026lt;\u0026lt; \u0026#34;Minimum value: \u0026#34; \u0026lt;\u0026lt; minValue \u0026lt;\u0026lt; std::endl; } else { std::cout \u0026lt;\u0026lt; \u0026#34;The range is empty.\u0026#34; \u0026lt;\u0026lt; std::endl; } return 0; } 3. 代码解析 导入库：导入了 iostream, vector, 和 algorithm。\n定义容器：创建了一个 std::vector 并初始化了一些整数。\n调用 min_element\n：\n使用 std::min_element 来查找最小元素，范围是从 numbers.begin() 到 numbers.end()。 返回的 minIt 是指向最小元素的迭代器。 解引用\n：\n通过 *minIt 获取指向的最小值，并存储到 minValue 中。 输出结果：如果容器非空，则输出最小值。\n4. 注意事项 空范围：如果传递空范围给 min_element（即 first 和 last 相等），则返回 last。 元素类型：min_element 可以处理不同的类型，包括自定义类型，只要提供相应的比较运算符。 性能：min_element 的时间复杂度是 O(n)，适合较小的数据集。 单引号和双引号的区别 在 C++ 中，单引号 ' ' 用于表示字符字面值（character literals），而双引号 \u0026quot; \u0026quot; 用于表示字符串字面值（string literals）。字符字面值只能包含一个字符，例如 'a' 或 '0'，而字符串字面值可以包含多个字符，例如 \u0026quot;Hello\u0026quot;。\n字符字面值只能包含一个字符，例如： char singleChar = \u0026#39;a\u0026#39;; // 单个字符 char digit = \u0026#39;0\u0026#39;; // 数字字符 字符串字面值可以包含多个字符，例如： const char* greeting = \u0026#34;Hello\u0026#34;; // 一个字符串 const char* message = \u0026#34;12345\u0026#34;; // 字符串中的数字 指针就是数组 把指针想象成数组\nint yy = 1; int * xx = \u0026amp; yy; // yy地址: 123 xx ---\u0026gt; 两个内容 | |---\u0026gt;下标 xx 存的值为 0x123 |---\u0026gt;数值 *xx 取值为 1 即 yy的值 xx: val | 1 | ==\u0026gt; *xx index |0x123| ==\u0026gt; xx string进行模拟栈的用法 在 C++ 中，std::string 本身不是一个栈（stack），但可以像栈一样使用，特别是利用其尾部（末尾）操作。你可以使用 push_back 和 pop_back 方法来模拟栈的行为。以下是如何用 std::string 模拟栈的简单示例：\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; using namespace std; int main() { string stack; // 入栈 stack.push_back(\u0026#39;A\u0026#39;); stack.push_back(\u0026#39;B\u0026#39;); stack.push_back(\u0026#39;C\u0026#39;); // 出栈 while (!stack.empty()) { char top = stack.back(); // 获取栈顶元素 stack.pop_back(); // 出栈 cout \u0026lt;\u0026lt; top \u0026lt;\u0026lt; endl; // 打印栈顶元素 } return 0; } 代码解释： 入栈：使用 push_back 方法将元素添加到字符串末尾。 出栈：使用 pop_back 方法移除末尾元素，并使用 back 方法获取栈顶元素（末尾元素）。 检查是否为空：使用 empty 方法来检查栈是否为空。 注意事项： 尽管你可以用 std::string 来模拟栈，但对于更复杂的数据结构，建议使用标准库中的 std::stack，它提供了更明确的接口和更好的语义清晰性。 std::stack 是一个适配器，通常与其他容器（如 std::deque 或 std::vector）一起使用，可以更好地满足栈的需求。 queue容器 在 C++ 中，queue 是一种容器适配器，表示一个先进先出（FIFO，First In First Out）的数据结构。下面是关于 queue 的详细解释，包括其特点、基本操作及使用场景。\n1. 基本概念 先进先出（FIFO）：在队列中，第一个加入的元素是第一个被移除的元素。可以想象成排队买东西，先到的人先服务。 应用：队列广泛用于任务调度、事件驱动编程、宽度优先搜索（BFS）等场景。 2. 引入和定义 要使用 queue，需要引入 C++ STL 的 \u0026lt;queue\u0026gt; 头文件：\n#include \u0026lt;queue\u0026gt; 一个基本的队列定义如下：\nstd::queue\u0026lt;int\u0026gt; myQueue; // 定义一个存储整数的队列 3. 常用操作 a. 入队（Push） 使用 push() 方法将元素添加到队列的尾部。\nmyQueue.push(10); myQueue.push(20); myQueue.push(30); b. 出队（Pop） 使用 pop() 方法移除队列的头部元素（最早入队的元素）。\nmyQueue.pop(); // 移除队头元素（10） c. 访问队头元素 使用 front() 方法获取队头元素，但不会移除它。\nint frontElement = myQueue.front(); // 返回 20 d. 访问队尾元素 使用 back() 方法获取队尾元素，但不会移除它。\nint backElement = myQueue.back(); // 返回 30 e. 检查空状态 使用 empty() 方法检查队列是否为空。\nif (myQueue.empty()) { std::cout \u0026lt;\u0026lt; \u0026#34;队列为空\u0026#34; \u0026lt;\u0026lt; std::endl; } f. 获取队列大小 使用 size() 方法获取队列中元素的数量。\nstd::cout \u0026lt;\u0026lt; \u0026#34;队列大小: \u0026#34; \u0026lt;\u0026lt; myQueue.size() \u0026lt;\u0026lt; std::endl; 4. 示例代码 下面是一个完整的示例，演示如何使用 queue：\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;queue\u0026gt; int main() { std::queue\u0026lt;int\u0026gt; myQueue; // 入队 myQueue.push(10); myQueue.push(20); myQueue.push(30); // 输出队头和队尾元素 std::cout \u0026lt;\u0026lt; \u0026#34;队头元素: \u0026#34; \u0026lt;\u0026lt; myQueue.front() \u0026lt;\u0026lt; std::endl; // 输出 10 std::cout \u0026lt;\u0026lt; \u0026#34;队尾元素: \u0026#34; \u0026lt;\u0026lt; myQueue.back() \u0026lt;\u0026lt; std::endl; // 输出 30 // 移除队头元素 myQueue.pop(); std::cout \u0026lt;\u0026lt; \u0026#34;新的队头元素: \u0026#34; \u0026lt;\u0026lt; myQueue.front() \u0026lt;\u0026lt; std::endl; // 输出 20 // 检查队列大小 std::cout \u0026lt;\u0026lt; \u0026#34;队列大小: \u0026#34; \u0026lt;\u0026lt; myQueue.size() \u0026lt;\u0026lt; std::endl; // 输出 2 return 0; } 5. 特点 动态大小：队列的大小是动态的，根据元素的添加和移除而变化。 基于其他容器：queue 通常是基于 deque（双端队列）或 list 实现的，因此它支持快速插入和删除操作。 类型安全：由于使用模板，queue 可以存储任何类型的数据，确保类型安全。 6. 应用场景 任务调度：在操作系统中，任务调度可以利用队列来管理待处理的任务。 广度优先搜索（BFS）：在图形算法中，queue 是实现 BFS 的重要工具。 事件处理：在图形用户界面（GUI）或游戏开发中，事件通常通过队列进行处理。 7. 总结 C++ 的 queue 提供了一种简单而高效的方法来管理数据。在需要处理顺序、维持元素顺序的场景中，queue 是一个非常有用的工具。它的基本操作简单明了，使得程序员能够快速实现和使用这一数据结构。\n**C++**基础 编译 内联函数 内联函数（inline function）是 C++ 中的一种特殊函数，通过在函数调用处直接插入其代码来提高程序的执行效率。内联函数的主要优点是减少函数调用的开销。\n特点： 定义方式： 使用 inline 关键字定义内联函数：\ninline int add(int a, int b) { return a + b; } 调用开销减少： 由于编译器在每个调用点替换函数体，避免了栈操作和跳转，增强了性能。\n适合小函数： 内联函数通常适用于简单、短小的函数，过大的函数可能导致代码膨胀。\n编译期决策： 编译器可以选择是否将某个函数作为内联函数处理，并不总是强制内联。\n示例： #include \u0026lt;iostream\u0026gt; inline int square(int x) { return x * x; } int main() { std::cout \u0026lt;\u0026lt; \u0026#34;Square of 5: \u0026#34; \u0026lt;\u0026lt; square(5) \u0026lt;\u0026lt; std::endl; return 0; } 在上述示例中，调用 square(5) 时，编译器会在调用处替换为 5 * 5，从而减少函数调用的开销。\n指针 类与对象 类（Class） 类是一个用户定义的数据类型，用于封装数据和函数。类可以包含属性（成员变量）和行为（成员函数）。\n定义示例：\nclass Dog { public: // 属性 std::string name; int age; // 构造函数 Dog(std::string n, int a) : name(n), age(a) {} // 方法 void bark() { std::cout \u0026lt;\u0026lt; name \u0026lt;\u0026lt; \u0026#34; says woof!\u0026#34; \u0026lt;\u0026lt; std::endl; } }; 对象（Object） 对象是类的实例，通过类的构造函数创建。每个对象都有自己的属性值。\n使用示例：\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; class Dog { public: std::string name; int age; Dog(std::string n, int a) : name(n), age(a) {} void bark() { std::cout \u0026lt;\u0026lt; name \u0026lt;\u0026lt; \u0026#34; says woof!\u0026#34; \u0026lt;\u0026lt; std::endl; } }; int main() { // 创建对象 Dog myDog(\u0026#34;Buddy\u0026#34;, 3); // 调用对象的方法 myDog.bark(); // 输出: Buddy says woof! return 0; } 总结 类是模板，用于定义对象的属性和行为。 对象是类的实例，具有具体的状态和行为。类和对象的结合使得 C++ 支持面向对象编程，便于代码的组织、复用和维护。 注意 构造函数 ![](../img/屏幕截图 (2).png)\n析构函数特点 拷贝构造函数 拷贝构造函数，又称复制构造函数，是一种特殊的构造函数，它由编译器调用来完成一些基于同一类的其他对象的构建及初始化。\n其形参必须是引用，但并不限制为const，一般普遍的会加上const限制。此函数经常用在函数调用时用户定义类型的值传递及返回。\n拷贝构造函数要调用基类的拷贝构造函数和成员函数。如果可以的话，它将用常量方式调用，另外，也可以用非常量方式调用。\n友元函数 定义:\n友元是一种定义在类外部的普通函数或类，但它需要在类体内进行说明，为了与该类的成员函数加以区别，在说明时前面加以关键字friend。 友元不是成员函数，但是它可以访问类中的私有成员。 类具有封装和信息隐藏的特性。只有类的成员函数才能访问类的私有成员，程序中的其他函数是无法访问私有成员的。非成员函数可以访问类中的公有成员，但是如果将数据成员都定义为公有的，这又破坏了隐藏的特性。另外，应该看到在某些情况下，特别是在对某些成员函数多次调用时，由于参数传递，类型检查和安全性检查等都需要时间开销，而影响程序的运行效率。 友元函数与一般函数的不同点在于：\n友元函数必须在类的定义中说明，其函数体可在类内定义，也可在类外定义；\n它可以访问该类中的所有成员（公有的、私有的和保护的），而一般函数只能访问类中的公有成员。\n注意事项\n友元关系不能被继承。 友元关系是单向的，不具有交换性。若类B是类A的友元，类A不一定是类B的友元，要看在类中是否有相应的声明。 友元关系不具有传递性。若类B是类A的友元，类C是B的友元，类C不一定是类A的友元，同样要看类中是否有相应的申明。 动态内存 函数重载 函数重载是一种特殊情况，C++允许在同一作用域中声明几个类似的同名函数，这些同名函数的形参列表（参数个数，类型，顺序）必须不同，常用来处理实现功能类似数据类型不同的问题。 所谓函数的重载是指完成不同功能的函数可以具有相同的函数名。 C++的编译器是根据函数的实参来确定应该调用哪一个函数的。 void Swap1(int* a, int* b); void Swap2(float* a, float* b); void Swap3(char* a, char* b); void Swap4(double* a, double* b); 运算符重载 可以重定义或重载大部分 C++ 内置的运算符。这样，您就能使用自定义类型的运算符。\n重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个返回类型和一个参数列表。\nBox operator+(const Box\u0026amp;); 声明加法运算符用于把两个 Box 对象相加，返回最终的 Box 对象。大多数的重载运算符可被定义为普通的非成员函数或者被定义为类成员函数。如果我们定义上面的函数为类的非成员函数，那么我们需要为每次操作传递两个参数，如下所示：\nBox operator+(const Box\u0026amp;, const Box\u0026amp;); 单继承 在C++中所谓“继承”就是在一个已存在的类的基础上建立一个新的类。已存在的类称为“基类(base class)”或“父类(father class)”。新建立的类称为“派生类(derived class)”或“子类(son class)”。\n通过继承机制，可以利用已有的数据类型来定义新的数据类型。所定义的新的数据类型不仅拥有新定义的成员，而且还同时拥有旧的成员。我们称已存在的用来派生新类的类为基类，又称为父类。由已存在的类派生出的新类称为派生类，又称为子类。\n在建立派生类的过程中，基类不会做任何改变，派生类则除了继承基类的所有可引用的成员变量和成员函数外，还可另外定义本身的成员变量和处理这些变量的函数，由于派生类可继承基类的成员变量和成员函数，因此在基类中定义好的数据和函数等的程序代码可重复使用，这样可以提高程序的可靠性。\n当从已有的类中派生出新的类时，可以对派生类做以下几种变化：\n可以继承基类的成员数据或成员函数。 可以增加新的成员变量。 可以增加新的成员函数。 可以重新定义已有的成员函数。 可以改变现有的成员属性。 在C++中有二种继承：单一继承和多重继承。当一个派生类仅由一个基类派生时，称为单一继承；而当一个派生类由二个或更多个基类所派生时，称为多重继承。\n但派生并不是简单的扩充，有可能改变基类的性质。有三种派生方式：公有派生、保护派生、私有派生。默认的是私有派生。\n公有派生（Public Inheritance） 在 C++ 中，公有派生（Public Inheritance）是最常见的类继承方式。通过公有派生，派生类可以继承基类的成员，其访问权限如下：\n公有成员（public）： 在派生类和类外均可访问。 保护成员（protected）： 在派生类内可访问，但在类外不能直接访问。 私有成员（private）： 不能在派生类中访问，只能通过基类的公有或保护成员函数访问。 示例代码 class Base { public: int pubVar; // 可在派生类和类外访问 protected: int protVar; // 可在派生类访问，但类外无法访问 private: int privVar; // 仅能在基类中访问 }; class Derived : public Base { public: void accessMembers() { pubVar = 1; // 可访问 protVar = 2; // 可访问 // privVar = 3; // 错误：无法访问 } }; // 使用示例 int main() { Derived d; d.pubVar = 10; // 可以访问 // d.protVar = 20; // 错误：无法访问 // d.privVar = 30; // 错误：无法访问 return 0; } 使用公有派生时，基类的公有和保护成员在派生类中依然保持其访问权限，而私有成员不可访问。 私有派生（Private Inheritance） 在 C++ 中，私有派生是一种继承方式，其中基类的公有成员和保护成员在派生类中都变为私有成员。这意味着：\n公有成员（public）： 在基类中为公有，但在派生类中变为私有。可以在派生类内部直接使用，但在派生类外部无法访问。 保护成员（protected）： 在基类中为保护，但在派生类中同样变为私有。可以在派生类内部使用，但在外部无法访问。 私有成员（private）： 私有成员在基类中始终不可访问，派生类也无法直接使用。 示例代码 class Base { public: int pubVar; // 公有成员 protected: int protVar; // 保护成员 private: int privVar; // 私有成员 }; class Derived : private Base { public: void accessMembers() { pubVar = 1; // 可以访问（变为私有） protVar = 2; // 可以访问（变为私有） // privVar = 3; // 错误：无法访问 } }; // 使用示例 int main() { Derived d; d.pubVar = 10; // 错误：无法访问 // d.protVar = 20; // 错误：无法访问 // d.privVar = 30; // 错误：无法访问 return 0; } 私有派生通过将基类的公有和保护成员转为私有，增强了基类的封装性，确保只有派生类内部可以使用这些成员，外部无法直接访问。这种方式适用于希望隐藏基类实现细节，同时允许派生类使用基类功能的场景。 3**、【保护派生】**\nclass ClassName: protected BaseClassName\n保护派生时，基类中公有成员和保护成员在派生类中均变为保护的和私有的，在派生类中仍可直接使用这些成员，基类中的私有成员，在派生类中不可直接使用。\n基类：public: (变为保护)在派生类中使用，类外不可使用\nprotected: (变为私有）在派生类中使用，类外不可使用\nprivate: 不能在派生类中和类外使用\n保护派生（Protected Inheritance） 在 C++ 中，保护派生是一种继承方式。通过这种方式，基类的公有成员和保护成员在派生类中被视为保护成员，这意味着它们的访问权限发生了变化：\n公有成员（public）： 在基类中是公有的，但在保护派生中变为保护的。派生类可以内部访问，但类外部无法访问。 保护成员（protected）： 在基类中是保护的，经过保护派生后仍然是保护的，派生类可以内部访问，类外部无法访问。 私有成员（private）： 无论是公有、保护还是私有继承，基类的私有成员始终不可在派生类中访问。 示例代码 class Base { public: int pubVar; // 公有成员 protected: int protVar; // 保护成员 private: int privVar; // 私有成员 }; class Derived : protected Base { public: void accessMembers() { pubVar = 1; // 可以访问（变为保护） protVar = 2; // 可以访问（仍为保护） // privVar = 3; // 错误：无法访问 } }; // 使用示例 int main() { Derived d; // d.pubVar = 10; // 错误：无法访问 // d.protVar = 20; // 错误：无法访问 // d.privVar = 30; // 错误：无法访问 return 0; } 通过保护派生，基类的公有和保护成员变为保护，派生类内部可以直接使用这些成员，但在派生类外部无法访问。这种方式适用于需要隐藏基类实现细节，仅允许派生类使用基类功能的场合。保护派生的访问控制增大了封装性，确保了基类的内聚性。 抽象类与保护的成员函数 在面向对象编程中，一个类如果只能用作基类，不能创建对象，那么这个类被称为抽象类。抽象类的主要目的是用来定义其他类的通用接口或协议，通常包含至少一个抽象方法，这些方法在抽象类中声明但不实现，派生类必须实现这些方法。\n抽象类的定义示例 class AbstractClass { public: virtual void abstractMethod() = 0; // 抽象方法 }; 保护的构造函数和析构函数 在 C++ 中，可以将类的构造函数和析构函数定义为保护的（protected）。这样，外部代码无法直接创建该类的对象，但派生类可以访问和调用这些构造函数和析构函数。这种设计通常用于控制对象的创建和销毁过程，以确保只有派生类能够实例化该类。\n例如：\nclass AbstractBase { protected: AbstractBase() {} // 保护构造函数 virtual ~AbstractBase() {} // 保护析构函数 }; // 派生类可以使用 class ConcreteDerived : public AbstractBase { public: ConcreteDerived() {} }; 私有构造函数和析构函数 如果将一个类的构造函数或析构函数定义为私有的（private），这个类将无法被实例化，也无法被用作基类来派生出新的类。这种设计通常用于工具类等场景，表明该类不应该直接创建对象，而是提供静态功能或数据。\n当把类中的构造函数或析构函数说明为私有的时，所定义的类通常是没有任何实用意义的，一般情况下，不能用它来产生对象，也不能用它来产生派生类。\n例如：\nclass Utility { private: Utility() {} // 私有构造函数 ~Utility() {} // 私有析构函数 public: static void usefulMethod() { // 提供静态方法 } }; 抽象类用于定义子类的接口，不能被实例化。 保护构造函数和析构函数允许派生类访问，控制对象创建。 私有构造函数和析构函数禁止实例化，通常用于工具类。 多继承 //格式为： class 类名:\u0026lt;Access\u0026gt;类名1,..., \u0026lt;Access\u0026gt;类名n { private: ...... ； //私有成员说明; public: ...... ； //公有成员说明; protected: ...... ； //保护的成员说明; }; class D: public A, protected B, private C { ....//派生类中新增加成员 }; 初始化基类成员\n构造函数不能被继承, 派生类的构造函数必须调用基类的构造函数来初始化基类成员基类子对象。\n派生类构造函数的调用顺序如下：\n基类的构造函数 子对象类的构造函数 派生类的构造函数 虚继承 //通过指定类名来解决指定不明确问题 A::v.x = 5; 虚基类 在同一个公共的基类在派生类中产生多个拷贝，不仅多占用了存储空间，而且可能会造成多个拷贝中的数据不一致和模糊的引用。\nD d; d.x=10; //模糊引用 在多重派生的过程中，若使公共基类在派生类中只有一个拷贝，则可将这种基类说明为虚基类。在派生类的定义中，只要在基类的类名前加上关键字virtual，就可以将基类说明为虚基类。\nclass B:public virtual A{ public: int y; B(int a=0, int b=0 ):A(b) { y=a;} }; 这样就不会造成模糊引用。\n由虚基类派生出的对象初始化时，直接调用虚基类的构造函数。因此，若将一个类定义为虚基类，则一定有正确的构造函数可供所有派生类调用。 再次强调，用虚基类进行多重派生时，若虚基类没有缺省的构造函数，则在每一个派生类的构造函数中都必须有对虚基类构造函数的调用 （且首先调用）。 虚函数 虚函数是 C++ 中实现多态性的重要机制。它允许在基类中声明一个函数，并在派生类中重新定义（重写）这个函数。通过虚函数，可以在运行时根据对象的实际类型调用相应的函数，实现动态绑定。\n定义和用法 虚函数通过在基类中使用关键字 virtual 声明。当基类指针或引用指向派生类对象时，虚函数确保调用的是派生类中重写的版本。\n示例代码 #include \u0026lt;iostream\u0026gt; class Base { public: virtual void show() { // 虚函数 std::cout \u0026lt;\u0026lt; \u0026#34;Base class show function called.\u0026#34; \u0026lt;\u0026lt; std::endl; } virtual ~Base() {} // 虚析构函数 }; class Derived : public Base { public: void show() override { // 重写基类的虚函数 std::cout \u0026lt;\u0026lt; \u0026#34;Derived class show function called.\u0026#34; \u0026lt;\u0026lt; std::endl; } }; int main() { Base* ptr; // 基类指针 Derived derivedObj; // 派生类对象 ptr = \u0026amp;derivedObj; // 指向派生类对象 ptr-\u0026gt;show(); // 调用派生类的 show 函数 return 0; } 输出结果 Derived class show function called. 关键点 动态绑定：虚函数的调用决定是在运行时而非编译时，允许实现多态。 基类指针或引用：通过基类指针或引用调用虚函数时，实际调用的是对象的动态类型的相应函数。 虚析构函数：如果类有虚函数，通常应该有虚析构函数，以确保在对象销毁时正确调用派生类的析构函数。 性能开销：虚函数通过虚表（vtable）实现，可能会引入少许性能开销。 抽象类 抽象类是面向对象编程中的一种特殊类型的类，它主要用于定义子类的接口或协议。抽象类不能被实例化，也就是说，无法创建抽象类的对象。它通常包含至少一个抽象方法，即在抽象类中声明但不实现的方法。\n特点 不能实例化：抽象类不能创建对象，只能作为基类使用。 包含抽象方法：至少包含一个纯虚函数（抽象方法），用 = 0 的语法声明。 可包含具体方法：抽象类可以包含具体方法（已经实现的方法）和成员变量。 派生类实现：派生类必须实现所有抽象方法，才能被实例化。 示例代码 #include \u0026lt;iostream\u0026gt; class AbstractClass { public: // 抽象方法 virtual void doSomething() = 0; // 具体方法 void commonFunction() { std::cout \u0026lt;\u0026lt; \u0026#34;This is a common function.\u0026#34; \u0026lt;\u0026lt; std::endl; } }; class ConcreteClass : public AbstractClass { public: // 实现抽象方法 void doSomething() override { std::cout \u0026lt;\u0026lt; \u0026#34;Doing something in ConcreteClass.\u0026#34; \u0026lt;\u0026lt; std::endl; } }; int main() { // AbstractClass obj; // 错误：无法实例化抽象类 ConcreteClass myObject; myObject.commonFunction(); // 调用具体方法 myObject.doSomething(); // 调用实现的抽象方法 return 0; } 输出结果 This is a common function. Doing something in ConcreteClass. 关键点 接口定义：抽象类通过定义接口，规定了派生类应当实现的功能。 增强灵活性：通过使用抽象类，可以轻松实现多态，提高代码的可维护性和扩展性。 防止实例化：使用抽象类可以防止意外创建基类的对象，确保只能使用具体的实现类。 命名空间 **使用命名空间的目的是对标识符的名称进行本地化，以避免命名冲突。在C++中，变量、函数和类都是大量存在的。如果没有命名空间，这些变量、函数、类的名称将都存在于全局命名空间中，会导致很多冲突。 **\nnamespace 关键字使得我们可以通过创建作用范围来对全局命名空间进行分隔。本质上来讲，一个命名空间就定义了一个范围。定义命名空间的基本形式如下：\nnamespace 名称{ 声明 } 在命名空间中定义的任何东西都局限于该命名空间内。\n命名空间可以嵌套，在一个命名空间中定义另一个命名空间。\nnamespace 命名空间名称1{ // 代码声明 namespace命名空间名称2{ // 代码声明 } } 通过使用 :: 运算符来访问嵌套的命名空间中的成员。\n函数模板 模板是泛型编程的基础，泛型编程即以一种独立于任何特定类型的方式编写代码。模板是创建泛型类或函数的蓝图或公式。 模板函数定义的一般形式如下所示：\ntemplate \u0026lt;typename type类型\u0026gt; 返回类型 函数名(参数列表) { // 函数的主体 } type 是函数所使用的数据类型的占位符名称。这个名称可以在函数定义中使用。\n正如我们定义函数模板一样，我们也可以定义类模板。泛型类声明的一般形式如下所示： template \u0026lt;class type\u0026gt; class class-name { } type 是占位符类型名称，可以在类被实例化的时候进行指定。使用一个逗号分隔的列表来定义多个泛型数据类型。\n输入输出流 IO IO流 在C++中允许用户重载运算符\u0026lt;\u0026lt;和\u0026gt;\u0026gt;，实现对象的输入和输出。重载这二个运算符时，在对象所在的类中，将重载这二个运算符的函数说明该类的友元函数。\n文件流 C++标准库专门提供了3个类用于实现文件操作，它们统称为文件流类，这3个类分别为：\nifstream：专用于从文件中读取数据； ofstream：专用于向文件中写入数据； fstream：既可用于从文件中读取数据，又可用于向文件中写入数据。 打开文件可以通过以下两种方式进行：\n调用流对象的 open 成员函数打开文件。 定义文件流对象时，通过构造函数打开文件。 【使用 open 函数打开文件】\n先看第一种文件打开方式。以 ifstream 类为例，该类有一个 open 成员函数，其他两个文件流类也有同样的 open 成员函数：\nvoid open(const char* szFileName, int mode) 第一个参数是指向文件名的指针，第二个参数是文件的打开模式标记。\nios::binary 可以和其他模式标记组合使用，例如：\nios::in | ios::binary表示用二进制模式，以读取的方式打开文件； ios::out | ios::binary表示用二进制模式，以写入的方式打开文件。 在流对象上执行 open 成员函数，给出文件名和打开模式，就可以打开文件。判断文件打开是否成功，可以看“对象名”这个表达式的值是否为 true，如果为 true，则表示文件打开成功。\n**close()方法的用法很简单，其语法格式如下： **\nvoid close(); 调用open()方法打开文件，是文件流对象和文件之间建立关联的过程。那么，调用 close()方法关闭已打开的文件，就可以理解为是切断文件流对象和文件之间的关联。注意，close()方法的功能仅是切断文件流与文件之间的关联，该文件流并会被销毁，其后续还可用于关联其它的文件。\n可以看到，该方法既不需要传递任何参数，也没有返回值。\nSTL标准模板库 STL是Standard Template Library的简称，中文名标准模板库，惠普实验室开发的一系列软件的统称。它是由Alexander Stepanov、Meng Lee和David R Musser在惠普实验室工作时所开发出来的。从根本上说，STL是一些“容器”的集合，这些“容器”有list,vector,set,map等，STL也是算法和其他一些组件的集合。这里的“容器”和算法的集合指的是世界上很多聪明人很多年的杰作。STL的目的是标准化组件，这样就不用重新开发，可以使用现成的组件。STL是C++的一部分，因此不用安装额外的库文件。\nSTL的版本很多，常见的有HP STL、PJ STL、 SGI STL等。\nvector 序列式容器 vector 容器是 STL 中最常用的容器之一，它和 array 容器非常类似，都可以看做是对 C++ 普通数组的“升级版”。不同之处在于，array 实现的是静态数组（容量固定的数组），而 vector 实现的是一个动态数组，即可以进行元素的插入和删除，在此过程中，vector 会动态调整所占用的内存空间，整个过程无需人工干预。\nvector 常被称为向量容器，因为该容器擅长在尾部插入或删除元素，在常量时间内就可以完成，时间复杂度为O(1)；而对于在容器头部或者中部插入或删除元素，则花费时间要长一些（移动元素需要耗费时间），时间复杂度为线性阶O(n)。\ndeque双端队列容器 前面已接触过vector 容器，值得一提的是，deque 容器和 vecotr 容器有很多相似之处，比如：deque 容器也擅长在序列尾部添加或删除元素（时间复杂度为O(1)），而不擅长在序列中间添加或删除元素。deque 容器也可以根据需要修改自身的容量和大小。\n和 vector 不同的是，deque 还擅长在序列头部添加或删除元素，所耗费的时间复杂度也为常数阶O(1)。并且更重要的一点是，deque 容器中存储元素并不能保证所有元素都存储到连续的内存空间中。\n当需要向序列两端频繁的添加或删除元素时，应首选 deque 容器。\nstack 栈容器 stack\u0026lt; T \u0026gt;容器适配器中的数据是以 LIFO (先进后出) 的方式组织的，这和自助餐馆中堆叠的盘子、箱子中的一堆书类似。理论上的 stack 容器及其一些基本操作。只能访问 stack 顶部的元素；只有在移除 stack 顶部的元素后，才能访问下方的元素。\nqueue队列 队列也是一种逻辑数据结构，其具有先进先出的特性，只能在队的前端进行删除， 在队的后端进行插入。针对这种特性，可以实现一些较为复杂的逻辑。在实际应用中，部分程序也正需要这样一种顺序进出的数据处理方式。\nqueue：只允许从一端插入元素（入队），从另一端删除元素（出队）。遵循先进先出（FIFO）的原则。 deque：可以在两端插入和删除元素。支持在前端和后端进行操作。 set容器 STL 对这个序列可以进行查找、插入、删除序列中的任意一个元素，而完成这些操作的时间同这个序列中元素个数的对数成比例关系，并且当游标指向一个已删除的元素时，删除操作无效。\n而一个经过更正的和更加实际的定义应该是：一个集合(set)是一个容器，它其中所包含的元素的值是唯一的。这在收集一个数据的具体值的时候是有用的。集合中的元素按一定的顺序排列，并被作为集合中的实例。一个集合通过一个链表来组织，在插入操作和删除操作上比向量(vector)快，但查找或添加末尾的元素时会有些慢。具体实现采用了红黑树的平衡二叉树的数据结构。\nmap容器 映射和多重映射基于某一类型Key的键集的存在，提供对T类型的数据进行快速和高效的检索。\n对map而言，键只是指存储在容器中的某一成员。Map不支持副本键，multimap支持副本键。Map和multimap对象包涵了键和各个键有关的值，键和值的数据类型是不相同的，这与set不同。set中的key和value是Key类型的，而map中的key和value是一个pair结构中的两个分量。\nC++异常处理 程序中常见的错误有两大类：语法错误和运行错误。在编译时，编译系统能发现程序中的语法错误。\n异常(exception)是运行时(run-time)的错误，通常是非正常条件下引起的，例如，下标(index)越界、new操作不能正常分配所需内存。C语言中，异常通常是通过被调用函数返回一个数值作为标记的。\nC++中，函数可以识别标记为异常的条件，然后通告发生了异常。这种通告异常的机制称为抛出异常(throwing an exception)。\n异常提供了一种转移程序控制权的方式。C++ 异常处理涉及到三个关键字：try、catch、throw。\n**throw：**当问题出现时，程序会抛出一个异常。这是通过使用 throw 关键字来完成的。 **catch：**在您想要处理问题的地方，通过异常处理程序捕获异常。catch 关键字用于捕获异常。 **try：**try 块中的代码标识将被激活的特定异常。它后面通常跟着一个或多个 catch 块。 如果有一个块抛出一个异常，捕获异常的方法会使用 try 和 catch 关键字。try 块中放置可能抛出异常的代码，try 块中的代码被称为保护代码。\n例如\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { double x, y; cout \u0026lt;\u0026lt; \u0026#34;请输入x,y的值:\u0026#34;; cin \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y; try { if (y == 0) throw - 1; // 抛出-1类型异常 else if(x==0) throw - 1.0; // 抛出-1类型异常 else cout \u0026lt;\u0026lt; \u0026#34;x/y=\u0026#34; \u0026lt;\u0026lt; x / y \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; endl; } catch (int e) { cout \u0026lt;\u0026lt; \u0026#34;catch(int) :\u0026#34; \u0026lt;\u0026lt; e \u0026lt;\u0026lt; endl; } catch (double d) { cout \u0026lt;\u0026lt; \u0026#34;catch(double) :\u0026#34; \u0026lt;\u0026lt; d \u0026lt;\u0026lt; endl; } return 0; } ","permalink":"//localhost:1313/posts/c++%E8%AF%AD%E8%A8%80/","summary":"\u003ch1 id=\"emplace用法\"\u003eemplace用法\u003c/h1\u003e\n\u003cp\u003e\u003ccode\u003eemplace\u003c/code\u003e 是 C++ 中用于容器（如 \u003ccode\u003estd::vector\u003c/code\u003e, \u003ccode\u003estd::map\u003c/code\u003e, \u003ccode\u003estd::unordered_map\u003c/code\u003e 等）的一种方法，允许你在容器中直接构造元素，而不需要先构造再复制或移动。这通常可以提高性能，减少不必要的对象拷贝。\u003c/p\u003e","title":"C++基础"},{"content":"go的变量声明 第一种，指定变量类型，如果没有初始化，则变量默认为零值。 例如：\nvar a int // 声明一个整型变量 a，默认为 0 var b float64 // 声明一个浮点型变量 b，默认为 0.0 第二种，根据值自行判定变量类型。 例如：\nvar c = \u0026#34;Hello\u0026#34; // 声明变量 c，类型为 string var d = 42 // 声明变量 d，类型为 int 第三种，如果变量已经使用 var 声明过了，再使用 := 声明变量，就产生编译错误 例如：\nvar e int = 10 // 使用 var 声明 // e := 20 // 编译错误：e 已经被声明过 go的语言常量 常量是一个简单值的标识符，在程序运行时，不会被修改的量。\n常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。\n常量的定义格式：\nconst identifier [type] = value 你可以省略类型说明符 [type]，因为编译器可以根据变量的值来推断其类型。\n显式类型定义： const b string = \u0026quot;abc\u0026quot; 隐式类型定义： const b = \u0026quot;abc\u0026quot; 多个相同类型的声明可以简写为：\nconst c_name1, c_name2 = value1, value2 iota，特殊常量，可以认为是一个可以被编译器修改的常量。\niota 在 const关键字出现时将被重置为 0(const 内部的第一行之前)，const 中每新增一行常量声明将使 iota 计数一次(iota 可理解为 const 语句块中的行索引)。\niota 可以被用作枚举值：\nconst ( a = iota b = iota c = iota ) 第一个 iota 等于 0，每当 iota 在新的一行被使用时，它的值都会自动加 1；所以 a=0, b=1, c=2 可以简写为如下形式：\nconst ( a = iota b c ) iota 用法 实例 package main import \u0026#34;fmt\u0026#34; func main() { const ( a = iota //0 b //1 c //2 d = \u0026#34;ha\u0026#34; //独立值，iota += 1 e //\u0026#34;ha\u0026#34; iota += 1 f = 100 //iota +=1 g //100 iota +=1 h = iota //7,恢复计数 i //8 ) fmt.Println(a,b,c,d,e,f,g,h,i) } 以上实例运行结果为：\n0 1 2 ha ha 100 100 7 8 go的运算符 运算符用于在程序运行时执行数学或逻辑运算。\nGo 语言内置的运算符有：\n算术运算符 关系运算符 逻辑运算符 位运算符 赋值运算符 其他运算符 接下来让我们来详细看看各个运算符的介绍。\n算术运算符 下表列出了所有Go语言的算术运算符。假定 A 值为 10，B 值为 20。\n运算符 描述 实例 + 相加 A + B 输出结果 30 - 相减 A - B 输出结果 -10 * 相乘 A * B 输出结果 200 / 相除 B / A 输出结果 2 % 求余 B % A 输出结果 0 ++ 自增 A++ 输出结果 11 \u0026ndash; 自减 A\u0026ndash; 输出结果 9 以下实例演示了各个算术运算符的用法：\n实例 package main import \u0026#34;fmt\u0026#34; func main() { var a int = 21 var b int = 10 var c int c = a + b fmt.Printf(\u0026#34;第一行 - c 的值为 %d**\\n**\u0026#34;, c ) c = a - b fmt.Printf(\u0026#34;第二行 - c 的值为 %d**\\n**\u0026#34;, c ) c = a * b fmt.Printf(\u0026#34;第三行 - c 的值为 %d**\\n**\u0026#34;, c ) c = a / b fmt.Printf(\u0026#34;第四行 - c 的值为 %d**\\n**\u0026#34;, c ) c = a % b fmt.Printf(\u0026#34;第五行 - c 的值为 %d**\\n**\u0026#34;, c ) a++ fmt.Printf(\u0026#34;第六行 - a 的值为 %d**\\n**\u0026#34;, a ) a=21 // 为了方便测试，a 这里重新赋值为 21 a-- fmt.Printf(\u0026#34;第七行 - a 的值为 %d**\\n**\u0026#34;, a ) } 以上实例运行结果：\n第一行 - c 的值为 31 第二行 - c 的值为 11 第三行 - c 的值为 210 第四行 - c 的值为 2 第五行 - c 的值为 1 第六行 - a 的值为 22 第七行 - a 的值为 20 关系运算符 下表列出了所有Go语言的关系运算符。假定 A 值为 10，B 值为 20。\n运算符 描述 实例 == 检查两个值是否相等，如果相等返回 True 否则返回 False。 (A == B) 为 False != 检查两个值是否不相等，如果不相等返回 True 否则返回 False。 (A != B) 为 True \u0026gt; 检查左边值是否大于右边值，如果是返回 True 否则返回 False。 (A \u0026gt; B) 为 False \u0026lt; 检查左边值是否小于右边值，如果是返回 True 否则返回 False。 (A \u0026lt; B) 为 True \u0026gt;= 检查左边值是否大于等于右边值，如果是返回 True 否则返回 False。 (A \u0026gt;= B) 为 False \u0026lt;= 检查左边值是否小于等于右边值，如果是返回 True 否则返回 False。 (A \u0026lt;= B) 为 True package main import \u0026#34;fmt\u0026#34; func main() { var a bool = true var b bool = false if ( a \u0026amp;\u0026amp; b ) { fmt.Printf(\u0026#34;第一行 - 条件为 true\\n\u0026#34; ) } if ( a || b ) { fmt.Printf(\u0026#34;第二行 - 条件为 true\\n\u0026#34; ) } /* 修改 a 和 b 的值 */ a = false b = true if ( a \u0026amp;\u0026amp; b ) { fmt.Printf(\u0026#34;第三行 - 条件为 true\\n\u0026#34; ) } else { fmt.Printf(\u0026#34;第三行 - 条件为 false\\n\u0026#34; ) } if ( !(a \u0026amp;\u0026amp; b) ) { fmt.Printf(\u0026#34;第四行 - 条件为 true\\n\u0026#34; ) } } 运行结果：\n第一行 - a 不等于 b 第二行 - a 不小于 b 第三行 - a 大于 b 第四行 - a 小于等于 b 第五行 - b 大于等于 a 逻辑运算符 下表列出了所有Go语言的逻辑运算符。假定 A 值为 True，B 值为 False。\n运算符 描述 实例 \u0026amp;\u0026amp; 逻辑 AND 运算符。 如果两边的操作数都是 True，则条件 True，否则为 False。 (A \u0026amp;\u0026amp; B) 为 False || 逻辑 OR 运算符。 如果两边的操作数有一个 True，则条件 True，否则为 False。 (A || B) 为 True ! 逻辑 NOT 运算符。 如果条件为 True，则逻辑 NOT 条件 False，否则为 True。 !(A \u0026amp;\u0026amp; B) 为 True package main import \u0026#34;fmt\u0026#34; func main() { var a bool = true var b bool = false if ( a \u0026amp;\u0026amp; b ) { fmt.Printf(\u0026#34;第一行 - 条件为 true\\n\u0026#34; ) } if ( a || b ) { fmt.Printf(\u0026#34;第二行 - 条件为 true\\n\u0026#34; ) } /* 修改 a 和 b 的值 */ a = false b = true if ( a \u0026amp;\u0026amp; b ) { fmt.Printf(\u0026#34;第三行 - 条件为 true\\n\u0026#34; ) } else { fmt.Printf(\u0026#34;第三行 - 条件为 false\\n\u0026#34; ) } if ( !(a \u0026amp;\u0026amp; b) ) { fmt.Printf(\u0026#34;第四行 - 条件为 true\\n\u0026#34; ) } } 运行结果：\n第二行 - 条件为 true 第三行 - 条件为 false 第四行 - 条件为 true 位运算符 位运算符对整数在内存中的二进制位进行操作。\n下表列出了位运算符 \u0026amp;, |, 和 ^ 的计算：\np q p \u0026amp; q p | q p ^ q 0 0 0 0 0 0 1 0 1 1 1 1 1 1 0 1 0 0 1 1 假定 A = 60; B = 13; 其二进制数转换为：\nA = 0011 1100 B = 0000 1101 ----------------- A\u0026amp;B = 0000 1100 A|B = 0011 1101 A^B = 0011 0001 Go 语言支持的位运算符如下表所示。假定 A 为60，B 为13：\n运算符 描述 实例 \u0026amp; 按位与运算符\u0026quot;\u0026amp;\u0026ldquo;是双目运算符。 其功能是参与运算的两数各对应的二进位相与。 (A \u0026amp; B) 结果为 12, 二进制为 0000 1100 | 按位或运算符\u0026rdquo;|\u0026ldquo;是双目运算符。 其功能是参与运算的两数各对应的二进位相或 (A | B) 结果为 61, 二进制为 0011 1101 ^ 按位异或运算符\u0026rdquo;^\u0026ldquo;是双目运算符。 其功能是参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。 (A ^ B) 结果为 49, 二进制为 0011 0001 \u0026laquo; 左移运算符\u0026rdquo;\u0026laquo;\u0026ldquo;是双目运算符。左移n位就是乘以2的n次方。 其功能把\u0026rdquo;\u0026laquo;\u0026ldquo;左边的运算数的各二进位全部左移若干位，由\u0026rdquo;\u0026laquo;\u0026ldquo;右边的数指定移动的位数，高位丢弃，低位补0。 A \u0026laquo; 2 结果为 240 ，二进制为 1111 0000 \u0026raquo; 右移运算符\u0026rdquo;\u0026raquo;\u0026ldquo;是双目运算符。右移n位就是除以2的n次方。 其功能是把\u0026rdquo;\u0026raquo;\u0026ldquo;左边的运算数的各二进位全部右移若干位，\u0026quot;\u0026raquo;\u0026ldquo;右边的数指定移动的位数。 A \u0026raquo; 2 结果为 15 ，二进制为 0000 1111 package main import \u0026#34;fmt\u0026#34; func main() { var a uint = 60 /* 60 = 0011 1100 */ var b uint = 13 /* 13 = 0000 1101 */ var c uint = 0 c = a \u0026amp; b /* 12 = 0000 1100 */ fmt.Printf(\u0026#34;第一行 - c 的值为 %d\\n\u0026#34;, c ) c = a | b /* 61 = 0011 1101 */ fmt.Printf(\u0026#34;第二行 - c 的值为 %d\\n\u0026#34;, c ) c = a ^ b /* 49 = 0011 0001 */ fmt.Printf(\u0026#34;第三行 - c 的值为 %d\\n\u0026#34;, c ) c = a \u0026lt;\u0026lt; 2 /* 240 = 1111 0000 */ fmt.Printf(\u0026#34;第四行 - c 的值为 %d\\n\u0026#34;, c ) c = a \u0026gt;\u0026gt; 2 /* 15 = 0000 1111 */ fmt.Printf(\u0026#34;第五行 - c 的值为 %d\\n\u0026#34;, c ) } 运行结果：\n第一行 - c 的值为 12 第二行 - c 的值为 61 第三行 - c 的值为 49 第四行 - c 的值为 240 第五行 - c 的值为 15 赋值运算符 下表列出了所有Go语言的赋值运算符。\n运算符 描述 实例 = 简单的赋值运算符，将一个表达式的值赋给一个左值 C = A + B 将 A + B 表达式结果赋值给 C += 相加后再赋值 C += A 等于 C = C + A -= 相减后再赋值 C -= A 等于 C = C - A *= 相乘后再赋值 C *= A 等于 C = C * A /= 相除后再赋值 C /= A 等于 C = C / A %= 求余后再赋值 C %= A 等于 C = C % A \u0026laquo;= 左移后赋值 C \u0026laquo;= 2 等于 C = C \u0026laquo; 2 \u0026raquo;= 右移后赋值 C \u0026raquo;= 2 等于 C = C \u0026raquo; 2 \u0026amp;= 按位与后赋值 C \u0026amp;= 2 等于 C = C \u0026amp; 2 ^= 按位异或后赋值 C ^= 2 等于 C = C ^ 2 |= 按位或后赋值 C |= 2 等于 C = C | 2 package main import \u0026#34;fmt\u0026#34; func main() { var a int = 21 var c int c = a fmt.Printf(\u0026#34;第 1 行 - = 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c += a fmt.Printf(\u0026#34;第 2 行 - += 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c -= a fmt.Printf(\u0026#34;第 3 行 - -= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c *= a fmt.Printf(\u0026#34;第 4 行 - *= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c /= a fmt.Printf(\u0026#34;第 5 行 - /= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c = 200; c \u0026lt;\u0026lt;= 2 fmt.Printf(\u0026#34;第 6行 - \u0026lt;\u0026lt;= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c \u0026gt;\u0026gt;= 2 fmt.Printf(\u0026#34;第 7 行 - \u0026gt;\u0026gt;= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c \u0026amp;= 2 fmt.Printf(\u0026#34;第 8 行 - \u0026amp;= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c ^= 2 fmt.Printf(\u0026#34;第 9 行 - ^= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c |= 2 fmt.Printf(\u0026#34;第 10 行 - |= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) } 运行结果：\n第 1 行 - = 运算符实例，c 值为 = 21 第 2 行 - += 运算符实例，c 值为 = 42 第 3 行 - -= 运算符实例，c 值为 = 21 第 4 行 - *= 运算符实例，c 值为 = 441 第 5 行 - /= 运算符实例，c 值为 = 21 第 6行 - \u0026lt;\u0026lt;= 运算符实例，c 值为 = 800 第 7 行 - \u0026gt;\u0026gt;= 运算符实例，c 值为 = 200 第 8 行 - \u0026amp;= 运算符实例，c 值为 = 0 第 9 行 - ^= 运算符实例，c 值为 = 2 第 10 行 - |= 运算符实例，c 值为 = 2 其他运算符 下表列出了Go语言的其他运算符。\n运算符 描述 实例 \u0026amp; 返回变量存储地址 \u0026amp;a; 将给出变量的实际地址。 * 指针变量。 *a; 是一个指针变量 package main import \u0026#34;fmt\u0026#34; func main() { var a int = 4 var b int32 var c float32 var ptr *int /* 运算符实例 */ fmt.Printf(\u0026#34;第 1 行 - a 变量类型为 = %T\\n\u0026#34;, a ); fmt.Printf(\u0026#34;第 2 行 - b 变量类型为 = %T\\n\u0026#34;, b ); fmt.Printf(\u0026#34;第 3 行 - c 变量类型为 = %T\\n\u0026#34;, c ); /* \u0026amp; 和 * 运算符实例 */ ptr = \u0026amp;a /* \u0026#39;ptr\u0026#39; 包含了 \u0026#39;a\u0026#39; 变量的地址 */ fmt.Printf(\u0026#34;a 的值为 %d\\n\u0026#34;, a); fmt.Printf(\u0026#34;*ptr 为 %d\\n\u0026#34;, *ptr); } 运行结果：\n第 1 行 - a 变量类型为 = int 第 2 行 - b 变量类型为 = int32 第 3 行 - c 变量类型为 = float32 a 的值为 4 *ptr 为 4 运算符优先级 有些运算符拥有较高的优先级，二元运算符的运算方向均是从左至右。下表列出了所有运算符以及它们的优先级，由上至下代表优先级由高到低：\n优先级 运算符 5 * / % \u0026laquo; \u0026raquo; \u0026amp; \u0026amp;^ 4 + - | ^ 3 == != \u0026lt; \u0026lt;= \u0026gt; \u0026gt;= 2 \u0026amp;\u0026amp; 1 || 当然，你可以通过使用括号来临时提升某个表达式的整体运算优先级。\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int = 20 var b int = 10 var c int = 15 var d int = 5 var e int; e = (a + b) * c / d; // ( 30 * 15 ) / 5 fmt.Printf(\u0026#34;(a + b) * c / d 的值为 : %d\\n\u0026#34;, e ); e = ((a + b) * c) / d; // (30 * 15 ) / 5 fmt.Printf(\u0026#34;((a + b) * c) / d 的值为 : %d\\n\u0026#34; , e ); e = (a + b) * (c / d); // (30) * (15/5) fmt.Printf(\u0026#34;(a + b) * (c / d) 的值为 : %d\\n\u0026#34;, e ); e = a + (b * c) / d; // 20 + (150/5) fmt.Printf(\u0026#34;a + (b * c) / d 的值为 : %d\\n\u0026#34; , e ); } 运行结果：\n(a + b) * c / d 的值为 : 90 ((a + b) * c) / d 的值为 : 90 (a + b) * (c / d) 的值为 : 90 a + (b * c) / d 的值为 : 50 补充 Go 的自增，自减只能作为表达式使用，而不能用于赋值语句。\na++ // 这是允许的，类似 a = a + 1,结果与 a++ 相同 a-- //与 a++ 相似 a = a++ // 这是不允许的，会出现编译错误 syntax error: unexpected ++ at end of statement go的条件语句 条件语句需要开发者通过指定一个或多个条件，并通过测试条件是否为 true 来决定是否执行指定语句，并在条件为 false 的情况在执行另外的语句。\nGo 语言提供了以下几种条件判断语句：\n语句 描述 if 语句 if 语句 由一个布尔表达式后紧跟一个或多个语句组成。 if\u0026hellip;else 语句 if 语句 后可以使用可选的 else 语句, else 语句中的表达式在布尔表达式为 false 时执行。 if 嵌套语句 你可以在 if 或 else if 语句中嵌入一个或多个 if 或 else if 语句。 switch 语句 switch 语句用于基于不同条件执行不同动作。 select 语句 select 语句类似于 switch 语句，但是select会随机执行一个可运行的case。如果没有case可运行，它将阻塞，直到有case可运行。 go的循环语句 Go 语言提供了以下几种类型循环处理语句：\n循环类型 描述 for 循环 重复执行语句块 循环嵌套 在 for 循环中嵌套一个或多个 for 循环 循环控制语句 循环控制语句可以控制循环体内语句的执行过程。\nGO 语言支持以下几种循环控制语句：\n控制语句 描述 break 语句 经常用于中断当前 for 循环或跳出 switch 语句 continue 语句 跳过当前循环的剩余语句，然后继续进行下一轮循环。 goto 语句 将控制转移到被标记的语句。 无限循环 如果循环中条件语句永远不为 false 则会进行无限循环，我们可以通过 for 循环语句中只设置一个条件表达式来执行无限循环：\npackage main import \u0026#34;fmt\u0026#34; func main() { for true { fmt.Printf(\u0026#34;这是无限循环。\\n\u0026#34;); } } Go 语言函数 函数是基本的代码块，用于执行一个任务。 Go 语言最少有个 main() 函数。 你可以通过函数来划分不同功能，逻辑上每个函数执行的是指定的任务。 函数声明告诉了编译器函数的名称，返回类型，和参数。 Go 语言标准库提供了多种可动用的内置的函数。例如，len() 函数可以接受不同类型参数并返回该类型的长度。如果我们传入的是字符串则返回字符串的长度，如果传入的是数组，则返回数组中包含的元素个数。 Go 语言函数定义格式如下：\nfunc function_name( [parameter list] ) [return_types] { //函数体 } 函数定义解析：\nfunc：函数由 func 开始声明 function_name：函数名称，参数列表和返回值类型构成了函数签名。 parameter list：参数列表，参数就像一个占位符，当函数被调用时，你可以将值传递给参数，这个值被称为实际参数。参数列表指定的是参数类型、顺序、及参数个数。参数是可选的，也就是说函数也可以不包含参数。 return_types：返回类型，函数返回一列值。return_types 是该列值的数据类型。有些功能不需要返回值，这种情况下 return_types 不是必须的。 函数体：函数定义的代码集合。 实例 以下实例为 max() 函数的代码，该函数传入两个整型参数 num1 和 num2，并返回这两个参数的最大值：\n/* 函数返回两个数的最大值 */ func max(num1, num2 int) int { /* 声明局部变量 */ var result int if (num1 \u0026gt; num2) { result = num1 } else { result = num2 } return result } 函数调用 当创建函数时，你定义了函数需要做什么，通过调用该函数来执行指定任务。\n调用函数，向函数传递参数，并返回值，例如：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 定义局部变量 */ var a int = 100 var b int = 200 var ret int /* 调用函数并返回最大值 */ ret = max(a, b) fmt.Printf( \u0026#34;最大值是 : %d\\n\u0026#34;, ret ) } /* 函数返回两个数的最大值 */ func max(num1, num2 int) int { /* 定义局部变量 */ var result int if (num1 \u0026gt; num2) { result = num1 } else { result = num2 } return result } 以上实例在 main() 函数中调用 max（）函数，执行结果为：\n最大值是 : 200 函数返回多个值 Go 函数可以返回多个值，例如：\n实例 package main import \u0026#34;fmt\u0026#34; func swap(x, y string) (string, string) { return y, x } func main() { a, b := swap(\u0026#34;Google\u0026#34;, \u0026#34;Runoob\u0026#34;) fmt.Println(a, b) } 以上实例执行结果为：\nRunoob Google 函数参数 函数如果使用参数，该变量可称为函数的形参。\n形参就像定义在函数体内的局部变量。\n调用函数，可以通过两种方式来传递参数：\n传递类型 描述 值传递 值传递是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。 引用传递 引用传递是指在调用函数时将实际参数的地址传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。 默认情况下，Go 语言使用的是值传递，即在调用过程中不会影响到实际参数。\n函数用法 函数用法 描述 函数作为另外一个函数的实参 函数定义后可作为另外一个函数的实参数传入 闭包 闭包是匿名函数，可在动态编程中使用 方法 方法就是一个包含了接受者的函数 Go 语言变量作用域 作用域为已声明标识符所表示的常量、类型、变量、函数或包在源代码中的作用范围。\nGo 语言中变量可以在三个地方声明：\n函数内定义的变量称为局部变量 函数外定义的变量称为全局变量 函数定义中的变量称为形式参数 局部变量 在函数体内声明的变量称之为局部变量，它们的作用域只在函数体内，参数和返回值变量也是局部变量。\n以下实例中 main() 函数使用了局部变量 a, b, c：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 声明局部变量 */ var a, b, c int /* 初始化参数 */ a = 10 b = 20 c = a + b fmt.Printf (\u0026#34;结果： a = %d, b = %d and c = %d\\n\u0026#34;, a, b, c) } 以上实例执行输出结果为：\n结果： a = 10, b = 20 and c = 30 全局变量 在函数体外声明的变量称之为全局变量，全局变量可以在整个包甚至外部包（被导出后）使用。\n全局变量可以在任何函数中使用，以下实例演示了如何使用全局变量：\npackage main import \u0026#34;fmt\u0026#34; /* 声明全局变量 */ var g int func main() { /* 声明局部变量 */ var a, b int /* 初始化参数 */ a = 10 b = 20 g = a + b fmt.Printf(\u0026#34;结果： a = %d, b = %d and g = %d\\n\u0026#34;, a, b, g) } 以上实例执行输出结果为：\n结果： a = 10, b = 20 and g = 30 Go 语言程序中全局变量与局部变量名称可以相同，但是函数内的局部变量会被优先考虑。实例如下：\npackage main import \u0026#34;fmt\u0026#34; /* 声明全局变量 */ var g int = 20 func main() { /* 声明局部变量 */ var g int = 10 fmt.Printf (\u0026#34;结果： g = %d\\n\u0026#34;, g) } 以上实例执行输出结果为：\n结果： g = 10 形式参数 形式参数会作为函数的局部变量来使用。实例如下：\npackage main import \u0026#34;fmt\u0026#34; /* 声明全局变量 */ var a int = 20; func main() { /* main 函数中声明局部变量 */ var a int = 10 var b int = 20 var c int = 0 fmt.Printf(\u0026#34;main()函数中 a = %d\\n\u0026#34;, a); c = sum( a, b); fmt.Printf(\u0026#34;main()函数中 c = %d\\n\u0026#34;, c); } /* 函数定义-两数相加 */ func sum(a, b int) int { fmt.Printf(\u0026#34;sum() 函数中 a = %d\\n\u0026#34;, a); fmt.Printf(\u0026#34;sum() 函数中 b = %d\\n\u0026#34;, b); return a + b; } 以上实例执行输出结果为：\nmain()函数中 a = 10 sum() 函数中 a = 10 sum() 函数中 b = 20 main()函数中 c = 30 初始化局部和全局变量 不同类型的局部和全局变量默认值为：\n数据类型 初始化默认值 int 0 float32 0 pointer nil Go 语言数组 Go 语言提供了数组类型的数据结构。\n数组是具有相同唯一类型的一组已编号且长度固定的数据项序列，这种类型可以是任意的原始类型例如整型、字符串或者自定义类型。\n相对于去声明 number0, number1, \u0026hellip;, number99 的变量，使用数组形式 numbers[0], numbers[1] \u0026hellip;, numbers[99] 更加方便且易于扩展。\n数组元素可以通过索引（位置）来读取（或者修改），索引从 0 开始，第一个元素索引为 0，第二个索引为 1，以此类推。\n声明数组 Go 语言数组声明需要指定元素类型及元素个数，语法格式如下：\nvar arrayName [size]dataType 其中，arrayName 是数组的名称，size 是数组的大小，dataType 是数组中元素的数据类型。\n以下定义了数组 balance 长度为 10 类型为 float32：\nvar balance [10]float32 初始化数组 以下演示了数组初始化：\n以下实例声明一个名为 numbers 的整数数组，其大小为 5，在声明时，数组中的每个元素都会根据其数据类型进行默认初始化，对于整数类型，初始值为 0。\nvar numbers [5]int 还可以使用初始化列表来初始化数组的元素：\nvar numbers = [5]int{1, 2, 3, 4, 5} 以上代码声明一个大小为 5 的整数数组，并将其中的元素分别初始化为 1、2、3、4 和 5。\n另外，还可以使用 := 简短声明语法来声明和初始化数组：\nnumbers := [5]int{1, 2, 3, 4, 5} 以上代码创建一个名为 numbers 的整数数组，并将其大小设置为 5，并初始化元素的值。\n**注意：**在 Go 语言中，数组的大小是类型的一部分，因此不同大小的数组是不兼容的，也就是说 [5]int 和 [10]int 是不同的类型。\n以下定义了数组 balance 长度为 5 类型为 float32，并初始化数组的元素：\nvar balance = [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 我们也可以通过字面量在声明数组的同时快速初始化数组：\nbalance := [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 如果数组长度不确定，可以使用 \u0026hellip; 代替数组的长度，编译器会根据元素个数自行推断数组的长度：\nvar balance = [...]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 或 balance := [...]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 如果设置了数组的长度，我们还可以通过指定下标来初始化元素：\n// 将索引为 1 和 3 的元素初始化 balance := [5]float32{1:2.0,3:7.0} 初始化数组中 {} 中的元素个数不能大于 [] 中的数字。\n如果忽略 [] 中的数字不设置数组大小，Go 语言会根据元素的个数来设置数组的大小：\nbalance[4] = 50.0 以上实例读取了第五个元素。数组元素可以通过索引（位置）来读取（或者修改），索引从 0 开始，第一个元素索引为 0，第二个索引为 1，以此类推。\n访问数组元素 数组元素可以通过索引（位置）来读取。格式为数组名后加中括号，中括号中为索引的值。例如：\nvar salary float32 = balance[9] 以上实例读取了数组 balance 第 10 个元素的值。\n以下演示了数组完整操作（声明、赋值、访问）的实例：\npackage main import \u0026#34;fmt\u0026#34; func main() { var n [10]int /* n 是一个长度为 10 的数组 */ var i,j int /* 为数组 n 初始化元素 */ for i = 0; i \u0026lt; 10; i++ { n[i] = i + 100 /* 设置元素为 i + 100 */ } /* 输出每个数组元素的值 */ for j = 0; j \u0026lt; 10; j++ { fmt.Printf(\u0026#34;Element[%d] = %d\\n\u0026#34;, j, n[j] ) } } 结果如下：\nElement[0] = 100 Element[1] = 101 Element[2] = 102 Element[3] = 103 Element[4] = 104 Element[5] = 105 Element[6] = 106 Element[7] = 107 Element[8] = 108 Element[9] = 109 package main import \u0026#34;fmt\u0026#34; func main() { var i,j,k int // 声明数组的同时快速初始化数组 balance := [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0} /* 输出数组元素 */ ... for i = 0; i \u0026lt; 5; i++ { fmt.Printf(\u0026#34;balance[%d] = %f\\n\u0026#34;, i, balance[i] ) } balance2 := [...]float32{1000.0, 2.0, 3.4, 7.0, 50.0} /* 输出每个数组元素的值 */ for j = 0; j \u0026lt; 5; j++ { fmt.Printf(\u0026#34;balance2[%d] = %f\\n\u0026#34;, j, balance2[j] ) } // 将索引为 1 和 3 的元素初始化 balance3 := [5]float32{1:2.0,3:7.0} for k = 0; k \u0026lt; 5; k++ { fmt.Printf(\u0026#34;balance3[%d] = %f\\n\u0026#34;, k, balance3[k] ) } } 结果如下：\nbalance[0] = 1000.000000 balance[1] = 2.000000 balance[2] = 3.400000 balance[3] = 7.000000 balance[4] = 50.000000 balance2[0] = 1000.000000 balance2[1] = 2.000000 balance2[2] = 3.400000 balance2[3] = 7.000000 balance2[4] = 50.000000 balance3[0] = 0.000000 balance3[1] = 2.000000 balance3[2] = 0.000000 balance3[3] = 7.000000 balance3[4] = 0.000000 多维数组 Go 语言支持多维数组，以下为常用的多维数组声明方式：\nvar variable_name [SIZE1][SIZE2]...[SIZEN] variable_type 以下实例声明了三维的整型数组：\nvar threedim [5][10][4]int 二维数组 二维数组是最简单的多维数组，二维数组本质上是由一维数组组成的。二维数组定义方式如下：\nvar arrayName [ x ][ y ] variable_type variable_type 为 Go 语言的数据类型，arrayName 为数组名，二维数组可认为是一个表格，x 为行，y 为列，下图演示了一个二维数组 a 为三行四列：\n二维数组中的元素可通过 a[ i ][ j ]来访问。\npackage main import \u0026#34;fmt\u0026#34; func main() { // Step 1: 创建数组 values := [][]int{} // Step 2: 使用 append() 函数向空的二维数组添加两行一维数组 row1 := []int{1, 2, 3} row2 := []int{4, 5, 6} values = append(values, row1) values = append(values, row2) // Step 3: 显示两行数据 fmt.Println(\u0026#34;Row 1\u0026#34;) fmt.Println(values[0]) fmt.Println(\u0026#34;Row 2\u0026#34;) fmt.Println(values[1]) // Step 4: 访问第一个元素 fmt.Println(\u0026#34;第一个元素为：\u0026#34;) fmt.Println(values[0][0]) } 结果为：\nRow 1 [1 2 3] Row 2 [4 5 6] 第一个元素为： 1 初始化二维数组 多维数组可通过大括号来初始值。以下实例为一个 3 行 4 列的二维数组：\na := [3][4]int{ {0, 1, 2, 3} , /* 第一行索引为 0 */ {4, 5, 6, 7} , /* 第二行索引为 1 */ {8, 9, 10, 11}, /* 第三行索引为 2 */ } **注意：**以上代码中倒数第二行的}必须要有逗号，因为最后一行的} 不能单独一行，也可以写成这样：\na := [3][4]int{ {0, 1, 2, 3} , /* 第一行索引为 0 */ {4, 5, 6, 7} , /* 第二行索引为 1 */ {8, 9, 10, 11}} /* 第三行索引为 2 */ 以下实例初始化一个 2 行 2 列 的二维数组：\npackage main import \u0026#34;fmt\u0026#34; func main() { // 创建二维数组 sites := [2][2]string{} // 向二维数组添加元素 sites[0][0] = \u0026#34;Google\u0026#34; sites[0][1] = \u0026#34;Runoob\u0026#34; sites[1][0] = \u0026#34;Taobao\u0026#34; sites[1][1] = \u0026#34;Weibo\u0026#34; // 显示结果 fmt.Println(sites) } 输出结果为：\n[[Google Runoob] [Taobao Weibo]] 访问二维数组 二维数组通过指定坐标来访问。如数组中的行索引与列索引，例如：\nval := a[2][3] 或 var value int = a[2][3] 以上实例访问了二维数组 val 第三行的第四个元素。\n二维数组可以使用循环嵌套来输出元素：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 数组 - 5 行 2 列*/ var a = [5][2]int{ {0,0}, {1,2}, {2,4}, {3,6},{4,8}} var i, j int /* 输出数组元素 */ for i = 0; i \u0026lt; 5; i++ { for j = 0; j \u0026lt; 2; j++ { fmt.Printf(\u0026#34;a[%d][%d] = %d\\n\u0026#34;, i,j, a[i][j] ) } } } 输出结果为：\na[0][0] = 0 a[0][1] = 0 a[1][0] = 1 a[1][1] = 2 a[2][0] = 2 a[2][1] = 4 a[3][0] = 3 a[3][1] = 6 a[4][0] = 4 a[4][1] = 8 以下实例创建各个维度元素数量不一致的多维数组：\npackage main import \u0026#34;fmt\u0026#34; func main() { // 创建空的二维数组 animals := [][]string{} // 创建三一维数组，各数组长度不同 row1 := []string{\u0026#34;fish\u0026#34;, \u0026#34;shark\u0026#34;, \u0026#34;eel\u0026#34;} row2 := []string{\u0026#34;bird\u0026#34;} row3 := []string{\u0026#34;lizard\u0026#34;, \u0026#34;salamander\u0026#34;} // 使用 append() 函数将一维数组添加到二维数组中 animals = append(animals, row1) animals = append(animals, row2) animals = append(animals, row3) // 循环输出 for i := range animals { fmt.Printf(\u0026#34;Row: %v\\n\u0026#34;, i) fmt.Println(animals[i]) } } 输出结果为：\nRow: 0 [fish shark eel] Row: 1 [bird] Row: 2 [lizard salamander] Go 语言向函数传递数组 Go 语言中的数组是值类型，因此在将数组传递给函数时，实际上是传递数组的副本。\n如果你想向函数传递数组参数，你需要在函数定义时，声明形参为数组，我们可以通过以下两种方式来声明：\n方式一 形参设定数组大小：\nfunc myFunction(param [10]int) { .... } 方式二 形参未设定数组大小：\nfunc myFunction(param []int) { .... } 如果你想要在函数内修改原始数组，可以通过传递数组的指针来实现。\n实例 让我们看下以下实例，实例中函数接收整型数组参数，另一个参数指定了数组元素的个数，并返回平均值：\nfunc getAverage(arr []int, size int) float32 { var i int var avg, sum float32 for i = 0; i \u0026lt; size; ++i { sum += arr[i] } avg = sum / size return avg; } 接下来我们来调用这个函数：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 数组长度为 5 */ var balance = [5]int {1000, 2, 3, 17, 50} var avg float32 /* 数组作为参数传递给函数 */ avg = getAverage( balance, 5 ) ; /* 输出返回的平均值 */ fmt.Printf( \u0026#34;平均值为: %f \u0026#34;, avg ); } func getAverage(arr [5]int, size int) float32 { var i,sum int var avg float32 for i = 0; i \u0026lt; size;i++ { sum += arr[i] } avg = float32(sum) / float32(size) return avg; } 输出结果为：\n平均值为: 214.399994 以上实例中我们使用的形参并未设定数组大小。\n浮点数计算输出有一定的偏差，你也可以转整型来设置精度。\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { a := 1.69 b := 1.7 c := a * b // 结果应该是2.873 fmt.Println(c) // 输出的是2.8729999999999998 } 设置固定精度：\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { a := 1690 // 表示1.69 b := 1700 // 表示1.70 c := a * b // 结果应该是2873000表示 2.873 fmt.Println(c) // 内部编码 fmt.Println(float64(c) / 1000000) // 显示 } 如果你想要在函数内修改原始数组，可以通过传递数组的指针来实现。\n以下实例演示如何向函数传递数组，函数接受一个数组和数组的指针作为参数：\npackage main import \u0026#34;fmt\u0026#34; // 函数接受一个数组作为参数 func modifyArray(arr [5]int) { for i := 0; i \u0026lt; len(arr); i++ { arr[i] = arr[i] * 2 } } // 函数接受一个数组的指针作为参数 func modifyArrayWithPointer(arr *[5]int) { for i := 0; i \u0026lt; len(*arr); i++ { (*arr)[i] = (*arr)[i] * 2 } } func main() { // 创建一个包含5个元素的整数数组 myArray := [5]int{1, 2, 3, 4, 5} fmt.Println(\u0026#34;Original Array:\u0026#34;, myArray) // 传递数组给函数，但不会修改原始数组的值 modifyArray(myArray) fmt.Println(\u0026#34;Array after modifyArray:\u0026#34;, myArray) // 传递数组的指针给函数，可以修改原始数组的值 modifyArrayWithPointer(\u0026amp;myArray) fmt.Println(\u0026#34;Array after modifyArrayWithPointer:\u0026#34;, myArray) } 在上面的例子中，modifyArray 函数接受一个数组，并尝试修改数组的值，但在主函数中调用后，原始数组并未被修改。相反，modifyArrayWithPointer 函数接受一个数组的指针，并通过指针修改了原始数组的值。\n以上实例执行输出结果为：\nOriginal Array: [1 2 3 4 5] Array after modifyArray: [1 2 3 4 5] Array after modifyArrayWithPointer: [2 4 6 8 10] Go 语言指针 Go 语言中指针是很容易学习的，Go 语言中使用指针可以更简单的执行一些任务。\n接下来让我们来一步步学习 Go 语言指针。\n我们都知道，变量是一种使用方便的占位符，用于引用计算机内存地址。\nGo 语言的取地址符是 \u0026amp;，放到一个变量前使用就会返回相应变量的内存地址。\n以下实例演示了变量在内存中地址：\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int = 10 fmt.Printf(\u0026#34;变量的地址: %x\\n\u0026#34;, \u0026amp;a ) } 输出结果为：\n变量的地址: 20818a220 什么是指针 一个指针变量指向了一个值的内存地址。\n类似于变量和常量，在使用指针前你需要声明指针。指针声明格式如下：\nvar var_name *var-type var-type 为指针类型，var_name 为指针变量名，* 号用于指定变量是作为一个指针。以下是有效的指针声明：\nvar ip *int /* 指向整型*/ var fp *float32 /* 指向浮点型 */ 如何使用指针 指针使用流程：\n定义指针变量。 为指针变量赋值。 访问指针变量中指向地址的值。 在指针类型前面加上 * 号（前缀）来获取指针所指向的内容。\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int= 20 /* 声明实际变量 */ var ip *int /* 声明指针变量 */ ip = \u0026amp;a /* 指针变量的存储地址 */ fmt.Printf(\u0026#34;a 变量的地址是: %x\\n\u0026#34;, \u0026amp;a ) /* 指针变量的存储地址 */ fmt.Printf(\u0026#34;ip 变量储存的指针地址: %x\\n\u0026#34;, ip ) /* 使用指针访问值 */ fmt.Printf(\u0026#34;*ip 变量的值: %d\\n\u0026#34;, *ip ) } 输出结果为：\na 变量的地址是: 20818a220 ip 变量储存的指针地址: 20818a220 *ip 变量的值: 20 Go 空指针 当一个指针被定义后没有分配到任何变量时，它的值为 nil。\nnil 指针也称为空指针。\nnil在概念上和其它语言的null、None、nil、NULL一样，都指代零值或空值。\n一个指针变量通常缩写为 ptr。\npackage main import \u0026#34;fmt\u0026#34; func main() { var ptr *int fmt.Printf(\u0026#34;ptr 的值为 : %x\\n\u0026#34;, ptr ) } 输出结果为：\nptr 的值为 : 0 空指针判断：\nif(ptr != nil) /* ptr 不是空指针 */ if(ptr == nil) /* ptr 是空指针 */ Go 语言指针数组 package main import \u0026#34;fmt\u0026#34; const MAX int = 3 func main() { a := []int{10,100,200} var i int for i = 0; i \u0026lt; MAX; i++ { fmt.Printf(\u0026#34;a[%d] = %d\\n\u0026#34;, i, a[i] ) } } 以上代码执行输出结果为：\na[0] = 10 a[1] = 100 a[2] = 200 有一种情况，我们可能需要保存数组，这样我们就需要使用到指针。\n以下声明了整型指针数组：\nvar ptr [MAX]*int; ptr 为整型指针数组。因此每个元素都指向了一个值。以下实例的三个整数将存储在指针数组中：\npackage main import \u0026#34;fmt\u0026#34; const MAX int = 3 func main() { a := []int{10,100,200} var i int var ptr [MAX]*int; for i = 0; i \u0026lt; MAX; i++ { ptr[i] = \u0026amp;a[i] /* 整数地址赋值给指针数组 */ } for i = 0; i \u0026lt; MAX; i++ { fmt.Printf(\u0026#34;a[%d] = %d\\n\u0026#34;, i,*ptr[i] ) } } 输出结果为：\na[0] = 10 a[1] = 100 a[2] = 200 Go 语言指针作为函数参数 Go 语言允许向函数传递指针，只需要在函数定义的参数上设置为指针类型即可。\n以下实例演示了如何向函数传递指针，并在函数调用后修改函数内的值，：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 定义局部变量 */ var a int = 100 var b int= 200 fmt.Printf(\u0026#34;交换前 a 的值 : %d\\n\u0026#34;, a ) fmt.Printf(\u0026#34;交换前 b 的值 : %d\\n\u0026#34;, b ) /* 调用函数用于交换值 * \u0026amp;a 指向 a 变量的地址 * \u0026amp;b 指向 b 变量的地址 */ swap(\u0026amp;a, \u0026amp;b); fmt.Printf(\u0026#34;交换后 a 的值 : %d\\n\u0026#34;, a ) fmt.Printf(\u0026#34;交换后 b 的值 : %d\\n\u0026#34;, b ) } func swap(x *int, y *int) { var temp int temp = *x /* 保存 x 地址的值 */ *x = *y /* 将 y 赋值给 x */ *y = temp /* 将 temp 赋值给 y */ } 输出结果为：\n交换前 a 的值 : 100 交换前 b 的值 : 200 交换后 a 的值 : 200 交换后 b 的值 : 100 Go 语言指向指针的指针 如果一个指针变量存放的又是另一个指针变量的地址，则称这个指针变量为指向指针的指针变量。\n当定义一个指向指针的指针变量时，第一个指针存放第二个指针的地址，第二个指针存放变量的地址：\n指向指针的指针变量声明格式如下：\nvar ptr **int; 以上指向指针的指针变量为整型。\n访问指向指针的指针变量值需要使用两个 * 号，如下所示：\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int var ptr *int var pptr **int a = 3000 /* 指针 ptr 地址 */ ptr = \u0026amp;a /* 指向指针 ptr 地址 */ pptr = \u0026amp;ptr /* 获取 pptr 的值 */ fmt.Printf(\u0026#34;变量 a = %d\\n\u0026#34;, a ) fmt.Printf(\u0026#34;指针变量 *ptr = %d\\n\u0026#34;, *ptr ) fmt.Printf(\u0026#34;指向指针的指针变量 **pptr = %d\\n\u0026#34;, **pptr) } 输出结果为：\n变量 a = 3000 指针变量 *ptr = 3000 指向指针的指针变量 **pptr = 3000 Go 语言结构体 Go 语言中数组可以存储同一类型的数据，但在结构体中我们可以为不同项定义不同的数据类型。\n结构体是由一系列具有相同类型或不同类型的数据构成的数据集合。\n结构体表示一项记录，比如保存图书馆的书籍记录，每本书有以下属性：\nTitle ：标题 Author ： 作者 Subject：学科 ID：书籍ID 定义结构体 结构体定义需要使用 type 和 struct 语句。struct 语句定义一个新的数据类型，结构体中有一个或多个成员。type 语句设定了结构体的名称。结构体的格式如下：\ntype struct_variable_type struct { member definition member definition ... member definition } 一旦定义了结构体类型，它就能用于变量的声明，语法格式如下：\nvariable_name := structure_variable_type {value1, value2...valuen} 或 variable_name := structure_variable_type { key1: value1, key2: value2..., keyn: valuen} package main import \u0026#34;fmt\u0026#34; type Books struct { title string author string subject string book_id int } func main() { // 创建一个新的结构体 fmt.Println(Books{\u0026#34;Go 语言\u0026#34;, \u0026#34;www.runoob.com\u0026#34;, \u0026#34;Go 语言教程\u0026#34;, 6495407}) // 也可以使用 key =\u0026gt; value 格式 fmt.Println(Books{title: \u0026#34;Go 语言\u0026#34;, author: \u0026#34;www.runoob.com\u0026#34;, subject: \u0026#34;Go 语言教程\u0026#34;, book_id: 6495407}) // 忽略的字段为 0 或 空 fmt.Println(Books{title: \u0026#34;Go 语言\u0026#34;, author: \u0026#34;www.runoob.com\u0026#34;}) } 输出结果为：\n{Go 语言 www.runoob.com Go 语言教程 6495407} {Go 语言 www.runoob.com Go 语言教程 6495407} {Go 语言 www.runoob.com 0} 访问结构体成员 如果要访问结构体成员，需要使用点号 . 操作符，格式为：\n结构体.成员名 结构体类型变量使用 struct 关键字定义，实例如下：\npackage main import \u0026#34;fmt\u0026#34; type Books struct { title string author string subject string book_id int } func main() { var Book1 Books /* 声明 Book1 为 Books 类型 */ var Book2 Books /* 声明 Book2 为 Books 类型 */ /* book 1 描述 */ Book1.title = \u0026#34;Go 语言\u0026#34; Book1.author = \u0026#34;www.runoob.com\u0026#34; Book1.subject = \u0026#34;Go 语言教程\u0026#34; Book1.book_id = 6495407 /* book 2 描述 */ Book2.title = \u0026#34;Python 教程\u0026#34; Book2.author = \u0026#34;www.runoob.com\u0026#34; Book2.subject = \u0026#34;Python 语言教程\u0026#34; Book2.book_id = 6495700 /* 打印 Book1 信息 */ fmt.Printf( \u0026#34;Book 1 title : %s\\n\u0026#34;, Book1.title) fmt.Printf( \u0026#34;Book 1 author : %s\\n\u0026#34;, Book1.author) fmt.Printf( \u0026#34;Book 1 subject : %s\\n\u0026#34;, Book1.subject) fmt.Printf( \u0026#34;Book 1 book_id : %d\\n\u0026#34;, Book1.book_id) /* 打印 Book2 信息 */ fmt.Printf( \u0026#34;Book 2 title : %s\\n\u0026#34;, Book2.title) fmt.Printf( \u0026#34;Book 2 author : %s\\n\u0026#34;, Book2.author) fmt.Printf( \u0026#34;Book 2 subject : %s\\n\u0026#34;, Book2.subject) fmt.Printf( \u0026#34;Book 2 book_id : %d\\n\u0026#34;, Book2.book_id) } 运行结果为：\nBook 1 title : Go 语言 Book 1 author : www.runoob.com Book 1 subject : Go 语言教程 Book 1 book_id : 6495407 Book 2 title : Python 教程 Book 2 author : www.runoob.com Book 2 subject : Python 语言教程 Book 2 book_id : 6495700 结构体作为函数参数 你可以像其他数据类型一样将结构体类型作为参数传递给函数。并以以上实例的方式访问结构体变量：\npackage main import \u0026#34;fmt\u0026#34; type Books struct { title string author string subject string book_id int } func main() { var Book1 Books /* 声明 Book1 为 Books 类型 */ var Book2 Books /* 声明 Book2 为 Books 类型 */ /* book 1 描述 */ Book1.title = \u0026#34;Go 语言\u0026#34; Book1.author = \u0026#34;www.runoob.com\u0026#34; Book1.subject = \u0026#34;Go 语言教程\u0026#34; Book1.book_id = 6495407 /* book 2 描述 */ Book2.title = \u0026#34;Python 教程\u0026#34; Book2.author = \u0026#34;www.runoob.com\u0026#34; Book2.subject = \u0026#34;Python 语言教程\u0026#34; Book2.book_id = 6495700 /* 打印 Book1 信息 */ printBook(Book1) /* 打印 Book2 信息 */ printBook(Book2) } func printBook( book Books ) { fmt.Printf( \u0026#34;Book title : %s\\n\u0026#34;, book.title) fmt.Printf( \u0026#34;Book author : %s\\n\u0026#34;, book.author) fmt.Printf( \u0026#34;Book subject : %s\\n\u0026#34;, book.subject) fmt.Printf( \u0026#34;Book book_id : %d\\n\u0026#34;, book.book_id) } 运行结果为：\nBook title : Go 语言 Book author : www.runoob.com Book subject : Go 语言教程 Book book_id : 6495407 Book title : Python 教程 Book author : www.runoob.com Book subject : Python 语言教程 Book book_id : 6495700 结构体指针 你可以定义指向结构体的指针类似于其他指针变量，格式如下：\nvar struct_pointer *Books 以上定义的指针变量可以存储结构体变量的地址。查看结构体变量地址，可以将 \u0026amp; 符号放置于结构体变量前：\nstruct_pointer = \u0026amp;Book1 使用结构体指针访问结构体成员，使用 \u0026ldquo;.\u0026rdquo; 操作符：\nstruct_pointer.title package main import \u0026#34;fmt\u0026#34; type Books struct { title string author string subject string book_id int } func main() { var Book1 Books /* 声明 Book1 为 Books 类型 */ var Book2 Books /* 声明 Book2 为 Books 类型 */ /* book 1 描述 */ Book1.title = \u0026#34;Go 语言\u0026#34; Book1.author = \u0026#34;www.runoob.com\u0026#34; Book1.subject = \u0026#34;Go 语言教程\u0026#34; Book1.book_id = 6495407 /* book 2 描述 */ Book2.title = \u0026#34;Python 教程\u0026#34; Book2.author = \u0026#34;www.runoob.com\u0026#34; Book2.subject = \u0026#34;Python 语言教程\u0026#34; Book2.book_id = 6495700 /* 打印 Book1 信息 */ printBook(\u0026amp;Book1) /* 打印 Book2 信息 */ printBook(\u0026amp;Book2) } func printBook( book *Books ) { fmt.Printf( \u0026#34;Book title : %s\\n\u0026#34;, book.title) fmt.Printf( \u0026#34;Book author : %s\\n\u0026#34;, book.author) fmt.Printf( \u0026#34;Book subject : %s\\n\u0026#34;, book.subject) fmt.Printf( \u0026#34;Book book_id : %d\\n\u0026#34;, book.book_id) } 运行结果为：\nBook title : Go 语言 Book author : www.runoob.com Book subject : Go 语言教程 Book book_id : 6495407 Book title : Python 教程 Book author : www.runoob.com Book subject : Python 语言教程 Book book_id : 6495700 Go 语言切片(Slice) Go 语言切片是对数组的抽象。\nGo 数组的长度不可改变，在特定场景中这样的集合就不太适用，Go 中提供了一种灵活，功能强悍的内置类型切片(\u0026ldquo;动态数组\u0026rdquo;)，与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大。\n定义切片 你可以声明一个未指定大小的数组来定义切片：\nvar identifier []type 切片不需要说明长度。\n或使用 make() 函数来创建切片:\nvar slice1 []type = make([]type, len) 也可以简写为 slice1 := make([]type, len) 也可以指定容量，其中 capacity 为可选参数。\nmake([]T, length, capacity) 这里 len 是数组的长度并且也是切片的初始长度。\n切片初始化 s :=[] int {1,2,3 } 直接初始化切片，[] 表示是切片类型，{1,2,3} 初始化值依次是 1,2,3，其 cap=len=3。\ns := arr[:] 初始化切片 s，是数组 arr 的引用。\ns := arr[startIndex:endIndex] 将 arr 中从下标 startIndex 到 endIndex-1 下的元素创建为一个新的切片。\ns := arr[startIndex:] 默认 endIndex 时将表示一直到arr的最后一个元素。\ns := arr[:endIndex] 默认 startIndex 时将表示从 arr 的第一个元素开始。\ns1 := s[startIndex:endIndex] 通过切片 s 初始化切片 s1。\ns :=make([]int,len,cap) 通过内置函数 make() 初始化切片s，[]int 标识为其元素类型为 int 的切片。\nlen() 和 cap() 函数 切片是可索引的，并且可以由 len() 方法获取长度。\n切片提供了计算容量的方法 cap() 可以测量切片最长可以达到多少。\n以下为具体实例：\npackage main import \u0026#34;fmt\u0026#34; func main() { var numbers = make([]int,3,5) printSlice(numbers) } func printSlice(x []int){ fmt.Printf(\u0026#34;len=%d cap=%d slice=%v\\n\u0026#34;,len(x),cap(x),x) } 输出结果为:\nlen=3 cap=5 slice=[0 0 0] 空(nil)切片 一个切片在未初始化之前默认为 nil，长度为 0，实例如下：\npackage main import \u0026#34;fmt\u0026#34; func main() { var numbers []int printSlice(numbers) if(numbers == nil){ fmt.Printf(\u0026#34;切片是空的\u0026#34;) } } func printSlice(x []int){ fmt.Printf(\u0026#34;len=%d cap=%d slice=%v\\n\u0026#34;,len(x),cap(x),x) } 输出结果为:\nlen=0 cap=0 slice=[] 切片是空的 切片截取 可以通过设置下限及上限来设置截取切片 [lower-bound:upper-bound]，实例如下：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 创建切片 */ numbers := []int{0,1,2,3,4,5,6,7,8} printSlice(numbers) /* 打印原始切片 */ fmt.Println(\u0026#34;numbers ==\u0026#34;, numbers) /* 打印子切片从索引1(包含) 到索引4(不包含)*/ fmt.Println(\u0026#34;numbers[1:4] ==\u0026#34;, numbers[1:4]) /* 默认下限为 0*/ fmt.Println(\u0026#34;numbers[:3] ==\u0026#34;, numbers[:3]) /* 默认上限为 len(s)*/ fmt.Println(\u0026#34;numbers[4:] ==\u0026#34;, numbers[4:]) numbers1 := make([]int,0,5) printSlice(numbers1) /* 打印子切片从索引 0(包含) 到索引 2(不包含) */ number2 := numbers[:2] printSlice(number2) /* 打印子切片从索引 2(包含) 到索引 5(不包含) */ number3 := numbers[2:5] printSlice(number3) } func printSlice(x []int){ fmt.Printf(\u0026#34;len=%d cap=%d slice=%v\\n\u0026#34;,len(x),cap(x),x) } 输出结果为：\nlen=9 cap=9 slice=[0 1 2 3 4 5 6 7 8] numbers == [0 1 2 3 4 5 6 7 8] numbers[1:4] == [1 2 3] numbers[:3] == [0 1 2] numbers[4:] == [4 5 6 7 8] len=0 cap=5 slice=[] len=2 cap=9 slice=[0 1] len=3 cap=7 slice=[2 3 4] append() 和 copy() 函数 如果想增加切片的容量，我们必须创建一个新的更大的切片并把原分片的内容都拷贝过来。\n下面的代码描述了从拷贝切片的 copy 方法和向切片追加新元素的 append 方法。\npackage main import \u0026#34;fmt\u0026#34; func main() { var numbers []int printSlice(numbers) /* 允许追加空切片 */ numbers = append(numbers, 0) printSlice(numbers) /* 向切片添加一个元素 */ numbers = append(numbers, 1) printSlice(numbers) /* 同时添加多个元素 */ numbers = append(numbers, 2,3,4) printSlice(numbers) /* 创建切片 numbers1 是之前切片的两倍容量*/ numbers1 := make([]int, len(numbers), (cap(numbers))*2) /* 拷贝 numbers 的内容到 numbers1 */ copy(numbers1,numbers) printSlice(numbers1) } func printSlice(x []int){ fmt.Printf(\u0026#34;len=%d cap=%d slice=%v\\n\u0026#34;,len(x),cap(x),x) } 输出结果为：\nlen=0 cap=0 slice=[] len=1 cap=1 slice=[0] len=2 cap=2 slice=[0 1] len=5 cap=6 slice=[0 1 2 3 4] len=5 cap=12 slice=[0 1 2 3 4] Go 语言范围(Range) Go 语言中 range 关键字用于 for 循环中迭代数组(array)、切片(slice)、通道(channel)或集合(map)的元素。在数组和切片中它返回元素的索引和索引对应的值，在集合中返回 key-value 对。\nfor 循环的 range 格式可以对 slice、map、数组、字符串等进行迭代循环。格式如下：\nfor key, value := range oldMap { newMap[key] = value } 以上代码中的 key 和 value 是可以省略。\n如果只想读取 key，格式如下：\nfor key := range oldMap 或者这样：\nfor key, _ := range oldMap\n如果只想读取 value，格式如下：\nfor _, value := range oldMap 数组和切片 遍历简单的切片，2**%d 的结果为 2 对应的次方数：\npackage main import \u0026#34;fmt\u0026#34; // 声明一个包含 2 的幂次方的切片 var pow = []int{1, 2, 4, 8, 16, 32, 64, 128} func main() { // 遍历 pow 切片，i 是索引，v 是值 for i, v := range pow { // 打印 2 的 i 次方等于 v fmt.Printf(\u0026#34;2**%d = %d\\n\u0026#34;, i, v) } } 遍历 pow 切片，i 是索引，v 是值\n输出结果为：\n2**0 = 1 2**1 = 2 2**2 = 4 2**3 = 8 2**4 = 16 2**5 = 32 2**6 = 64 2**7 = 128 字符串 range 迭代字符串时，返回每个字符的索引和 Unicode 代码点（rune）。\npackage main import \u0026#34;fmt\u0026#34; func main() { for i, c := range \u0026#34;hello\u0026#34; { fmt.Printf(\u0026#34;index: %d, char: %c\\n\u0026#34;, i, c) } } 输出结果为:\nindex: 0, char: h index: 1, char: e index: 2, char: l index: 3, char: l index: 4, char: o 映射（Map） for 循环的 range 格式可以省略 key 和 value，如下实例：\npackage main import \u0026#34;fmt\u0026#34; func main() { // 创建一个空的 map，key 是 int 类型，value 是 float32 类型 map1 := make(map[int]float32) // 向 map1 中添加 key-value 对 map1[1] = 1.0 map1[2] = 2.0 map1[3] = 3.0 map1[4] = 4.0 // 遍历 map1，读取 key 和 value for key, value := range map1 { // 打印 key 和 value fmt.Printf(\u0026#34;key is: %d - value is: %f\\n\u0026#34;, key, value) } // 遍历 map1，只读取 key for key := range map1 { // 打印 key fmt.Printf(\u0026#34;key is: %d\\n\u0026#34;, key) } // 遍历 map1，只读取 value for _, value := range map1 { // 打印 value fmt.Printf(\u0026#34;value is: %f\\n\u0026#34;, value) } } 输出结果为:\nkey is: 4 - value is: 4.000000 key is: 1 - value is: 1.000000 key is: 2 - value is: 2.000000 key is: 3 - value is: 3.000000 key is: 1 key is: 2 key is: 3 key is: 4 value is: 1.000000 value is: 2.000000 value is: 3.000000 value is: 4.000000 通道（Channel） range 遍历从通道接收的值，直到通道关闭。\npackage main import \u0026#34;fmt\u0026#34; func main() { ch := make(chan int, 2) ch \u0026lt;- 1 ch \u0026lt;- 2 close(ch) for v := range ch { fmt.Println(v) } } 输出结果为:\n1 2 忽略值 在遍历时可以使用 _ 来忽略索引或值。\npackage main import \u0026#34;fmt\u0026#34; func main() { nums := []int{2, 3, 4} // 忽略索引 for _, num := range nums { fmt.Println(\u0026#34;value:\u0026#34;, num) } // 忽略值 for i := range nums { fmt.Println(\u0026#34;index:\u0026#34;, i) } } 输出结果为:\nvalue: 2 value: 3 value: 4 index: 0 index: 1 index: 2 其他 range 遍历其他数据结构：\npackage main import \u0026#34;fmt\u0026#34; func main() { //这是我们使用 range 去求一个 slice 的和。使用数组跟这个很类似 nums := []int{2, 3, 4} sum := 0 for _, num := range nums { sum += num } fmt.Println(\u0026#34;sum:\u0026#34;, sum) //在数组上使用 range 将传入索引和值两个变量。上面那个例子我们不需要使用该元素的序号，所以我们使用空白符\u0026#34;_\u0026#34;省略了。有时侯我们确实需要知道它的索引。 for i, num := range nums { if num == 3 { fmt.Println(\u0026#34;index:\u0026#34;, i) } } //range 也可以用在 map 的键值对上。 kvs := map[string]string{\u0026#34;a\u0026#34;: \u0026#34;apple\u0026#34;, \u0026#34;b\u0026#34;: \u0026#34;banana\u0026#34;} for k, v := range kvs { fmt.Printf(\u0026#34;%s -\u0026gt; %s\\n\u0026#34;, k, v) } //range也可以用来枚举 Unicode 字符串。第一个参数是字符的索引，第二个是字符（Unicode的值）本身。 for i, c := range \u0026#34;go\u0026#34; { fmt.Println(i, c) } } 输出结果为：\nsum: 9 index: 1 a -\u0026gt; apple b -\u0026gt; banana 0 103 1 111 Go 语言Map(集合) Map 是一种无序的键值对的集合。\nMap 最重要的一点是通过 key 来快速检索数据，key 类似于索引，指向数据的值。\nMap 是一种集合，所以我们可以像迭代数组和切片那样迭代它。不过，Map 是无序的，遍历 Map 时返回的键值对的顺序是不确定的。\n在获取 Map 的值时，如果键不存在，返回该类型的零值，例如 int 类型的零值是 0，string 类型的零值是 \u0026ldquo;\u0026quot;。\nMap 是引用类型，如果将一个 Map 传递给一个函数或赋值给另一个变量，它们都指向同一个底层数据结构，因此对 Map 的修改会影响到所有引用它的变量。\n定义 Map 可以使用内建函数 make 或使用 map 关键字来定义 Map:\n/* 使用 make 函数 */ map_variable := make(map[KeyType]ValueType, initialCapacity) 其中 KeyType 是键的类型，ValueType 是值的类型，initialCapacity 是可选的参数，用于指定 Map 的初始容量。Map 的容量是指 Map 中可以保存的键值对的数量，当 Map 中的键值对数量达到容量时，Map 会自动扩容。如果不指定 initialCapacity，Go 语言会根据实际情况选择一个合适的值。\n// 创建一个空的 Map m := make(map[string]int) // 创建一个初始容量为 10 的 Map m := make(map[string]int, 10) 也可以使用字面量创建 Map：键\u0026lt;\u0026mdash;\u0026mdash;\u0026mdash;\u0026gt;值\n// 使用字面量创建 Map m := map[string]int{ \u0026#34;apple\u0026#34;: 1, \u0026#34;banana\u0026#34;: 2, \u0026#34;orange\u0026#34;: 3, } 获取元素：\n// 获取键值对 v1 := m[\u0026#34;apple\u0026#34;] v2, ok := m[\u0026#34;pear\u0026#34;] // 如果键不存在，ok 的值为 false，v2 的值为该类型的零值 修改元素：\n// 修改键值对 m[\u0026#34;apple\u0026#34;] = 5 获取 Map 的长度：\n// 获取 Map 的长度 len := len(m) 遍历 Map：\n// 遍历 Map for k, v := range m { fmt.Printf(\u0026#34;key=%s, value=%d\\n\u0026#34;, k, v) } 删除元素：\n// 删除键值对 delete(m, \u0026#34;banana\u0026#34;) 创建和使用map:\npackage main import \u0026#34;fmt\u0026#34; func main() { var siteMap map[string]string /*创建集合 */ siteMap = make(map[string]string) /* map 插入 key - value 对,各个国家对应的首都 */ siteMap [ \u0026#34;Google\u0026#34; ] = \u0026#34;谷歌\u0026#34; siteMap [ \u0026#34;Runoob\u0026#34; ] = \u0026#34;菜鸟教程\u0026#34; siteMap [ \u0026#34;Baidu\u0026#34; ] = \u0026#34;百度\u0026#34; siteMap [ \u0026#34;Wiki\u0026#34; ] = \u0026#34;维基百科\u0026#34; /*使用键输出地图值 */ for site := range siteMap { fmt.Println(site, \u0026#34;首都是\u0026#34;, siteMap [site]) } /*查看元素在集合中是否存在 */ name, ok := siteMap [ \u0026#34;Facebook\u0026#34; ] /*如果确定是真实的,则存在,否则不存在 */ /*fmt.Println(capital) */ /*fmt.Println(ok) */ if (ok) { fmt.Println(\u0026#34;Facebook 的 站点是\u0026#34;, name) } else { fmt.Println(\u0026#34;Facebook 站点不存在\u0026#34;) } } 运行结果为：\nWiki 首都是 维基百科 Google 首都是 谷歌 Runoob 首都是 菜鸟教程 Baidu 首都是 百度 Facebook 站点不存在 delete() 函数 delete() 函数用于删除集合的元素, 参数为 map 和其对应的 key。实例如下：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 创建map */ countryCapitalMap := map[string]string{\u0026#34;France\u0026#34;: \u0026#34;Paris\u0026#34;, \u0026#34;Italy\u0026#34;: \u0026#34;Rome\u0026#34;, \u0026#34;Japan\u0026#34;: \u0026#34;Tokyo\u0026#34;, \u0026#34;India\u0026#34;: \u0026#34;New delhi\u0026#34;} fmt.Println(\u0026#34;原始地图\u0026#34;) /* 打印地图 */ for country := range countryCapitalMap { fmt.Println(country, \u0026#34;首都是\u0026#34;, countryCapitalMap [ country ]) } /*删除元素*/ delete(countryCapitalMap, \u0026#34;France\u0026#34;) fmt.Println(\u0026#34;法国条目被删除\u0026#34;) fmt.Println(\u0026#34;删除元素后地图\u0026#34;) /*打印地图*/ for country := range countryCapitalMap { fmt.Println(country, \u0026#34;首都是\u0026#34;, countryCapitalMap [ country ]) } } 运行结果为：\n原始地图 India 首都是 New delhi France 首都是 Paris Italy 首都是 Rome Japan 首都是 Tokyo 法国条目被删除 删除元素后地图 Italy 首都是 Rome Japan 首都是 Tokyo India 首都是 New delhi Go 语言递归函数 递归，就是在运行的过程中调用自己。\n语法格式如下：\nfunc recursion() { recursion() */\\* 函数调用自身 \\*/* } func main() { recursion() } Go 语言支持递归。但我们在使用递归时，开发者需要设置退出条件，否则递归将陷入无限循环中。\n递归函数对于解决数学上的问题是非常有用的，就像计算阶乘，生成斐波那契数列等。\n阶乘 以下实例通过 Go 语言的递归函数实例阶乘：\npackage main import \u0026#34;fmt\u0026#34; func Factorial(n uint64)(result uint64) { if (n \u0026gt; 0) { result = n * Factorial(n-1) return result } return 1 } func main() { var i int = 15 fmt.Printf(\u0026#34;%d 的阶乘是 %d\\n\u0026#34;, i, Factorial(uint64(i))) } 输出结果为：\n15 的阶乘是 1307674368000 斐波那契数列 以下实例通过 Go 语言的递归函数实现斐波那契数列：\npackage main import \u0026#34;fmt\u0026#34; func fibonacci(n int) int { if n \u0026lt; 2 { return n } return fibonacci(n-2) + fibonacci(n-1) } func main() { var i int for i = 0; i \u0026lt; 10; i++ { fmt.Printf(\u0026#34;%d\\t\u0026#34;, fibonacci(i)) } } 输出结果为：\n0 1 1 2 3 5 8 13 21 34 求平方根 以下实例通过 Go 语言使用递归方法实现求平方根的代码：\npackage main import ( \u0026#34;fmt\u0026#34; ) func sqrtRecursive(x, guess, prevGuess, epsilon float64) float64 { if diff := guess*guess - x; diff \u0026lt; epsilon \u0026amp;\u0026amp; -diff \u0026lt; epsilon { return guess } newGuess := (guess + x/guess) / 2 if newGuess == prevGuess { return guess } return sqrtRecursive(x, newGuess, guess, epsilon) } func sqrt(x float64) float64 { return sqrtRecursive(x, 1.0, 0.0, 1e-9) } func main() { x := 25.0 result := sqrt(x) fmt.Printf(\u0026#34;%.2f 的平方根为 %.6f\\n\u0026#34;, x, result) } 以上实例中，sqrtRecursive 函数使用递归方式实现平方根的计算。\nsqrtRecursive 函数接受四个参数：\nx 表示待求平方根的数 guess 表示当前猜测的平方根值 prevGuess 表示上一次的猜测值 epsilon 表示精度要求（即接近平方根的程度） 递归的终止条件是当前猜测的平方根与上一次猜测的平方根非常接近，差值小于给定的精度 epsilon。\n在 sqrt 函数中，我们调用 sqrtRecursive 来计算平方根，并传入初始值和精度要求，然后在 main 函数中，我们调用 sqrt 函数来求解平方根，并将结果打印出来。\n执行以上代码输出结果为：\n25.00 的平方根为 5.000000 Go 语言类型转换 类型转换用于将一种数据类型的变量转换为另外一种类型的变量。\nGo 语言类型转换基本格式如下：\ntype_name(expression) type_name 为类型，expression 为表达式。\n数值类型转换 将整型转换为浮点型：\nvar a int = 10 var b float64 = float64(a) 以下实例中将整型转化为浮点型，并计算结果，将结果赋值给浮点型变量：\npackage main import \u0026#34;fmt\u0026#34; func main() { var sum int = 17 var count int = 5 var mean float32 mean = float32(sum)/float32(count) fmt.Printf(\u0026#34;mean 的值为: %f\\n\u0026#34;,mean) } 输出结果为：\nmean 的值为: 3.400000 字符串类型转换 将一个字符串转换成另一个类型，可以使用以下语法：\nvar str string = \u0026#34;10\u0026#34; var num int num, _ = strconv.Atoi(str) 以上代码将字符串变量 str 转换为整型变量 num。\n注意，strconv.Atoi 函数返回两个值，第一个是转换后的整型值，第二个是可能发生的错误，我们可以使用空白标识符 _ 来忽略这个错误。\n以下实例将字符串转换为整数\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { str := \u0026#34;123\u0026#34; num, err := strconv.Atoi(str) if err != nil { fmt.Println(\u0026#34;转换错误:\u0026#34;, err) } else { fmt.Printf(\u0026#34;字符串 \u0026#39;%s\u0026#39; 转换为整数为：%d\\n\u0026#34;, str, num) } } 输出结果为：\n字符串 \u0026#39;123\u0026#39; 转换为整数为：123 将整数转换为字符串：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { num := 123 str := strconv.Itoa(num) fmt.Printf(\u0026#34;整数 %d 转换为字符串为：\u0026#39;%s\u0026#39;\\n\u0026#34;, num, str) } 输出结果为：\n整数 123 转换为字符串为：\u0026#39;123\u0026#39; 将字符串转换为浮点数：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { str := \u0026#34;3.14\u0026#34; num, err := strconv.ParseFloat(str, 64) if err != nil { fmt.Println(\u0026#34;转换错误:\u0026#34;, err) } else { fmt.Printf(\u0026#34;字符串 \u0026#39;%s\u0026#39; 转为浮点型为：%f\\n\u0026#34;, str, num) } } 输出结果为：\n字符串 \u0026#39;3.14\u0026#39; 转为浮点型为：3.140000 将浮点数转换为字符串：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { num := 3.14 str := strconv.FormatFloat(num, \u0026#39;f\u0026#39;, 2, 64) fmt.Printf(\u0026#34;浮点数 %f 转为字符串为：\u0026#39;%s\u0026#39;\\n\u0026#34;, num, str) } 输出结果为：\n浮点数 3.140000 转为字符串为：\u0026#39;3.14\u0026#39; go 不支持隐式转换类型，比如 :\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int64 = 3 var b int32 b = a fmt.Printf(\u0026#34;b 为 : %d\u0026#34;, b) } 此时会报错\ncannot use a (type int64) as type int32 in assignment cannot use b (type int32) as type string in argument to fmt.Printf 但是如果改成 b = int32(a) 就不会报错了:\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int64 = 3 var b int32 b = int32(a) fmt.Printf(\u0026#34;b 为 : %d\u0026#34;, b) } 接口类型转换 接口类型转换有两种情况**：类型断言和类型转换**。\n类型断言 类型断言用于将接口类型转换为指定类型，其语法为：\nvalue.(type) 或者 value.(T) 其中 value 是接口类型的变量，type 或 T 是要转换成的类型。\n如果类型断言成功，它将返回转换后的值和一个布尔值，表示转换是否成功。\npackage main import \u0026#34;fmt\u0026#34; func main() { var i interface{} = \u0026#34;Hello, World\u0026#34; str, ok := i.(string) if ok { fmt.Printf(\u0026#34;\u0026#39;%s\u0026#39; is a string\\n\u0026#34;, str) } else { fmt.Println(\u0026#34;conversion failed\u0026#34;) } } 以上实例中，我们定义了一个接口类型变量 i，并将它赋值为字符串 \u0026ldquo;Hello, World\u0026rdquo;。然后，我们使用类型断言将 i 转换为字符串类型，并将转换后的值赋值给变量 str。最后，我们使用 ok 变量检查类型转换是否成功，如果成功，我们打印转换后的字符串；否则，我们打印转换失败的消息。\n类型转换 类型转换用于将一个接口类型的值转换为另一个接口类型，其语法为：\nT(value) T 是目标接口类型，value 是要转换的值。\n在类型转换中，我们必须保证要转换的值和目标接口类型之间是兼容的，否则编译器会报错。\npackage main import \u0026#34;fmt\u0026#34; // 定义一个接口 Writer type Writer interface { Write([]byte) (int, error) } // 实现 Writer 接口的结构体 StringWriter type StringWriter struct { str string } // 实现 Write 方法 func (sw *StringWriter) Write(data []byte) (int, error) { sw.str += string(data) return len(data), nil } func main() { // 创建一个 StringWriter 实例并赋值给 Writer 接口变量 var w Writer = \u0026amp;StringWriter{} // 将 Writer 接口类型转换为 StringWriter 类型 sw := w.(*StringWriter) // 修改 StringWriter 的字段 sw.str = \u0026#34;Hello, World\u0026#34; // 打印 StringWriter 的字段值 fmt.Println(sw.str) } 解析：\n定义接口和结构体： Writer 接口定义了 Write 方法。 StringWriter 结构体实现了 Write 方法。 类型转换： 将 StringWriter 实例赋值给 Writer 接口变量 w。 使用 w.(*StringWriter) 将 Writer 接口类型转换为 StringWriter 类型。 访问字段： 修改 StringWriter 的字段 str，并打印其值。 空接口类型 空接口 interface{} 可以持有任何类型的值。在实际应用中，空接口经常被用来处理多种类型的值。\npackage main import ( \u0026#34;fmt\u0026#34; ) func printValue(v interface{}) { switch v := v.(type) { case int: fmt.Println(\u0026#34;Integer:\u0026#34;, v) case string: fmt.Println(\u0026#34;String:\u0026#34;, v) default: fmt.Println(\u0026#34;Unknown type\u0026#34;) } } func main() { printValue(42) printValue(\u0026#34;hello\u0026#34;) printValue(3.14) } 在这个例子中，printValue 函数接受一个空接口类型的参数，并使用类型断言和类型选择来处理不同的类型。\nGo 语言接口 interface Go 语言提供了另外一种数据类型即接口，它把所有的具有共性的方法定义在一起，任何其他类型只要实现了这些方法就是实现了这个接口。\n接口可以让我们将不同的类型绑定到一组公共的方法上，从而实现多态和灵活的设计。\nGo 语言中的接口是隐式实现的，也就是说，如果一个类型实现了一个接口定义的所有方法，那么它就自动地实现了该接口。因此，我们可以通过将接口作为参数来实现对不同类型的调用，从而实现多态。\n/* 定义接口 */ type interface_name interface { method_name1 [return_type] method_name2 [return_type] method_name3 [return_type] ... method_namen [return_type] } /* 定义结构体 */ type struct_name struct { /* variables */ } /* 实现接口方法 */ func (struct_name_variable struct_name) method_name1() [return_type] { /* 方法实现 */ } ... func (struct_name_variable struct_name) method_namen() [return_type] { /* 方法实现*/ } 接口的使用：\npackage main import ( \u0026#34;fmt\u0026#34; ) type Phone interface { call() } type NokiaPhone struct { } func (nokiaPhone NokiaPhone) call() { fmt.Println(\u0026#34;I am Nokia, I can call you!\u0026#34;) } type IPhone struct { } func (iPhone IPhone) call() { fmt.Println(\u0026#34;I am iPhone, I can call you!\u0026#34;) } func main() { var phone Phone phone = new(NokiaPhone) phone.call() phone = new(IPhone) phone.call() } 在上面的例子中，我们定义了一个接口 Phone，接口里面有一个方法 call()。然后我们在 main 函数里面定义了一个 Phone 类型变量，并分别为之赋值为 NokiaPhone 和 IPhone。然后调用 call() 方法，输出结果如下：\nI am Nokia, I can call you! I am iPhone, I can call you! 第二个接口实例：\npackage main import \u0026#34;fmt\u0026#34; type Shape interface { area() float64 } type Rectangle struct { width float64 height float64 } func (r Rectangle) area() float64 { return r.width * r.height } type Circle struct { radius float64 } func (c Circle) area() float64 { return 3.14 * c.radius * c.radius } func main() { var s Shape s = Rectangle{width: 10, height: 5} fmt.Printf(\u0026#34;矩形面积: %f\\n\u0026#34;, s.area()) s = Circle{radius: 3} fmt.Printf(\u0026#34;圆形面积: %f\\n\u0026#34;, s.area()) } 以上实例中，我们定义了一个 Shape 接口，它定义了一个方法 area()，该方法返回一个 float64 类型的面积值。然后，我们定义了两个结构体 Rectangle 和 Circle，它们分别实现了 Shape 接口的 area() 方法。在 main() 函数中，我们首先定义了一个 Shape 类型的变量 s，然后分别将 Rectangle 和 Circle 类型的实例赋值给它，并通过 area() 方法计算它们的面积并打印出来，输出结果如下：\n矩形面积: 50.000000 圆形面积: 28.260000 需要注意的是，接口类型变量可以存储任何实现了该接口的类型的值。在示例中，我们将 Rectangle 和 Circle 类型的实例都赋值给了 Shape 类型的变量 s，并通过 area() 方法调用它们的面积计算方法。\nGo 错误处理 Go 语言通过内置的错误接口提供了非常简单的错误处理机制。\nerror 类型是一个接口类型，这是它的定义：\ntype error interface { Error() string } 我们可以在编码中通过实现 error 接口类型来生成错误信息。\n函数通常在最后的返回值中返回错误信息。使用 errors.New 可返回一个错误信息：\nfunc Sqrt(f float64) (float64, error) { if f \u0026lt; 0 { return 0, errors.New(\u0026#34;math: square root of negative number\u0026#34;) } // 实现 } 在下面的例子中，我们在调用 Sqrt 的时候传递的一个负数，然后就得到了 non-nil 的 error 对象，将此对象与 nil 比较，结果为 true，所以 fmt.Println(fmt 包在处理 error 时会调用 Error 方法)被调用，以输出错误，请看下面调用的示例代码：\nresult, err:= Sqrt(-1) if err != nil { fmt.Println(err) } 实例\npackage main import ( \u0026#34;fmt\u0026#34; ) // 定义一个 DivideError 结构 type DivideError struct { dividee int divider int } // 实现 `error` 接口 func (de *DivideError) Error() string { strFormat := ` Cannot proceed, the divider is zero. dividee: %d divider: 0 ` return fmt.Sprintf(strFormat, de.dividee) } // 定义 `int` 类型除法运算的函数 func Divide(varDividee int, varDivider int) (result int, errorMsg string) { if varDivider == 0 { dData := DivideError{ dividee: varDividee, divider: varDivider, } errorMsg = dData.Error() return } else { return varDividee / varDivider, \u0026#34;\u0026#34; } } func main() { // 正常情况 if result, errorMsg := Divide(100, 10); errorMsg == \u0026#34;\u0026#34; { fmt.Println(\u0026#34;100/10 = \u0026#34;, result) } // 当除数为零的时候会返回错误信息 if _, errorMsg := Divide(100, 0); errorMsg != \u0026#34;\u0026#34; { fmt.Println(\u0026#34;errorMsg is: \u0026#34;, errorMsg) } } 输出结果为：\n100/10 = 10 errorMsg is: Cannot proceed, the divider is zero. dividee: 100 divider: 0 Go 并发 并发是指程序同时执行多个任务的能力\nGo 语言支持并发，通过 goroutines 和 channels 提供了一种简洁且高效的方式来实现并发。\ngoroutine goroutine 是轻量级线程，goroutine 的调度是由 Golang 运行时进行管理的。\ngoroutine 语法格式：\ngo 函数名( 参数列表 ) 例如：\ngo f(x, y, z) 开启一个新的 goroutine:\nf(x, y, z) Go 允许使用 go 语句开启一个新的运行期线程， 即 goroutine，以一个不同的、新创建的 goroutine 来执行一个函数。 同一个程序中的所有 goroutine 共享同一个地址空间。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func say(s string) { for i := 0; i \u0026lt; 5; i++ { time.Sleep(100 * time.Millisecond) fmt.Println(s) } } func main() { go say(\u0026#34;world\u0026#34;) say(\u0026#34;hello\u0026#34;) } 执行以上代码，你会看到输出的 hello 和 world 是没有固定先后顺序。因为它们是两个 goroutine 在执行：\nworld hello hello world world hello hello world world hello 通道（channel） 通道（channel）是用来传递数据的一个数据结构。\n通道可用于两个 goroutine 之间通过传递一个指定类型的值来同步运行和通讯。\n使用 make 函数创建一个 channel，使用 \u0026lt;- 操作符发送和接收数据。如果未指定方向，则为双向通道。\nch \u0026lt;- v // 把 v 发送到通道 ch v := \u0026lt;-ch // 从 ch 接收数据 // 并把值赋给 v 声明一个通道很简单，我们使用chan关键字即可，通道在使用前必须先创建：\nch := make(chan int) 注意：默认情况下，通道是不带缓冲区的。发送端发送数据，同时必须有接收端相应的接收数据。\n以下实例通过两个 goroutine 来计算数字之和，在 goroutine 完成计算后，它会计算两个结果的和：\npackage main import \u0026#34;fmt\u0026#34; func sum(s []int, c chan int) { sum := 0 for _, v := range s { sum += v } c \u0026lt;- sum // 把 sum 发送到通道 c } func main() { s := []int{7, 2, 8, -9, 4, 0} c := make(chan int) go sum(s[:len(s)/2], c) go sum(s[len(s)/2:], c) x, y := \u0026lt;-c, \u0026lt;-c // 从通道 c 中接收 fmt.Println(x, y, x+y) } 输出结果为：\n-5 17 12 通道缓冲区 通道可以设置缓冲区，通过 make 的第二个参数指定缓冲区大小：\nch := make(chan int, 100) 带缓冲区的通道允许发送端的数据发送和接收端的数据获取处于异步状态，就是说发送端发送的数据可以放在缓冲区里面，可以等待接收端去获取数据，而不是立刻需要接收端去获取数据。\n不过由于缓冲区的大小是有限的，所以还是必须有接收端来接收数据的，否则缓冲区一满，数据发送端就无法再发送数据了。\n注意：如果通道不带缓冲，发送方会阻塞直到接收方从通道中接收了值。如果通道带缓冲，发送方则会阻塞直到发送的值被拷贝到缓冲区内；如果缓冲区已满，则意味着需要等待直到某个接收方获取到一个值。接收方在有值可以接收之前会一直阻塞。\npackage main import \u0026#34;fmt\u0026#34; func main() { // 这里我们定义了一个可以存储整数类型的带缓冲通道 // 缓冲区大小为2 ch := make(chan int, 2) // 因为 ch 是带缓冲的通道，我们可以同时发送两个数据 // 而不用立刻需要去同步读取数据 ch \u0026lt;- 1 ch \u0026lt;- 2 // 获取这两个数据 fmt.Println(\u0026lt;-ch) fmt.Println(\u0026lt;-ch) } 执行输出结果为：\n1 2 Go 遍历通道与关闭通道 Go 通过 range 关键字来实现遍历读取到的数据，类似于与数组或切片。格式如下：\nv, ok := \u0026lt;-ch 如果通道接收不到数据后 ok 就为 false，这时通道就可以使用 close() 函数来关闭。\npackage main import ( \u0026#34;fmt\u0026#34; ) func fibonacci(n int, c chan int) { x, y := 0, 1 for i := 0; i \u0026lt; n; i++ { c \u0026lt;- x x, y = y, x+y } close(c) } func main() { c := make(chan int, 10) go fibonacci(cap(c), c) // range 函数遍历每个从通道接收到的数据，因为 c 在发送完 10 个 // 数据之后就关闭了通道，所以这里我们 range 函数在接收到 10 个数据 // 之后就结束了。如果上面的 c 通道不关闭，那么 range 函数就不 // 会结束，从而在接收第 11 个数据的时候就阻塞了。 for i := range c { fmt.Println(i) } } 输出结果为：\n0 1 1 2 3 5 8 13 21 34 Select 语句 select 语句使得一个 goroutine 可以等待多个通信操作。select 会阻塞，直到其中的某个 case 可以继续执行：\npackage main import \u0026#34;fmt\u0026#34; func fibonacci(c, quit chan int) { x, y := 0, 1 for { select { case c \u0026lt;- x: x, y = y, x+y case \u0026lt;-quit: fmt.Println(\u0026#34;quit\u0026#34;) return } } } func main() { c := make(chan int) quit := make(chan int) go func() { for i := 0; i \u0026lt; 10; i++ { fmt.Println(\u0026lt;-c) } quit \u0026lt;- 0 }() fibonacci(c, quit) } 以上代码中中，fibonacci goroutine 在 channel c 上发送斐波那契数列，当接收到 quit channel 的信号时退出。\n执行输出结果为：\n0 1 1 2 3 5 8 13 21 34 quit 并发编程小结 Goroutines 是轻量级线程，使用 go 关键字启动。 Channels 用于 goroutines 之间的通信。 Select 语句 用于等待多个 channel 操作。 链接: 菜鸟教程相关笔记补充\n","permalink":"//localhost:1313/posts/go%E8%AF%AD%E8%A8%80/","summary":"\u003ch1 id=\"go的变量声明\"\u003ego的变量声明\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e第一种，指定变量类型，如果没有初始化，则变量默认为零值\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e例如：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 声明一个整型变量 a，默认为 0\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"kt\"\u003efloat64\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 声明一个浮点型变量 b，默认为 0.0\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e第二种，根据值自行判定变量类型。\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e例如：\u003c/p\u003e","title":"Go语言"},{"content":"日常技巧 CTRL + r 等于 window 下的默认 CTRL + y CTRL + f 查找 1. 关于Vim 1.1 Vim的几种模式 正常模式：可以使用快捷键命令，或按:输入命令行。 插入模式：可以输入文本，在正常模式下，按i、a、o等都可以进入插入模式。 可视模式：正常模式下按v可以进入可视模式， 在可视模式下，移动光标可以选择文本。按V进入可视行模式， 总是整行整行的选中。ctrl+v进入可视块模式。 替换模式：正常模式下，按R进入。 2. 启动Vim vim -c cmd file: 在打开文件前，先执行指定的命令； vim -r file: 恢复上次异常退出的文件； vim -R file: 以只读的方式打开文件，但可以强制保存； vim -M file: 以只读的方式打开文件，不可以强制保存； vim -y num file: 将编辑窗口的大小设为num行； vim + file: 从文件的末尾开始； vim +num file: 从第num行开始； vim +/string file: 打开file，并将光标停留在第一个找到的string上。 vim \u0026ndash;remote file: 用已有的vim进程打开指定的文件。 如果你不想启用多个vim会话，这个很有用。但要注意， 如果你用vim，会寻找名叫VIM的服务器；如果你已经有一个gvim在运行了， 你可以用gvim \u0026ndash;remote file在已有的gvim中打开文件。 3. 文档操作 :e file \u0026ndash;关闭当前编辑的文件，并开启新的文件。 如果对当前文件的修改未保存，vi会警告。 :e! file \u0026ndash;放弃对当前文件的修改，编辑新的文件。 :e+file \u0026ndash; 开始新的文件，并从文件尾开始编辑。 :e+n file \u0026ndash; 开始新的文件，并从第n行开始编辑。 :enew \u0026ndash;编译一个未命名的新文档。(CTRL-W n) :e \u0026ndash; 重新加载当前文档。 :e! \u0026ndash; 重新加载当前文档，并丢弃已做的改动。 :e#或ctrl+^ \u0026ndash; 回到刚才编辑的文件，很实用。 :f或ctrl+g \u0026ndash; 显示文档名，是否修改，和光标位置。 :f filename \u0026ndash; 改变编辑的文件名，这时再保存相当于另存为。 gf \u0026ndash; 打开以光标所在字符串为文件名的文件。 :w \u0026ndash; 保存修改。 :n1,n2w filename \u0026ndash; 选择性保存从某n1行到另n2行的内容。 :wq \u0026ndash; 保存并退出。 ZZ \u0026ndash; 保存并退出。 :x \u0026ndash; 保存并退出。 :q[uit] ——退出当前窗口。(CTRL-W q或CTRL-W CTRL-Q) :saveas newfilename \u0026ndash; 另存为 :browse e \u0026ndash; 会打开一个文件浏览器让你选择要编辑的文件。 如果是终端中，则会打开netrw的文件浏览窗口； 如果是gvim，则会打开一个图形界面的浏览窗口。 实际上:browse后可以跟任何编辑文档的命令，如sp等。 用browse打开的起始目录可以由browsedir来设置： :set browsedir=last \u0026ndash; 用上次访问过的目录（默认）； :set browsedir=buffer \u0026ndash; 用当前文件所在目录； :set browsedir=current \u0026ndash; 用当前工作目录； :Sex \u0026ndash; 水平分割一个窗口，浏览文件系统； :Vex \u0026ndash; 垂直分割一个窗口，浏览文件系统； 4. 光标的移动 4.1 基本移动 以下移动都是在normal模式下。\nh或退格: 左移一个字符； l或空格: 右移一个字符； j: 下移一行； k: 上移一行； gj: 移动到一段内的下一行； gk: 移动到一段内的上一行； +或Enter: 把光标移至下一行第一个非空白字符。 -: 把光标移至上一行第一个非空白字符。 w: 前移一个单词，光标停在下一个单词开头； W: 移动下一个单词开头，但忽略一些标点； e: 前移一个单词，光标停在下一个单词末尾； E: 移动到下一个单词末尾，如果词尾有标点，则移动到标点； b: 后移一个单词，光标停在上一个单词开头； B: 移动到上一个单词开头，忽略一些标点； ge: 后移一个单词，光标停在上一个单词末尾； gE: 同 ge ，不过‘单词’包含单词相邻的标点。 (: 前移1句。 ): 后移1句。 {: 前移1段。 }: 后移1段。 fc: 把光标移到同一行的下一个c字符处 Fc: 把光标移到同一行的上一个c字符处 tc: 把光标移到同一行的下一个c字符前 Tc: 把光标移到同一行的上一个c字符后 ;: 配合f \u0026amp; t使用，重复一次 ,: 配合f \u0026amp; t使用，反向重复一次 viw : 选中一个单词 上面的操作都可以配合n使用，比如在正常模式(下面会讲到)下输入3h， 则光标向左移动3个字符。\n0: 移动到行首。 g0: 移到光标所在屏幕行行首。 ^: 移动到本行第一个非空白字符。 g^: 同 ^ ，但是移动到当前屏幕行第一个非空字符处。 $: 移动到行尾。 g$: 移动光标所在屏幕行行尾。 n|: 把光标移到递n列上。 nG: 到文件第n行。 :n 移动到第n行。 :$ 移动到最后一行。 H: 把光标移到屏幕最顶端一行。 M: 把光标移到屏幕中间一行。 L: 把光标移到屏幕最底端一行。 gg: 到文件头部。 G: 到文件尾部。 4.2 翻屏 ctrl+f: 下翻一屏。 ctrl+b: 上翻一屏。 ctrl+d: 下翻半屏。 ctrl+u: 上翻半屏。 ctrl+e: 向下滚动一行。 ctrl+y: 向上滚动一行。 n%: 到文件n%的位置。 zz: 将当前行移动到屏幕中央。 zt: 将当前行移动到屏幕顶端。 zb: 将当前行移动到屏幕底端。 4.3 标记 使用标记可以快速移动。到达标记后，可以用Ctrl+o返回原来的位置。 Ctrl+o和Ctrl+i 很像浏览器上的 后退 和 前进 。\nm{a-z}: 标记光标所在位置，局部标记，只用于当前文件。 m{A-Z}: 标记光标所在位置，全局标记。标记之后，退出Vim， 重新启动，标记仍然有效。 `{a-z}: 移动到标记位置。 \u0026lsquo;{a-z}: 移动到标记行的行首。 `{0-9}：回到上[2-10]次关闭vim时最后离开的位置。 : 移动到上次编辑的位置。''也可以，不过精确到列，而\u0026rsquo;\u0026lsquo;精确到行 。如果想跳转到更老的位置，可以按C-o，跳转到更新的位置用C-i。 `\u0026quot;: 移动到上次离开的地方。 `.: 移动到最后改动的地方。 :marks 显示所有标记。 :delmarks a b \u0026ndash; 删除标记a和b。 :delmarks a-c \u0026ndash; 删除标记a、b和c。 :delmarks a c-f \u0026ndash; 删除标记a、c、d、e、f。 :delmarks! \u0026ndash; 删除当前缓冲区的所有标记。 :help mark-motions 查看更多关于mark的知识。 5. 插入文本 5.1 基本插入 i: 在光标前插入；一个小技巧：按8，再按i，进入插入模式，输入=， 按esc进入命令模式，就会出现8个=。 这在插入分割线时非常有用，如30i+就插入了36个+组成的分割线。 I: 在当前行第一个非空字符前插入； gI: 在当前行第一列插入； a: 在光标后插入； A: 在当前行最后插入； o: 在下面新建一行插入； O: 在上面新建一行插入； :r filename在当前位置插入另一个文件的内容。 :[n]r filename在第n行插入另一个文件的内容。 :r !date 在光标处插入当前日期与时间。同理，:r !command可以将其它shell命令的输出插入当前文档。 5.2 改写插入 c[n]w: 改写光标后1(n)个词。 c[n]l: 改写光标后n个字母。 c[n]h: 改写光标前n个字母。 [n]cc: 修改当前[n]行。 [n]s: 以输入的文本替代光标之后1(n)个字符，相当于c[n]l。 [n]S: 删除指定数目的行，并以所输入文本代替之。 注意，类似cnw,dnw,ynw的形式同样可以写为ncw,ndw,nyw。\n6. 剪切复制和寄存器 6.1 剪切和复制、粘贴 [n]x: 剪切光标右边n个字符，相当于d[n]l。 [n]X: 剪切光标左边n个字符，相当于d[n]h。 y: 复制在可视模式下选中的文本。 yy or Y: 复制整行文本。 y[n]w: 复制一(n)个词。 y[n]l: 复制光标右边1(n)个字符。 y[n]h: 复制光标左边1(n)个字符。 y$: 从光标当前位置复制到行尾。 y0: 从光标当前位置复制到行首。 :m,ny 复制m行到n行的内容。 y1G或ygg: 复制光标以上的所有行。 yG: 复制光标以下的所有行。 yaw和yas：复制一个词和复制一个句子，即使光标不在词首和句首也没关系。 d: 删除（剪切）在可视模式下选中的文本。 d$ or D: 删除（剪切）当前位置到行尾的内容。 d[n]w: 删除（剪切）1(n)个单词 d[n]l: 删除（剪切）光标右边1(n)个字符。 d[n]h: 删除（剪切）光标左边1(n)个字符。 d0: 删除（剪切）当前位置到行首的内容 [n] dd: 删除（剪切）1(n)行。 :m,nd 剪切m行到n行的内容。 d1G或dgg: 剪切光标以上的所有行。 dG: 剪切光标以下的所有行。 daw和das：剪切一个词和剪切一个句子，即使光标不在词首和句首也没关系。 d/f：这是一个比较高级的组合命令，它将删除当前位置 到下一个f之间的内容。 p: 在光标之后粘贴。 P: 在光标之前粘贴。 6.2 文本对象 aw：一个词 as：一句。 ap：一段。 ab：一块（包含在圆括号中的）。 y, d, c, v都可以跟文本对象。\n6.3 寄存器 a-z：都可以用作寄存器名。\u0026ldquo;ayy把当前行的内容放入a寄存器。 A-Z：用大写字母索引寄存器，可以在寄存器中追加内容。 如\u0026quot;Ayy把当前行的内容追加到a寄存器中。 :reg 显示所有寄存器的内容。 \u0026ldquo;\u0026quot;：不加寄存器索引时，默认使用的寄存器。 \u0026ldquo;*：当前选择缓冲区，\u0026quot;*yy把当前行的内容放入当前选择缓冲区。 \u0026ldquo;+：系统剪贴板。\u0026quot;+yy把当前行的内容放入系统剪贴板。 7. 查找与替换 7.1 查找 /something: 在后面的文本中查找something。 ?something: 在前面的文本中查找something。 /pattern/+number: 将光标停在包含pattern的行后面第number行上。 /pattern/-number: 将光标停在包含pattern的行前面第number行上。 n: 向后查找下一个。 N: 向前查找下一个。 可以用grep或vimgrep查找一个模式都在哪些地方出现过，\n其中:grep是调用外部的grep程序，而:vimgrep是vim自己的查找算法。\n用法为： :vim[grep]/pattern/[g] [j] files\ng的含义是如果一个模式在一行中多次出现，则这一行也在结果中多次出现。\nj的含义是grep结束后，结果停在第j项，默认是停在第一项。\nvimgrep前面可以加数字限定搜索结果的上限，如\n:1vim/pattern/ % 只查找那个模式在本文件中的第一个出现。\n其实vimgrep在读纯文本电子书时特别有用，可以生成导航的目录。\n比如电子书中每一节的标题形式为：n. xxxx。你就可以这样：\n:vim/^d{1,}./ %\n然后用:cw或:copen查看结果，可以用C-w H把quickfix窗口移到左侧，\n就更像个目录了。\n7.2 替换 :s/old/new - 用new替换当前行第一个old。 :s/old/new/g - 用new替换当前行所有的old。 :n1,n2s/old/new/g - 用new替换文件n1行到n2行所有的old。 :%s/old/new/g - 用new替换文件中所有的old。 :%s/^/xxx/g - 在每一行的行首插入xxx，^表示行首。 :%s/$/xxx/g - 在每一行的行尾插入xxx，$表示行尾。 所有替换命令末尾加上c，每个替换都将需要用户确认。 如：%s/old/new/gc，加上i则忽略大小写(ignore)。 还有一种比替换更灵活的方式，它是匹配到某个模式后执行某种命令，\n语法为 :[range]g/pattern/command\n例如 :%g/^ xyz/normal dd。\n表示对于以一个空格和xyz开头的行执行normal模式下的dd命令。\n关于range的规定为：\n如果不指定range，则表示当前行。 m,n: 从m行到n行。 0: 最开始一行（可能是这样）。 $: 最后一行 .: 当前行 %: 所有行 7.3 正则表达式 高级的查找替换就要用到正则表达式。\n\\d: 表示十进制数（我猜的） \\s: 表示空格 \\S: 非空字符 \\a: 英文字母 |: 表示 或 .: 表示. {m,n}: 表示m到n个字符。这要和 \\s与\\a等连用，如 \\a{m,n} 表示m 到n个英文字母。 {m,}: 表示m到无限多个字符。 **: 当前目录下的所有子目录。 :help pattern得到更多帮助。\n8. 排版 8.1 基本排版 \u0026laquo; 向左缩进一个shiftwidth \u0026gt;\u0026gt; 向右缩进一个shiftwidth :ce(nter) 本行文字居中 :le(ft) 本行文字靠左 :ri(ght) 本行文字靠右 gq 对选中的文字重排，即对过长的文字进行断行 gqq 重排当前行 gqnq 重排n行 gqap 重排当前段 gqnap 重排n段 gqnj 重排当前行和下面n行 gqQ 重排当前段对文章末尾 J 拼接当前行和下一行 gJ 同 J ，不过合并后不留空格。 8.2 拼写检查 :set spell－开启拼写检查功能 :set nospell－关闭拼写检查功能 ]s－移到下一个拼写错误的单词 [s－作用与上一命令类似，但它是从相反方向进行搜索 z=－显示一个有关拼写错误单词的列表，可从中选择 zg－告诉拼写检查器该单词是拼写正确的 zw－与上一命令相反，告诉拼写检查器该单词是拼写错误的 8.3 统计字数 g ^g可以统计文档字符数，行数。 将光标放在最后一个字符上，用字符数减去行数可以粗略统计中文文档的字数。 以上对 Mac 或 Unix 的文件格式适用。 如果是 Windows 文件格式（即换行符有两个字节），字数的统计方法为： 字符数 - 行数 * 2。\n9. 编辑多个文件 9.1 一次编辑多个文件 我们可以一次打开多个文件，如\nvi a.txt b.txt c.txt 使用:next(:n)编辑下一个文件。 :2n 编辑下2个文件。 使用:previous或:N编辑上一个文件。 使用:wnext，保存当前文件，并编辑下一个文件。 使用:wprevious，保存当前文件，并编辑上一个文件。 使用:args 显示文件列表。 :n filenames或:args filenames 指定新的文件列表。 vi -o filenames 在水平分割的多个窗口中编辑多个文件。 vi -O filenames 在垂直分割的多个窗口中编辑多个文件。 9.2 多标签编辑 vim -p files: 打开多个文件，每个文件占用一个标签页。 :tabe, tabnew \u0026ndash; 如果加文件名，就在新的标签中打开这个文件， 否则打开一个空缓冲区。 ^w gf \u0026ndash; 在新的标签页里打开光标下路径指定的文件。 :tabn \u0026ndash; 切换到下一个标签。Control + PageDown，也可以。 :tabp \u0026ndash; 切换到上一个标签。Control + PageUp，也可以。 [n] gt \u0026ndash; 切换到下一个标签。如果前面加了 n ， 就切换到第n个标签。第一个标签的序号就是1。 :tab split \u0026ndash; 将当前缓冲区的内容在新页签中打开。 :tabc[lose] \u0026ndash; 关闭当前的标签页。 :tabo[nly] \u0026ndash; 关闭其它的标签页。 :tabs \u0026ndash; 列出所有的标签页和它们包含的窗口。 :tabm[ove] [N] \u0026ndash; 移动标签页，移动到第N个标签页之后。 如 tabm 0 当前标签页，就会变成第一个标签页。 9.3 缓冲区 :buffers或:ls或:files 显示缓冲区列表。 ctrl+^：在最近两个缓冲区间切换。 :bn \u0026ndash; 下一个缓冲区。 :bp \u0026ndash; 上一个缓冲区。 :bl \u0026ndash; 最后一个缓冲区。 :b[n]或:[n]b \u0026ndash; 切换到第n个缓冲区。 :nbw(ipeout) \u0026ndash; 彻底删除第n个缓冲区。 :nbd(elete) \u0026ndash; 删除第n个缓冲区，并未真正删除，还在unlisted列表中。 :ba[ll] \u0026ndash; 把所有的缓冲区在当前页中打开，每个缓冲区占一个窗口。 10. 分屏编辑 vim -o file1 file2:水平分割窗口，同时打开file1和file2 vim -O file1 file2:垂直分割窗口，同时打开file1和file2 10.1 水平分割 :split(:sp) \u0026ndash; 把当前窗水平分割成两个窗口。(CTRL-W s 或 CTRL-W CTRL-S) 注意如果在终端下，CTRL-S可能会冻结终端，请按CTRL-Q继续。 :split filename \u0026ndash; 水平分割窗口，并在新窗口中显示另一个文件。 :nsplit(:nsp) \u0026ndash; 水平分割出一个n行高的窗口。 :[N]new \u0026ndash; 水平分割出一个N行高的窗口，并编辑一个新文件。 (CTRL-W n或 CTRL-W CTRL-N) ctrl+w f \u0026ndash;水平分割出一个窗口，并在新窗口打开名称为光标所在词的文件 。 C-w C-^ \u0026ndash; 水平分割一个窗口，打开刚才编辑的文件。 10.2 垂直分割 :vsplit(:vsp) \u0026ndash; 把当前窗口分割成水平分布的两个窗口。 (CTRL-W v或CTRL CTRL-V) :[N]vne[w] \u0026ndash; 垂直分割出一个新窗口。 :vertical 水平分割的命令： 相应的垂直分割。 10.3 关闭子窗口 :qall \u0026ndash; 关闭所有窗口，退出vim。 :wall \u0026ndash; 保存所有修改过的窗口。 :only \u0026ndash; 只保留当前窗口，关闭其它窗口。(CTRL-W o) :close \u0026ndash; 关闭当前窗口，CTRL-W c能实现同样的功能。 (象 :q :x同样工作 ) 10.4 调整窗口大小 ctrl+w + \u0026ndash;当前窗口增高一行。也可以用n增高n行。 ctrl+w - \u0026ndash;当前窗口减小一行。也可以用n减小n行。 ctrl+w _ \u0026ndash;当前窗口扩展到尽可能的大。也可以用n设定行数。 :resize n \u0026ndash; 当前窗口n行高。 ctrl+w = \u0026ndash; 所有窗口同样高度。 n ctrl+w _ \u0026ndash; 当前窗口的高度设定为n行。 ctrl+w \u0026lt; \u0026ndash;当前窗口减少一列。也可以用n减少n列。 ctrl+w \u0026gt; \u0026ndash;当前窗口增宽一列。也可以用n增宽n列。 ctrl+w | \u0026ndash;当前窗口尽可能的宽。也可以用n设定列数。 10.5 切换和移动窗口 如果支持鼠标，切换和调整子窗口的大小就简单了。\nctrl+w ctrl+w: 切换到下一个窗口。或者是ctrl+w w。 ctrl+w p: 切换到前一个窗口。 ctrl+w h(l,j,k):切换到左（右，下，上）的窗口。 ctrl+w t(b):切换到最上（下）面的窗口。 ctrl+w H(L,K,J): 将当前窗口移动到最左（右、上、下）面。 ctrl+w r：旋转窗口的位置。 ctrl+w T: 将当前的窗口移动到新的标签页上。 11. 快速编辑 11.1 改变大小写 ~: 反转光标所在字符的大小写。 可视模式下的U或u：把选中的文本变为大写或小写。 gu(U)接范围（如$，或G），可以把从光标当前位置到指定位置之间字母全部 转换成小写或大写。如ggguG，就是把开头到最后一行之间的字母全部变为小 写。再如gu5j，把当前行和下面四行全部变成小写。 11.2 替换（normal模式） r: 替换光标处的字符，同样支持汉字。 R: 进入替换模式，按esc回到正常模式。 11.3 撤消与重做（normal模式） [n] u: 取消一(n)个改动。 :undo 5 \u0026ndash; 撤销5个改变。 :undolist \u0026ndash; 你的撤销历史。 ctrl + r: 重做最后的改动。 U: 取消当前行中所有的改动。 :earlier 4m \u0026ndash; 回到4分钟前 :later 55s \u0026ndash; 前进55秒 \u0026gt; 在这篇博客中，我引用了作者详细介绍的 Vim 的使用技巧。更多内容请查看原文：Vim 笔记。\n","permalink":"//localhost:1313/posts/vim%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/","summary":"\u003ch1 id=\"日常技巧\"\u003e日常技巧\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eCTRL + r\u003c/code\u003e 等于 window 下的默认 \u003ccode\u003eCTRL + y\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eCTRL + f   查找\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"1-关于vim\"\u003e1. 关于Vim\u003c/h1\u003e\n\u003ch2 id=\"11-vim的几种模式\"\u003e1.1 Vim的几种模式\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e正常模式：可以使用快捷键命令，或按:输入命令行。\u003c/li\u003e\n\u003cli\u003e插入模式：可以输入文本，在正常模式下，按i、a、o等都可以进入插入模式。\u003c/li\u003e\n\u003cli\u003e可视模式：正常模式下按v可以进入可视模式， 在可视模式下，移动光标可以选择文本。按V进入可视行模式， 总是整行整行的选中。ctrl+v进入可视块模式。\u003c/li\u003e\n\u003cli\u003e替换模式：正常模式下，按R进入。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"2-启动vim\"\u003e2. 启动Vim\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003evim -c cmd file: 在打开文件前，先执行指定的命令；\u003c/li\u003e\n\u003cli\u003evim -r file: 恢复上次异常退出的文件；\u003c/li\u003e\n\u003cli\u003evim -R file: 以只读的方式打开文件，但可以强制保存；\u003c/li\u003e\n\u003cli\u003evim -M file: 以只读的方式打开文件，不可以强制保存；\u003c/li\u003e\n\u003cli\u003evim -y num file: 将编辑窗口的大小设为num行；\u003c/li\u003e\n\u003cli\u003evim + file: 从文件的末尾开始；\u003c/li\u003e\n\u003cli\u003evim +num file: 从第num行开始；\u003c/li\u003e\n\u003cli\u003evim +/string file: 打开file，并将光标停留在第一个找到的string上。\u003c/li\u003e\n\u003cli\u003evim \u0026ndash;remote file: 用已有的vim进程打开指定的文件。 如果你不想启用多个vim会话，这个很有用。但要注意， 如果你用vim，会寻找名叫VIM的服务器；如果你已经有一个gvim在运行了， 你可以用gvim \u0026ndash;remote file在已有的gvim中打开文件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"3-文档操作\"\u003e3. 文档操作\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e:e file \u0026ndash;关闭当前编辑的文件，并开启新的文件。 如果对当前文件的修改未保存，vi会警告。\u003c/li\u003e\n\u003cli\u003e:e! file \u0026ndash;放弃对当前文件的修改，编辑新的文件。\u003c/li\u003e\n\u003cli\u003e:e+file \u0026ndash; 开始新的文件，并从文件尾开始编辑。\u003c/li\u003e\n\u003cli\u003e:e+n file \u0026ndash; 开始新的文件，并从第n行开始编辑。\u003c/li\u003e\n\u003cli\u003e:enew \u0026ndash;编译一个未命名的新文档。(CTRL-W n)\u003c/li\u003e\n\u003cli\u003e:e \u0026ndash; 重新加载当前文档。\u003c/li\u003e\n\u003cli\u003e:e! \u0026ndash; 重新加载当前文档，并丢弃已做的改动。\u003c/li\u003e\n\u003cli\u003e:e#或ctrl+^ \u0026ndash; 回到刚才编辑的文件，很实用。\u003c/li\u003e\n\u003cli\u003e:f或ctrl+g \u0026ndash; 显示文档名，是否修改，和光标位置。\u003c/li\u003e\n\u003cli\u003e:f filename \u0026ndash; 改变编辑的文件名，这时再保存相当于另存为。\u003c/li\u003e\n\u003cli\u003egf \u0026ndash; 打开以光标所在字符串为文件名的文件。\u003c/li\u003e\n\u003cli\u003e:w \u0026ndash; 保存修改。\u003c/li\u003e\n\u003cli\u003e:n1,n2w filename \u0026ndash; 选择性保存从某n1行到另n2行的内容。\u003c/li\u003e\n\u003cli\u003e:wq \u0026ndash; 保存并退出。\u003c/li\u003e\n\u003cli\u003eZZ \u0026ndash; 保存并退出。\u003c/li\u003e\n\u003cli\u003e:x \u0026ndash; 保存并退出。\u003c/li\u003e\n\u003cli\u003e:q[uit] ——退出当前窗口。(CTRL-W q或CTRL-W CTRL-Q)\u003c/li\u003e\n\u003cli\u003e:saveas newfilename \u0026ndash; 另存为\u003c/li\u003e\n\u003cli\u003e:browse e \u0026ndash; 会打开一个文件浏览器让你选择要编辑的文件。 如果是终端中，则会打开netrw的文件浏览窗口； 如果是gvim，则会打开一个图形界面的浏览窗口。 实际上:browse后可以跟任何编辑文档的命令，如sp等。 用browse打开的起始目录可以由browsedir来设置：\n\u003cul\u003e\n\u003cli\u003e:set browsedir=last \u0026ndash; 用上次访问过的目录（默认）；\u003c/li\u003e\n\u003cli\u003e:set browsedir=buffer \u0026ndash; 用当前文件所在目录；\u003c/li\u003e\n\u003cli\u003e:set browsedir=current \u0026ndash; 用当前工作目录；\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e:Sex \u0026ndash; 水平分割一个窗口，浏览文件系统；\u003c/li\u003e\n\u003cli\u003e:Vex \u0026ndash; 垂直分割一个窗口，浏览文件系统；\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"4-光标的移动\"\u003e4. 光标的移动\u003c/h1\u003e\n\u003ch2 id=\"41-基本移动\"\u003e4.1 基本移动\u003c/h2\u003e\n\u003cp\u003e以下移动都是在normal模式下。\u003c/p\u003e","title":"Vim操作手册"},{"content":"目前我的解决办法 在 posts 目录下创建一个名为 img 的文件夹，用于存储照片。该文件夹的路径为 ..\\content\\posts\\img。 将需要使用的照片复制并放入 img 文件夹中。在 Markdown 文档中使用照片时，可以通过相对位置进行引用。例如，引用的路径为 \u0026quot;../img/photo1.jpg\u0026quot;。请注意，使用 \u0026quot;../\u0026quot; 可确保照片在博客页面上正确显示。 若想在本地上查看 Markdown 文档中展示的照片，可以使用 \u0026quot;./\u0026quot; 作为引用路径。例如，引用的路径为 \u0026quot;./img/photo1.jpg\u0026quot;。 注意图片命名，确保照片文件名中不包含空格。 有问题的话, 欢迎在评论区留言, 我会尽快回复！\n","permalink":"//localhost:1313/posts/hugo%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/","summary":"\u003ch1 id=\"目前我的解决办法\"\u003e目前我的解决办法\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e在 \u003ccode\u003eposts\u003c/code\u003e 目录下创建一个名为 \u003ccode\u003eimg\u003c/code\u003e 的文件夹，用于存储照片。该文件夹的路径为 \u003ccode\u003e..\\content\\posts\\img\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e将需要使用的照片复制并放入 \u003ccode\u003eimg\u003c/code\u003e 文件夹中。在 Markdown 文档中使用照片时，可以通过相对位置进行引用。例如，引用的路径为 \u003ccode\u003e\u0026quot;../img/photo1.jpg\u0026quot;\u003c/code\u003e。请注意，使用 \u003ccode\u003e\u0026quot;../\u0026quot;\u003c/code\u003e 可确保照片在博客页面上正确显示。\u003c/li\u003e\n\u003cli\u003e若想在\u003cstrong\u003e本地\u003c/strong\u003e上查看 Markdown 文档中展示的照片，可以使用 \u003ccode\u003e\u0026quot;./\u0026quot;\u003c/code\u003e 作为引用路径。例如，引用的路径为 \u003ccode\u003e\u0026quot;./img/photo1.jpg\u0026quot;\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e注意图片命名，确保照片文件名中\u003cstrong\u003e不包含空格\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e有问题的话, 欢迎在评论区留言, 我会尽快回复！\u003c/p\u003e","title":"Hugo博客的图片上传"},{"content":"常用指令 vim 访问文本 退出文本并保存 :wq 返回到上一个文件夹 cd . . 解压指令 tar -zxvf xxxx.tar.gz vi vim 操作 i o a r 进入vim 按下esc , 输入**:** 然后输入wq 保存并退出 :q退出 :q! 不保存退出 yy 拷贝 5yy dd 删除 5dd 撤销 u 行号打开 :set nu 关机 shutdown -h 关机 shutdown -r 重启 reboot 重启 sync 把内存数据存入磁盘 注销用户和登录 logout\n退出root logout\n压缩/解压指令 tar -zxvf xxxx.tar.gz gzip 文件 压缩 gunzip 解压文件 zip 压缩文件夹 unzip 解压文件夹 -r 递归压缩 zip -r xxxxx.zip /home/ [将home目录及其包含的的文件和子文件夹都压缩] -d \u0026lt;可指定目录\u0026gt; unzip -d /opt/tmp /home/xxxxx.zip tar 万能 tar -c 产生打包文件 -v 显示详细信息 -f 指定压缩后的文件名 -z 打包并同时压缩 -x 解压.tar文件 帮助指令 man ls 列出所有指令\nhelp + 指令\nls -la\nls -la /root\n文件目录指令 pwd 显示出地址 cd ~ 回到家目录 cd .. 上一目录 mkdir 创建目录 mkdir -p /home/\u0026hellip;/\u0026hellip;. 创建指定目录 rmdir 删除空目录 强制删除空目录 rm -rf touch 创建空文件 cp 拷贝 cp hello.txt /bbb cp -r /home/bbb /opt 把目录复制到指定目录下 \\cp -r /home/bbb /opt 强制 rm 删除文件或目录 rm -rf /home/bbb 强制删除 -f 就是强制删除不提醒 mv 移动指令 cat 查看文件 -n 行号 less 分屏查看 echo $HOSTNAME 输出环境变量 head 查看文件的前几行 -\u0026gt; 10 行 head xxxx.c tail 查看末尾文件 tail xxxx.c ln -s /root /home/myroot 快捷指令指向 在myroot创建指向/root的快捷方式, cd myroot 就会直接进入/root 文件管理 使用 mkdir 创建目录。例如，mkdir xxxx 将在当前位置创建一个名为 \u0026ldquo;xxxx\u0026rdquo; 的目录。 要创建多级目录，可以使用 mkdir -p 命令。例如，mkdir -p xxx/yyy 将在 \u0026ldquo;xxx\u0026rdquo; 目录下创建一个名为 \u0026ldquo;yyy\u0026rdquo; 的子目录。 使用 mkdir -m 777 命令创建目录时，可以直接设置权限。数字 \u0026ldquo;777\u0026rdquo; 表示所有权限（读、写和执行）。另外，\u0026ldquo;4\u0026rdquo; 代表读权限，\u0026ldquo;2\u0026rdquo; 代表写权限，\u0026ldquo;1\u0026rdquo; 代表执行权限。 mv 命令用于移动文件或重命名文件。例如，mv xxx.c /home/zzz/targetPlace 将把 \u0026ldquo;xxx.c\u0026rdquo; 文件移动到 \u0026ldquo;/home/zzz/targetPlace\u0026rdquo; 目录。 使用 cp 命令复制文件。例如，cp xxx.c /home/zzz/targetPlace 将把 \u0026ldquo;xxx.c\u0026rdquo; 文件复制到 \u0026ldquo;/home/zzz/targetPlace\u0026rdquo; 目录。 若要复制目录，应使用 cp -r 命令。例如，cp -r /home/bbb /opt 将把 \u0026ldquo;/home/bbb\u0026rdquo; 目录复制到 \u0026ldquo;/opt\u0026rdquo; 目录。 rm 用于删除文件或目录，而 rmdir 仅用于删除空目录。删除文件时，使用 rm 文件名；删除目录（及其内容）时，使用 rm -r 目录名；删除空目录时，使用 rmdir 目录名。 使用 chown 和 chgrp 命令更改文件的所有权。例如，chown -R root /home/zzz/targetPlace/xxx.c 将把 \u0026ldquo;xxx.c\u0026rdquo; 文件的所有权更改为 root 用户。同理，使用 chgrp 命令更改文件的群组所有权。 使用 chmod 命令更改文件或目录的权限。例如，chmod 777 xxxx（目录） 将为名为 \u0026ldquo;xxxx\u0026rdquo; 的目录设置所有权限（读、写和执行）。 ln 命令用于创建链接，类似于快捷方式。例如，ln 路径/xxx.c newxxx.c 将在当前位置创建一个指向 \u0026ldquo;xxx.c\u0026rdquo; 的新链接 \u0026ldquo;newxxx.c\u0026rdquo;。若要删除快捷方式，可以使用 rm -rf 命令。 输入/输出重定向是一种将命令的输出发送到文件而不是屏幕的技术。例如，date \u0026gt; xx.txt 将当前日期和时间写入 \u0026ldquo;xx.txt\u0026rdquo; 文件。而 date \u0026gt;\u0026gt; xx.txt 会将日期和时间追加到文件的末尾，常用于日志、脚本和文件中。 cat命令 使用 cat \u0026gt; xxxx.c 创建一个新文件 \u0026ldquo;xxxx.c\u0026rdquo;。此命令进入文本输入模式，可以直接输入内容，输入完成后按 Ctrl+D 保存并退出。\n合并文件可以使用 cat 命令。例如，cat tx1.c tx2.c \u0026gt; tx3.c 将分别将 \u0026ldquo;tx1.c\u0026rdquo; 和 \u0026ldquo;tx2.c\u0026rdquo; 的内容合并并输出到 \u0026ldquo;tx3.c\u0026rdquo; 文件中。\n要向文件末尾添加内容，使用 cat \u0026gt;\u0026gt; tx.c。此命令进入文本输入模式，输入完内容后，同样按 Ctrl+D 保存并退出。\nmore命令 使用 more 命令可以逐屏查看大型文件。例如，more -3 tx 将从文件 \u0026ldquo;tx\u0026rdquo; 的第三行开始显示内容。使用方向键或空格键可以向下滚动，按 q 退出查看。 grep命令 使用 grep -i \u0026quot;abc.....\u0026quot; xxxx.c 查找文件 \u0026ldquo;xxxx.c\u0026rdquo; 中的内容，-i 选项使搜索不区分大小写。 使用 grep -n -i \u0026quot;abc.....\u0026quot; xxxx.c 查找文件 \u0026ldquo;xxxx.c\u0026rdquo; 中的内容，-n 选项会显示匹配行的行号，且同样不区分大小写。 find命令 使用 find -name 'tex*' 查找当前目录及子目录中以 \u0026ldquo;tex\u0026rdquo; 开头的文件，支持模糊查找。 使用 find -name 'te??.c' 查找当前目录及子目录中以 \u0026ldquo;te\u0026rdquo; 开头，后跟任意两个字符且以 \u0026ldquo;.c\u0026rdquo; 结尾的文件。 使用 find -name '[a-z]*.c' 查找当前目录及子目录中以小写字母开头且以 \u0026ldquo;.c\u0026rdquo; 结尾的文件。 locate 命令 要快速定位文件，可以使用 locate xxxx 命令。此命令通过查询系统中的文件数据库，迅速找出包含 \u0026ldquo;xxxx\u0026rdquo; 的文件路径。请确保在使用前更新数据库，通常可以通过 updatedb 命令实现。 who 命令 使用 who 查看当前登录的用户。 使用 who -a 查看详细的用户信息，包括登录时间和终端等。 使用 whoami 查看当前用户的用户名。 使用 uname 命令查看主机信息，uname -a 则显示所有相关信息，包括主机名、内核版本、硬件架构等。常用选项包括： -n: 显示主机名 -r: 显示内核版本 -v: 显示内核版本号 -m: 显示机器硬件名称 -p: 显示处理器架构 -i: 显示硬件平台 -o: 显示操作系统名称 man命令 要查看命令手册，可以使用 man 命令。具体示例：\n使用 man ls 查看 ls 命令的说明书。这将打开 ls 命令的手册页，其中包括用法、选项和示例等详细信息。 要退出手册页，可以按 q。\n软件包管理 apt-get 命令 下载/卸载/管理 软件包\nwhich 命令查找位置\n使用 apt-get 命令下载、卸载和管理软件包。例如：\napt-get install package_name 安装软件包。 apt-get remove package_name 卸载软件包。 使用 which 命令查找可执行文件的位置。例如，which command_name 将显示该命令的完整路径。\n不同系统管理 Debian/Ubuntu 系统 下载软件包: apt-get install package_name 卸载软件包: apt-get remove package_name 更新软件包列表: apt-get update 升级软件包: apt-get upgrade Red Hat/CentOS 系统 下载软件包: yum install package_name 卸载软件包: yum remove package_name 更新软件包列表: yum check-update 升级软件包: yum update Arch Linux 系统 下载软件包: pacman -S package_name 卸载软件包: pacman -R package_name 更新软件包列表和升级: pacman -Syu macOS (使用 Homebrew) 下载软件包: brew install package_name 卸载软件包: brew uninstall package_name 更新软件包列表: brew update 升级软件包: brew upgrade Windows (使用 Chocolatey) 下载软件包: choco install package_name 卸载软件包: choco uninstall package_name 更新软件包: choco upgrade all 文件系统类型 查看swap信息并更改单位显示：free -h。 挂载文件系统：使用 sudo mount 命令挂载文件系统到指定目标点，例如 sudo mount /dev/xxx/yyy target。其中，target 是挂载点。 卸载已挂载的文件系统：使用 umount 命令卸载挂载点，例如 umount target。 查询磁盘使用情况：使用 df -h 命令查看磁盘的可用空间等信息。 检查或修改文件系统：使用 fsck 命令进行磁盘检查和修复。可以使用 -C 和 -t $type $路径 参数来指定检查的类型和路径。具体语法可查看 fsck --help 获取更多信息。 在磁盘上创建文件系统：使用 mkfs 命令。具体文件系统类型可以通过查看系统支持的选项来确定。例如，创建ext4文件系统可以使用 mkfs.ext4 命令。 查看分区表：使用 fdisk -l $路径 命令来查看指定设备的分区表信息。如果只是想列出当前系统所有设备，可以省略 $路径 参数。 使用gzip压缩工具：压缩文件使用 gzip xxxx.c，压缩目录使用 gzip -r /home，解压使用 gzip -d xxxx.c.gz。注意，gzip 会替换原始文件为 .gz 格式。 使用tar命令进行压缩和解压：查看tar的帮助信息可以使用 tar --help。压缩文件可以使用 tar -cvf xxx.tar yyy.c ...，解压可以使用 tar -xf xxx.tar -C $解压放置的位置。 使用bzip压缩和解压缩工具：压缩时使用 bzip2 filename 生成 .bz2 文件，解压缩时使用 bzip2 -d filename.bz2 或 bunzip2 filename.bz2。 使用zip命令创建和解压ZIP文件：压缩时使用 zip archive.zip file1 file2 创建ZIP文件，解压时使用 unzip archive.zip 解压ZIP文件。 用户管理 查看用户信息，可以使用 cat /etc/passwd 命令。 添加用户可以使用 useradd 命令。例如，useradd xxxx 将创建一个名为 \u0026ldquo;xxxx\u0026rdquo; 的新用户。 创建用户组使用 groupadd 命令。例如，groupadd xxxxgroup 将创建一个名为 \u0026ldquo;xxxxgroup\u0026rdquo; 的新用户组。查看所有用户组信息可以使用 cat /etc/group。 要查看用户执行过的命令记录，可以使用 history 命令。 使用 passwd 命令更改密码。执行此命令后，系统会提示输入当前用户的旧密码以及新密码。 删除用户可以使用 userdel 命令。例如，userdel xxxuser 将删除名为 \u0026ldquo;xxxuser\u0026rdquo; 的用户。 管理用户账号，包括修改用户名，可以使用 usermod 命令。例如，usermod -l new_name old_name 将把 \u0026ldquo;old_name\u0026rdquo; 的用户名更改为 \u0026ldquo;new_name\u0026rdquo;。 查看用户信息，可以使用 id xxxname 命令，这将显示名为 \u0026ldquo;xxxname\u0026rdquo; 的用户的详细信息。 用户切换可以使用 su 命令。例如，su root 将切换到 root 用户，而 su xxxname 将切换到名为 \u0026ldquo;xxxname\u0026rdquo; 的用户。 使用 sudo 命令可以以管理员权限执行命令。在执行需要特权的命令前，输入 sudo 和该命令，然后输入管理员密码即可。 进程管理 监视进程： 使用 ps 命令查看当前进程。 查看 ps 手册：man ps。 常用选项： 显示所有进程：ps -e 显示不带终端的所有进程：ps -au 显示特定用户的进程：ps -u root 或 ps -u xxxname 显示详细信息：ps -l 跟踪进程： 使用 top 命令监控进程。 自动更新 4 次后退出：top -n 4 设置刷新时间为 5 秒：top -d 5 仅监控特定进程 ID（如 1810）：top -p 1810 htop 命令： htop 是 top 的升级版，提供更友好的用户界面和交互功能。 终止进程： 使用 kill 命令终止进程。例如，kill 1201 将关闭进程 ID 为 1201 的进程。 设置进程优先级： 查看进程 nice 值并按降序排列：ps axo pid,comm,nice --sort=-nice 查看特定进程的 nice 值：ps -p 1201 -o nice 修改进程的 nice 值：renice -n 10 -p 1201 查看进程属性： 使用 pgrep 命令查找进程。 常用命令： 查询特定进程名：pgrep xxxname 模糊查询进程名：pgrep -l ^xxxname 性能监控 显示和配置网络设备 查看网络设备信息： 使用 ifconfig 命令可以查看当前网络配置。 显示所有网络设备及其状态：ifconfig 帮助文档： 查看 ifconfig 的帮助信息：ifconfig --help 常用选项： 启用网络接口：ifconfig eth0 up （将 eth0 替换为实际接口名） 禁用网络接口：ifconfig eth0 down 设置 IP 地址：ifconfig eth0 192.168.1.100 设置子网掩码：ifconfig eth0 netmask 255.255.255.0 查看特定接口信息：ifconfig eth0 现代替代工具 在许多现代 Linux 发行版中，\nifconfig 已被\nip 命令替代，建议使用：\n查看网络设备信息：ip addr 启用接口：ip link set eth0 up 禁用接口：ip link set eth0 down 设置 IP 地址：ip addr add 192.168.1.100/24 dev eth0 CPU 统计数据 iostat 命令\n：\n基本使用：iostat 显示 CPU 和 I/O 统计信息。 输出磁盘利用率：iostat -d sda1 （显示指定磁盘的利用信息）。 输出 CPU 和磁盘利用率：iostat -t （包含时间戳）。 显示 CPU 和磁盘利用率的详细信息：iostat -m （以兆字节为单位显示）。 查看 CPU 使用情况：iostat -c （只显示 CPU 统计数据）。 I/O 监控 iotop 命令\n：\niotop 用于实时监控 I/O 使用情况。 需要 root 权限，可以使用 sudo iotop 来执行该命令。 CPU 统计信息 mpstat 命令\n：\n使用 mpstat 报告 CPU 统计信息。 显示 CPU 中断数：mpstat -I SUM。 虚拟内存统计 vmstat 命令\n：\n查看所有虚拟内存的统计信息：vmstat -a。 输出磁盘统计数据：vmstat -d。 报告虚拟内存统计的详细信息：vmstat -s。 shell 编程基础 shell入门编程实例 Linux C++引用 Linux C++智能指针 unique_ptr shared_ptr weak_ptr 为什么要使用 weak_ptr指针: 为了解决 shared ptr 循环引用问题。\nLinux客户端与服务器 Linux IO 多路复用 ","permalink":"//localhost:1313/posts/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/","summary":"\u003ch1 id=\"常用指令\"\u003e常用指令\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003evim    访问文本\u003c/li\u003e\n\u003cli\u003e退出文本并保存       :wq\u003c/li\u003e\n\u003cli\u003e返回到上一个文件夹    cd . .\u003c/li\u003e\n\u003cli\u003e解压指令         tar  -zxvf   xxxx.tar.gz\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"vi----vim-操作\"\u003evi    vim 操作\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003ei o a r  进入vim\u003c/li\u003e\n\u003cli\u003e按下esc , 输入**:**   然后输入wq  保存并退出            :q退出      :q!  不保存退出\u003c/li\u003e\n\u003cli\u003eyy 拷贝    5yy\u003c/li\u003e\n\u003cli\u003edd 删除   5dd\u003c/li\u003e\n\u003cli\u003e撤销  u\u003c/li\u003e\n\u003cli\u003e行号打开 :set nu\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"关机\"\u003e关机\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003eshutdown -h  关机\u003c/li\u003e\n\u003cli\u003eshutdown -r  重启\u003c/li\u003e\n\u003cli\u003ereboot  重启\u003c/li\u003e\n\u003cli\u003esync  把内存数据存入磁盘\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"注销用户和登录\"\u003e注销用户和登录\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003elogout\u003c/p\u003e","title":"Linux常用指令"},{"content":"信号与槽机制 PyQt的.ui文件转成.py文件 进入 .ui 文件所在的目录，然后在命令行中输入下面的代码示例。\npyuic5 -x xxxx.ui -o yyyyyy.py\nxxxx.ui 目标文件 \u0026mdash;\u0026gt; yyyyy.py 结果\n设置ui禁止编辑 例如\nui -\u0026gt; tableView -\u0026gt; setEditTriggers(QAbstractItemView::NoEditTriggers); ","permalink":"//localhost:1313/posts/qt_study/","summary":"\u003ch1 id=\"信号与槽机制\"\u003e信号与槽机制\u003c/h1\u003e\n\u003ch2 id=\"heading\"\u003e\u003c/h2\u003e\n\u003ch1 id=\"pyqt的ui文件转成py文件\"\u003ePyQt的\u003ccode\u003e.ui\u003c/code\u003e文件转成\u003ccode\u003e.py\u003c/code\u003e文件\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e进入 \u003ccode\u003e.ui\u003c/code\u003e 文件所在的目录，然后在命令行中输入下面的代码示例。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003epyuic5   -x    xxxx.ui   -o   yyyyyy.py\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003exxxx.ui  目标文件  \u0026mdash;\u0026gt;   yyyyy.py 结果\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"设置ui禁止编辑\"\u003e设置ui禁止编辑\u003c/h1\u003e\n\u003cp\u003e例如\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eui\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etableView\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nf\"\u003esetEditTriggers\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eQAbstractItemView\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eNoEditTriggers\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"Qt开发的学习记录"},{"content":"这是用于测试的文档 This is second post of site.\n$$ a^2 + b^2 = c^2 $$\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;unordered_map\u0026gt; // 使用哈希表 #include \u0026lt;unordered_set\u0026gt; #include \u0026lt;stack\u0026gt; // 使用栈 #include \u0026lt;string\u0026gt; // 使用字符串 #include \u0026lt;utility\u0026gt; #include \u0026lt;cstring\u0026gt; // 有memset将一块内存区域设置为特定的值。 strcpy：复制一个字符串。strcat：连接两个字符串。strlen：获取字符串的长度。strcmp：比较两个字符串。 #include \u0026lt;functional\u0026gt; #include \u0026lt;numeric\u0026gt; using namespace std; typedef long long ll; // 定义long long类型的简写为ll typedef long double ld; // 定义long double类型的简写为ld typedef pair\u0026lt;int, int\u0026gt; pii; // 定义pair\u0026lt;int, int\u0026gt;类型的简写为pii typedef pair\u0026lt;ll, ll\u0026gt; pll; // 定义pair\u0026lt;ll, ll\u0026gt;类型的简写为pll typedef vector\u0026lt;int\u0026gt; vi; // 定义vector\u0026lt;int\u0026gt;类型的简写为vi //--------------------------------模板--------------------------------// class Solution { public: }; int main() { std::vector\u0026lt;int\u0026gt; arr = {5, 3, 8, 1, 2}; std::sort(arr.begin(), arr.end(), std::greater\u0026lt;int\u0026gt;()); for (int num : arr) { std::cout \u0026lt;\u0026lt; num \u0026lt;\u0026lt; \u0026#34; \u0026#34;\u0026lt;\u0026lt;endl; } return 0; } // imgs 11111\n22222\n3333\n","permalink":"//localhost:1313/posts/second-post/","summary":"\u003ch1 id=\"这是用于测试的文档\"\u003e这是用于测试的文档\u003c/h1\u003e\n\u003cp\u003eThis is second post of site.\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003e$$\na^2 + b^2 = c^2\n$$\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;algorithm\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unordered_map\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 使用哈希表\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unordered_set\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stack\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e  \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 使用栈\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 使用字符串\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;utility\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstring\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 有memset将一块内存区域设置为特定的值。 strcpy：复制一个字符串。strcat：连接两个字符串。strlen：获取字符串的长度。strcmp：比较两个字符串。\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;functional\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;numeric\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e       \u003cspan class=\"c1\"\u003e// 定义long long类型的简写为ll\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eld\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// 定义long double类型的简写为ld\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epii\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 定义pair\u0026lt;int, int\u0026gt;类型的简写为pii\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epll\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 定义pair\u0026lt;ll, ll\u0026gt;类型的简写为pll\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003evi\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// 定义vector\u0026lt;int\u0026gt;类型的简写为vi\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//--------------------------------模板--------------------------------//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSolution\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003egreater\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nl\"\u003enum\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"imgs\"\u003eimgs\u003c/h1\u003e\n\u003cp\u003e11111\u003c/p\u003e","title":"Second Post"},{"content":"第一篇博客 感谢 B 站 UP 主 SonnyCalcr 的大力支持，让我得以学习并成功搭建这个个人博客网站。非常感谢他的支持与指导！\n这是这位up主的网站（支持up）：bilibili: SonnyCalcr\n","permalink":"//localhost:1313/posts/firstpost/","summary":"\u003ch1 id=\"第一篇博客\"\u003e第一篇博客\u003c/h1\u003e\n\u003cp\u003e感谢 B 站 UP 主 SonnyCalcr 的大力支持，让我得以学习并成功搭建这个个人博客网站。非常感谢他的支持与指导！\u003c/p\u003e\n\u003cp\u003e这是这位up主的网站（支持up）：\u003ca href=\"https://space.bilibili.com/3493138859559908\"\u003ebilibili: SonnyCalcr\u003c/a\u003e\u003c/p\u003e","title":"FirstPost"},{"content":"","permalink":"//localhost:1313/categories/","summary":"categories","title":"分类"},{"content":"Love and share !🗽\nNever say never !!!\n","permalink":"//localhost:1313/about/","summary":"about","title":"关于"},{"content":"Blog Free Discussion Area Welcome everyone to share your thoughts and opinions in the comments section of the blog!\nThis website is equipped with giscus, a comment system based on GitHub Discussions. Visitors can leave comments and feedback on the site using GitHub! 📋🖋️\nI will respond to all comments and feedback as soon as possible. 🥰\nIf needed, you can also contact me directly via email: authoritysharing@gmail.com 博客的自由交流区 欢迎大家在博客的评论区分享自己的想法和意见！\n本网站配置了 giscus，这是一个基于 GitHub Discussions 实现的评论系统。访客能够通过 GitHub 在网站上留下评论和反馈！ 📋🖋️\n所有的评论和意见，我会尽快回复所有评论和反馈。🥰\n如有需要，也可以直接通过邮件与我联系：authoritysharing@gmail.com ","permalink":"//localhost:1313/posts/%E7%95%99%E8%A8%80%E6%9D%BF/","summary":"\u003ch1 id=\"blog-free-discussion-area\"\u003eBlog Free Discussion Area\u003c/h1\u003e\n\u003cp\u003eWelcome everyone to share your thoughts and opinions in the comments section of the blog!\u003c/p\u003e\n\u003cp\u003eThis website is equipped with \u003ca href=\"https://giscus.app/zh-CN\"\u003egiscus\u003c/a\u003e, a comment system based on \u003ca href=\"https://docs.github.com/en/discussions\"\u003eGitHub Discussions\u003c/a\u003e. Visitors can leave comments and feedback on the site using GitHub! 📋🖋️\u003c/p\u003e\n\u003cp\u003eI will respond to all comments and feedback as soon as possible. 🥰\u003c/p\u003e\n\u003cp\u003eIf needed, you can also contact me directly via email: \u003ca href=\"mailto:authoritysharing@gmail.com\"\u003eauthoritysharing@gmail.com \u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"博客的自由交流区\"\u003e博客的自由交流区\u003c/h1\u003e\n\u003cp\u003e欢迎大家在博客的评论区分享自己的想法和意见！\u003c/p\u003e","title":"留言板📑Message Board ➡️ 在此留言"},{"content":"Draft cwgo server \u0026ndash;type RPC \u0026ndash;module github.com/cloudwego/biz-demo/gomall/demo/demo_thrift \u0026ndash;service demo_thrift \u0026ndash;idl ../../idl/echo.thrift\n不要心急, 每个人都有自己的时区\n社会 8 - 自然 8 - 生命 5 - 文化 3\n对话 - 图书馆 - 课程询问 - 生活 - 师生\n想法 存放仓库, 存放物品 , 订阅 , 存放100年 , 放入海底 托福计划 托福死莽 100分必须上分 cpp 进度学习 坚持 字节训练营学习 身材管理 健身 托福 100 101\n听力是重点\n加油加油加油 🗽🗽🗽🗽🗽🗽🗽🌎 一定要定点突破 一个一个 上午 阅读 1 篇(词汇题积累) 背作文 背单词 早上背书 听力1篇 下午 口语 (克服听力) 2 tasks 晚上 听力 + 阅读1篇 周末 写作文 , 写完背范文 6:30 起床 出门 阅读 20 \u0026mdash;\u0026gt; 28 加多 8 分 8分\n听力 20 \u0026mdash;\u0026gt; 28 加多 8 分 8分\n口语 15 \u0026mdash;\u0026gt; 23 上分 8 分 8分\n写作 18 \u0026mdash;\u0026gt; 23 上分 5 分 5分\n","permalink":"//localhost:1313/posts/000aaadraft/","summary":"\u003ch1 id=\"draft\"\u003eDraft\u003c/h1\u003e\n\u003chr\u003e\n\u003cp\u003ecwgo server \u0026ndash;type RPC \u0026ndash;module github.com/cloudwego/biz-demo/gomall/demo/demo_thrift  \u0026ndash;service demo_thrift  \u0026ndash;idl ../../idl/echo.thrift\u003c/p\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003e不要心急, 每个人都有自己的时区\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e社会 8 - 自然 8  - 生命 5 - 文化 3\u003c/p\u003e\n\u003cp\u003e对话 - 图书馆 - 课程询问 - 生活 - 师生\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"想法\"\u003e想法\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e存放仓库, 存放物品 , 订阅 , 存放100年 , 放入海底\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch1 id=\"托福计划\"\u003e托福计划\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e托福死莽  \u003cstrong\u003e100分\u003c/strong\u003e必须上分\u003c/li\u003e\n\u003cli\u003ecpp 进度学习 坚持\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e字节训练营学习\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e身材管理 健身\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"托福-100\"\u003e托福 100\u003c/h1\u003e\n\u003cp\u003e101\u003c/p\u003e","title":"草稿"},{"content":"问题 我的网站在复制代码时，会把行号也一起复制下来。我尝试了很多办法，但最终决定：\n既然解决不了问题，那就干脆消灭问题吧！😆\n解决办法 在hugo.yaml文件直接增加以下代码, 这段代码的作用是禁用代码块中的行号显示。\nmarkup: highlight: lineNumbers: false ","permalink":"//localhost:1313/posts/%E8%A7%A3%E5%86%B3hugo%E5%A4%8D%E5%88%B6%E8%A1%8C%E5%8F%B7%E9%97%AE%E9%A2%98%E7%9A%84%E5%8A%9E%E6%B3%95/","summary":"\u003ch1 id=\"问题\"\u003e问题\u003c/h1\u003e\n\u003cp\u003e我的网站在复制代码时，会把行号也一起复制下来。我尝试了很多办法，但最终决定：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e既然解决不了问题，那就干脆消灭问题吧！😆\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"解决办法\"\u003e解决办法\u003c/h1\u003e\n\u003cp\u003e在\u003ccode\u003ehugo.yaml\u003c/code\u003e文件直接增加以下代码, 这段代码的作用是禁用代码块中的行号显示。\u003c/p\u003e","title":"解决hugo复制行号问题的办法"},{"content":"Cpp各类模板设置 插入代码模板 \u0026#34;nameXXX\u0026#34;: { \u0026#34;prefix\u0026#34;: \u0026#34;XXX操作码\u0026#34;, \u0026#34;body\u0026#34;: [ \u0026#34;xxxxxx\u0026#34;, \u0026#34;xxxxxx\u0026#34;, \u0026#34;yyyyyy\u0026#34;, \u0026#34;yyyyyy\u0026#34;, \u0026#34;$0\u0026#34; ] }, 头文件 #pragma GCC optimize(\u0026#34;O2\u0026#34;) #include\u0026lt;bits/stdc++.h\u0026gt; #include \u0026lt;iostream\u0026gt; // cin/cout #include \u0026lt;cstdio\u0026gt; // printf/scanf #include \u0026lt;algorithm\u0026gt; #include \u0026lt;vector\u0026gt; // 容器 #include \u0026lt;string\u0026gt; // 字符串 #include \u0026lt;stack\u0026gt; // 栈 #include \u0026lt;queue\u0026gt; // 队列 #include \u0026lt;unordered_map\u0026gt; // 哈希表 #include \u0026lt;unordered_set\u0026gt; // 哈希表 set #include \u0026lt;memory\u0026gt; // 智能指针 #include \u0026lt;functional\u0026gt; #include \u0026lt;numeric\u0026gt; #include \u0026lt;ranges\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;bitset\u0026gt; #include \u0026lt;cmath\u0026gt; using namespace std; typedef long long ll; // long long为ll typedef long double ld; // long doubleld typedef pair\u0026lt;int, int\u0026gt; pii; // pair\u0026lt;int, int\u0026gt;pii typedef pair\u0026lt;ll, ll\u0026gt; pll; // pair\u0026lt;ll, ll\u0026gt;pll typedef vector\u0026lt;int\u0026gt; vi; // vector\u0026lt;int\u0026gt;vi const long long inf = numeric_limits\u0026lt;long long\u0026gt;::max(); // 无穷大 const int N = 100100; // 100 百 , 100100 十万 , 1100100 一百万 , 100100100 一亿 void Mysolve(){ } int main(){ ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); //---------优化 Mysolve(); return 0; } cpp.json 设置\n{ \u0026#34;HEADER\u0026#34;: { \u0026#34;prefix\u0026#34;: \u0026#34;H\u0026#34;, \u0026#34;body\u0026#34;: [ \u0026#34;#pragma GCC optimize(\\\u0026#34;O2\\\u0026#34;)\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;#include\u0026lt;bits/stdc++.h\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;iostream\u0026gt; // cin/cout\u0026#34;, \u0026#34;#include \u0026lt;cstdio\u0026gt; // printf/scanf\u0026#34;, \u0026#34;#include \u0026lt;algorithm\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;vector\u0026gt; // 容器\u0026#34;, \u0026#34;#include \u0026lt;string\u0026gt; // 字符串\u0026#34;, \u0026#34;#include \u0026lt;stack\u0026gt; // 栈\u0026#34;, \u0026#34;#include \u0026lt;queue\u0026gt; // 队列\u0026#34;, \u0026#34;#include \u0026lt;unordered_map\u0026gt; // 哈希表\u0026#34;, \u0026#34;#include \u0026lt;unordered_set\u0026gt; // 哈希表 set\u0026#34;, \u0026#34;#include \u0026lt;memory\u0026gt; // 智能指针\u0026#34;, \u0026#34;#include \u0026lt;functional\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;numeric\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;ranges\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;cstring\u0026gt; \u0026#34;, \u0026#34;#include \u0026lt;bitset\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;cmath\u0026gt;\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;using namespace std;\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;typedef long long ll; // long long为ll\u0026#34;, \u0026#34;typedef long double ld; // long doubleld\u0026#34;, \u0026#34;typedef pair\u0026lt;int, int\u0026gt; pii; // pair\u0026lt;int, int\u0026gt;pii\u0026#34;, \u0026#34;typedef pair\u0026lt;ll, ll\u0026gt; pll; // pair\u0026lt;ll, ll\u0026gt;pll\u0026#34;, \u0026#34;typedef vector\u0026lt;int\u0026gt; vi; // vector\u0026lt;int\u0026gt;vi\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;const long long inf = numeric_limits\u0026lt;long long\u0026gt;::max(); // 无穷大\u0026#34;, \u0026#34;const int N = 100100; // 100100 十万 , 1100100 一百万 , 100100100 一亿\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;void Mysolve(){\u0026#34;, \u0026#34; \u0026#34;, \u0026#34;}\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;int main(){\u0026#34;, \u0026#34; ios::sync_with_stdio(false);\u0026#34;, \u0026#34; cin.tie(NULL);\u0026#34;, \u0026#34; cout.tie(NULL);\u0026#34;, \u0026#34; //---------优化\u0026#34;, \u0026#34;\u0026#34;, \u0026#34; Mysolve();\u0026#34;, \u0026#34; return 0;\u0026#34;, \u0026#34;}\u0026#34;, \u0026#34;$0\u0026#34; ] }, } leetcode模板 \u0026#34;leetcode\u0026#34;: { \u0026#34;prefix\u0026#34;: \u0026#34;lc\u0026#34;, \u0026#34;body\u0026#34;: [ \u0026#34;#pragma GCC optimize(\\\u0026#34;O2\\\u0026#34;)\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;#include\u0026lt;bits/stdc++.h\u0026gt;\u0026#34;, \u0026#34;using namespace std;\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;const long long inf = numeric_limits\u0026lt;long long\u0026gt;::max();\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;$0\u0026#34; ] }, 算法模板\n高精度算法 ","permalink":"//localhost:1313/posts/cppvscode%E6%A8%A1%E6%9D%BF/","summary":"\u003ch1 id=\"cpp各类模板设置\"\u003eCpp各类模板设置\u003c/h1\u003e\n\u003ch2 id=\"插入代码模板\"\u003e插入代码模板\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e\u0026#34;nameXXX\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026#34;prefix\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;XXX操作码\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026#34;body\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;xxxxxx\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;xxxxxx\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;yyyyyy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;yyyyyy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;$0\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"头文件\"\u003e头文件\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#pragma GCC optimize(\u0026#34;O2\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u0026lt;bits/stdc++.h\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e      \u003c/span\u003e\u003cspan class=\"c1\"\u003e// cin/cout\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// printf/scanf\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;algorithm\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 容器\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 字符串\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stack\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e         \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 栈\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;queue\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e         \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 队列\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unordered_map\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 哈希表\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unordered_set\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 哈希表 set\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;memory\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 智能指针\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;functional\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;numeric\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;ranges\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstring\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;bitset\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cmath\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e       \u003cspan class=\"c1\"\u003e// long long为ll\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eld\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// long doubleld\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epii\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// pair\u0026lt;int, int\u0026gt;pii\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epll\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// pair\u0026lt;ll, ll\u0026gt;pll\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003evi\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// vector\u0026lt;int\u0026gt;vi\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003einf\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 无穷大\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e100100\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 100 百 , 100100 十万 , 1100100 一百万 , 100100100 一亿\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eMysolve\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eios\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esync_with_stdio\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ecin\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etie\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etie\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//---------优化\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eMysolve\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003ecpp.json 设置\u003c/p\u003e","title":"CppVsCode代码快捷模板"},{"content":"灵神题单 分享｜如何科学刷题？ - 力扣（LeetCode）\n前言 怎么刷算法题？按照什么顺序刷题？如何科学地刷题训练？\n如果你刚接触力扣，还不熟悉基本编程语法和常用库函数，推荐刷力扣官方的入门题单：\n「新」动计划 · 编程入门 编程基础 0 到 1 有了一些简单题的积累，就可以开始刷我的题单啦~\n分享｜如何科学刷题？ - 力扣（LeetCode） 打开链接 找灵神\n滑动窗口与双指针（定长/不定长/单序列/双序列/三指针） 二分算法（二分答案/最小化最大值/最大化最小值/第K小） 单调栈（基础/矩形面积/贡献法/最小字典序） 网格图（DFS/BFS/综合应用） 位运算（基础/性质/拆位/试填/恒等式/思维） 图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径） 动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望） 常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树） 数学算法（数论/组合/概率期望/博弈/计算几何/随机算法） 贪心与思维（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造） 链表、二叉树与一般树（前后指针/快慢指针/DFS/BFS/直径/LCA） 字符串（KMP/Z函数/Manacher/字符串哈希/AC自动机/后缀数组/子序列自动机） 对于动态规划，至少要做 100 100 道才算入门。\n优点：突击训练特定知识点，可以掌握常用算法套路。按照题单专题刷，一个套路可以解决多个题目，刷题效率高。此外，做同一个专题下的题目，相当于在从不同的角度去观察、思考同一个算法，这能让你更加深刻地理解算法的本质。\n缺点：提前知道题目类型，跳过了一些思考步骤。但比赛/笔试是不会告诉你这题是什么类型的，把 DP 想成贪心的大有人在。可以结合下面的训练方法，锻炼自己判断题目类型的能力。\n训练方法 A 要点：\n按照专题刷题。同一个专题下的题目，套路是一样的，刷题效率杠杠滴~ 从易到难，量力而行。题目已经按照难度分整理好了，按照顺序刷就行~ 推荐先刷【滑动窗口】和【二分】题单，这是两个最基础的算法，套路也较为固定，刷题过程中还可以学到一些做题技巧。其他题单可以按照自己的兴趣选择。\n请结合【基础算法精讲】学习。\n推荐安装 这个插件，可以在题单中自动标记做过的题目。\n训练方法 B 随机刷题，注意控制难度范围，太简单和太难的题目都不能让你进入「心流通道」。\n打开 难度练习。 在设置中关闭算法标签。 选择适合自己的难度范围，开刷！ 优点：做题时不知道题目类型，可以训练实战能力。\n缺点：知识点有些零散，适合已经掌握常用算法的同学查漏补缺，检验自己的学习成果。\n训练方法 C 如果时间很少，可以突击训练 HOT 100。\n最好能默写下来程度\nLeetCode 热题 100 - 学习计划 - 力扣（LeetCode）全球极客挚爱的技术成长平台\n作者：灵茶山艾府 链接：https://leetcode.cn/circle/discuss/RvFUtj/ 来源：力扣（LeetCode） 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n","permalink":"//localhost:1313/posts/leetcode%E5%88%B7%E9%A2%98%E9%A2%98%E5%8D%95/","summary":"\u003ch1 id=\"灵神题单\"\u003e灵神题单\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://leetcode.cn/circle/discuss/RvFUtj/\"\u003e分享｜如何科学刷题？ - 力扣（LeetCode）\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e前言\n怎么刷算法题？按照什么顺序刷题？如何科学地刷题训练？\u003c/p\u003e\n\u003cp\u003e如果你刚接触力扣，还不熟悉基本编程语法和常用库函数，推荐刷力扣官方的入门题单：\u003c/p\u003e","title":"Leetcode刷题题单"},{"content":"Xshell突出显示配置 将命名为 XshellColor.hls 的文件准备好。\n将该文件放置到以下目录： C:\\Users\\Your_name\\Documents\\NetSarang Computer\\7\\Xshell\\HighlightSet Files\n（请将 Your_name 替换为您的实际用户名）\n打开 Xshell 后，即可在颜色设置中选择该高亮配置文件。\n我这是黑暗版风格, 偏护眼\n[Keyword_0] TermBackColor=1 Underline=1 Bold=0 Strikeout=0 Keyword=[_a-z0-9-]+(.[_a-z0-9-]+)*@[a-z0-9-]+(.[a-z0-9-]+)* Description=Email address BackColorIndex=286 UseRegex=1 Italic=0 Enable=0 TextColorIndex=286 CaseSens=0 [Keyword_1] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(?=(\\b|\\D))(((\\d{1,2})|(1\\d{1,2})|(2[0-4]\\d)|(25[0-5]))\\.){3}((\\d{1,2})|(1\\d{1,2})|(2[0-4]\\d)|(25[0-5]))(?=(\\b|\\D))\\s* Description=IPv4 BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=295 CaseSens=0 [Keyword_2] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=[\\[ ]?\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*\\]? Description=IPv6 BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=294 CaseSens=0 [Keyword_3] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(\\berror\\b)|(\\bfail(ed)?\\b)|(\\bfalse\\b)|(\\bdown\\b)|(\\blocked\\b) Description=error, fail, false, down BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=290 CaseSens=0 [Keyword_4] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(\\bactive(d)?\\b)|(\\bsuccess(ful(ly)?)?\\b)|(\\btrue\\b)|(\\bok\\b)|(\\bup\\b)|(\\brunning\\b)|(\\bdeployed\\b)|(\\bunlocked\\b) Description=active, success, true, ok, up BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=291 CaseSens=0 [Keyword_5] TermBackColor=1 Underline=1 Bold=1 Strikeout=0 Keyword=(\\bstart(ed|ing)?\\b)|(\\bbegin(ning)?\\b)|(\\benable(d)?\\b)|(\\bcreate(d)?\\b)|(\\bopen\\b) Description=start, begin, enable, create, open BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=291 CaseSens=0 [Keyword_6] TermBackColor=1 Underline=1 Bold=1 Strikeout=0 Keyword=(\\bstop(ped)?\\b)|(\\bend\\b)|(\\bfinish(ed)?\\b)|(\\bdisable(d)?\\b)|(\\bdelete(d)?\\b)|(\\bclose(d)?\\b) Description=stop, end, finish, disable, delete BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=293 CaseSens=0 [Keyword_7] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(\\bwarn(ing)?\\b)|(\\binactive\\b)|(\\bunknown\\b) Description=warn, inactive, unknown BackColorIndex=292 UseRegex=1 Italic=1 Enable=1 TextColorIndex=282 CaseSens=0 [Colors] Colors=000000,00E4FF,000040,0080FF,400000,C08080,8080FF,C0C0C0,555555,5555FF,55FF55,55FFFF,FF5555,FF55FF,FFFF55,FFFFFF [Keyword_8] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(\\binfo\\b) Description=info BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=291 CaseSens=0 [Keyword_9] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=\\bDEBUG\\b Description=debug BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=293 CaseSens=0 [info] Version=1.1 Count=12 [Keyword_10] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=\\/\\b(\\d|([1-9]\\d)|(1[01]\\d)|(12[0-8]))\\b Description=CIDR BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=284 CaseSens=0 [Keyword_11] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=([a-zA-Z0-9._-]+@([a-zA-Z0-9_-]+\\.)+[a-zA-Z0-9_-]+) Description=Email Regex BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=286 CaseSens=0 ","permalink":"//localhost:1313/posts/xshell%E4%B8%BB%E9%A2%98%E9%85%8D%E8%89%B2%E6%96%87%E4%BB%B6/","summary":"\u003ch1 id=\"xshell突出显示配置\"\u003e\u003ccode\u003eXshell\u003c/code\u003e突出显示配置\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e将命名为 \u003cstrong\u003e\u003ccode\u003eXshellColor.hls\u003c/code\u003e\u003c/strong\u003e 的文件准备好。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e将该文件放置到以下目录：\n\u003cstrong\u003e\u003ccode\u003eC:\\Users\\Your_name\\Documents\\NetSarang Computer\\7\\Xshell\\HighlightSet Files\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e（请将 \u003ccode\u003eYour_name\u003c/code\u003e 替换为您的实际用户名）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e打开 Xshell 后，即可在颜色设置中选择该高亮配置文件。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e我这是黑暗版风格, 偏护眼\u003c/p\u003e","title":"Xshell主题配色文件"},{"content":"加上具体的例子 Add specific examples 帮我理顺并润色以上内容 help me organize and refine the content above. 科学写作专家 - 学术写作 want you to act as an expert in scientific writing, l will provide you with some paragraphs in English and your task is to improve the spelling, grammar clarity, conciseness and overalreadability of the text providedwhile breaking down longsentences, reducing repetitionand providing improvementsuggestions. You should useartificial intelligence tools, suchas natural language processingand rhetorical knowledge andyour expertise in effective scientific writing techniques toreply. Provide the output as a markdown table with the head in Chinese. The first column is the originasentence, and the secondcolumn is the sentence afterediting and the third columnprovides explanation in Chinese Please edit the following text in a scientific tone: ","permalink":"//localhost:1313/posts/ai%E6%8F%90%E7%A4%BA%E8%AF%8D%E6%B1%87%E6%80%BB/","summary":"\u003ch1 id=\"加上具体的例子\"\u003e加上具体的例子\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eAdd\u003c/span\u003e \u003cspan class=\"nx\"\u003especific\u003c/span\u003e \u003cspan class=\"nx\"\u003eexamples\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"帮我理顺并润色以上内容\"\u003e帮我理顺并润色以上内容\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ehelp\u003c/span\u003e \u003cspan class=\"n\"\u003eme\u003c/span\u003e \u003cspan class=\"n\"\u003eorganize\u003c/span\u003e \u003cspan class=\"n\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003erefine\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003econtent\u003c/span\u003e \u003cspan class=\"n\"\u003eabove\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"科学写作专家---学术写作\"\u003e科学写作专家 - 学术写作\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ewant\u003c/span\u003e \u003cspan class=\"n\"\u003eyou\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e \u003cspan class=\"n\"\u003eact\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003ean\u003c/span\u003e \u003cspan class=\"n\"\u003eexpert\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003escientific\u003c/span\u003e \u003cspan class=\"n\"\u003ewriting\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"n\"\u003ewill\u003c/span\u003e \u003cspan class=\"n\"\u003eprovide\u003c/span\u003e \u003cspan class=\"n\"\u003eyou\u003c/span\u003e \u003cspan class=\"k\"\u003ewith\u003c/span\u003e \u003cspan class=\"n\"\u003esome\u003c/span\u003e \u003cspan class=\"n\"\u003eparagraphs\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eEnglish\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003eyour\u003c/span\u003e \u003cspan class=\"n\"\u003etask\u003c/span\u003e \u003cspan class=\"ow\"\u003eis\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e \u003cspan class=\"n\"\u003eimprove\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003espelling\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003egrammar\u003c/span\u003e \u003cspan class=\"n\"\u003eclarity\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003econciseness\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003eoveralreadability\u003c/span\u003e \u003cspan class=\"n\"\u003eof\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"n\"\u003eprovidedwhile\u003c/span\u003e \u003cspan class=\"n\"\u003ebreaking\u003c/span\u003e \u003cspan class=\"n\"\u003edown\u003c/span\u003e \u003cspan class=\"n\"\u003elongsentences\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ereducing\u003c/span\u003e \u003cspan class=\"n\"\u003erepetitionand\u003c/span\u003e \u003cspan class=\"n\"\u003eproviding\u003c/span\u003e \u003cspan class=\"n\"\u003eimprovementsuggestions\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"n\"\u003eYou\u003c/span\u003e \u003cspan class=\"n\"\u003eshould\u003c/span\u003e \u003cspan class=\"n\"\u003euseartificial\u003c/span\u003e \u003cspan class=\"n\"\u003eintelligence\u003c/span\u003e \u003cspan class=\"n\"\u003etools\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esuchas\u003c/span\u003e \u003cspan class=\"n\"\u003enatural\u003c/span\u003e \u003cspan class=\"n\"\u003elanguage\u003c/span\u003e \u003cspan class=\"n\"\u003eprocessingand\u003c/span\u003e \u003cspan class=\"n\"\u003erhetorical\u003c/span\u003e \u003cspan class=\"n\"\u003eknowledge\u003c/span\u003e \u003cspan class=\"n\"\u003eandyour\u003c/span\u003e \u003cspan class=\"n\"\u003eexpertise\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eeffective\u003c/span\u003e \u003cspan class=\"n\"\u003escientific\u003c/span\u003e \u003cspan class=\"n\"\u003ewriting\u003c/span\u003e \u003cspan class=\"n\"\u003etechniques\u003c/span\u003e \u003cspan class=\"n\"\u003etoreply\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"n\"\u003eProvide\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003eoutput\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003emarkdown\u003c/span\u003e \u003cspan class=\"n\"\u003etable\u003c/span\u003e \u003cspan class=\"k\"\u003ewith\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003ehead\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eChinese\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"n\"\u003eThe\u003c/span\u003e \u003cspan class=\"n\"\u003efirst\u003c/span\u003e \u003cspan class=\"n\"\u003ecolumn\u003c/span\u003e \u003cspan class=\"ow\"\u003eis\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003eoriginasentence\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003esecondcolumn\u003c/span\u003e \u003cspan class=\"ow\"\u003eis\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003esentence\u003c/span\u003e \u003cspan class=\"n\"\u003eafterediting\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003ethird\u003c/span\u003e \u003cspan class=\"n\"\u003ecolumnprovides\u003c/span\u003e \u003cspan class=\"n\"\u003eexplanation\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eChinese\u003c/span\u003e \u003cspan class=\"n\"\u003ePlease\u003c/span\u003e \u003cspan class=\"n\"\u003eedit\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003efollowing\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003escientific\u003c/span\u003e \u003cspan class=\"n\"\u003etone\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"heading\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-1\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-2\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-3\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-4\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-5\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-6\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-7\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-8\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-9\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-10\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-11\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-12\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-13\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-14\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-15\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-16\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-17\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-18\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-19\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-20\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-21\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-22\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-23\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-24\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-25\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-26\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-27\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-28\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-29\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-30\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-31\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-32\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-33\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-34\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-35\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-36\"\u003e\u003c/h1\u003e","title":"AI提示词汇总"},{"content":"什么是加密 ","permalink":"//localhost:1313/posts/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E5%92%8C%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%9A%84%E6%80%9D%E8%80%83/","summary":"\u003ch1 id=\"什么是加密\"\u003e什么是加密\u003c/h1\u003e","title":"对称加密和非对称加密的思考"},{"content":" 我的 vscode 的设置.json文件\n2024.11.12 设置 { \u0026#34;editor.fontSize\u0026#34;: 16, \u0026#34;cph.general.autoShowJudge\u0026#34;: false, \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;editor.formatOnType\u0026#34;: true, \u0026#34;files.autoSave\u0026#34;: \u0026#34;afterDelay\u0026#34;, \u0026#34;git.confirmSync\u0026#34;: false, \u0026#34;chat.editor.fontSize\u0026#34;: 18, \u0026#34;window.zoomLevel\u0026#34;: 1, \u0026#34;editor.mouseWheelZoom\u0026#34;: true, \u0026#34;editor.wordWrap\u0026#34;: \u0026#34;on\u0026#34;, \u0026#34;debug.onTaskErrors\u0026#34;: \u0026#34;debugAnyway\u0026#34;, \u0026#34;explorer.confirmDelete\u0026#34;: false, \u0026#34;extensions.experimental.affinity\u0026#34;: { \u0026#34;asvetliakov.vscode-neovim\u0026#34;: 1 }, \u0026#34;workbench.settings.applyToAllProfiles\u0026#34;: [ \u0026#34;editor.fontSize\u0026#34; ], \u0026#34;go.delveConfig\u0026#34;: {}, \u0026#34;[javascript]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;esbenp.prettier-vscode\u0026#34; }, \u0026#34;[markdown]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;esbenp.prettier-vscode\u0026#34; }, \u0026#34;[prisma]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;Prisma.prisma\u0026#34; }, \u0026#34;[typescript]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;esbenp.prettier-vscode\u0026#34; }, \u0026#34;[typescriptreact]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;esbenp.prettier-vscode\u0026#34; }, \u0026#34;editor.codeActionsOnSave\u0026#34;: { \u0026#34;source.addMissingImports\u0026#34;: \u0026#34;explicit\u0026#34;, \u0026#34;source.organizeImports\u0026#34;: \u0026#34;explicit\u0026#34; }, \u0026#34;editor.cursorSmoothCaretAnimation\u0026#34;: \u0026#34;on\u0026#34;, \u0026#34;editor.cursorSurroundingLines\u0026#34;: 5, \u0026#34;editor.fontFamily\u0026#34;: \u0026#34;CaskaydiaCove Nerd Font\u0026#34;, \u0026#34;editor.fontLigatures\u0026#34;: true, \u0026#34;python.analysis.completeFunctionParens\u0026#34;: true, \u0026#34;editor.fontSize\u0026#34;: 18, \u0026#34;editor.fontWeight\u0026#34;: \u0026#34;300\u0026#34;, \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;editor.inlineSuggest.enabled\u0026#34;: true, \u0026#34;editor.lineNumbers\u0026#34;: \u0026#34;relative\u0026#34;, \u0026#34;editor.linkedEditing\u0026#34;: true, \u0026#34;editor.smoothScrolling\u0026#34;: true, \u0026#34;editor.stickyScroll.enabled\u0026#34;: true, \u0026#34;editor.suggest.insertMode\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;editor.suggestFontSize\u0026#34;: 14, \u0026#34;editor.wordWrap\u0026#34;: \u0026#34;on\u0026#34;, \u0026#34;errorLens.fontStyleItalic\u0026#34;: true, \u0026#34;everforest.italicKeywords\u0026#34;: true, \u0026#34;explorer.confirmDelete\u0026#34;: false, \u0026#34;explorer.confirmDragAndDrop\u0026#34;: false, \u0026#34;extensions.autoUpdate\u0026#34;: \u0026#34;onlyEnabledExtensions\u0026#34;, \u0026#34;extensions.ignoreRecommendations\u0026#34;: false, \u0026#34;files.exclude\u0026#34;: { \u0026#34;**/node_modules\u0026#34;: true }, \u0026#34;prettier.semi\u0026#34;: false, \u0026#34;prettier.singleAttributePerLine\u0026#34;: true, \u0026#34;prettier.singleQuote\u0026#34;: true, \u0026#34;prettier.trailingComma\u0026#34;: \u0026#34;all\u0026#34;, \u0026#34;projectManager.git.baseFolders\u0026#34;: [ \u0026#34;$home/workspace\u0026#34; ], \u0026#34;projectManager.sortList\u0026#34;: \u0026#34;Recent\u0026#34;, \u0026#34;sortJSON.orderOverride\u0026#34;: [ \u0026#34;name\u0026#34;, \u0026#34;version\u0026#34;, \u0026#34;main\u0026#34;, \u0026#34;module\u0026#34;, \u0026#34;types\u0026#34;, \u0026#34;typings\u0026#34;, \u0026#34;files\u0026#34;, \u0026#34;publishConfig\u0026#34;, \u0026#34;repository\u0026#34;, \u0026#34;scripts\u0026#34;, \u0026#34;prefix\u0026#34;, \u0026#34;description\u0026#34;, \u0026#34;body\u0026#34; ], \u0026#34;sortJSON.orderUnderride\u0026#34;: [ \u0026#34;resolutions\u0026#34;, \u0026#34;dependencies\u0026#34;, \u0026#34;devDependencies\u0026#34;, \u0026#34;peerDependencies\u0026#34;, \u0026#34;cSpell.userWords\u0026#34; ], \u0026#34;typescript.preferences.importModuleSpecifier\u0026#34;: \u0026#34;relative\u0026#34;, \u0026#34;typescript.updateImportsOnFileMove.enabled\u0026#34;: \u0026#34;always\u0026#34;, \u0026#34;update.showReleaseNotes\u0026#34;: false, \u0026#34;vim.foldfix\u0026#34;: true, \u0026#34;vim.highlightedyank.color\u0026#34;: \u0026#34;rgba(230, 97, 89, 0.7)\u0026#34;, \u0026#34;vim.highlightedyank.enable\u0026#34;: true, \u0026#34;vim.highlightedyank.textColor\u0026#34;: \u0026#34;white\u0026#34;, \u0026#34;vim.hlsearch\u0026#34;: true, \u0026#34;vim.leader\u0026#34;: \u0026#34;\u0026lt;space\u0026gt;\u0026#34;, \u0026#34;vim.normalModeKeyBindingsNonRecursive\u0026#34;: [ { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;r\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.rename\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;w\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;:w!\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;q\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;:q!\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;x\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;:x!\u0026#34; ] }, { \u0026#34;after\u0026#34;: [ \u0026#34;g\u0026#34;, \u0026#34;g\u0026#34;, \u0026#34;V\u0026#34;, \u0026#34;G\u0026#34; ], \u0026#34;before\u0026#34;: [ \u0026#34;\u0026lt;c-a\u0026gt;\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;\u0026lt;leader\u0026gt;\u0026#34;, \u0026#34;k\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.showHover\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;[\u0026#34;, \u0026#34;d\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.marker.prev\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;]\u0026#34;, \u0026#34;d\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.marker.next\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;\u0026lt;leader\u0026gt;\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;a\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.quickFix\u0026#34; ] }, { \u0026#34;after\u0026#34;: [ \u0026#34;^\u0026#34; ], \u0026#34;before\u0026#34;: [ \u0026#34;H\u0026#34; ] }, { \u0026#34;after\u0026#34;: [ \u0026#34;$\u0026#34; ], \u0026#34;before\u0026#34;: [ \u0026#34;L\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;i\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;extension.toggleBool\u0026#34; ] } ], \u0026#34;vim.useSystemClipboard\u0026#34;: true, \u0026#34;window.zoomLevel\u0026#34;: 1, \u0026#34;workbench.iconTheme\u0026#34;: \u0026#34;Monokai Pro Icons\u0026#34;, \u0026#34;workbench.settings.editor\u0026#34;: \u0026#34;json\u0026#34;, \u0026#34;workbench.startupEditor\u0026#34;: \u0026#34;readme\u0026#34;, \u0026#34;zenMode.hideLineNumbers\u0026#34;: false, \u0026#34;vsicons.dontShowNewVersionMessage\u0026#34;: true, \u0026#34;[jsonc]\u0026#34;: { \u0026#34;editor.quickSuggestions\u0026#34;: { \u0026#34;strings\u0026#34;: true }, \u0026#34;editor.suggest.insertMode\u0026#34;: \u0026#34;replace\u0026#34; }, \u0026#34;terminal.integrated.defaultProfile.windows\u0026#34;: \u0026#34;Command Prompt\u0026#34;, \u0026#34;terminal.explorerKind\u0026#34;: \u0026#34;external\u0026#34;, \u0026#34;security.workspace.trust.enabled\u0026#34;: false, \u0026#34;typescript.disableAutomaticTypeAcquisition\u0026#34;: true, \u0026#34;git.enableSmartCommit\u0026#34;: true, \u0026#34;git.openRepositoryInParentFolders\u0026#34;: \u0026#34;always\u0026#34;, \u0026#34;files.autoGuessEncoding\u0026#34;: true, \u0026#34;code-runner.languageIdToFileExtensionMap\u0026#34;: { \u0026#34;bat\u0026#34;: \u0026#34;.bat\u0026#34;, \u0026#34;powershell\u0026#34;: \u0026#34;.ps1\u0026#34;, \u0026#34;typescript\u0026#34;: \u0026#34;.ts\u0026#34; }, \u0026#34;vim.easymotion\u0026#34;: true, // \u0026#34;editor.formatOnType\u0026#34;: true, // \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;go.formatTool\u0026#34;: \u0026#34;gofmt\u0026#34;, \u0026#34;[go]\u0026#34;: { \u0026#34;editor.insertSpaces\u0026#34;: true, \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;editor.codeActionsOnSave\u0026#34;: { \u0026#34;source.organizeImports\u0026#34;: \u0026#34;explicit\u0026#34; }, \u0026#34;editor.suggest.snippetsPreventQuickSuggestions\u0026#34;: false }, \u0026#34;animations.Install-Method\u0026#34;: \u0026#34;Custom CSS and JS\u0026#34;, \u0026#34;apc.imports\u0026#34;: [ \u0026#34;file:///c:/Users/zhang/.vscode/extensions/brandonkirbyson.vscode-animations-2.0.3/dist/updateHandler.js\u0026#34; ], \u0026#34;animations.CursorAnimation\u0026#34;: true, \u0026#34;animations.CursorAnimationOptions\u0026#34;: { \u0026#34;Color\u0026#34;: \u0026#34;#ffb6c1\u0026#34;, \u0026#34;TrailLength\u0026#34;: 8 }, \u0026#34;animations.Smooth-Mode\u0026#34;: false, \u0026#34;marscode.codeCompletionPro\u0026#34;: { \u0026#34;enableCodeCompletionPro\u0026#34;: true }, \u0026#34;marscode.enableCodelens\u0026#34;: { \u0026#34;enableInlineUnitTest\u0026#34;: false, \u0026#34;enableInlineDocumentation\u0026#34;: false }, \u0026#34;vscode_custom_css.imports\u0026#34;: [ \u0026#34;file:///c:/Users/zhang/.vscode/extensions/brandonkirbyson.vscode-animations-2.0.4/dist/updateHandler.js\u0026#34; ] } ","permalink":"//localhost:1313/posts/vscodesetting%E9%85%8D%E7%BD%AE/","summary":"\u003cblockquote\u003e\n\u003cp\u003e我的 \u003ccode\u003evscode\u003c/code\u003e 的设置\u003ccode\u003e.json\u003c/code\u003e文件\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"20241112-设置\"\u003e2024.11.12 设置\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontSize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;cph.general.autoShowJudge\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.formatOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.formatOnType\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;files.autoSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;afterDelay\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;git.confirmSync\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;chat.editor.fontSize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;window.zoomLevel\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.mouseWheelZoom\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.wordWrap\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;on\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;debug.onTaskErrors\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;debugAnyway\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;explorer.confirmDelete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;extensions.experimental.affinity\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;asvetliakov.vscode-neovim\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;workbench.settings.applyToAllProfiles\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;editor.fontSize\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;go.delveConfig\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[javascript]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;esbenp.prettier-vscode\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[markdown]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;esbenp.prettier-vscode\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[prisma]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Prisma.prisma\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[typescript]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;esbenp.prettier-vscode\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[typescriptreact]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;esbenp.prettier-vscode\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.codeActionsOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;source.addMissingImports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;explicit\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;source.organizeImports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;explicit\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.cursorSmoothCaretAnimation\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;on\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.cursorSurroundingLines\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontFamily\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;CaskaydiaCove Nerd Font\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontLigatures\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;python.analysis.completeFunctionParens\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontSize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontWeight\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;300\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.formatOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.inlineSuggest.enabled\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.lineNumbers\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;relative\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.linkedEditing\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.smoothScrolling\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.stickyScroll.enabled\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.suggest.insertMode\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;replace\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.suggestFontSize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e14\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.wordWrap\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;on\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;errorLens.fontStyleItalic\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;everforest.italicKeywords\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;explorer.confirmDelete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;explorer.confirmDragAndDrop\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;extensions.autoUpdate\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;onlyEnabledExtensions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;extensions.ignoreRecommendations\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;files.exclude\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;**/node_modules\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;prettier.semi\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;prettier.singleAttributePerLine\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;prettier.singleQuote\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;prettier.trailingComma\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;all\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;projectManager.git.baseFolders\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;$home/workspace\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;projectManager.sortList\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Recent\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;sortJSON.orderOverride\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;main\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;module\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;types\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;typings\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;files\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;publishConfig\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;repository\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;scripts\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;prefix\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;body\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;sortJSON.orderUnderride\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;resolutions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;dependencies\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;devDependencies\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;peerDependencies\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;cSpell.userWords\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;typescript.preferences.importModuleSpecifier\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;relative\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;typescript.updateImportsOnFileMove.enabled\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;always\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;update.showReleaseNotes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.foldfix\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.highlightedyank.color\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;rgba(230, 97, 89, 0.7)\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.highlightedyank.enable\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.highlightedyank.textColor\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;white\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.hlsearch\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;space\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.normalModeKeyBindingsNonRecursive\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;r\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.rename\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;w\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;:w!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;q\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;:q!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;x\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;:x!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;after\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;g\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;g\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;V\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;G\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;c-a\u0026gt;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;leader\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;k\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.showHover\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;[\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;d\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.marker.prev\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;d\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.marker.next\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;leader\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;c\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.quickFix\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;after\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;^\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;H\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;after\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;$\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;L\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;i\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;extension.toggleBool\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.useSystemClipboard\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;window.zoomLevel\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;workbench.iconTheme\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Monokai Pro Icons\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;workbench.settings.editor\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;json\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;workbench.startupEditor\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;readme\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;zenMode.hideLineNumbers\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vsicons.dontShowNewVersionMessage\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[jsonc]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.quickSuggestions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;strings\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.suggest.insertMode\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;replace\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;terminal.integrated.defaultProfile.windows\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Command Prompt\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;terminal.explorerKind\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;external\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;security.workspace.trust.enabled\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;typescript.disableAutomaticTypeAcquisition\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;git.enableSmartCommit\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;git.openRepositoryInParentFolders\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;always\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;files.autoGuessEncoding\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;code-runner.languageIdToFileExtensionMap\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;bat\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.bat\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;powershell\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.ps1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;typescript\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.ts\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.easymotion\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"c1\"\u003e// \u0026#34;editor.formatOnType\u0026#34;: true,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// \u0026#34;editor.formatOnSave\u0026#34;: true,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;go.formatTool\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;gofmt\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[go]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.insertSpaces\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.formatOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.codeActionsOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;source.organizeImports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;explicit\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.suggest.snippetsPreventQuickSuggestions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;animations.Install-Method\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Custom CSS and JS\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;apc.imports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;file:///c:/Users/zhang/.vscode/extensions/brandonkirbyson.vscode-animations-2.0.3/dist/updateHandler.js\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;animations.CursorAnimation\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;animations.CursorAnimationOptions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;Color\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;#ffb6c1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;TrailLength\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;animations.Smooth-Mode\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;marscode.codeCompletionPro\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;enableCodeCompletionPro\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;marscode.enableCodelens\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;enableInlineUnitTest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;enableInlineDocumentation\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vscode_custom_css.imports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;file:///c:/Users/zhang/.vscode/extensions/brandonkirbyson.vscode-animations-2.0.4/dist/updateHandler.js\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"VsCodeSetting配置"},{"content":"通过hugo创建md文件 打开power shell , 输入 cd E:\\HugoSite\\Hugo\\CooperZhang (目标文件夹) 进入目标位置后 , 输入 hugo new content content\\posts\\要创建的md文件名称.md 回车 , 完成创建 ","permalink":"//localhost:1313/posts/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87hugo%E5%88%9B%E5%BB%BAmarkdown%E6%96%87%E4%BB%B6/","summary":"\u003ch1 id=\"通过hugo创建md文件\"\u003e通过hugo创建md文件\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e打开power shell , 输入 \u003ccode\u003e cd E:\\HugoSite\\Hugo\\CooperZhang\u003c/code\u003e (目标文件夹)\u003c/li\u003e\n\u003cli\u003e进入目标位置后 , 输入\u003ccode\u003e hugo new content content\\posts\\要创建的md文件名称.md\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e回车 , 完成创建\u003c/li\u003e\n\u003c/ol\u003e","title":"如何通过hugo创建markdown文件"},{"content":"goMall电商项目 搭建环境 选择 goland 脚手架 IDL\ncwgo : 自动生成客服端和服务端的代码 thriftgo : protobuf : 服务注册 与 服务发现 分布式部署\n计算机科学的问题都可以通过增加一层来解决 注册中心 配置管理 数据操作 前端 ","permalink":"//localhost:1313/posts/gomall%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE/","summary":"\u003ch1 id=\"gomall电商项目\"\u003egoMall电商项目\u003c/h1\u003e\n\u003ch2 id=\"搭建环境\"\u003e搭建环境\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e选择 goland\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"脚手架\"\u003e脚手架\u003c/h2\u003e\n\u003cp\u003eIDL\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003ecwgo\u003c/strong\u003e : 自动生成客服端和服务端的代码\u003c/li\u003e\n\u003cli\u003ethriftgo :\u003c/li\u003e\n\u003cli\u003eprotobuf :\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"服务注册-与-服务发现\"\u003e服务注册 与 服务发现\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e分布式部署\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003col\u003e\n\u003cli\u003e计算机科学的问题都可以通过增加一层来解决\u003c/li\u003e\n\u003cli\u003e注册中心\u003c/li\u003e\n\u003cli\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"配置管理\"\u003e配置管理\u003c/h2\u003e\n\u003ch2 id=\"数据操作\"\u003e数据操作\u003c/h2\u003e\n\u003ch2 id=\"前端\"\u003e前端\u003c/h2\u003e","title":"GoMall电商项目"},{"content":" 正常: 买入 加粗: 卖出 名称 时间 成交额 💵 发仔 2024.1016 1535 发仔 2024.1104 1651 +116 ","permalink":"//localhost:1313/posts/economyz/","summary":"\u003cul\u003e\n\u003cli\u003e正常: 买入\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e加粗: 卖出\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: center\"\u003e名称\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e时间\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e成交额\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e💵\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e发仔\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e2024.1016\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e1535\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003cstrong\u003e发仔\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003cstrong\u003e2024.1104\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003cstrong\u003e1651\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003cstrong\u003e+116\u003c/strong\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"EconomyZ"},{"content":"字节训练营 结营要求 刷题打卡 \u0026gt; 50\n每天3题\n博客要写至少6篇\n课程 第一门课程 Go 语言上手-基础语言，也就是说现在你们听的这门课程。 主要讲述语言基础语法、入门实战 第二门课程 Go 语言上手-工程实践 主要讲述 并发编程、依赖管理、单元测试、项目实战 第三门课程 高质量编程与性能调优实战。主要讲述 编码规范、性能优化建议、性能分析工具使用、性能优化流程 第四门课程 高性能 Go 语言发行版优化与落地实践。主要讲述 自动内存管理、Go 内存管理及优化、编译器和静态分析、Go 编译器优化 并发编程 协程 通道 sync 测试 HTTP协议 超文本传输协议包含\n请求行 请求头 请求体 传输的包大部分是4k以下\n“Benchmark” “Benchmark” 是一个评估性能或效率的标准或测试。\n在计算机科学和程序开发中，它通常指以下几个方面：\n性能测试： 用于衡量程序、算法或系统在特定条件下的运行效率。常见的基准测试包括处理速度、内存使用、响应时间等。 基准工具： 一些工具和框架专门用于执行基准测试，帮助开发者比较不同实现或版本的性能表现。例如，Go 语言内置的 testing 包支持基准测试，通过 Benchmark 函数来评估代码执行的速度。 行业标准： 行业内的基准参考，用于对比不同产品或服务的性能。例如，计算机硬件的性能基准，可以帮助用户选择合适的设备。 基准测试示例（Go 语言） 在 Go 语言中，你可以使用以下方式进行基准测试：\npackage main import ( \u0026#34;testing\u0026#34; ) // 被测试的函数 func add(a, b int) int { return a + b } // 基准测试 func BenchmarkAdd(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { add(1, 2) } } 刷题笔记 打开抖音互联网发生什么 熟悉TCP/IP , 计算机网络\n协议 打开抖音发生了什么过程 连入互联网 路由 , 交换机 , 网络虚拟化 跨网段 路由不是对称的: 多路 图 路由协议 工作在ip层 但也没这么简单 路由不改IP地址 , 路由是改Mac 找到发包口 ARP协议 广播 , 免费ARP协议 ARP代理 IPV6 , ip冲突情况 解决方案 IP协议 , mac 地址不能代替ip地址 , 向下兼容 协议 ipv4 不够用 , 解决 , NAT , 网路打通后 , 视频下载\n网络传输 , 数据包 DNS请求 UDP协议 , 分片 , 丢包 , 传输效率 和质量 TCP 协议 3次握手 , timewait , HTTP / HTTP 1.1 HTTPS 加密 SSL/TLS 握手 , 对称和非对称加密 网络架构给抖音提质 网络提速\n网络提速 HTTP2.0 , 多路复用 , stream , TCP丢包怎么办 , 对头阻塞 如何解决 , QUIC / HTTP3.0 , UDP 还是TCP , kernel 还是usersapce , 0 RRT , 弱网优势 路径优化\n数据中心分布 同运营商访问 , 通过解析 分析IP 静态资源 路径优化 CDN , 静态缓存 , 边缘机房 \u0026mdash;\u0026gt; 汇聚机房 \u0026mdash;\u0026gt; 核心机房 访问 动态API 播放 评论接口 , 路径优化 DSA 网络稳定\n容灾概念 , 故障发生 - 故障感知- 自动切换 - 服务恢复 故障排除: 故障明确 - 故障止损 - 分段排查 (客户端 , 服务端 , 中间链路) 故障预防 : 监控报警 - 故障演练 - 故障降级 / 止损 网络接入的问题 域名系统\nhost管理 , 面临很多问题 域名系统 替换 host 域名购买 , 配置迁移 开放外部用户访问 , 建设外部网站 自建DNS服务器\nDNS查询过程 DNS 记录类型 权威DNS系统架构 接入HTTPS\n对称加密 和 非对称加密 SSL的 通信过程 证书链 使用 HTTPS 接入全站加速\n全站加速 = 静态加速 + 动态加速\n静态加速 CDN , 缓存 动态加速 DCDN , 原理 , 全站加速应用场景 : 用户登录 : 动态加速 , 短视频加载观看 : 静态加速 , 网页浏览 : 静态加速 + 动态加速 ","permalink":"//localhost:1313/posts/%E5%AD%97%E8%8A%82%E8%AE%AD%E7%BB%83%E8%90%A5%E8%AE%B0%E5%BD%95/","summary":"\u003ch1 id=\"字节训练营\"\u003e字节训练营\u003c/h1\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241101193517595\" loading=\"lazy\" src=\"../img/image-20241101193517595.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241101193517595\" loading=\"lazy\" src=\"./img/image-20241101193517595.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"结营要求\"\u003e结营要求\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e刷题打卡 \u0026gt; 50\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e每天3题\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e博客要写至少6篇\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"课程\"\u003e课程\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e第一门课程 Go 语言上手-基础语言，也就是说现在你们听的这门课程。 主要讲述语言基础语法、入门实战\u003c/li\u003e\n\u003cli\u003e第二门课程 Go 语言上手-工程实践 主要讲述 并发编程、依赖管理、单元测试、项目实战\u003c/li\u003e\n\u003cli\u003e第三门课程 高质量编程与性能调优实战。主要讲述 编码规范、性能优化建议、性能分析工具使用、性能优化流程\u003c/li\u003e\n\u003cli\u003e第四门课程 高性能 Go 语言发行版优化与落地实践。主要讲述 自动内存管理、Go 内存管理及优化、编译器和静态分析、Go 编译器优化\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241101230232086\" loading=\"lazy\" src=\"../img/image-20241101230232086.png\"\u003e\u003c/p\u003e","title":"字节训练营记录"},{"content":"二分 整数二分算法模板 —— 模板题 AcWing 789. 数的范围\ncpp除法默认是向下取整: 如 5 / 2 = 2 上取整 ==\u0026gt; 5 / 2 = 3 ==\u0026gt; 5+1 \u0026gt;\u0026gt; 1\n下取整 ==\u0026gt; 5 / 2 = 2\n\u0026gt;\u0026gt; 右移运算符（Bitwise Right Shift）\n用于将一个整数的二进制位向右移动指定的位数。每右移一位，相当于将数值除以 2。\nint x = 8; // 二进制 1000 int y = x \u0026gt;\u0026gt; 2; // 结果是 2，二进制 0010 模板 整数数组必须是升序排列\nL和R 都是下标\n确定 mid(坐标) , 然后套模板\n**L L L mid mid+1 r r r\t//mid 在左边 , mid = L + r \u0026raquo; 1 , 自动取左 **\n(尽量选 mid 在左边)\nL L L mid-1 mid r r r //mid 在右边 , mid = L + r + 1 \u0026raquo; 1\nbool check(int x) { /* ... */ } // 检查x是否满足某种性质 // 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用： l l l mid mid+1 r r r\t//mid 在左边 , l + r \u0026gt;\u0026gt; 1 , 自动取左 int bsearch_1(int l, int r) { while (l \u0026lt; r) { int mid = l + r \u0026gt;\u0026gt; 1; if (check(mid)) r = mid; // check()判断mid是否满足性质 else l = mid + 1; } return l; } // 向上取整 // ------------------------------------------------------------------------ // 向下取整 // 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用： l l l mid-1 mid r r r //mid 在右边 , l + r + 1 \u0026gt;\u0026gt; 1 int bsearch_2(int l, int r) { while (l \u0026lt; r) { int mid = l + r + 1 \u0026gt;\u0026gt; 1; if (check(mid)) l = mid; else r = mid - 1; } return l; } 如果数据单调, 意味着可以二分\n二分就是找两段不同性质数据的分界点\n浮点数二分算法模板 —— 模板题 AcWing 790. 数的三次方根\nbool check(double x) {/* ... */} // 检查x是否满足某种性质 double bsearch_3(double l, double r) { const double eps = 1e-6; // eps 表示精度，取决于题目对精度的要求 while (r - l \u0026gt; eps) { double mid = (l + r) / 2; if (check(mid)) r = mid; else l = mid; } return l; } 前缀和 作用 : 快速求出一个区间的和 , O(1) S[i] 为前缀和\nS[i] = a[1]+ a[2] + .... + a[i] , S[0] = 0 (默认) S[i] = S[i-1] + a[i] 求a数组中任意区间[l,r]的和 : S[r] - S[l-1] , 注意是求的是第 L 个 到 第 R 个数的和 (不是下标) s[R] = a[1] + ... + a[L-1] + a[L] + ... + a[R] s[L - 1] = a[1] + ... + a[L-1] //结论 s[R] - s[L - 1] = a[L] + ... + a[R] 差分 yxc: 差分是前缀和的逆运算 a1 a2 ... an //数组前缀和 构造 b1 b2 ... bn 使得 ai = b1 + b2 + ... + bi b1 = a1 b2 = a2 - a1 b3 = a3 - a2 ... bn = a_n - a_n-1 可以实现 O(1) 时间把某一个数组区间的每一个值加上一个值 X\nexample: // a 是原数组 , b 是差分数组 b_l + x b_r+1 - x 一开始可以把a看成 0 0 0 \u0026hellip; 0 通过插入insert操作得到a数组 void insert(int l, int r, int c) { b[l] += c; b[r + 1] -= c; } 林小鹿: 类似于数学中的求导和积分，差分可以看成前缀和的逆运算。 差分数组：\n首先给定一个原数组a：a[1], a[2], a[3],,,,,, a[n];\n然后我们构造一个数组b ： b[1] ,b[2] , b[3],,,,,, b[i];\n使得 a[i] = b[1] + b[2 ]+ b[3] +,,,,,, + b[i]\n也就是说，a数组是b数组的前缀和数组，反过来我们把b数组叫做a数组的差分数组。换句话说，每一个a[i]都是b数组中从头开始的一段区间和。\n考虑如何构造差分b数组？\n最为直接的方法\n如下：\na[0 ]= 0; b[1] = a[1] - a[0]; b[2] = a[2] - a[1]; b[3] =a [3] - a[2]; ........ b[n] = a[n] - a[n-1]; 我们只要有b数组，通过前缀和运算，就可以在O(n) 的时间内得到a数组 。\n知道了差分数组有什么用呢？ 别着急，慢慢往下看。\n话说有这么一个问题：\n给定区间[l ,r ]，让我们把a数组中的[ l, r]区间中的每一个数都加上c,即 a[l] + c , a[l+1] + c , a[l+2] + c ,,,,,, a[r] + c;\n暴力做法是for循环l到r区间，时间复杂度O(n)，如果我们需要对原数组执行m次这样的操作，时间复杂度就会变成O(n*m)。有没有更高效的做法吗? 考虑差分做法。\n始终要记得，a数组是b数组的前缀和数组，比如对b数组的b[i]的修改，会影响到a数组中从a[i]及往后的每一个数。\n首先让差分b数组中的 b[l] + c ,a数组变成 a[l] + c ,a[l+1] + c,,,,,, a[n] + c;\n然后我们打个补丁，b[r+1] - c, a数组变成 a[r+1] - c,a[r+2] - c,,,,,,,a[n] - c;\n为啥还要打个补丁？\nb[l] + c，效果使得a数组中 a[l]及以后的数都加上了c(红色部分)，但我们只要求l到r区间加上c, 因此还需要执行 b[r+1] - c,让a数组中a[r+1]及往后的区间再减去c(绿色部分)，这样对于a[r] 以后区间的数相当于没有发生改变。\n因此我们得出一维差分结论：给a数组中的[ l, r]区间中的每一个数都加上c,只需对差分数组b做 b[l] + = c, b[r+1] - = c。时间复杂度为O(1), 大大提高了效率。\n//差分 时间复杂度 o(m) #include\u0026lt;iostream\u0026gt; using namespace std; const int N = 1e5 + 10; int a[N], b[N]; int main() { int n, m; scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;n, \u0026amp;m); for (int i = 1; i \u0026lt;= n; i++) { scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i]); b[i] = a[i] - a[i - 1]; //构建差分数组 } int l, r, c; while (m--) { scanf(\u0026#34;%d%d%d\u0026#34;, \u0026amp;l, \u0026amp;r, \u0026amp;c); b[l] += c; //将序列中[l, r]之间的每个数都加上c b[r + 1] -= c; } for (int i = 1; i \u0026lt;= n; i++) { a[i] = b[i] + a[i - 1]; //前缀和运算 printf(\u0026#34;%d \u0026#34;, a[i]); } return 0; } 双指针 (双指针) O(n) 必要条件 先考虑暴力方式 确定目标数组的单调性 i从 0开始 从前往后遍历 j从 m - 1开始 从后向前遍历 #include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; const int N = 10001; int a[N], b[N]; int main() { int n, m, x; cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m \u0026gt;\u0026gt; x; for (int i = 0; i \u0026lt; n; i++) cin \u0026gt;\u0026gt; a[i]; for (int i = 0; i \u0026lt; m; i++) cin \u0026gt;\u0026gt; b[i]; // sort(a,a+n); // sort(b,b+m); //必须保证两个数组都是单调的 for (int i = 0, j = m - 1; i \u0026lt; n; i++) { while( j \u0026gt;= 0 \u0026amp;\u0026amp; a[i] + b[j] \u0026gt; x) { j--; } if(a[i] + b[j] == x) { cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; j; break; } } return 0; } #include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; const int N = 100100; int a[N], b[N]; int main() { int n; cin \u0026gt;\u0026gt; n; for (int i = 0; i \u0026lt; n; i++) { cin \u0026gt;\u0026gt; a[i]; } int ans = 0; for (int i = 0, j = 0; i \u0026lt; n; i++) { b[a[i]]++; while (b[a[i]] \u0026gt; 1) { b[a[j]]--; j++; } ans = max(ans, i - j + 1); } cout \u0026lt;\u0026lt; ans; return 0; } 归并排序 分治 模板 void merge_sort(int q[], int l, int r) { if (l \u0026gt;= r) return; int mid = l + r \u0026gt;\u0026gt; 1; merge_sort(q, l, mid); merge_sort(q, mid + 1, r); int k = 0, i = l, j = mid + 1; while (i \u0026lt;= mid \u0026amp;\u0026amp; j \u0026lt;= r) if (q[i] \u0026lt;= q[j]) tmp[k ++ ] = q[i ++ ]; else tmp[k ++ ] = q[j ++ ]; while (i \u0026lt;= mid) tmp[k ++ ] = q[i ++ ]; while (j \u0026lt;= r) tmp[k ++ ] = q[j ++ ]; for (i = l, j = 0; i \u0026lt;= r; i ++, j ++ ) q[i] = tmp[j]; } L L L r r r\n确定分界点 递归排序 left right 归并 \u0026ndash; 合二为一 多路归并 重点是 merge() 函数\n贡献法 是一种数学思想 原本是对矩阵的行进行操作, 换一种方式, 变成对矩阵的列进行操作 孤独的区间 , 只有1个 n➡️ 0 1 2 \u0026hellip; n 所有区间⬇️ 子串是连续的\n日期问题 求闰年模板 const int months[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; // 一三五七八十蜡，三十一天永不差 // 一、1、3、5、7、8、10、12 每月31天，4、6、9、11为30天。 二、2月正常为28天，如果为闰年，则多一天为29天。 int is_leap(int year) //判断闰年 { if (year % 4 == 0 \u0026amp;\u0026amp; year % 100 || year % 400 == 0) return 1; return 0; } int get_days(int y, int m) { if ( m == 2) return 28 + is_leap(y); } int months[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; bool check(int date) // 判断日期是否合法 { int year = date / 10000; int month = date % 10000 / 100; int day = date % 100; if (!day || month \u0026lt; 0 || month \u0026gt; 12) return false; if (month != 2 \u0026amp;\u0026amp; day \u0026gt; months[month]) return false; if (month == 2) { if ((year % 4 == 0 \u0026amp;\u0026amp; year % 100 != 0) || (year % 400 == 0)) // 闰年特判 { if (day \u0026gt; 29) return false; } else { if (day \u0026gt; 28) return false; } } return true; } 求区间天数 思想是计算各个日期到公元1.1.1的天数, 再将计算结果相减+1 , 得到结果\n模板\nint months[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; //\t一 三 五 七 八 十 蜡，三十一天永不差 //或 const int months[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;string\u0026gt; using namespace std; int months[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; int day(int n) { int y = n / 10000; // 年 int m = n % 10000 / 100; // 月 int d = n % 10000 % 100; // 日 // 首先更新一下计算年份的二月天数有多少 // 闰年包括普通闰年和世纪闰年 // 普通闰年年分是4倍数不是100倍数（），世纪闰年是400的倍数， // 即100的倍数不是4的倍数不是闰年，如1900 // 判断闰年 if (y % 4 == 0 \u0026amp;\u0026amp; y % 100 != 0 || y % 400 == 0) months[2] = 29; else // 不加这个会错 months[2] = 28; //统计当前年份的总天数 (今年的天数) while (m--) d += months[m]; //计算从公元1年开始开始，一直到\u0026lt;去年\u0026gt;最后一天,不是到0000年 while (y--) d += (y % 4 == 0 \u0026amp;\u0026amp; y % 100 != 0 || y % 400 == 0 ? 366 : 365); // 闰年366天，平年365天 return d; } int main() { int a, b; while (cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b) cout \u0026lt;\u0026lt; abs(day(a) - day(b)) + 1 \u0026lt;\u0026lt; endl; // 由题所示“如果两个日期是连续的我们规定他们之间的天数为两天”，因此我们加一 return 0; } 区间合并 任意多个区间的范围有交集, 快速把这几个区间合并\n贪心思想\n模板ycx\n// 将所有存在交集的区间合并 void merge(vector\u0026lt;PII\u0026gt; \u0026amp;segs) { vector\u0026lt;PII\u0026gt; res; sort(segs.begin(), segs.end()); int st = -2e9, ed = -2e9; for (auto seg : segs) if (ed \u0026lt; seg.first) { if (st != -2e9) res.push_back({st, ed}); st = seg.first, ed = seg.second; } else ed = max(ed, seg.second); if (st != -2e9) res.push_back({st, ed}); segs = res; } 按区间左端点排序\nstart_________________________end 三种情况⬇️\n​ f\u0026mdash;\u0026ndash;s 在区间内 这情况等于不用操作 ​ f\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-s 右端点超出 ​ f\u0026mdash;\u0026mdash;\u0026mdash;-s 全部超出 void merge(vector\u0026lt;Pii\u0026gt; \u0026amp;segment) { vector\u0026lt;Pii\u0026gt; ans; sort(segment.begin(), segment.end()); // 默认排序左端点 int start = -2e9, end = -2e9; for (auto seg : segment) { if (end \u0026lt; seg.first) { if (start != -2e9) // 没有交集 ans.push_back({start, end}); start = seg.first, end = seg.second; } else { end = max(end, seg.second); //合并情况不添加ans } } if (start != -2e9) // 防止vector是空集 , 空集就是也是一个区间 ans.push_back({start, end}); segment = ans; } 递归 ","permalink":"//localhost:1313/posts/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%A4%87%E6%88%98/","summary":"\u003ch1 id=\"二分\"\u003e二分\u003c/h1\u003e\n\u003ch2 id=\"整数二分算法模板\"\u003e\u003cem\u003e整数\u003c/em\u003e二分算法模板\u003c/h2\u003e\n\u003cp\u003e—— 模板题 AcWing 789. 数的范围\u003c/p\u003e\n\u003cp\u003ecpp除法默认是向下取整: 如 \u003ccode\u003e5 / 2 = 2 \u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e上取整 ==\u0026gt; \u003ccode\u003e5 / 2 = 3\u003c/code\u003e  ==\u0026gt;  \u003ccode\u003e5+1 \u0026gt;\u0026gt; 1\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e下取整 ==\u0026gt; \u003ccode\u003e5 / 2 = 2\u003c/code\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003e\u0026gt;\u0026gt; \u003c/code\u003e \u003cstrong\u003e右移运算符（Bitwise Right Shift）\u003c/strong\u003e\u003c/p\u003e","title":"蓝桥杯备战"},{"content":"参考链接: CSDN Qt Creator打造VScode one dark pro主题配色\n代码部分\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;style-scheme version=\u0026#34;1.0\u0026#34; name=\u0026#34;One Dark\u0026#34;\u0026gt; \u0026lt;style name=\u0026#34;Text\u0026#34; foreground=\u0026#34;#abb2bf\u0026#34; background=\u0026#34;#282c34\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Link\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Selection\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LineNumber\u0026#34; foreground=\u0026#34;#4b5363\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;SearchResult\u0026#34; background=\u0026#34;#324365\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;SearchScope\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Parentheses\u0026#34; underlineColor=\u0026#34;#61afef\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;ParenthesesMismatch\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;AutoComplete\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;CurrentLine\u0026#34; background=\u0026#34;#3a3f4b\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;CurrentLineNumber\u0026#34; foreground=\u0026#34;#777c87\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Occurrences\u0026#34; background=\u0026#34;#324365\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Occurrences.Unused\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;DashUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Occurrences.Rename\u0026#34; background=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Number\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;String\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Type\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Local\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Global\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Field\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Static\u0026#34; foreground=\u0026#34;#61afef\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;VirtualMethod\u0026#34; foreground=\u0026#34;#61afef\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Function\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Keyword\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;PrimitiveType\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Operator\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Overloaded Operator\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Punctuation\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Preprocessor\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Label\u0026#34; foreground=\u0026#34;#e06c75\u0026#34; bold=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Comment\u0026#34; foreground=\u0026#34;#5c6370\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Doxygen.Comment\u0026#34; foreground=\u0026#34;#5c6370\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Doxygen.Tag\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;VisualWhitespace\u0026#34; foreground=\u0026#34;#3c4049\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlLocalId\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlExternalId\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlTypeId\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlRootObjectProperty\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlScopeObjectProperty\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlExternalObjectProperty\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;JsScopeVar\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;JsImportVar\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;JsGlobalVar\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlStateName\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Binding\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DisabledCode\u0026#34; foreground=\u0026#34;#5c6370\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;AddedLine\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;RemovedLine\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffFile\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffLocation\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffFileLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#e5c07b\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffContextLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#56b6c2\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffSourceLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#be5046\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffSourceChar\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffDestLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#789353\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffDestChar\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#98c379\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogChangeLine\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogAuthorName\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogCommitDate\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogCommitHash\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogCommitSubject\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogDecoration\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Warning\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;WarningContext\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;DotLine\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Error\u0026#34; underlineColor=\u0026#34;#e06c75\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;ErrorContext\u0026#34; underlineColor=\u0026#34;#e06c75\u0026#34; underlineStyle=\u0026#34;DotLine\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Declaration\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;FunctionDefinition\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;OutputArgument\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LastStyleSentinel\u0026#34;/\u0026gt; \u0026lt;/style-scheme\u0026gt; 主题设置\n[General] ThemeName=One Dark PreferredStyles=Fusion DefaultTextEditorColorScheme=onedark.xml [Palette] shadowBackground=ff21252b text=ffabb2bf textDisabled=99abb2bf textHighlighted=ffd7dae0 toolBarItem=ffabb2bf toolBarItemDisabled=99abb2bf fancyBarsNormalTextColor=ffabb2bf fancyBarsBoldTextColor=ffabb2bf hoverBackground=ff31363f selectedBackground=ff3a3f4b selectedBackgroundText=ffd7dae0 normalBackground=ff282c34 alternateBackground=ff31363f error=ffe06c75 warning=ffe5c07b success=ff98c379 message=ff61afef splitter=ff181a1f textColorLink=61afef textColorLinkVisited=c678dd backgroundColorDisabled=ff21252b [Colors] ;DS controls theme START DScontrolBackground=normalBackground DScontrolOutline=splitter DStextColor=text DSdisabledTextColor=textDisabled DSpanelBackground=ff454444 DShoverHighlight=hoverBackground DScolumnBackground=ff363636 DSfocusEdit=normalBackground DSfocusDrag=ff565656 DScontrolBackgroundPressed=selectedBackground DScontrolBackgroundChecked=selectedBackground DSinteraction=selectedBackground DSsliderActiveTrack=ff7a7a7a DSsliderInactiveTrack=ff4d4d4d DSsliderHandle=ff4b5362 DSsliderActiveTrackHover=ff7f7f7f DSsliderInactiveTrackHover=ff505050 DSsliderHandleHover=ff7a7a7a DSsliderActiveTrackFocus=ffaaaaaa DSsliderInactiveTrackFocus=ff7a7a7a DSsliderHandleFocus=ff1d545c DSerrorColor=error DScontrolBackgroundDisabled=backgroundColorDisabled DScontrolOutlineDisabled=ff4d4d4d DStextColorDisabled=textDisabled DStextSelectionColor=selectedBackground DStextSelectedTextColor=selectedBackgroundText DSscrollBarTrack=ff4d4d4d DSscrollBarHandle=ff4b5362 DScontrolBackgroundInteraction=ff4d4d4d DStranslationIndicatorBorder=splitter DSsectionHeadBackground=alternateBackground DSchangedStateText=message DS3DAxisXColor=error DS3DAxisYColor=success DS3DAxisZColor=message ;DS controls theme END BackgroundColorAlternate=alternateBackground BackgroundColorDark=shadowBackground BackgroundColorHover=hoverBackground BackgroundColorNormal=normalBackground BackgroundColorDisabled=backgroundColorDisabled BackgroundColorSelected=selectedBackground BadgeLabelBackgroundColorChecked=text BadgeLabelBackgroundColorUnchecked=text BadgeLabelTextColorChecked=normalBackground BadgeLabelTextColorUnchecked=normalBackground CanceledSearchTextColor=error ComboBoxArrowColor=toolBarItem ComboBoxArrowColorDisabled=toolBarItemDisabled ComboBoxTextColor=fancyBarsNormalTextColor DetailsButtonBackgroundColorHover=hoverBackground DetailsWidgetBackgroundColor=shadowBackground DockWidgetResizeHandleColor=splitter DoubleTabWidget1stSeparatorColor=splitter DoubleTabWidget1stTabActiveTextColor=text DoubleTabWidget1stTabBackgroundColor=normalBackground DoubleTabWidget1stTabInactiveTextColor=text DoubleTabWidget2ndSeparatorColor=toolBarItemDisabled DoubleTabWidget2ndTabActiveTextColor=text DoubleTabWidget2ndTabBackgroundColor=selectedBackground DoubleTabWidget2ndTabInactiveTextColor=text EditorPlaceholderColor=shadowBackground FancyToolBarSeparatorColor=toolBarItemDisabled FancyTabBarBackgroundColor=shadowBackground FancyTabBarSelectedBackgroundColor=selectedBackground FancyTabWidgetDisabledSelectedTextColor=toolBarItemDisabled FancyTabWidgetDisabledUnselectedTextColor=toolBarItemDisabled FancyTabWidgetEnabledSelectedTextColor=fancyBarsBoldTextColor FancyTabWidgetEnabledUnselectedTextColor=fancyBarsBoldTextColor FancyToolButtonHoverColor=hoverBackground FancyToolButtonSelectedColor=selectedBackground FutureProgressBackgroundColor=shadowBackground IconsBaseColor=toolBarItem IconsDisabledColor=toolBarItemDisabled IconsInfoColor=message IconsInfoToolBarColor=message IconsWarningColor=warning IconsWarningToolBarColor=warning IconsErrorColor=error IconsErrorToolBarColor=error IconsRunColor=success IconsRunToolBarColor=success IconsStopColor=error IconsStopToolBarColor=error IconsInterruptColor=message IconsInterruptToolBarColor=message IconsDebugColor=toolBarItem IconsNavigationArrowsColor=warning IconsBuildHammerHandleColor=b06112 IconsBuildHammerHeadColor=toolBarItem IconsModeWelcomeActiveColor=success IconsModeEditActiveColor=message IconsModeDesignActiveColor=warning IconsModeDebugActiveColor=message IconsModeProjectActiveColor=success IconsModeAnalyzeActiveColor=message IconsModeHelpActiveColor=warning IconsCodeModelKeywordColor=ff777777 IconsCodeModelClassColor=ffc0b550 IconsCodeModelStructColor=ff53b053 IconsCodeModelFunctionColor=ffd34373 IconsCodeModelVariableColor=ff2bbbcc IconsCodeModelEnumColor=ffc0b550 IconsCodeModelMacroColor=ff476ba0 IconsCodeModelAttributeColor=ff316511 IconsCodeModelUniformColor=ff994899 IconsCodeModelVaryingColor=ffa08833 IconsCodeModelOverlayBackgroundColor=normalBackground IconsCodeModelOverlayForegroundColor=text InfoBarBackground=shadowBackground InfoBarText=text MenuBarEmptyAreaBackgroundColor=shadowBackground MenuBarItemBackgroundColor=shadowBackground MenuBarItemTextColorDisabled=textDisabled MenuBarItemTextColorNormal=text MenuItemTextColorDisabled=textDisabled MenuItemTextColorNormal=text MiniProjectTargetSelectorBackgroundColor=shadowBackground MiniProjectTargetSelectorBorderColor=shadowBackground MiniProjectTargetSelectorSummaryBackgroundColor=normalBackground MiniProjectTargetSelectorTextColor=fancyBarsNormalTextColor PanelStatusBarBackgroundColor=shadowBackground PanelsWidgetSeparatorLineColor=splitter PanelTextColorDark=text PanelTextColorMid=text PanelTextColorLight=textHighlighted ProgressBarColorError=error ProgressBarColorFinished=success ProgressBarColorNormal=message ProgressBarTitleColor=text ProgressBarBackgroundColor=alternateBackground SplitterColor=splitter TextColorDisabled=textDisabled TextColorError=error TextColorHighlight=textHighlighted TextColorHighlightBackground=hoverBackground TextColorLink=textColorLink TextColorLinkVisited=textColorLinkVisited TextColorNormal=text ToggleButtonBackgroundColor=shadowBackground ToolBarBackgroundColor=shadowBackground TreeViewArrowColorNormal=hoverBackground TreeViewArrowColorSelected=text OutputPanes_DebugTextColor=text OutputPanes_ErrorMessageTextColor=error OutputPanes_MessageOutput=message OutputPanes_NormalMessageTextColor=text OutputPanes_StdErrTextColor=error OutputPanes_StdOutTextColor=text OutputPanes_WarningMessageTextColor=warning OutputPanes_TestPassTextColor=success OutputPanes_TestFailTextColor=error OutputPanes_TestXFailTextColor=error OutputPanes_TestXPassTextColor=message OutputPanes_TestSkipTextColor=message OutputPanes_TestWarnTextColor=warning OutputPanes_TestFatalTextColor=error OutputPanes_TestDebugTextColor=text OutputPaneButtonFlashColor=error OutputPaneToggleButtonTextColorChecked=fancyBarsNormalTextColor OutputPaneToggleButtonTextColorUnchecked=fancyBarsNormalTextColor Debugger_LogWindow_LogInput=ff56b6c2 Debugger_LogWindow_LogStatus=message Debugger_LogWindow_LogTime=error Debugger_WatchItem_ValueNormal=text Debugger_WatchItem_ValueInvalid=textDisabled Debugger_WatchItem_ValueChanged=error Debugger_Breakpoint_TextMarkColor=message Welcome_TextColor=text Welcome_ForegroundPrimaryColor=text Welcome_ForegroundSecondaryColor=text Welcome_BackgroundColor=normalBackground Welcome_ButtonBackgroundColor=normalBackground Welcome_DividerColor=splitter Welcome_HoverColor=hoverBackground Welcome_LinkColor=textColorLink Welcome_DisabledLinkColor=textDisabled Timeline_TextColor=text Timeline_BackgroundColor1=normalBackground Timeline_BackgroundColor2=shadowBackground Timeline_DividerColor=splitter Timeline_HighlightColor=selectedBackground Timeline_PanelBackgroundColor=alternateBackground Timeline_PanelHeaderColor=normalBackground Timeline_HandleColor=ff4b5362 Timeline_RangeColor=selectedBackground VcsBase_FileStatusUnknown_TextColor=text VcsBase_FileAdded_TextColor=success VcsBase_FileModified_TextColor=warning VcsBase_FileDeleted_TextColor=error VcsBase_FileRenamed_TextColor=message VcsBase_FileUnmerged_TextColor=error Bookmarks_TextMarkColor=message TextEditor_SearchResult_ScrollBarColor=success TextEditor_CurrentLine_ScrollBarColor=message ProjectExplorer_TaskError_TextMarkColor=error ProjectExplorer_TaskWarn_TextMarkColor=warning CodeModel_Error_TextMarkColor=error CodeModel_Warning_TextMarkColor=warning QmlDesigner_BackgroundColor=normalBackground QmlDesigner_HighlightColor=selectedBackground QmlDesigner_FormEditorSelectionColor=message QmlDesigner_FormEditorForegroundColor=normalBackground QmlDesigner_BackgroundColorDarkAlternate=shadowBackground QmlDesigner_BackgroundColorDarker=splitter QmlDesigner_BorderColor=splitter QmlDesigner_ButtonColor=normalBackground QmlDesigner_TabDark=shadowBackground QmlDesigner_TabLight=text QmlDesigner_FormeditorBackgroundColor=normalBackground QmlDesigner_AlternateBackgroundColor=alternateBackground QmlDesigner_ScrollBarHandleColor=ff4b5362 PaletteWindow=shadowBackground PaletteWindowText=text PaletteBase=normalBackground PaletteAlternateBase=alternateBackground PaletteButton=shadowBackground PaletteBrightText=error PaletteText=text PaletteButtonText=text PaletteButtonTextDisabled=textDisabled PaletteToolTipBase=hoverBackground PaletteHighlight=selectedBackground PaletteDark=shadowBackground PaletteHighlightedText=selectedBackgroundText PaletteToolTipText=text PaletteLink=textColorLink PaletteLinkVisited=textColorLinkVisited PaletteWindowDisabled=backgroundColorDisabled PaletteWindowTextDisabled=textDisabled PaletteBaseDisabled=backgroundColorDisabled PaletteTextDisabled=textDisabled [Flags] ComboBoxDrawTextShadow=false DerivePaletteFromTheme=true DrawIndicatorBranch=true DrawSearchResultWidgetFrame=false DrawTargetSelectorBottom=false DrawToolBarHighlights=false DrawToolBarBorders=false ApplyThemePaletteGlobally=true FlatToolBars=true FlatSideBarIcons=true FlatProjectsMode=true FlatMenuBar=true ToolBarIconShadow=true WindowColorAsBase=true DarkUserInterface=true [Gradients] DetailsWidgetHeaderGradient\\1\\color=normalBackground DetailsWidgetHeaderGradient\\1\\pos=1 DetailsWidgetHeaderGradient\\size=1 ","permalink":"//localhost:1313/posts/qt%E4%B8%BB%E9%A2%98onedark%E8%AE%BE%E7%BD%AE/","summary":"\u003cp\u003e参考链接:  CSDN  \u003ca href=\"https://blog.csdn.net/qq_41980754/article/details/119861293\"\u003eQt Creator打造VScode one dark pro主题配色\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e代码部分\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\n\u0026lt;style-scheme version=\u0026#34;1.0\u0026#34; name=\u0026#34;One Dark\u0026#34;\u0026gt;\n  \u0026lt;style name=\u0026#34;Text\u0026#34; foreground=\u0026#34;#abb2bf\u0026#34; background=\u0026#34;#282c34\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Link\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Selection\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LineNumber\u0026#34; foreground=\u0026#34;#4b5363\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;SearchResult\u0026#34; background=\u0026#34;#324365\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;SearchScope\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Parentheses\u0026#34; underlineColor=\u0026#34;#61afef\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;ParenthesesMismatch\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;AutoComplete\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;CurrentLine\u0026#34; background=\u0026#34;#3a3f4b\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;CurrentLineNumber\u0026#34; foreground=\u0026#34;#777c87\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Occurrences\u0026#34; background=\u0026#34;#324365\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Occurrences.Unused\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;DashUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Occurrences.Rename\u0026#34; background=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Number\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;String\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Type\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Local\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Global\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Field\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Static\u0026#34; foreground=\u0026#34;#61afef\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;VirtualMethod\u0026#34; foreground=\u0026#34;#61afef\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Function\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Keyword\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;PrimitiveType\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Operator\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Overloaded Operator\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Punctuation\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Preprocessor\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Label\u0026#34; foreground=\u0026#34;#e06c75\u0026#34; bold=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Comment\u0026#34; foreground=\u0026#34;#5c6370\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Doxygen.Comment\u0026#34; foreground=\u0026#34;#5c6370\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Doxygen.Tag\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;VisualWhitespace\u0026#34; foreground=\u0026#34;#3c4049\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlLocalId\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlExternalId\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlTypeId\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlRootObjectProperty\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlScopeObjectProperty\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlExternalObjectProperty\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;JsScopeVar\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;JsImportVar\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;JsGlobalVar\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlStateName\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Binding\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DisabledCode\u0026#34; foreground=\u0026#34;#5c6370\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;AddedLine\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;RemovedLine\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffFile\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffLocation\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffFileLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#e5c07b\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffContextLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#56b6c2\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffSourceLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#be5046\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffSourceChar\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffDestLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#789353\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffDestChar\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#98c379\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogChangeLine\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogAuthorName\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogCommitDate\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogCommitHash\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogCommitSubject\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogDecoration\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Warning\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;WarningContext\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;DotLine\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Error\u0026#34; underlineColor=\u0026#34;#e06c75\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;ErrorContext\u0026#34; underlineColor=\u0026#34;#e06c75\u0026#34; underlineStyle=\u0026#34;DotLine\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Declaration\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;FunctionDefinition\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;OutputArgument\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LastStyleSentinel\u0026#34;/\u0026gt;\n\u0026lt;/style-scheme\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e主题设置\u003c/p\u003e","title":"Qt主题oneDark设置"},{"content":"在 Go 语言中，cnt := [2]int{} cnt 是一个变量，使用短变量声明 (:=) 定义。 [2]int 表示这是一个长度为 2 的 数组，数组的元素类型是 int。 {} 表示这个数组被初始化为零值，也就是所有的元素都被初始化为整型的零值 0。 示例代码 package main import \u0026#34;fmt\u0026#34; func main() { cnt := [2]int{} fmt.Println(cnt) // 输出: [0 0] } 细节 数组是固定长度的，[2]int 表示它的长度为 2，如果需要动态长度的集合，可以使用切片 ([]int)。\n如果你想明确初始化数组的值，可以写成这样：\ncnt := [2]int{1, 2} fmt.Println(cnt) // 输出: [1 2] 如果只部分初始化，未赋值的部分会使用零值：\ncnt := [2]int{1} fmt.Println(cnt) // 输出: [1 0] range循环时需要注意点 错误的代码：\nbanSet := make(map[string]struct{}) for word := range bannedWords { banSet[word] = struct{}{} } 是不正确的，因为 range 关键字在 Go 语言中用于遍历集合（如数组、切片、映射、字符串等）时，会同时返回索引和值。\n在你的写法中，for word := range bannedWords 只返回了 bannedWords 的索引（即数组或切片的索引），而不是你实际想要的单词。\n正确的写法应该是：\nbanSet := make(map[string]struct{}) for _, word := range bannedWords { banSet[word] = struct{}{} } 解释： for _, word := range bannedWords： range bannedWords 会返回两个值：第一个是索引，第二个是 bannedWords 中的每个元素（即单词）。 你用 _ 来忽略索引，因为你只关心单词 word。 为什么不能直接使用 for word := range bannedWords？ range bannedWords 实际上返回的是索引和值，for word := range bannedWords 只取了第一个值，也就是索引，而不是你期望的单词。 你需要第二个值（单词）来填充 banSet，因此你必须使用 for _, word := range bannedWords。 总结： 你需要在遍历 bannedWords 时获取每个单词的值，因此必须用 for _, word := range bannedWords。\n","permalink":"//localhost:1313/posts/go%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/","summary":"\u003ch1 id=\"在-go-语言中cnt--2int\"\u003e在 Go 语言中，\u003ccode\u003ecnt := [2]int{}\u003c/code\u003e\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecnt\u003c/code\u003e 是一个变量，使用短变量声明 (\u003ccode\u003e:=\u003c/code\u003e) 定义。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e[2]int\u003c/code\u003e 表示这是一个长度为 \u003ccode\u003e2\u003c/code\u003e 的 \u003cstrong\u003e数组\u003c/strong\u003e，数组的元素类型是 \u003ccode\u003eint\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e{}\u003c/code\u003e 表示这个数组被初始化为零值，也就是所有的元素都被初始化为整型的零值 \u003ccode\u003e0\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"示例代码\"\u003e示例代码\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003ecnt\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecnt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 输出: [0 0]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"细节\"\u003e细节\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e数组是固定长度的，\u003ccode\u003e[2]int\u003c/code\u003e 表示它的长度为 \u003ccode\u003e2\u003c/code\u003e，如果需要动态长度的集合，可以使用切片 (\u003ccode\u003e[]int\u003c/code\u003e)。\u003c/p\u003e","title":"Go的使用记录"},{"content":"Interstellar 星际穿越 My favorite movie, without a doubt.\n我最爱的电影。\n","permalink":"//localhost:1313/posts/interstellar/","summary":"\u003ch1 id=\"interstellar-星际穿越\"\u003eInterstellar 星际穿越\u003c/h1\u003e\n\u003cp\u003eMy favorite movie, \u003cstrong\u003ewithout a doubt\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e我最爱的电影。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20241009_233455.207.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20241009_233455.207.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20240917_220015.066.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20240917_220015.066.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20241019_170922.638.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20241019_170922.638.png\"\u003e\u003c/p\u003e","title":"Interstellar"},{"content":" 自我介绍 python有过深入了解吗？ 面向过程和面向对象哪一块用的比较多？那你用面向对象做了哪些工作 说一下C++的编译过程，编译过程中宏定义和const的区别是什么？在大型工程中用const好一些还是宏定义好一些？ 内联函数有了解过吗？讲一下。 虚函数 内联函数和虚函数谁的执行效率更快？为什么？那静态函数呢 静态函数和普通函数运行效率有什么差距吗？ 进程和线程？进程内存分布讲一下 堆和栈的区别 堆里面申请内存有哪些方式？new和malloc的区别 在构造函数里面能调用虚函数吗？为什么？如果子类在构造函数中调用了父类的虚函数会发生什么？ 在析构函数里面能不能抛出异常？如果抛出会发生什么 C++内存泄漏有哪些？一个类既不继承也不是子类，内部也没有虚函数，那他的析构函数需要声明为虚函数吗 C++发生内存泄漏有什么好的办法来解决这个问题？ 智能指针的实现原理是什么？循环引用如何解决 TCP和UDP的区别？ 平时玩游戏吗？LOL。你觉得LOL的战斗逻辑是如何发送到客户端上的？TCP还是UDP 平时有了解过帧同步和状态同步吗？ 设计模式有了解过吗？单例模式主要用于什么情况 比较大型的MVCC了解过吗 如果让你来设计一个LOL商城系统，有一些商城的数据，你会如何用代码来建这个商城？ 有1W个数字，找出最大的10个数字 O(N)的排序有哪些？讲一下基数排序和桶排序 20G的字符串，只有4G的内存，找到出现最多的前10个的字符串？ GPU的渲染(管线)了解过吗？图形学有学过吗？ 你为什么会选择来做游戏？更倾向于做客户端还是服务器的？ dota了解吗 给我简单介绍了一下帧同步和状态同步，然后有一个moba的游戏，使用帧同步还是状态同步？ 玩游戏时掉帧后恢复是使用的帧同步还是状态同步？ 提问环节：比较关注实习生的哪些技能和知识？核心的还是学习和反应能力，反应快的，有面向对象的大工程的经验。 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0421%E7%BD%91%E6%98%93%E4%BA%92%E5%A8%B1/","summary":"\u003col\u003e\n\u003cli\u003e自我介绍\u003c/li\u003e\n\u003cli\u003epython有过深入了解吗？\u003c/li\u003e\n\u003cli\u003e面向过程和面向对象哪一块用的比较多？那你用面向对象做了哪些工作\u003c/li\u003e\n\u003cli\u003e说一下C++的编译过程，编译过程中宏定义和const的区别是什么？在大型工程中用const好一些还是宏定义好一些？\u003c/li\u003e\n\u003cli\u003e内联函数有了解过吗？讲一下。\u003c/li\u003e\n\u003cli\u003e虚函数\u003c/li\u003e\n\u003cli\u003e内联函数和虚函数谁的执行效率更快？为什么？那静态函数呢\u003c/li\u003e\n\u003cli\u003e静态函数和普通函数运行效率有什么差距吗？\u003c/li\u003e\n\u003cli\u003e进程和线程？进程内存分布讲一下\u003c/li\u003e\n\u003cli\u003e堆和栈的区别\u003c/li\u003e\n\u003cli\u003e堆里面申请内存有哪些方式？new和malloc的区别\u003c/li\u003e\n\u003cli\u003e在构造函数里面能调用虚函数吗？为什么？如果子类在构造函数中调用了父类的虚函数会发生什么？\u003c/li\u003e\n\u003cli\u003e在析构函数里面能不能抛出异常？如果抛出会发生什么\u003c/li\u003e\n\u003cli\u003eC++内存泄漏有哪些？一个类既不继承也不是子类，内部也没有虚函数，那他的析构函数需要声明为虚函数吗\u003c/li\u003e\n\u003cli\u003eC++发生内存泄漏有什么好的办法来解决这个问题？\u003c/li\u003e\n\u003cli\u003e智能指针的实现原理是什么？循环引用如何解决\u003c/li\u003e\n\u003cli\u003eTCP和UDP的区别？\u003c/li\u003e\n\u003cli\u003e平时玩游戏吗？LOL。你觉得LOL的战斗逻辑是如何发送到客户端上的？TCP还是UDP\u003c/li\u003e\n\u003cli\u003e平时有了解过帧同步和状态同步吗？\u003c/li\u003e\n\u003cli\u003e设计模式有了解过吗？单例模式主要用于什么情况\u003c/li\u003e\n\u003cli\u003e比较大型的MVCC了解过吗\u003c/li\u003e\n\u003cli\u003e如果让你来设计一个LOL商城系统，有一些商城的数据，你会如何用代码来建这个商城？\u003c/li\u003e\n\u003cli\u003e有1W个数字，找出最大的10个数字\u003c/li\u003e\n\u003cli\u003eO(N)的排序有哪些？讲一下基数排序和桶排序\u003c/li\u003e\n\u003cli\u003e20G的字符串，只有4G的内存，找到出现最多的前10个的字符串？\u003c/li\u003e\n\u003cli\u003eGPU的渲染(管线)了解过吗？图形学有学过吗？\u003c/li\u003e\n\u003cli\u003e你为什么会选择来做游戏？更倾向于做客户端还是服务器的？\u003c/li\u003e\n\u003cli\u003edota了解吗\u003c/li\u003e\n\u003cli\u003e给我简单介绍了一下帧同步和状态同步，然后有一个moba的游戏，使用帧同步还是状态同步？\u003c/li\u003e\n\u003cli\u003e玩游戏时掉帧后恢复是使用的帧同步还是状态同步？\u003c/li\u003e\n\u003cli\u003e提问环节：比较关注实习生的哪些技能和知识？核心的还是学习和反应能力，反应快的，有面向对象的大工程的经验。\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0421网易互娱"},{"content":"2020.4.18\n一面 50min 在C++里面我们什么时候会把析构函数写为虚函数呢 C++中引用和指针有什么样的区别 右值引用，移动语义和完美转发在C++11中起到的作用 简单介绍一下RAII这个机制 简单介绍一下http请求和响应的结构 状态码分为几个类别 301和302这两个状态码有什么样的区别呢 断点续传的功能206 服务器什么时候返回304这个状态码，需要带上一些什么样的特征呢 能简单的介绍一下chunk transfer是一种什么样的传输方式呢 简单介绍一下linux下常用的IO多路复用模型 用epoll实现一个server时浏览器主动关闭了一个连接那么epoll收到的是什么事件呢 简单介绍一下惊群的现象是一个什么样的现象，有什么的办法解决这个现象呢 linux下单进程最大连接数受到哪些因素的限制呢 time_wait起到的作用，有什么办法降低这种状态的数量 编程题：编辑距离 二面 60min 讲一下进程和线程的区别 分页和分段的区别是什么 死锁和如何避免死锁 介绍一下TCP协议和UDP协议的区别 客户端发起连接以后，突然断电了，客户端断开了连接，会产生什么影响 TCP半连接状态解释一下 https密钥交互过程 close_wait的状态 499状态码 myisam和innoDB的区别 B+的调整过程 联合索引和最左原则 我们有哪些分表原则，在什么情况下使用这些分表原则 深浅拷贝解释一下，深浅拷贝的效率上有什么区别呢 栈溢出的原因 讲一下堆和栈的区别 编程题：判环和leetcode原题简化路径 三面 30min 输入网址后发生了什么 我经常会用一些CDN进行静态和动态的加速这个了解吗 DNS解析的时候DNS污染是怎么回事 mysql在分表时是怎么做的 mysql出现慢查询都有哪些原因 什么样的sql会产生IO瓶颈，什么样的sql会产生CPU瓶颈 TCP改成两次握手会产生什么现象，会有问题吗 http和https的区别是什么 编程题：矩阵中最长递增路径 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0418%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/","summary":"\u003cp\u003e2020.4.18\u003c/p\u003e\n\u003ch2 id=\"一面-50min\"\u003e一面 50min\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e在C++里面我们什么时候会把析构函数写为虚函数呢\u003c/li\u003e\n\u003cli\u003eC++中引用和指针有什么样的区别\u003c/li\u003e\n\u003cli\u003e右值引用，移动语义和完美转发在C++11中起到的作用\u003c/li\u003e\n\u003cli\u003e简单介绍一下RAII这个机制\u003c/li\u003e\n\u003cli\u003e简单介绍一下http请求和响应的结构\u003c/li\u003e\n\u003cli\u003e状态码分为几个类别\u003c/li\u003e\n\u003cli\u003e301和302这两个状态码有什么样的区别呢\u003c/li\u003e\n\u003cli\u003e断点续传的功能206\u003c/li\u003e\n\u003cli\u003e服务器什么时候返回304这个状态码，需要带上一些什么样的特征呢\u003c/li\u003e\n\u003cli\u003e能简单的介绍一下chunk transfer是一种什么样的传输方式呢\u003c/li\u003e\n\u003cli\u003e简单介绍一下linux下常用的IO多路复用模型\u003c/li\u003e\n\u003cli\u003e用epoll实现一个server时浏览器主动关闭了一个连接那么epoll收到的是什么事件呢\u003c/li\u003e\n\u003cli\u003e简单介绍一下惊群的现象是一个什么样的现象，有什么的办法解决这个现象呢\u003c/li\u003e\n\u003cli\u003elinux下单进程最大连接数受到哪些因素的限制呢\u003c/li\u003e\n\u003cli\u003etime_wait起到的作用，有什么办法降低这种状态的数量\u003c/li\u003e\n\u003cli\u003e编程题：编辑距离\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"二面-60min\"\u003e二面 60min\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e讲一下进程和线程的区别\u003c/li\u003e\n\u003cli\u003e分页和分段的区别是什么\u003c/li\u003e\n\u003cli\u003e死锁和如何避免死锁\u003c/li\u003e\n\u003cli\u003e介绍一下TCP协议和UDP协议的区别\u003c/li\u003e\n\u003cli\u003e客户端发起连接以后，突然断电了，客户端断开了连接，会产生什么影响\u003c/li\u003e\n\u003cli\u003eTCP半连接状态解释一下\u003c/li\u003e\n\u003cli\u003ehttps密钥交互过程\u003c/li\u003e\n\u003cli\u003eclose_wait的状态\u003c/li\u003e\n\u003cli\u003e499状态码\u003c/li\u003e\n\u003cli\u003emyisam和innoDB的区别\u003c/li\u003e\n\u003cli\u003eB+的调整过程\u003c/li\u003e\n\u003cli\u003e联合索引和最左原则\u003c/li\u003e\n\u003cli\u003e我们有哪些分表原则，在什么情况下使用这些分表原则\u003c/li\u003e\n\u003cli\u003e深浅拷贝解释一下，深浅拷贝的效率上有什么区别呢\u003c/li\u003e\n\u003cli\u003e栈溢出的原因\u003c/li\u003e\n\u003cli\u003e讲一下堆和栈的区别\u003c/li\u003e\n\u003cli\u003e编程题：判环和leetcode原题简化路径\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"三面-30min\"\u003e三面 30min\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e输入网址后发生了什么\u003c/li\u003e\n\u003cli\u003e我经常会用一些CDN进行静态和动态的加速这个了解吗\u003c/li\u003e\n\u003cli\u003eDNS解析的时候DNS污染是怎么回事\u003c/li\u003e\n\u003cli\u003emysql在分表时是怎么做的\u003c/li\u003e\n\u003cli\u003emysql出现慢查询都有哪些原因\u003c/li\u003e\n\u003cli\u003e什么样的sql会产生IO瓶颈，什么样的sql会产生CPU瓶颈\u003c/li\u003e\n\u003cli\u003eTCP改成两次握手会产生什么现象，会有问题吗\u003c/li\u003e\n\u003cli\u003ehttp和https的区别是什么\u003c/li\u003e\n\u003cli\u003e编程题：矩阵中最长递增路径\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0418字节跳动"},{"content":"腾讯深圳4月8号 在你看来epoll是个什么样的东西，边沿触发和水平触发的模式 epoll的通知机制 线程和进程的区别 多线程和多进程的选择上以什么作为考量 堆的数据结构（可能应该写一个类，然后封装一些函数） C++内存模型 static会被放在导出符号表里吗 网络层和传输层最大的区别是什么 TCP头部有哪些 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0408%E8%85%BE%E8%AE%AF%E6%B7%B1%E5%9C%B3/","summary":"\u003ch2 id=\"腾讯深圳4月8号\"\u003e腾讯深圳4月8号\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e在你看来epoll是个什么样的东西，边沿触发和水平触发的模式\u003c/li\u003e\n\u003cli\u003eepoll的通知机制\u003c/li\u003e\n\u003cli\u003e线程和进程的区别\u003c/li\u003e\n\u003cli\u003e多线程和多进程的选择上以什么作为考量\u003c/li\u003e\n\u003cli\u003e堆的数据结构（可能应该写一个类，然后封装一些函数）\u003c/li\u003e\n\u003cli\u003eC++内存模型\u003c/li\u003e\n\u003cli\u003estatic会被放在导出符号表里吗\u003c/li\u003e\n\u003cli\u003e网络层和传输层最大的区别是什么\u003c/li\u003e\n\u003cli\u003eTCP头部有哪些\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0408腾讯深圳"},{"content":"腾讯成都 自我介绍 详细讲一下你的项目 并发量和数据传输效率 TCP拥塞机制 进程有几种状态 事务要满足几个特性 B+树特征是什么样的 B+树查询过程 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0402%E8%85%BE%E8%AE%AF%E6%88%90%E9%83%BD/","summary":"\u003ch2 id=\"腾讯成都\"\u003e腾讯成都\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e自我介绍\u003c/li\u003e\n\u003cli\u003e详细讲一下你的项目\u003c/li\u003e\n\u003cli\u003e并发量和数据传输效率\u003c/li\u003e\n\u003cli\u003eTCP拥塞机制\u003c/li\u003e\n\u003cli\u003e进程有几种状态\u003c/li\u003e\n\u003cli\u003e事务要满足几个特性\u003c/li\u003e\n\u003cli\u003eB+树特征是什么样的\u003c/li\u003e\n\u003cli\u003eB+树查询过程\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0402腾讯成都"},{"content":" 自我介绍 项目web服务器提问(跟socket相关的事件有哪些？epoll监听了socket哪些事件？用的什么模式水平触发还是边沿触发模式？你用的是阻塞IO还是非阻塞IO，为什么用非阻塞?) C++多态是怎么实现的？答到虚函数表指针就就结束了 构造函数可以是虚函数吗？不可以，为什么？ 析构函数可以是虚函数吗？可以。根据我回答扩展的一个问题：父类析构不是虚函数，他的子类有一个父类指针指向子类的对象，然后我释放这个父类指针的时候会调用子类的虚构函数吗？不会。我觉得应该应该回答继承时的虚构顺序，当时没想起。如果不会调用析构函数，子类会被释放吗？不会。面试官主动放弃该话题。 简单说一下new/delete和malloc和free C++11用过哪些？auto, unordered_map, 智能指针 TCP黏包问题如何解决？ TCP的拥塞控制？我答了拥塞窗口。他想听慢重传和快恢复 TIME_WAIT状态解释一下，如何解决这个问题？端口复用 A和B建立连接以后，A拔掉网线,那这个时候B和A的连接还在吗？哪一方会发现呢？不要答心跳包。面试官主动放弃该话题。 说一下多进程和多线程的区别。线程共享哪些内容。 又TM扯到项目中的线程数了。线程的模型是什么样的。 还有什么想问我的？问了他这个岗位做啥的。面向企业的视频会议。 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0306cvte/","summary":"\u003col\u003e\n\u003cli\u003e自我介绍\u003c/li\u003e\n\u003cli\u003e项目web服务器提问(跟socket相关的事件有哪些？epoll监听了socket哪些事件？用的什么模式水平触发还是边沿触发模式？你用的是阻塞IO还是非阻塞IO，为什么用非阻塞?)\u003c/li\u003e\n\u003cli\u003eC++多态是怎么实现的？答到虚函数表指针就就结束了\u003c/li\u003e\n\u003cli\u003e构造函数可以是虚函数吗？不可以，为什么？\u003c/li\u003e\n\u003cli\u003e析构函数可以是虚函数吗？可以。根据我回答扩展的一个问题：父类析构不是虚函数，他的子类有一个父类指针指向子类的对象，然后我释放这个父类指针的时候会调用子类的虚构函数吗？不会。我觉得应该应该回答继承时的虚构顺序，当时没想起。如果不会调用析构函数，子类会被释放吗？不会。面试官主动放弃该话题。\u003c/li\u003e\n\u003cli\u003e简单说一下new/delete和malloc和free\u003c/li\u003e\n\u003cli\u003eC++11用过哪些？auto, unordered_map, 智能指针\u003c/li\u003e\n\u003cli\u003eTCP黏包问题如何解决？\u003c/li\u003e\n\u003cli\u003eTCP的拥塞控制？我答了拥塞窗口。他想听慢重传和快恢复\u003c/li\u003e\n\u003cli\u003eTIME_WAIT状态解释一下，如何解决这个问题？端口复用\u003c/li\u003e\n\u003cli\u003eA和B建立连接以后，A拔掉网线,那这个时候B和A的连接还在吗？哪一方会发现呢？不要答心跳包。面试官主动放弃该话题。\u003c/li\u003e\n\u003cli\u003e说一下多进程和多线程的区别。线程共享哪些内容。\u003c/li\u003e\n\u003cli\u003e又TM扯到项目中的线程数了。线程的模型是什么样的。\u003c/li\u003e\n\u003cli\u003e还有什么想问我的？问了他这个岗位做啥的。面向企业的视频会议。\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0306CVTE"},{"content":"webbench 测压软件 最高并发3W\nwebbench做测试时自身也会消耗CPU和内存资源，为了测试准确，需要将webbench安装在别的服务器上。\ntar -xzvf webbench-1.5.tar.gz cd webbench-1.5 apt-get install ctags make \u0026amp;\u0026amp; make install 测试\nwebbench -c 1000 -t 5 http://127.0.0.1:9999/index.html //1000个客户端 5秒钟时间 github git clone https://github.com/SYaoJun/WebServer.git //把仓库中的内容拷贝到linux系统中 回调函数 函数指针本身是指针变量，指向某个函数的入口地址。\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; int run(void(*step)(void)){ //回调函数的传参是声明的格式 int cnt = 0; while(1){ if(step != NULL) step(); cnt++; sleep(1); } return 0; } void cb(void){ //回调函数 puts(\u0026#34;记秒到时\u0026#34;); } int main(){ run(cb); return 0; } gcc cb.c main.c 信号函数 raise(SIGSEGV) //自己给自己进程发送信号 11 abort() //终止当前进程 测试1s打印多少个数\nalarm函数\n#include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main(){ alarm(1); //计时1s 到时后内核发送一个sigalarm信号终止 for(int i = 0;;i++) printf(\u0026#34;%d\\n\u0026#34;, i); return 0; } setitimer函数\n#include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;sys/time.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int my_alarm(int sec){ struct itimerval it, oldit; it.it_value.tv_sec = sec; //定时长度 it.it_value.tv_usec = 0; //微秒 it.it_interval.tv_sec = 0; //周期定时 it.it_interval.tv_usec = 0; int ret = setitimer(ITIMER_REAL, \u0026amp;it, \u0026amp;oldit); if(ret == -1){ perror(\u0026#34;setitimer error\u0026#34;); exit(1); } return oldit.it_value.tv_sec; } int main(){ my_alarm(1); //计时1s 到时后内核发送一个sigalarm信号终止 for(int i = 0;;i++) printf(\u0026#34;%d\\n\u0026#34;, i); return 0; } 创建线程 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; void* func(void* arg){ //必须为这种类型 printf(\u0026#34;in thread : thread id: %lu, process id: %u\\n\u0026#34;, pthread_self(), getpid()); } int main(void){ //创建线程 pthread_t tid; //重命名的unsigned long 类型 //创建线程API pthread_create(arg1, agr2, arg3, arg4) //arg1: 传入的线程tid地址 //arg2: 线程属性 通常设置为NULL //arg3: 线程执行的任务 函数指针 //arg4: 参数3传递的参数 printf(\u0026#34;in main 1 : thread id: %lu, process id: %u\\n\u0026#34;, pthread_self(), getpid()); int ret = pthread_create(\u0026amp;tid, NULL, func, NULL); if(ret != 0){ perror(\u0026#34;pthread_create error\u0026#34;); exit(1); } sleep(1); //主线程 等待子线程执行完毕 printf(\u0026#34;in main 2 : thread id: %lu, process id: %u\\n\u0026#34;, pthread_self(), getpid()); return 0; } 创建多个子线程 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; void* func(void* arg){ //必须为这种类型 int i = (int)arg; printf(\u0026#34;%dth thread id: %lu, process id: %u\\n\u0026#34;, i, pthread_self(), getpid()); } int main(void){ //创建线程 pthread_t tid; //重命名的unsigned long 类型 //创建线程API pthread_create(arg1, agr2, arg3, arg4) //arg1: 传入的线程tid地址 //arg2: 线程属性 通常设置为NULL //arg3: 线程执行的任务 函数指针 //arg4: 参数3传递的参数 int n = 5, ret; for(int i = 0; i \u0026lt; n; i++){ ret = pthread_create(\u0026amp;tid, NULL, func, (void*)i); if(ret != 0){ fprintf(stderr, \u0026#34;%s pthread_create error\u0026#34;, strerror(ret)); exit(1); } pthread_detach(tid); } sleep(n); //主线程 等待子线程执行完毕 return 0; } mysql使用 mysql在linux环境下结合C语言的使用\nsudo apt-get install mysql-client mysql-server //先安装mysql sudo apt-get install libmysql++-dev //安装库 先启动mysql库 设置好密码 然后使用c程序连接\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;mysql/mysql.h\u0026gt; int main(){ MYSQL mysql; MYSQL_RES *res; MYSQL_ROW row; int i, j; char *query = \u0026#34;select * from people;\u0026#34;; mysql_init(\u0026amp;mysql); //初始化 if(!mysql_real_connect(\u0026amp;mysql,\u0026#34;localhost\u0026#34;,\u0026#34;root\u0026#34;,\u0026#34;password\u0026#34;,\u0026#34;yaojun\u0026#34;,3306,NULL,0)){ //连接数据库 printf(\u0026#34;Error in connecting\u0026#34;); } if(mysql_query(\u0026amp;mysql,query)){ //查询数据库 printf(\u0026#34;Error in querying\u0026#34;); } res = mysql_store_result(\u0026amp;mysql); while(row = mysql_fetch_row(res)){ //读取数据库中的一行 for(i=0;i\u0026lt;mysql_num_fields(res);i++){ fprintf(stdout,\u0026#34;%s \u0026#34;,row[i]); } printf(\u0026#34;\\n\u0026#34;); } mysql_free_result(res); //释放 mysql_close(\u0026amp;mysql); //关闭 return 0; } 编译的命令\ngcc sql.c -lmysqlclient //生成a.out文件 执行 指针和数组 char str[]=\u0026#34;hello\u0026#34;; //字符串含\\0 6字节 char *url =\u0026#34;hello\u0026#34;; //指针64位机 8字节 cout\u0026lt;\u0026lt;sizeof(str)\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;sizeof(url)\u0026lt;\u0026lt;endl; CGI服务器 原理：输出到某个文件描述符上的内容直接发送到客户端连接对应的socket上，此处我们模拟了把服务器端输出到标准输出的内容，直接发送给客户端。\n测试\ntelnet 127.0.0.1 6666 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;netinet/in.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; //命令行参数指定IP和端口 int main(int argc, char *argv[]){ if(argc \u0026lt;= 2){ printf(\u0026#34;at least 3 arguments: file ip port, but you give %d\\n\u0026#34;, argc); return 1; } const char* ip = argv[1]; int port = atoi(argv[2]); int lfd, cfd, ret; struct sockaddr_in serv_addr, clie_addr; lfd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 assert(lfd \u0026gt;= 0); serv_addr.sin_family = AF_INET; serv_addr.sin_port = htons(port); inet_pton(AF_INET, ip, \u0026amp;serv_addr.sin_addr); //端口复用 此处没有卵用 int opt = 1; setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); ret = bind(lfd, (struct sockaddr *)\u0026amp;serv_addr, sizeof(serv_addr) ); assert(ret != -1); ret = listen(lfd, 128); //最大同时连接数 assert(ret != -1); socklen_t clie_addr_len; //套接字长度 clie_addr_len = sizeof(clie_addr); cfd = accept(lfd, (struct sockaddr*)\u0026amp;clie_addr, \u0026amp;clie_addr_len ); if(cfd \u0026lt; 0){ printf(\u0026#34;accept error: %d\u0026#34;, errno); }else{ close(STDOUT_FILENO); dup(cfd); //创建一个新的文件描述符 该文件描述符和原文件描述符指向相同的文件 管道和网络连接 printf(\u0026#34;good night! daisy!\\n\u0026#34;); close(cfd); } close(lfd); return 0; } EPOLLONESHOT事件 一个socket上的某个事件被触发多次，可能产生2个不同的线程处理同一个socket。我们期望的是一个socket在任一时刻都只被一个线程处理。对于注册了EPOLLONESHOT事件的文件描述符，操做系统最多触发其上注册的一个可读可写或者异常事件一次。注册了EPOLLONESHOT事件的socket一旦被某个线程处理完毕，应立即重置这个socket上的EPOLLONESHOT事件。\n监听socket不应设置为EPOLLONESHOT。\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;netinet/in.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;sys/epoll.h\u0026gt; #define MAX_SIZE 1024 //自定义的结构体 struct fds{ int epollfd; int sockfd; }; //设置文件描述符为非阻塞 void setnonblocking(int fd){ int old_option = fcntl(fd, F_GETFL); int new_option = old_option | O_NONBLOCK; fcntl(fd, F_SETFL, new_option); } //添加到epoll内核事件表中 void addfd(int epollfd, int fd, bool oneshot){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET; if(oneshot){ event.events |= EPOLLONESHOT; } epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, \u0026amp;event); //挂到红黑树上 setnonblocking(fd); //设置非阻塞 主要用在读写上 } //重置EPOLLONESHOT事件 void reset_oneshot(int epollfd, int fd){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET | EPOLLONESHOT; epoll_ctl(epollfd, EPOLL_CTL_MOD, fd, \u0026amp;event); //修改注册事件 } //工作线程 void* worker(void* arg){ int sockfd = ((fds*)arg)-\u0026gt;sockfd; int epollfd = ((fds*)arg)-\u0026gt;epollfd; printf(\u0026#34;start new thread to receive data on fd: %d\\n\u0026#34;, sockfd); char buf[MAX_SIZE]; memset(buf, \u0026#39;\\0\u0026#39;, MAX_SIZE); //循环读取sockfd上的数据 直到收到EAGAIN while(1){ int ret = recv(sockfd, buf, MAX_SIZE-1, 0); if(ret == 0){ close(sockfd); printf(\u0026#34;foreiner closed the connection\\n\u0026#34;); break; }else if(ret \u0026lt; 0){ if(errno == EAGAIN){ reset_oneshot(epollfd ,sockfd); printf(\u0026#34;read later\\n\u0026#34;); break; } }else{ printf(\u0026#34;get connection: %s\\n\u0026#34;, buf); //休眠5s模拟数据处理过程 sleep(5); } } printf(\u0026#34;end thread receiving data on fd: %d\\n\u0026#34;, sockfd); } //命令行参数指定IP和端口 int main(int argc, char *argv[]){ if(argc \u0026lt;= 2){ printf(\u0026#34;at least 3 arguments: file ip port, but you give %d\\n\u0026#34;, argc); return 1; } const char* ip = argv[1]; int port = atoi(argv[2]); int lfd, cfd, ret; struct sockaddr_in serv_addr, clie_addr; lfd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 assert(lfd \u0026gt;= 0); serv_addr.sin_family = AF_INET; serv_addr.sin_port = htons(port); inet_pton(AF_INET, ip, \u0026amp;serv_addr.sin_addr); //端口复用 此处没有卵用 int opt = 1; setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); ret = bind(lfd, (struct sockaddr *)\u0026amp;serv_addr, sizeof(serv_addr) ); assert(ret != -1); ret = listen(lfd, 128); //最大同时连接数 assert(ret != -1); epoll_event events[MAX_SIZE]; //返回的数组上限 int epollfd = epoll_create(10); assert(epollfd != -1); //注意监听的套接字不能设置为oneshot addfd(epollfd, lfd, false); //挂上红黑树监听 printf(\u0026#34;addfd\\n\u0026#34;); while(1){ ret = epoll_wait(epollfd, events, MAX_SIZE, -1); //永远不超时 if(ret \u0026lt; 0){ printf(\u0026#34;epoll failure\\n\u0026#34;); break; } for(int i = 0; i \u0026lt; ret; i++){ //循环处理有响应的事件 int sockfd = events[i].data.fd; if(sockfd == lfd){ //如果是监听事件则建立新的连接 printf(\u0026#34;lfd\\n\u0026#34;); socklen_t clie_addr_len; //套接字长度 clie_addr_len = sizeof(clie_addr); cfd = accept(lfd, (struct sockaddr*)\u0026amp;clie_addr, \u0026amp;clie_addr_len ); assert(cfd \u0026gt;= 0); //注册为oneshot事件 addfd(epollfd, cfd, true); //刚刚这里加入的事件加错了 }else if(events[i].events \u0026amp; EPOLLIN){ pthread_t tid; fds fds_for_new_worker; fds_for_new_worker.epollfd = epollfd; fds_for_new_worker.sockfd = sockfd; //新启动一个线程为sockfd服务 pthread_create(\u0026amp;tid, NULL, worker, (void*)\u0026amp;fds_for_new_worker); // pthread_detach(tid); //线程分离 } } } close(lfd); return 0; } 信号屏蔽字 主要函数\nsigaddset() sigprocmask() sigpending() 使用kill发送信号\nkill -6 PID 测试程序\n#include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;signal.h\u0026gt; void print(sigset_t* ped){ for(int i = 0; i \u0026lt; 32; i++){ if(sigismember(ped, i)==1){ putchar(\u0026#39;1\u0026#39;); }else putchar(\u0026#39;0\u0026#39;); } printf(\u0026#34;\\n\u0026#34;); } int main(void){ sigset_t myset, oldset, ped; sigemptyset(\u0026amp;myset); //设置自定义信号集 sigaddset(\u0026amp;myset, SIGINT); sigaddset(\u0026amp;myset, SIGSEGV); sigaddset(\u0026amp;myset, SIGQUIT); sigaddset(\u0026amp;myset, SIGABRT); //设置信号屏蔽字 sigprocmask(SIG_BLOCK, \u0026amp;myset, \u0026amp;oldset); while(1){ sigpending(\u0026amp;ped); print(\u0026amp;ped); sleep(2); } return 0; } sigaction信号捕捉函数 #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;signal.h\u0026gt; void docatch(int signo){ printf(\u0026#34;%d signal has been catched!\\n\u0026#34;, signo); } int main(void){ struct sigaction act; act.sa_handler = docatch; sigemptyset(\u0026amp;act.sa_mask); sigaddset(\u0026amp;act.sa_mask, SIGINT); sigaddset(\u0026amp;act.sa_mask, SIGSEGV); sigaddset(\u0026amp;act.sa_mask, SIGQUIT); act.sa_flags = 0; //默认属性 在信号函数处理期间 本信号再次到达默认屏蔽 sigaction(SIGINT, \u0026amp;act, NULL); while(1); return 0; } 统一事件源 把信号事件的处理放到epoll监听事件中去处理，统一了事件源。当调用信号处理函数时，信号处理函数通过管道将信息传达给epoll上的读端监听事件，再在主循环中处理事件。\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;netinet/in.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;sys/epoll.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #define MAX_SIZE 1024 //自定义的结构体 static int pipefd[2]; struct fds{ int epollfd; int sockfd; }; //设置文件描述符为非阻塞 void setnonblocking(int fd){ int old_option = fcntl(fd, F_GETFL); int new_option = old_option | O_NONBLOCK; fcntl(fd, F_SETFL, new_option); } //添加到epoll内核事件表中 void addfd(int epollfd, int fd, bool oneshot){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET; if(oneshot){ event.events |= EPOLLONESHOT; } epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, \u0026amp;event); //挂到红黑树上 setnonblocking(fd); //设置非阻塞 主要用在读写上 } //信号处理函数 void sig_handler(int sig){ int save_errno = errno; int msg = sig; //我猜想这里重新定义变量的原因在于传的是指针 同时为了保证可重入 send(pipefd[1], (char*)\u0026amp;msg, 1, 0); //pipefd[1]是非阻塞的如果发不出去直接返回 errno = save_errno; } //设置信号处理 void addsig(int sig){ struct sigaction sa; memset(\u0026amp;sa, \u0026#39;\\0\u0026#39;, sizeof(sa)); sa.sa_handler = sig_handler; sa.sa_flags |= SA_RESTART; sigfillset(\u0026amp;sa.sa_mask); // sigaddset(\u0026amp;sa.sa_mask, SIGSEGV); assert(sigaction(sig, \u0026amp;sa, NULL) != -1); //注册监听的信号 } //命令行参数指定IP和端口 int main(int argc, char *argv[]){ if(argc \u0026lt;= 2){ printf(\u0026#34;at least 3 arguments: file ip port, but you give %d\\n\u0026#34;, argc); return 1; } const char* ip = argv[1]; int port = atoi(argv[2]); int lfd, cfd, ret; struct sockaddr_in serv_addr, clie_addr; lfd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 assert(lfd \u0026gt;= 0); serv_addr.sin_family = AF_INET; serv_addr.sin_port = htons(port); inet_pton(AF_INET, ip, \u0026amp;serv_addr.sin_addr); //端口复用 此处没有卵用 int opt = 1; setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); //忽略SIGPIPE信号 signal(SIGPIPE, SIG_IGN); ret = bind(lfd, (struct sockaddr *)\u0026amp;serv_addr, sizeof(serv_addr) ); assert(ret != -1); ret = listen(lfd, 128); //最大同时连接数 assert(ret != -1); epoll_event events[MAX_SIZE]; //返回的数组上限 int epollfd = epoll_create(10); assert(epollfd != -1); //注意监听的套接字不能设置为oneshot addfd(epollfd, lfd, false); //挂上红黑树监听 /*使用socketpair创建全双工的管道*/ ret = socketpair(PF_UNIX, SOCK_STREAM, 0, pipefd); assert(ret != -1); setnonblocking(pipefd[1]); //把写入的管道端置为非阻塞 addfd( epollfd, pipefd[0], false); //设置为oneshot /*设置一些信号的处理函数*/ addsig(SIGHUP); addsig(SIGCHLD); addsig(SIGTERM); addsig(SIGINT); addsig(SIGSEGV); bool stop_server = false; while(!stop_server){ printf(\u0026#34;epoll_wait...\\n\u0026#34;); ret = epoll_wait(epollfd, events, MAX_SIZE, -1); //永远不超时 if((ret \u0026lt; 0) \u0026amp;\u0026amp; (errno != EINTR)){ //这里要设置 被系统调用打断的不算失败 errno不是ret perror(\u0026#34;epoll failure\u0026#34;); exit(1); } for(int i = 0; i \u0026lt; ret; i++){ //循环处理有响应的事件 int sockfd = events[i].data.fd; if(sockfd == lfd){ //如果是监听事件则建立新的连接 socklen_t clie_addr_len; //套接字长度 clie_addr_len = sizeof(clie_addr); cfd = accept(lfd, (struct sockaddr*)\u0026amp;clie_addr, \u0026amp;clie_addr_len ); assert(cfd \u0026gt;= 0); //注册为oneshot事件 addfd(epollfd, cfd, true); /*如果就绪的文件描述符是pipefd[0],就处理信号*/ }else if((sockfd == pipefd[0]) \u0026amp;\u0026amp;(events[i].events \u0026amp; EPOLLIN)){ char buf[MAX_SIZE]; int num = recv(pipefd[0], buf, sizeof(buf), 0); if(num == -1) continue; else if(num == 0) continue; else{ //可能管道有多个信号满足 每次读出一个字符进行处理 for(int j = 0; j \u0026lt; num; j++){ switch(buf[j]){ case SIGSEGV: puts(\u0026#34;段错误信号已处理，收到请回答！\u0026#34;); break; case SIGCHLD: case SIGHUP: continue; case SIGTERM: case SIGINT: stop_server = true;break; } } } }else{} } } printf(\u0026#34;close fds\\n\u0026#34;); close(lfd); close(pipefd[0]); close(pipefd[1]); return 0; } 单例模式 #include \u0026lt;iostream\u0026gt; #include \u0026lt;atomic\u0026gt; #include \u0026lt;mutex\u0026gt; using namespace std; class Singleton{ private: //无法调用构造函数 Singleton(); Singleton(const Singleton\u0026amp; other); public: static Singleton* getInstance(); static Singleton* m_instance; } Singleton* Singleton::m_instance = nullptr; //懒汉式 单线程版 Singleton* Singleton::getInstance(){ if(m_instance == nullptr){ m_instance = new Singleton(); } return m_instance; } //多线程版 Singleton* Singleton::getInstance(){ LOCK lock; if(m_instance == nullptr){ m_instance = new Singleton(); } return m_instance; } 当前时间 #include \u0026lt;time.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main(void){ time_t tm; time(\u0026amp;tm); char time_string[128]; ctime_r(\u0026amp;tm, time_string); printf(\u0026#34;%s\u0026#34;, time_string); return 0; } 初阶日志系统 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;mutex\u0026gt; #include \u0026lt;atomic\u0026gt; using namespace std; class Logger{ public: static Logger* get_instance(); static Logger* log; static mutex log_mutex; static void write_log(int level, char* s); static void create_file(); static int fd; private: Logger(); Logger(const Logger\u0026amp; other); ~Logger(); }; Logger* Logger::log = NULL; mutex Logger::log_mutex; int Logger::fd = 0; Logger::Logger(){}; Logger::~Logger(){ if(log != NULL){ delete log; log = NULL; } close(fd); } Logger* Logger::get_instance(){ if(log == NULL){ log_mutex.lock(); if(log == NULL){ log = new Logger(); } log_mutex.unlock(); } return log; } void Logger::create_file(){ fd = open(\u0026#34;logger.txt\u0026#34;, O_RDWR|O_CREAT|O_TRUNC, 777); assert(fd \u0026gt; 0); } void Logger::write_log(int level, char* s){ int n = strlen(s); log_mutex.lock(); write(fd, s, n); log_mutex.unlock(); } 单例模式 //C++11 atomic std::atomic\u0026lt;Logger*\u0026gt; Logger::log; std::mutex Logger::log_mutex; Logger* Logger::get_instance(){ Logger* tmp = log.load(std::memory_order_relaxed); std::atomic_thread_fence(std::memory_order_acquire); //获取内存fence if(tmp == NULL){ std::lock_guard\u0026lt;std::mutex\u0026gt; lock(log_mutex); tmp = log.load(std::memory_order_relaxed); if(tmp == NUll){ tmp = new Logger; std::atomic_thread_fence(std::memory_order_release); //释放内存fence log.store(tmp, std::memory_order_relaxed); } } return tmp; } 主线程测试 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026#34;logger.h\u0026#34; void* func(void* arg){ char buf[1024]; sprintf(buf, \u0026#34;thread id: %lu, process id: %u\\n\u0026#34;, pthread_self(), getpid()); Logger::log-\u0026gt;write_log(2, buf); } int main(void){ pthread_t tid; //重命名的unsigned long 类型 Logger::log-\u0026gt;create_file(); int n = 5, ret; for(int i = 0; i \u0026lt; n; i++){ // int t = i; ret = pthread_create(\u0026amp;tid, NULL, func, NULL); if(ret != 0){ fprintf(stderr, \u0026#34;%s pthread_create error\u0026#34;, strerror(ret)); exit(1); } pthread_detach(tid); } sleep(n-4); //主线程 等待子线程执行完毕 return 0; } 时间堆 把监听文件描述符加入后，就启动定时器。\nexec函数族 在一个程序中运行另一个程序。当进程调用exec函数时，该进程的用户空间代码和数据完全被新程序替换。调用exec并不创建新进程，所以调用exec前后进程的ID并不改变。\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; int main(){ pid_t pid = fork(); if(pid == -1){ perror(\u0026#34;fork error!\u0026#34;); exit(-1); }else if(pid == 0){ execlp(\u0026#34;ls\u0026#34;, \u0026#34;anythingok\u0026#34;, \u0026#34;-l\u0026#34;, \u0026#34;-a\u0026#34;, NULL); }else if(pid \u0026gt; 0){ sleep(1); puts(\u0026#34;parent over!\u0026#34;); } return 0; } 管道 #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(){ pid_t fd[2]; pipe(fd); //创建管道 int ret = fork(); if(ret \u0026gt; 0){ //父进程 父写 fd[0]读 fd[1]写 close(fd[0]); char *str =\u0026#34;hello world\\n\u0026#34;; write(fd[1], str, strlen(str)); sleep(1); }else if(ret == 0){ //子进程 子读 fd[1]关闭 close(fd[1]); char buf[1024]; int n = read(fd[0], buf, sizeof(buf)); //写到显示器上 write(1, buf, n); } return 0; } CGI使用管道和exec实现 hello里面的输入和输出都被重定向了\n#include\u0026lt;stdio.h\u0026gt; #include\u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; int main(int agrc, char* argv[]){ char bf[100]; read(STDIN_FILENO, bf, sizeof(bf)); sprintf(bf, \u0026#34;Content-Type:text/html;\\r\\n\\r\\nhello world, 你好!\u0026#34;); printf(\u0026#34;%s\u0026#34;, bf); return 0; } 主进程调用已经编译完毕的hello可执行文件\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; int main(){ pid_t pid; int status; int cgi_input[2]; int cgi_output[2]; char buf[1024]; /*创建输入管道*/ if(pipe(cgi_input) \u0026lt; 0){ perror(\u0026#34;pipe error\u0026#34;); exit(1); } /*创建输出管道*/ if(pipe(cgi_output) \u0026lt; 0){ perror(\u0026#34;pipe error\u0026#34;); exit(1); } /*创建子进程*/ if((pid = fork()) \u0026lt; 0){ perror(\u0026#34;fork error!\u0026#34;); exit(-1); } if(pid == 0){ dup2(cgi_input[0], 0); /*将子进程的STDIN重定向到cgi_input[0]*/ dup2(cgi_output[1], 1); /*将子进程的STDOUT重定向到cgi_output[1]*/ /*关闭剩余的两端*/ close(cgi_input[1]); close(cgi_output[0]); /*执行exec文件 即cgi*/ execl(\u0026#34;hello\u0026#34;, \u0026#34;anythingok\u0026#34;, NULL); exit(0); }else if(pid \u0026gt; 0){ /*父进程先给子进程发送数据 然后等待子进程执行完 再读数据*/ /*关闭不用的两个端口*/ close(cgi_input[0]); close(cgi_output[1]); char tmp[100]=\u0026#34;hello child process\u0026#34;; int len = strlen(tmp); /*父进程先写数据*/ write(cgi_input[1], tmp, len); /*父进程阻塞等待读入*/ int n = read(cgi_output[0], buf, sizeof(buf)); int ret = write(STDOUT_FILENO, buf, n); /*关闭管道*/ close(cgi_input[1]); close(cgi_output[0]); waitpid(pid, \u0026amp;status, 0); } return 0; } 多线程服务器 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;sys/epoll.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #include \u0026lt;dirent.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; #define SERV_PORT 9999 #define MAXSIZE 2048 void wait_child(int signo){ while(waitpid(0, NULL, WNOHANG) \u0026gt; 0); return; } int createlistenfd(){ struct sockaddr_in servaddr; int ret; int fd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 if(fd == -1){ perror(\u0026#34;socket error\u0026#34;); exit(1); } //初始化servaddr结构体 bzero(\u0026amp;servaddr, sizeof(servaddr)); servaddr.sin_family = AF_INET; servaddr.sin_port = htons(SERV_PORT); servaddr.sin_addr.s_addr = htonl(INADDR_ANY); //端口复用 int opt = 1; setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); //绑定端口 ret = bind(fd, (struct sockaddr *)\u0026amp;servaddr, sizeof(servaddr)); if (ret == -1){ perror(\u0026#34;bind error\u0026#34;); exit(1); } //设置监听上限 ret = listen(fd, 128); if(ret==-1){ perror(\u0026#34;listen error\u0026#34;); exit(1); } return fd; } void work(int cfd, char* s){ char filename[100]={0}; sscanf(s, \u0026#34;GET /%s\u0026#34;, filename); char *mime; if(strstr(s, \u0026#34;.html\u0026#34;)) mime = \u0026#34;text/html\u0026#34;; else if(strstr(s, \u0026#34;.jpg\u0026#34;)) mime=\u0026#34;image/jpeg\u0026#34;; //构建响应头 发给客户端 // printf(\u0026#34;%s\\n\u0026#34;, filename); char response[MAXSIZE]; sprintf(response, \u0026#34;HTTP/1.1 200 OK\\r\\nContent-Type: %s\\r\\n\\r\\n\u0026#34;, mime); //读取具体的文件内容 int filefd = open(filename, O_RDONLY); if(filefd == -1){ perror(\u0026#34;open error\u0026#34;); sleep(0.5); filefd = open(filename, O_RDONLY); //很奇怪 为什么睡几秒钟之后再打开就不会出错了 if(filefd == -1) exit(1); } int len = strlen(response); int n = read(filefd, response+len, sizeof(response)-len); write(cfd, response, len+n); close(filefd); } int main(void){ int lfd = createlistenfd(); struct sockaddr_in clientaddr; socklen_t clientaddrlen = sizeof(clientaddr); //这是一个传出参数 //accept接受连接请求 pid_t pid; int cfd; while(1){ cfd = accept(lfd, (struct sockaddr *)\u0026amp;clientaddr, \u0026amp;clientaddrlen); if (cfd == -1){ perror(\u0026#34;accept error\u0026#34;); exit(1); } //创建子线程 主线程负责监听和回收子进程 pid = fork(); if(pid \u0026lt; 0){ perror(\u0026#34;fork error\u0026#34;); exit(1); } else if(pid == 0) break; else{ close(cfd); //关闭接收文件描述符 signal(SIGCHLD, wait_child); } } if(pid == 0){ close(lfd); //关闭监听文件描述符 //打印客户端IP和port char buf[MAXSIZE] = {0}; printf(\u0026#34;client IP: %s, client port: %d\\n\u0026#34;, inet_ntop(AF_INET, \u0026amp;clientaddr.sin_addr, buf, sizeof(buf)), ntohs(clientaddr.sin_port)); int n = read(cfd, buf, sizeof(buf)); if(n==0){ close(cfd); } // write(1, buf, n); else work(cfd, buf); } return 0; } 处理客户端注册信息的cgi 存在一些问题，每个网页好像没有传输完成，浏览器总是转圈。 需要结合上面hello程序查询数据库，hello程序的注册还没完善，只能做到查询。等以后有空再做吧。 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;netinet/in.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;sys/epoll.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; #define MAX_SIZE 1024 //自定义的结构体 struct fds{ int epollfd; int sockfd; }; //设置文件描述符为非阻塞 void setnonblocking(int fd){ int old_option = fcntl(fd, F_GETFL); int new_option = old_option | O_NONBLOCK; fcntl(fd, F_SETFL, new_option); } //添加到epoll内核事件表中 void addfd(int epollfd, int fd, bool oneshot){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET; if(oneshot){ event.events |= EPOLLONESHOT; } epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, \u0026amp;event); //挂到红黑树上 setnonblocking(fd); //设置非阻塞 主要用在读写上 } //移除epoll事件 void removefd(int epollfd, int fd){ epoll_ctl(epollfd, EPOLL_CTL_DEL, fd, NULL); close(fd); } //重置EPOLLONESHOT事件 void reset_oneshot(int epollfd, int fd){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET | EPOLLONESHOT; epoll_ctl(epollfd, EPOLL_CTL_MOD, fd, \u0026amp;event); //修改注册事件 } void accept_request(int epollfd, int sockfd, char *s){ char method[32], filename[32], account[32], password[32], phone[32]; sscanf(s, \u0026#34;%s /%s\u0026#34;, method, filename); if(strcasecmp(method, \u0026#34;POST\u0026#34;) == 0){ int len = strlen(s); int i; for(i = 0; i \u0026lt; len; i++){ if(i+2\u0026lt;len \u0026amp;\u0026amp; s[i]==\u0026#39;\\n\u0026#39; \u0026amp;\u0026amp; s[i+1]==\u0026#39;\\r\u0026#39;) break; } int j; i=i+12; for(j = 0; s[i+j]!=\u0026#39;\u0026amp;\u0026#39;; j++) account[j] = s[j+i]; i = i+j+6; for(j = 0; s[i+j]!=\u0026#39;\u0026amp;\u0026#39;; j++) password[j] = s[j+i]; /*2020.4.7成功解析出来账号和密码*/ pid_t pid; int status; int cgi_input[2]; int cgi_output[2]; char buff[1024]; /*创建输入管道*/ if(pipe(cgi_input) \u0026lt; 0){ perror(\u0026#34;pipe error\u0026#34;); exit(1); } /*创建输出管道*/ if(pipe(cgi_output) \u0026lt; 0){ perror(\u0026#34;pipe error\u0026#34;); exit(1); } /*创建子进程*/ if((pid = fork()) \u0026lt; 0){ perror(\u0026#34;fork error!\u0026#34;); exit(-1); } if(pid == 0){ dup2(cgi_input[0], 0); /*将子进程的STDIN重定向到cgi_input[0]*/ dup2(cgi_output[1], 1); /*将子进程的STDOUT重定向到cgi_output[1]*/ /*关闭剩余的两端*/ close(cgi_input[1]); close(cgi_output[0]); /*执行exec文件 即cgi*/ execl(\u0026#34;hello\u0026#34;, \u0026#34;anythingok\u0026#34;, NULL); exit(0); }else if(pid \u0026gt; 0){ /*父进程先给子进程发送数据 然后等待子进程执行完 再读数据*/ /*关闭不用的两个端口*/ close(cgi_input[0]); close(cgi_output[1]); /*父进程先写数据*/ int len = strlen(account); write(cgi_input[1], account, len); /*父进程阻塞等待读入*/ int n = read(cgi_output[0], buff, sizeof(buff)); if(strcmp(buff, password)==0\u0026amp;\u0026amp;strlen(password) != 0){ puts(\u0026#34;密码正确\u0026#34;); }else{ puts(\u0026#34;密码错误\u0026#34;); strcpy(filename, \u0026#34;register.html\u0026#34;); } // int ret = write(STDOUT_FILENO, buf, n); /*关闭管道*/ close(cgi_input[1]); close(cgi_output[0]); waitpid(pid, \u0026amp;status, 0); } } puts(filename); char mime[64]; if(strstr(s, \u0026#34;.html\u0026#34;)) strcpy(mime,\u0026#34;text/html\u0026#34;); else if(strstr(s, \u0026#34;.jpg\u0026#34;)) strcpy(mime,\u0026#34;image/jpeg\u0026#34;); char response[MAX_SIZE+MAX_SIZE]; sprintf(response, \u0026#34;HTTP/1.1 200 OK\\r\\nContent-Type: %s\\r\\n\\r\\n\u0026#34;, mime); int filefd = open(filename, O_RDONLY); if(filefd == -1){ perror(\u0026#34;open error\u0026#34;); exit(1); } int len = strlen(response); int n = read(filefd, response+len, sizeof(response)-len); write(sockfd, response, len+n); close(filefd); } //工作线程 void* worker(void* arg){ int sockfd = ((fds*)arg)-\u0026gt;sockfd; int epollfd = ((fds*)arg)-\u0026gt;epollfd; char buf[MAX_SIZE]; memset(buf, \u0026#39;\\0\u0026#39;, MAX_SIZE); //循环读取sockfd上的数据 直到收到EAGAIN while(1){ int ret = recv(sockfd, buf, MAX_SIZE-1, 0); if(ret == 0){ removefd(epollfd, sockfd); printf(\u0026#34;foreiner closed the connection\\n\u0026#34;); break; }else if(ret \u0026lt; 0){ if(errno == EAGAIN){ // reset_oneshot(epollfd ,sockfd); printf(\u0026#34;read later\\n\u0026#34;); break; } }else{ printf(\u0026#34;get connection:\\n\u0026#34;); //休眠5s模拟数据处理过程 accept_request(epollfd, sockfd, buf); sleep(5); break; } } } //命令行参数指定IP和端口 int main(int argc, char *argv[]){ if(argc \u0026lt; 2){ printf(\u0026#34;at least 2 arguments: file port, but you give %d\\n\u0026#34;, argc); return 1; } int port = atoi(argv[1]); int lfd, cfd, ret; struct sockaddr_in serv_addr, clie_addr; lfd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 assert(lfd \u0026gt;= 0); /*初始化服务器端的套接字地址*/ serv_addr.sin_family = AF_INET; serv_addr.sin_port = htons(port); serv_addr.sin_addr.s_addr = htonl(INADDR_ANY); //端口复用 此处没有卵用 int opt = 1; setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); ret = bind(lfd, (struct sockaddr *)\u0026amp;serv_addr, sizeof(serv_addr) ); assert(ret != -1); ret = listen(lfd, 128); //最大同时连接数 assert(ret != -1); epoll_event events[MAX_SIZE]; //返回的数组上限 int epollfd = epoll_create(10); assert(epollfd != -1); //注意监听的套接字不能设置为oneshot addfd(epollfd, lfd, false); //挂上红黑树监听 while(1){ ret = epoll_wait(epollfd, events, MAX_SIZE, -1); //永远不超时 if(ret \u0026lt; 0){ printf(\u0026#34;epoll failure\\n\u0026#34;); break; } for(int i = 0; i \u0026lt; ret; i++){ //循环处理有响应的事件 int sockfd = events[i].data.fd; if(sockfd == lfd){ //如果是监听事件则建立新的连接 socklen_t clie_addr_len; //套接字长度 clie_addr_len = sizeof(clie_addr); cfd = accept(lfd, (struct sockaddr*)\u0026amp;clie_addr, \u0026amp;clie_addr_len ); assert(cfd \u0026gt;= 0); //注册为oneshot事件 addfd(epollfd, cfd, false); //刚刚这里加入的事件加错了 }else if(events[i].events \u0026amp; EPOLLIN){ pthread_t tid; fds fds_for_new_worker; fds_for_new_worker.epollfd = epollfd; fds_for_new_worker.sockfd = sockfd; //新启动一个线程为sockfd服务 pthread_create(\u0026amp;tid, NULL, worker, (void*)\u0026amp;fds_for_new_worker); // pthread_detach(tid); //线程分离 } } } close(lfd); return 0; } 线程中调用fork函数 pthread_atfork函数确保fork调用后父进程和子进程都拥有一个清楚的锁状态。每个线程都可以独立的设置信号掩码。\nwaitpid回收子进程 #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; void sigchild_handler(int sig){ //在执行SIGCHLD信号期间 可能有多个SIGCHLD到达，但是未决信号集只记录一次。 //所以需要调用while循环回收再退出 while(waitpid(-1, NULL, WNOHANG) \u0026gt; 0){ puts(\u0026#34;回收成功\u0026#34;); } return; } int main(){ pid_t pid; int n = 5, i; signal(SIGCHLD, sigchild_handler); for(i = 0; i \u0026lt; n; i++){ pid = fork(); if(pid \u0026lt; 0){ perror(\u0026#34;fork error\u0026#34;); exit(1); }else if(pid == 0) break; //子进程 直接退出 } if(i \u0026lt; n){ //子进程 sleep(i); printf(\u0026#34;I am %dth child.\\n\u0026#34;, i); }else{ while(1){ //父进程不退出 sleep(1); printf(\u0026#34;I am parent %u\\n\u0026#34;, getpid()); } } return 0; } 自旋锁 线程同步的一种方式。使用自旋锁的线程会反复检查锁变量是否可用。自旋锁不会让出CPU，一种忙等待状态。死循环等待锁被释放。自旋锁避免了进程或线程上下文的开销。自旋锁不适合在单CPU中使用。\n#include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; const int N = 1e7; int num = 0; pthread_spinlock_t spin_lock; void *producer(void *){ int times = N; while(times--){ pthread_spin_lock(\u0026amp;spin_lock); ++num; pthread_spin_unlock(\u0026amp;spin_lock); } } void *comsumer(void*){ int times = N; while(times--){ pthread_spin_lock(\u0026amp;spin_lock); --num; pthread_spin_unlock(\u0026amp;spin_lock); } } int main(){ pthread_spin_init(\u0026amp;spin_lock, 0); pthread_t th1, th2; pthread_create(\u0026amp;th1, NULL, \u0026amp;producer, NULL); pthread_create(\u0026amp;th2, NULL, \u0026amp;comsumer, NULL); pthread_join(th1, NULL); pthread_join(th2, NULL); printf(\u0026#34;num = %d\\n\u0026#34;, num); return 0; } 条件变量 条件变量本身不是锁，但它可以造成线程阻塞。通常与互斥锁配合使用。给多线程提供一个汇合的场所。\npthread_cond_wait(\u0026amp;cond, \u0026amp;mutex) 1. 阻塞等待该条件变量直到满足 2.释放已经掌握的互斥锁 3.满足条件后重新拿锁 #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; const int MAX_BUF = 100; int num = 0; pthread_cond_t cond = PTHREAD_COND_INITIALIZER; pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; void *producer(void *){ while(true){ pthread_mutex_lock(\u0026amp;mutex); while(num \u0026gt;= MAX_BUF){ //由于阻塞解除时，只有一个物品可用 但是却有多个线程解除阻塞 所以需要循环检测一次 //满了 等待消费者消费 pthread_cond_wait(\u0026amp;cond, \u0026amp;mutex); printf(\u0026#34;缓冲区满了 等待消费者消费\\n\u0026#34;); } //生产一个物品 ++num; printf(\u0026#34;生产一个产品，当前产品数量为：%d\\n\u0026#34;, num); sleep(1); pthread_mutex_unlock(\u0026amp;mutex); //通知消费者可消费了 pthread_cond_signal(\u0026amp;cond); printf(\u0026#34;通知消费者...\\n\u0026#34;); sleep(1); } } void *comsumer(void*){ while(true){ pthread_mutex_lock(\u0026amp;mutex); while(num \u0026lt;= 0){ //缓冲区为空 等待生产者生产 pthread_cond_wait(\u0026amp;cond, \u0026amp;mutex); printf(\u0026#34;缓冲区空了 等待生产者生产\\n\u0026#34;); } //生产一个物品 --num; printf(\u0026#34;消费一个产品，当前产品数量为：%d\\n\u0026#34;, num); sleep(1); pthread_mutex_unlock(\u0026amp;mutex); //通知消费者可消费了 pthread_cond_signal(\u0026amp;cond); printf(\u0026#34;通知生产者...\\n\u0026#34;); } } int main(){ pthread_t th1, th2; pthread_create(\u0026amp;th1, NULL, \u0026amp;producer, NULL); pthread_create(\u0026amp;th2, NULL, \u0026amp;comsumer, NULL); pthread_join(th1, NULL); pthread_join(th2, NULL); printf(\u0026#34;num = %d\\n\u0026#34;, num); return 0; } ","permalink":"//localhost:1313/posts/006%E9%A1%B9%E7%9B%AE/","summary":"\u003ch2 id=\"webbench\"\u003ewebbench\u003c/h2\u003e\n\u003cp\u003e测压软件 最高并发3W\u003c/p\u003e\n\u003cp\u003ewebbench做测试时自身也会消耗CPU和内存资源，为了测试准确，需要将webbench安装在别的服务器上。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etar -xzvf webbench-1.5.tar.gz\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e webbench-1.5\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eapt-get install ctags\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emake \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e make install\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e测试\u003c/p\u003e","title":"006项目"},{"content":"单例模式 class A{ public: static A* getInstance(); static A* instance; private: A(); ~A(); }; A* A::instance = nullptr; //内存读写reorder不安全 导致双检查锁失效 //先分配内存 再执行构造器 最后返回给实例 //编译器的优化 A* A::getInstance(){ //读没有问题 写就有问题 //锁前检查 锁的粒度过大 锁后检查安全性 if(instance==nullptr){ mutex.lock(); if(instance==nullptr) instance = new A(); mutex.unlock(); } return instance; } 快排 归并 堆排 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; using namespace std; //快排 时间复杂度 平均nlogn 空间复杂度O(1) void quick_sort(int arr[], int l, int r){ if(l \u0026gt;= r) return; int x = arr[l+r \u0026gt;\u0026gt; 1]; int i = l-1, j = r+1; while(i \u0026lt; j){ while(arr[++i] \u0026lt; x); while(arr[--j] \u0026gt; x); if(i \u0026lt; j) swap(arr[i], arr[j]); } quick_sort(arr, l, j); quick_sort(arr, j+1, r); } //归并 //时间复杂度NlongN 空间复杂度N int tmp[105]; void merge_sort(int arr[], int l, int r){ if(l \u0026gt;= r) return; int mid = (l + r)\u0026gt;\u0026gt;1; merge_sort(arr, l, mid); merge_sort(arr, mid+1, r); //合并 int i = l, j = mid+1, k = 0; while(i \u0026lt;= mid \u0026amp;\u0026amp; j \u0026lt;= r){ //i和j注意了 if(arr[i] \u0026lt; arr[j]) tmp[k++] = arr[i++]; else tmp[k++] = arr[j++]; } while(i \u0026lt;= mid) tmp[k++] = arr[i++]; while(j \u0026lt;= r) tmp[k++] = arr[j++]; for(int i = 0; i \u0026lt; k; i++){ arr[l+i] = tmp[i]; } } //大根堆 把大交换上去 void heapify(int arr[], int r, int n){ int i = 2*r+1, j = 2*r+2; int mx = r; if(i \u0026lt; n \u0026amp;\u0026amp; arr[i] \u0026gt; arr[mx]) mx = i; if(j \u0026lt; n \u0026amp;\u0026amp; arr[j] \u0026gt; arr[mx]) mx = j; if(mx != r) { swap(arr[mx], arr[r]); heapify(arr, mx, n); } } //堆排序 堆化 堆顶取出交换到末尾去 void heap_sort(int arr[], int n){ for(int i = n; i \u0026gt;= 0; i--){ heapify(arr, i, n); //当前的点 总共的点 } //交换完成 for(int i = n-1; i \u0026gt;= 0; i--){ swap(arr[0], arr[i]); heapify(arr, 0, i); //总量减1 } } int main(){ int arr[]{1,93,6,45,2,7,8,45,2123,239,0,3}; int n = 12; // merge_sort(arr, 0, n-1); //如果从0编号 那么儿子节点为2i+1 2i+2 //最后一个节点是啥 heap_sort(arr, n); for(int i = 0; i \u0026lt; n; i++) printf(\u0026#34;%d \u0026#34;, arr[i]); puts(\u0026#34;\u0026#34;); return 0; } kmp算法 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;string\u0026gt; using namespace std; int Next[105]; void getNext(string p){ //按照左神讲的 考查的是当前位置的前一个字符串的最长前后缀 Next[0] = -1; Next[1] = 0; int cn = 0, i = 2; int n = p.size(); while(i \u0026lt; n){ if(p[cn] == p[i-1]) Next[i++] = ++cn; else if(cn) cn = Next[cn]; else Next[i++] = 0; //前后缀为0 } } void kmp(string p, string s){ //首先求next数组 getNext(p); int i = 0, j = 0; int m = s.size(); int n = p.size(); while(i \u0026lt; m \u0026amp;\u0026amp; j \u0026lt; n){ if(s[i] == p[j]) i++, j++; else if(Next[j] == -1) i++; //开头不匹配 else j = Next[j]; if(j==n){ cout\u0026lt;\u0026lt;i-n\u0026lt;\u0026lt;endl; //起始位置 j = Next[j-1]; i--; } } } int main(){ string text = \u0026#34;helloworldllo\u0026#34;; string pattern = \u0026#34;llo\u0026#34;; kmp(pattern, text); return 0; } LRU算法 strcpy和memcpy #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;string\u0026gt; #include \u0026lt;cstring\u0026gt; using namespace std; //内存拷贝函数 按字节拷贝 void* my_memcpy(void* dest, void* src, size_t count){ if(dest == NULL || src == NULL) return NULL; char* pdest = (char*) dest; char* psrc = (char*) src; while(count--){ *pdest++ = *psrc++; } return dest; } //字符串拷贝函数 仅用来拷贝字符串 char* my_strcpy(char* dest, const char* src){ if(dest == NULL || src ==NULL) return NULL; char* pdest = dest; while((*dest++ = *src++) != \u0026#39;\\0\u0026#39;); return pdest; } int main(){ char src[] =\u0026#34;hello\u0026#34;; char dest[100]; //my_memcpy(dest, src, strlen(src)); my_strcpy(dest, src); printf(\u0026#34;%s\\n\u0026#34;, src); return 0; } string类 class String{ public: String(const char* str = NULL); //通用构造函数 String(const String\u0026amp; str); //拷贝构造函数 ~String(); String\u0026amp; operator+(const String \u0026amp;str); String\u0026amp; operator+=(const String \u0026amp;str); char\u0026amp; operator[](const int n) const; String operator=(const String \u0026amp;str) const; bool operator==(const String \u0026amp;str)const; bool operator\u0026lt;(const String \u0026amp;str) const; bool operator\u0026lt;(const String \u0026amp;str) const; size_t size const; //获取长度 //流运算符\u0026gt;\u0026gt; \u0026lt;\u0026lt; private: char* data; //字符串 size_t length; //长度 } String::String(const char* str){ //通用构造函数 if(!str){ length = 0; data = new char[1]; *data=\u0026#39;\\0\u0026#39;; }else{ length = strlen(str); //对空指针调用strlen会导致内存错误 data = new char[length+1]; strcpy(data, str); } } String::String(const String\u0026amp; str){ //拷贝构造 length = str.length; data = new char[length+1]; strcpy(data, str.data); } //析构 String::~String(){ delete []data; length = 0; } //赋值重载 String\u0026amp; String::operator=(const String \u0026amp;str){ delete []data; length = str.length; data = new char[length+1]; strcpy(data, str.data); return *this; } 智能指针shared_ptr #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; using namespace std; template \u0026lt;typename T\u0026gt; class SmartPtr{ private: T * ptr; int* use_count(); SmartPtr(T* p); SmartPtr(const SmartPtr\u0026lt;T\u0026gt; \u0026amp; orig);//拷贝 SmartPtr\u0026lt;T\u0026gt;\u0026amp; operator=(const SmartPtr\u0026lt;T\u0026gt;\u0026amp; orig); ~SmartPtr(); } SmartPtr::SmartPtr(T* p){ ptr = p; *use_count = 1; } SmartPtr::~SmartPtr(){ //析构 delete ptr; ptr = nullptr; delete use_count; use_count = nullptr; } int main(){ return 0; } 写一个函数在main函数执行前先运行 #include \u0026lt;iostream\u0026gt; using namespace std; class Hello{ public: Hello(){ cout\u0026lt;\u0026lt;\u0026#34;before main!\u0026#34;\u0026lt;\u0026lt;endl; } }; Hello w; //全局变量在main之前执行 int main(){ cout\u0026lt;\u0026lt;\u0026#34;I am main\u0026#34;\u0026lt;\u0026lt;endl; return 0; } 匿名管道pipe #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(){ pid_t fd[2]; pipe(fd); //创建管道 int ret = fork(); if(ret \u0026gt; 0){ //父进程 父写 fd[0]读 fd[1]写 close(fd[0]); char *str =\u0026#34;hello world\\n\u0026#34;; write(fd[1], str, strlen(str)); sleep(1); }else if(ret == 0){ //子进程 子读 fd[1]关闭 close(fd[1]); char buf[1024]; int n = read(fd[0], buf, sizeof(buf)); //写到显示器上 write(1, buf, n); } return 0; } rand7产生rand10 leetcode470\nclass Solution { public: int rand10() { int t; while(true){ t = rand7() + (rand7()-1) * 7; if(t \u0026lt;= 40) return t%10 +1; }; return 0; } }; 反转二叉树 class Solution { public: TreeNode* invertTree(TreeNode* root) { //遍历所有点 然后交换左右孩子 dfs(root); return root; } void dfs(TreeNode* root){ if(!root) return; dfs(root-\u0026gt;left); dfs(root-\u0026gt;right); swap(root-\u0026gt;left, root-\u0026gt;right); } }; ","permalink":"//localhost:1313/posts/005%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","summary":"\u003ch2 id=\"单例模式\"\u003e单例模式\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eclass\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nl\"\u003epublic\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nf\"\u003egetInstance\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nl\"\u003eprivate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nf\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t    \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"nf\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//内存读写reorder不安全 导致双检查锁失效\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//先分配内存 再执行构造器 最后返回给实例\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//编译器的优化 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"nf\"\u003egetInstance\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e//读没有问题 写就有问题 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\u003cspan class=\"c1\"\u003e//锁前检查 锁的粒度过大 锁后检查安全性 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003emutex\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003einstance\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"nf\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003emutex\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eunlock\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"快排-归并-堆排\"\u003e快排 归并 堆排\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//快排 时间复杂度 平均nlogn 空间复杂度O(1) \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003equick_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eswap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003equick_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003equick_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//归并\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//时间复杂度NlongN  空间复杂度N\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e105\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003emerge_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003emerge_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"nf\"\u003emerge_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e//合并\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//i和j注意了\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//大根堆 把大交换上去\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eheapify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003emx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003emx\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003emx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003emx\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003emx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emx\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eswap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003emx\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eheapify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emx\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//堆排序 堆化 堆顶取出交换到末尾去\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eheap_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eheapify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//当前的点 总共的点\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//交换完成\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eswap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eheapify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//总量减1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[]{\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e93\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2123\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e239\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// merge_sort(arr, 0, n-1);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e//如果从0编号 那么儿子节点为2i+1 2i+2\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e//最后一个节点是啥\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nf\"\u003eheap_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%d \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003eputs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"kmp算法\"\u003ekmp算法\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e105\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003egetNext\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//按照左神讲的 考查的是当前位置的前一个字符串的最长前后缀\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecn\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ecn\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ecn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecn\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ecn\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ecn\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//前后缀为0\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003ekmp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//首先求next数组\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nf\"\u003egetNext\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//开头不匹配\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//起始位置\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;helloworldllo\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003epattern\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;llo\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003ekmp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epattern\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"lru算法\"\u003eLRU算法\u003c/h2\u003e\n\u003ch2 id=\"strcpy和memcpy\"\u003estrcpy和memcpy\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstring\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//内存拷贝函数 按字节拷贝\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nf\"\u003emy_memcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edest\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epdest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epsrc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epdest\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epsrc\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//字符串拷贝函数 仅用来拷贝字符串\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nf\"\u003emy_strcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edest\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epdest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"sc\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003epdest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//my_memcpy(dest, src, strlen(src));\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nf\"\u003emy_strcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%s\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"string类\"\u003estring类\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eclass\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nl\"\u003epublic\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//通用构造函数\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//拷贝构造函数\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e+=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//获取长度\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e//流运算符\u0026gt;\u0026gt; \u0026lt;\u0026lt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"nl\"\u003eprivate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//字符串\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//长度\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//通用构造函数\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sc\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003estrlen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//对空指针调用strlen会导致内存错误\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003estrcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//拷贝构造\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003estrcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//析构\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e::~\u003c/span\u003e\u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edelete\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//赋值重载\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edelete\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003estrcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"智能指针shared_ptr\"\u003e智能指针shared_ptr\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstring\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003etemplate\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kr\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eclass\u003c/span\u003e \u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nl\"\u003eprivate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nf\"\u003euse_count\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eorig\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//拷贝\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eorig\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eptr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003euse_count\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e::~\u003c/span\u003e\u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e  \u003cspan class=\"c1\"\u003e//析构\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003edelete\u003c/span\u003e \u003cspan class=\"n\"\u003eptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eptr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edelete\u003c/span\u003e \u003cspan class=\"n\"\u003euse_count\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003euse_count\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"写一个函数在main函数执行前先运行\"\u003e写一个函数在main函数执行前先运行\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eHello\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003eHello\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;before main!\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eHello\u003c/span\u003e \u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//全局变量在main之前执行 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;I am main\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"匿名管道pipe\"\u003e匿名管道pipe\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unistd.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003epid_t\u003c/span\u003e \u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003epipe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//创建管道\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003efork\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//父进程 父写 fd[0]读 fd[1]写\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"nf\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;hello world\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nf\"\u003estrlen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003esleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//子进程 子读 fd[1]关闭\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"nf\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1024\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e//写到显示器上\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"nf\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"rand7产生rand10\"\u003erand7产生rand10\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://leetcode-cn.com/problems/implement-rand10-using-rand7/\"\u003eleetcode470\u003c/a\u003e\u003c/p\u003e","title":"005数据结构"},{"content":"B+树 具有n个关键字的节点含有n个分支。而在B树中，具有n个关键字的节点含有n+1个节点。 B+树的叶子节点包含了所有关键字，并且包含信息。 B+树非叶子节点只起索引作用，不存数据。 B+数在叶子节点使用指针将前后磁盘块中的索引连接起来，形成一个线性链表，方便范围查询。 什么是索引 索引是数据表中对字段进行排序的一种数据结构。常用的索引有\nB树 哈希索引 全文索引 Rtree索引\nAVL树，B树，B+树，红黑树，哈希表。\n哈希表和B树不利于范围查找。红黑树在数据量大的时候性能会下降。\n**聚集索引：**数据和索引在一起的。\n**非聚集索引：**索引文件和数据文件是分离的。\n联合索引：对多个字段同时建立的索引。Mysql从左到右的使用索引中的字段，一个查询可以只使用索引中的一部份，但只能是最左侧部分，跳跃索引查询就会导致索引失效。\nB树和B+树的区别 B树：叶节点具有相同的深度，所有索引元素不重复，节点中的数据索引从左到右递增排列。 B+树：非叶子节点不存储数据，只存储索引，叶子节点包含了全部的关键字且存储数据。叶子节点用指针连接从左往右递增排序，提高区间访问的性能。 mysql存储引擎myISAM和InnoDB 存储引擎是基于表的，而不是数据库。\nInnoDB引擎：支持事务，行锁（适合高并发），支持外键。mysql5.5版本后的默认存储引擎 myISAM引擎：不支持事务，不支持外键，支持表锁。优势是访问的速度快。mysql5.5版本前的默认存储引擎。myISAM索引文件和数据文件是分离的。查询较多的更新较少的情况下使用myisam存储引擎。 数据库三大范式 数据库中的所有字段都是不可分割的原子值 满足第一范式的前提下，除主键外的每一列都必须完全依赖于主键。如果不完全依赖，只能发生在联合主键下。 满足第二范式的前提下，除开主键列的其他列之间不能有传递依赖关系。 事务的四个特性ACID 事务是作为单个逻辑工作单元执行的一系列操作。要么完全执行，要么完全不执行。\n**原子性 ：**同一事务中多个操作不能分割，必须是一个整体。 **一致性 ：**事务操作前后的总量保持一致。 **隔离性 ：**多个事务之间的操作互不干扰。 **持久性：**事务提交以后，对数据库中数据的改变是永久的。 事务隔离级别 事务分为四个隔离级别：分别是读未提交，读提交，可重复读，串行化。从前往后隔离级别依次递增，同时执行效率依次下降。mysql的默认隔离级别是可重复读。\n读未提交：会产生脏读，即一个事务读取了另一个事务未提交的内容。 读提交：可以解决脏读问题，但是会产生不可重复读，即一个事务在执行的过程中得到的结果不一致。 可重复读：可以解决不可重复读的问题，但会产生幻读，即一个事务无法看到另一个事务已经提交的内容。 **串行化：**可以解决幻读问题。当同一张表被另一个事务操作时，其他事务的写操作是不可以进行的，进入串行化排队，直到另一个结束，同时还为超时的情况下才可以继续执行。 set global transaction isolation level read committed # 修改隔离级别\u0026#39; select @@x_isolation # 查看隔离级别 主键和外键约束 主键：**唯一且非空。**一个表有且只能由一个主键约束。创建主键会自动创建对应的索引，同样删除主键，对应的索引也会被删除。\n外键约束：如果定义了外键约束，主表中没有的数据在子表中是不可以被使用的。主表中的记录被子表引用，是不可以被删除的。\ninner join 和 left join 等值联接：inner join返回两个表中联接字段相等的行 左联接：left join 返回左表所有记录和右表中联接字段相等的记录，如果左表中的记录在右边不存在，则对应字段设为null。 redis 是C语言编写的基于内存可持久化的key-value内存数据库，使用的是epoll单线程模型。常用的数据结构有set， list，string, hash, sorted set。\n查询 分组查询：count() sum() max() min() avg()\n聚合查询：7种 A B A∪B A∩B A - A∩B B - A∩B A∪B - A∩B\n左连接： A - A∩B 右连接：B - A∩B 内连接：A∩B\n悲观锁和乐观锁 悲观锁： 每次去拿数据时都认为别人会修改，所以每次在拿数据的时候都会上锁。悲观锁由数据库自己实现，共享锁和排他锁是悲观锁的不同实现。悲观锁的缺点：效率低，并行差，增加死锁的概率。 乐观锁：每次去拿数据都认为别人不会修改，所以不会上锁。乐观锁适用于读多，写少的场景。乐观锁常见的实现方式：版本号机制和CAS自旋算法。乐观锁的缺点：ABA问题，循环时间长开销大，只能保证一个共享变量的原子操作。 explain 查看执行计划 使用explain关键字可以模拟优化器执行sql查询语句，从而知道mysql是如何处理sql语句的。分析查询语句或表结构的性能瓶颈。\nexplain + sql语句 show profile 用来分析当前会话中语句执行的资源消耗情况。\n什么时候应该创建索引 频繁查询字段 什么时候不应该创建索引 where条件里用不到的字段 频繁更新的字段 表记录太少\u0026lt;300W 重复且平均的表字段 B+树 B+树是B树的变形，B+树非叶子节点只存索引，不存数据，叶子节点存储所有的索引和数据。B+树三层可以存储上百万条数据，磁盘IO最多三次，每次读取磁盘块到内存后，使用二分查找找到索引的位置。\nB+树是聚集索引，数据和索引在一起。B+树使用指针将叶子节点的连接起来。\nB树 是一种多路平衡二叉树，m阶B树，每个节点最多可以有m-1关键字。所有叶子节点在同一层。每个节点保存索引和数据。\n索引 索引是按照某个字段排序的数据结构。\nACID 事务时单个逻辑工作单元的一系列操作。\n原子性：事务的操作是不可分割的，要么完全成功，要么完全失败。\n一致性：事务操作前后的总量保持不变。\n隔离性：事务之间的操作应该相互隔离。\n持久性：事务一旦提交后，数据库中的值不可更改。\n事务的隔离级别 读未提交：产生脏读，即一个事务可以读取另一个事务未提交的内容。 读提交：解决脏读，产生不可重复读，即事务的两次读取结果不一致。 可重复读：解决不可重复读，但是会产生幻读，即一个事务明明提交了，但是在另一个事务中没有更新。 串行化：当两个事务都在写入内容时，必须排队，当两个事务提交后，才可以执行后续事务。 数据库三大范式 数据库中的所有字段都是不可分割的原子值 在满足第一范式的前提下，除开主键外的其他列都必须完全依赖于主键。 在满足第二范式的前提下，除开主键外的其他列之间不能有传递依赖关系。 myisam和innoDB myisam不支持事务，不支持外键，支持表锁。查询速度较快。适合读多更新少的表。\ninnoDB支持事务，支持外键，支持行锁，因为锁的粒度比较小，所以适合高并发。\n持久化 利用永久性存储介质将数据进行保存，在特定的时间将保存的数据进行恢复的机制叫做持久化。确保数据安全。\n将当前数据状态进行保存，快照形式。RDB 将数据的操作过程进行保存，日志形式。AOF ","permalink":"//localhost:1313/posts/004%E6%95%B0%E6%8D%AE%E5%BA%93/","summary":"\u003ch2 id=\"b树\"\u003eB+树\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e具有n个关键字的节点含有n个分支。而在B树中，具有n个关键字的节点含有n+1个节点。\u003c/li\u003e\n\u003cli\u003eB+树的叶子节点包含了所有关键字，并且包含信息。\u003c/li\u003e\n\u003cli\u003eB+树非叶子节点只起索引作用，不存数据。\u003c/li\u003e\n\u003cli\u003eB+数在叶子节点使用指针将前后磁盘块中的索引连接起来，形成一个线性链表，方便范围查询。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"什么是索引\"\u003e什么是索引\u003c/h2\u003e\n\u003cp\u003e索引是数据表中对\u003cstrong\u003e字段\u003c/strong\u003e进行排序的一种\u003cstrong\u003e数据结构\u003c/strong\u003e。常用的索引有\u003c/p\u003e","title":"004数据库"},{"content":"volatile 用来告诉编译器不要对该变量做任何优化，编译器每次操作该变量时，一定要从内存中取出，而不是使用寄存器中与存在的值，因为值可能已经发生了改变。\n应用场景：\n并行设备的硬件寄存器（如状态寄存器）。 多线程中共享变量。 const 用于限定变量，函数和指针不可改变。\nconst限定全局变量时，变量放在静态区。const限定局部变量时，变量放在栈区。 const修饰类中的成员函数时，表示不可对类的对象更改，如果需要更改类中的成员变量，可以使用mutable关键字。 内联函数和宏定义 宏定义在预编译时展开，内联函数在编译时展开。 宏定义只是简单的文本替换，不进行参数的有效性检查。内联函数会进行类型检查，然后将函数体嵌入到目标代码中。 宏定义不加括号容易出错。内联函数没有普通函数的栈操作，效率很高，但是不正确的时候内联函数会导致代码体积过大。 static 静态全局变量，静态局部变量，静态成员变量，静态成员函数\n静态全局变量和静态局部变量都放在静态区，只在声明时初始化一次，仅在本文件中可见，变量在程序运行期间一直存在。静态局部变量的作用域范围仅在局部，下次调用紧接着上次调用的结果值改变。 静态成员函数和静态成员变量没有this指针，必须通过类名才能访问。 malloc 和 new malloc和free是库函数，new和delete是运算符，可以重载。 malloc申请内存时需要指定内存大小，返回一个void*类型，通常需要强转。new申请内存时无需指定内存大小，返回一个对应类型的指针。 malloc不进行初始化。new在创建非内部类型的对象时，调用构造函数初始化，消亡时会调用析构函数。 malloc申请失败时返回null指针，new申请失败时抛出异常。 指针和引用 引用创建时必须初始化，初始化后不可以改变。指针创建时可以不初始化，初始化时需要分配内存，初始化后也可以改变。引用比指针安全。 引用不存在空值引用，指针可以指向空值 引用的本质是指针常量，由编译器完成转换。 extern 可以被其他源文件调用。 告诉编译器，extern限定的代码使用C语言的编译和连接方式。因为C++支持重载，而C不支持，所以可能导致函数编译后的名称不一致，从而找不到对应的函数。 多态的原理 多态分为静态多态和动态多态。静态多态是通过重载和模板实现的，动态多态是通过继承和虚函数实现的。\n动态多态是让基类的指针或引用指向派生类的对象实现的。定义为虚函数的基类，编译器会自动创建一个虚函数表，派生类在继承时会继承这个虚函数表，每个创建的对象拥有一个虚函数表指针，这个指针指向虚函数表，如果派生类重写了基类的虚函数，则对应的虚函数表入口地址发生了更新。虚函数表为所有对象所共享，通常放在代码段。\n什么是进程 进程是分配资源的基本单位，是程序运行的实例。进程通常分为数据段，代码段和进程控制块。进程的地址空间相互独立，一个进程不可访问另一个进程的数据。进程切换时的开销相对于线程来说比较大，需要保存寄存器的值和刷新块表，切换地址空间等。\n进程间的通信方式 有名管道pipe 无名管道fifo 消息队列 共享内存 信号量 信号 套接字 线程是什么 线程是CPU调度的基本单位。线程是进程的一个执行流程。一个进程中可以由多个线程。线程共享进程的地址空间。线程自身几乎不拥有系统资源，除了栈和寄存器。线程间的通信较为容易。但是需要同步。常用的同步机制有互斥锁，读写锁，信号量，条件变量。\n线程共享 进程打开的文件描述符表 进程ID和组ID 信号的处理方式 打开的工作目录 进程的地址空间(堆区，栈区，共享区) 线程独享 线程ID 线程的寄存器 线程的栈 信号屏蔽字 线程优先级 错误返回码errno 信号 信号是一种不精确的通信方式。常用的信号有15号信号，杀死进程 29号进程 11号段错误\nhttp和https的区别 https是安全版的http协议。\nget和post的区别 get用来获取资源，post用来创建资源。\nget将数据放在url地址栏中，使用问号与url分割，数据间用取地址符分割。post将数据放在请求体中。\n安全性上get放在url容易暴露隐私信息，而post放在请求体中可以适当的避免。\nget在传输的数据受url地址栏的限制，post不受这种限制\nget的操作是幂等的，多次操作产生的影响相同，而post是非幂等的\nB树和B+树的区别 B树是多叉平衡树，**M阶的B树，每个节点最多有M-1个关键字，**每个节点的关键字都按照从小到大的顺序排列，因此查询时可以使用二分查找法。\nB树中所有叶子节点都位于同一层，每个节点都存有索引和数据。\nB树的优点在于查询单个数据时，由于每个key都存有对应的date，查询到后可以直接取回。\nB+树非叶子节点只存索引不存数据，每个叶子节点增加一个指向相邻接叶子节点的指针，所有的节点都存在叶子节点。B+树的优点在于范围查询时，可以利用相邻的指针获得指定范围内的数据。\n网络拥塞 慢启动 拥塞避免 快速重传 快恢复 TCP和udp的区别 tcp面向连接的可靠的流式协议，具有超时重传和确认等机制。\nudp面向无连接的报文协议，发出去就不管了，收则全收，丢则全丢。\n智能指针 unique_ptr\nshared_ptr\nweak_ptr\n四种强制类型转换 const_cast去掉const属性的转换，包括const指针和引用\nstatic_cast用于低风险的转换，比如字符型转整形\ndynamic_cast 用于具有继承关系的派生类和子类的转换，当基类转为子类时，如果转换失败会返回NULL\nreinterpret_cast 任何类型都能转，风险较高\npost和put的区别 post用来创建资源，put用来更新资源\npost是非幂等的，put是幂等的。\n8中请求方法：\nhttp 1.0: get post head\nhttp 1.1: put delete options connect trace\nmmu内存管理器 主要作用：虚拟内存到物理内存的地址映射。 设置修改内存访问级别。\n虚拟内存的作用 解决主存容量有限 分隔进程，保证进程空间彼此独立不受干扰 基于局部性原理进行页面替换 虚拟内存的大小由计算机的地址总线决定\ncache名字和TLB命中没有必然联系，是两种独立的机制。\nCPU和Cache之间交换的单位是字节，Cache和内存之间交换的单位是块。\ncoredump文件 gdb可以用于分析coredump文件。coredump文件含有进程被终止时内存/CPU寄存器和各种函数调用栈的信息。\n产生coredump文件的原因：\n内存访问越界 多线程使用了线程不安全的函数 多线程读写的数据未加锁保护 栈溢出 core文件没有符号表信息，必须结合可执行文件才可调试\n模板特化 全特化：模板参数被指定未确定的类型\n偏特化：模板参数没有被全部确定，需要编译器在编译时进行确定。只能偏特化类模板，不能偏特化函数模板。\n别名模板和变量模板属于语法糖\n元编程 在编译时计算出运行时需要的常数，类型和代码的方法。\n右值引用 右值引用指向要被销毁的对象。右值要么是字面常量，要么是在表达式求值过程中创建的临时对象。\nmove函数将左值转换为右值，调用move函数后源对象只能赋值或销毁。\noverride override在子类中标记某个函数，表示想要覆盖已有的虚函数，如果没有覆盖，编译器会报错。\n加作用域运算符调用特定类的虚函数\n内联函数的优劣 优点：减少函数调用的开销，包括寄存器值的保存和实参的拷贝等。 缺点：增加函数体积，可能导致cache装不下，从而减少了cache的命中率。 inline只是一个请求，编译器有权拒绝。\n拷贝构造函数 调用场景：\n一个对象以值传递传参 一个对象以值传递的方式从函数返回 一个对象通过另一个对象初始化 空类 占有一个字节\n有构造，析构，拷贝，赋值运算符，取地址运算符。\n构造函数可以被重载，析构函数不可以被重载且不能带参数。\nexplicit explicit取消隐式转换，类中构造函数默认是implicit\nexplicit关键字的作用是防止类构造哈桑农户的隐式自动转换，只对有一个参数的构造函数有效。\n堆和栈的区别 申请方式不同。栈由操作系统自动分配，堆需要程序员自己申请。 生长方向不同。栈由高地址向地址生长，是一块连续的内存区域。堆由地址向高地址生长，是不连续的内存区域。在一个链表中记录空间内存地址。 分配速度。栈由系统分配，速度较快。堆使用new分配，速度较慢，且容易产生内部碎片。 C++ 和python的区别 python是解析性语言，无需编译，方便快捷，跨平台性很好。\nC++是编译型语言，先编译后执行，编译后通常不能跨平台。\npython使用严格的缩进来表示不同级别的代码块，在C++中使用花括号。\n索引 select语句调用函数后就不会用到索引\nstatic的作用 static可以用来修饰函数和变量。修饰全局变量和局部变量时都是放在静态区，static变量只初始化一次，在程序结束时销毁，全局和局部的区别在于作用域不同。static可以修饰普通成员函数，表明这个函数只在本文件中有效。static修饰类成员变量是，这些变量为这个类所共享，static修饰类成员函数时，也是所有对象共享这个函数，该函数中没有this指针。同时static类成员函数中只能调用static修饰的函数。\n静态存储区 存放的static修饰的全局变量和局部变量，const修饰的变量以及字符串。 数据段和静态区的区别 数据段存放的是代码的二进制指令。静态区是变量。\n虚函数的实现机制 每个含有虚函数的类都有一个虚函数表，类创建的对象都由编译器自动生成一个虚函数表指针来指向虚函数表。子类继承时会继承这个虚函数表，在子类中如果重写了父类定义的虚函数，这个虚函数中的对应内容会替换为重写的内容。当父类指针或引用指向子类对象时，调用对用对应的虚函数时会根据虚函数表指针找到虚函数表，然后从表中找到重写的虚函数入口地址，然后实现对应的行为。虚函数使代码更具有扩展性。\npython的多态 子类继承父类，子类重写父类的函数，调用时就自动调用了子类的函数。\nC++和python的区别 C++是编译型语言，需要先编译再执行，编译后通常不可以跨平台。 python是解释型语言，直接运行，跨平台好。上手快，容易浮于表面不够深入。 python带来的收益 快速上手机器学习和深度学习，直接调用大量的库函数。\nSTL底层容器和实现原理 vector是动态数组，分配连续的内存，2倍扩容。 list双向表，插入删除效率高。 map和set红黑树，有序的容器。 stack和queue底层可能都是数组实现 unordered_map和unordered_set哈希表。 array栈上分配的数组执行效率快。 tuple元组多数据类型的集合。 快排 基于交换和分治的算法， 平均nlogn 最坏n平方\n四次挥手 主动关闭方发送FIN标志位，自身状态进入FIN_WAIT_1被动关闭方收到FIN后，发送ACK确认，自身进入CLOSE_WAIT状态，当主动关闭方收到ACK后，进入FIN_WAIT_2状态，此时主动关闭方只能接收数据，不能发送数据，因为TCP是全双工的，所以要等待被动关闭方关闭后才结束。此时进行了两次挥手，双方进入半关闭状态。当被动关闭方需要关闭时，发送FIN标志位，发出后自身状态进入LAST_ACK状态，如果对方收到FIN标志位后，发送ACK应答，自身进入TIME_WAIT状态，等待2MSL后关闭连接。等待的2MSL是报文在网络传输中一个来回的长度。确保最后一个ACK能被对方收到。\nstatic关键字 static可以修饰普通函数变量和类成员函数和变量。\nstatic修饰普通变量时，分为全局变量和局部变量，两者都保存在静态区，并且只初始化一次，在整个程序运行期间一直存在。全局变量和局部变量的区别是作用域不同。 static修饰普通函数时，说明此函数只在本文件中可见，防止多个文件的同名冲突。 static修饰类中的成员变量时，必须在类中声明，在类外初始化，初始化的时候分配内存，所有的static成员变量为所有对象共享。 static修饰类中的成员函数时，只能调用static的变量和函数，没有this指针，所有对象共享这个函数，可以使用类名直接调用。 变量分为全局变量和局部变量，static修饰全局变量时，表示这个变量只在本文件中可见\nconst关键字 const用于限定变量指针和函数不可改变，方便编译器做类型检查。\ncons修饰变量时必须初始化。const全局变量通常放在静态区，const局部变量放在栈区。 cosnt修饰成员函数时，函数中的成员变量不可更改，如果要修改成员变量需要声明为mutable const修饰指针有两种，常量指针和指针常量，常量指针是指针的指向的值不可改变，而指针的指向可以改变。指针常量是指向不可变，而值可变。 const和define的区别 const明确指定类型，编译器对类型做检查，而define没有类型也不 检查。 const分配内存，而define不分配。 const在编译期处理，而define在预编译期进行宏替换。define的宏替换不加括号会产生严重的影响。 指针和引用的区别 指针保存的是所指对象的地址，而引用是所指对象的别名。指针通过解引用间接访问所指的对象，而引用直接访问。 指针可以有多级，而引用最多两级。当有两个取地址符时，是右值引用，右值引用可以减少深拷贝的次数。 指针定义时可以不初始化，即使初始化后也可以改变。而引用定义时必须初始化，初始化后不可以改变。 引用的本质是指针常量，编译器帮助转换。指针常量的指向不可以改变，值可以变。 define与内联函数的区别 内联函数是一个函数，在编译期插入到调用的地方，而define在预处理期进行替换。 内联函数避免了函数调用时的压栈和参数拷贝等操作，提高了性能。 内联函数对参数有类型检查。define不加括号容易出错。 new和malloc的区别 malloc是库函数，new是运算符 malloc只分配内存不初始化，而new不仅分配内存也初始化。new分配内存以后自动调用构造函数。 malloc分配内存时必须指定内存大小，而new可以自动计算。malloc分配完成后返回的是void*类型，需要强转，而new返回的是对应类型的指针。 malloc分配内存失败时返回NULL，而new分配内存失败时抛出bad_alloc异常。 http和https的区别 两者都是用于客户端和服务器端通信。\nhttps是http的安全版。\n主要区别在于：\nhttp是明文传输，https是密文传输。 http默认端口是80， https的默认443 https需要验证服务器端的身份，如果CA证书不正确则会中断通信。 CA证书需要成本，加密解密的过程增加CPU和内存的开销。 https增加了ssl层，用于确保传输的安全性。\n通信前先进行ssl层的握手，首先客户端ssl版本号和加密组件发送给服务器端。\n服务器端筛选出可用的ssl版本号和加密算法同时加上CA证书发送给客户端。\n客户端验证CA证书的有效性，如果无效则中断通信。\n若有效客户端发送加密的pre-master secret随机密码串，这一步使用的是非对称加密，用于协商后面对称加密的密钥，所以这一步不能被篡改和截获。客户端得到服务器端的响应后，且验证通过后，后续就使用对称加密加密算法进行加密。然后进行TCP三次握手。\nhttp1.0和http1.1的区别 http1.0只支持短连接，即一次通信完成后就立即断开\nhttp1.1支持长连接，一次TCP建立以后，可以进行多次请求。\nhttp1.0只提供了三种请求方法：get post head\nhttp1.1增加了五种请求方法：put delete connect trace options\nhttp1.1增加了许多状态码，比如100 continue 表示已经收到，等待后续的资源。206 partial content 部分资源\nhttp1.1支持一个物理主机上可以有多个虚拟主机共用一个IP\n","permalink":"//localhost:1313/posts/%E5%85%AB%E8%82%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","summary":"\u003ch2 id=\"volatile\"\u003evolatile\u003c/h2\u003e\n\u003cp\u003e用来告诉编译器不要对该变量做任何优化，编译器每次操作该变量时，一定要从内存中取出，而不是使用寄存器中与存在的值，因为值可能已经发生了改变。\u003c/p\u003e\n\u003cp\u003e应用场景：\u003c/p\u003e","title":"八股基础"},{"content":"逻辑用语千万条，第一首先往里套。 首先，其次，然后，最后。 第一，第二，第三，第四。 书籍 《C++ primer》 第五版 《后台开发》 徐晓鑫 《linux高性能服务器编程》 游双 《redis设计与实现》黄健宏 《muduo库》陈硕 static static的使用可以分为两类，一类是用在普通变量和函数上，另一类是用在类中。\n普通变量分为全局变量和局部变量。声明为静态全局变量是在全局区分配内存，并且只在当前文件可见，在文件之外是不可见的。其他文件定义同名变量不会发生冲突。变量的值只在第一次执行时进行初始化。声明为静态局部变量时与全局变量类似，只是作用域为局部作用域。 静态普通函数，只在当前文件中可见，其他文件中定义同名函数不会发生冲突。 static用在类中，首先是静态成员变量，**在类中声明，类外初始化。**所有对象共享一份数据。 然后是静态成员函数：所有对象共享同一个函数，静态成员函数只能访问静态成员变量。 多态 多态分类两大类：静态多态和动态多态。静态多态是重载和模板。动态多态：也叫运行时多态，是通过继承和虚函数实现的。在具有继承关系的子类中，子类重写父类的虚函数，通过父类引用或指针指向子类对象时，产生不同的行为叫做多态。\n多态的核心在于虚函数表指针，每个对象都有一个虚函数表指针，虚函数表指针指向一张虚函数表，表中记录了虚函数的入口地址，如果子类重写虚函数后，这个地址就会替换掉。多态的好处在于更方便程序的扩展，坏处在于每个对象多了一个4字节的指针，同时每次查询虚函数表需要耗时。\n智能指针 C++11有3个智能指针，分别是unique_ptr, shared_ptr和weak_ptr\nunique_ptr独享指针的所有权，无法进行拷贝构造赋值的操作，只能通过move函数进行所有权的转换。 shared_ptr共享对象，它使用引用计数来保存当前有多少个智能指针在引用这个对象，当引用计数降为0时，对象会被销毁。 weak_ptr称为弱引用，用于辅助shared_ptr正常工作，主要解决shared_ptr可能会产生的环形引用问题。weak_ptr不会增加对象的引用计数，共享指针可以直接赋值给弱指针，同时弱指针可以使用lock函数来获取shared_ptr对象 malloc和new malloc和new都是在堆上开辟内存，进行动态的管理。\nnew是操作符，malloc是库函数 malloc只负责开辟内存，没有初始化功能。new不但能开辟内存，还可以初始化。 malloc必须指定开辟内存的大小，并且返回类型为void*，因此malloc的返回值一般都需要进行类型转换。new可以自动计算出所需内存的大小，并且返回指定类型的指针。 malloc和new如果操作是内置数据类型两者基本类似，不同在于申请失败时。malloc申请失败时返回**NULL。**new申请失败抛出异常。 自定义类型时，new先调用operator new函数申请空间，然后在申请的空间上执行构造函数。 C++内存模型 从高地址到低地址\n环境变量和命令行参数 栈区 共享区 堆区 未初始化数据段.bss 初始化数据段.data 代码段.text 指针和引用的区别 指针保存的是所指对象的地址，而引用是所指对象的别名。指针需要通过解引用间接访问对象的值，引用可以直接访问。 指针可以有多级指针，而引用最多两级。并且两个取地址符是右值引用。右值引用是为了减少深拷贝的次数。 指针可以不初始化，即使初始化以后也可以改变。而引用必须初始化，同时初始化以后不许改变。 引用的本质是指针常量。指针常量不可以修改指向，但是可以修改指向的值。常量指针刚好与之相反。 vector底层原理 首先，vector的基类是三根指针，分别是start/finish/end_of_storage用来指示当前分配到的空间所用的起始位置，终止位置和容量尾部。然后，当finish指针到达end_of_storage的位置时，操作系统会寻找当前容量大小2倍的连续内存空间，并且将旧内存中的数据拷贝到新内存，然后释放旧内存。其次，如果重新分配了内存，原来的迭代器就会失效。频繁的开辟新内存比较耗时。如果可以预知使用的大小，可以使用reserve函数，预先开辟足够大的空间。或者使用swap函数收缩内存空间。\n代码生成可执行文件的过程 主要分为四个步骤\n预编译阶段：对g++编译器指定-E参数，生成.i文件。这个阶段的主要工作是将所有的宏展开，去掉所有的条件预编译指令，将所有的头文件包含进来，删除注释等。 编译阶段：对g++编译器指定-S参数，生成.s汇编文件。这个阶段的主要工作是对代码的语法，语义和词法等进行分析。 汇编阶段: 对g++编译器指定-c参数，生成.o二进制文件。 链接阶段：将各个模块之间的相互引用处理好。把所有的静态库用到的目标文件装入程序中，并进行统一编址，然后进行重定位，即逻辑地址到物理地址的转换。 静态库与动态库 静态库：命名方式为lib开头加上自定义的静态库名，然后以.a结尾。静态库实际上是一组目标文件的集合，再链接阶段与调用的程序生成可执行文件。静态库的优点在于：**代码加载速度快，发布程序时，不需要提供对应的库；**缺点时：可执行文件体积大，**同时如果静态库有修改，调用的程序需要重新编译，**而编译的耗时比较久。 动态库：命名方式为lib开头加上自定义的动态库名，然后以.so结尾。动态库首先生成与位置无关的目标文件，然后再运行时加载到内存。优点是：动态库可以共享，节省了系统资源，动态库进行修改后，无需重新编译。缺点是加载速度比静态链接慢，发布程序时，需要提供动态库。 符号表 每个目标文件除了拥有自己的数据和二进制代码外，还提供了3个表：\n**未解决符号表：**提供了所有在该编译单元里引用但是定义并不是在本编译单元的符号及其出现的地址。【引用无定义】将extern声明的变量置入未解决符号表。【外部链接】 **导出符号表：**提供了本编译单元具有定义，并且愿意提供给其他单元使用的符号及地址。【有定义肯让外用】普通变量及其函数被置入导出符号表。 **地址重定向表：**提供了本编译单元所有对自身地址的引用的记录。static声明的全局变量放入地址重定位表中。【内部链接】 指针常量 int* const p = \u0026amp;a 指针常量必须初始化，一旦初始化完成，就不能再修改它的值，即指针的指向不可变。\n引用的本质是指针常量\n声明和定义的区别 声明是告诉编译器有这个变量和函数的存在，但是需要到其它地方去寻找。 定义包含了声明，但是声明不包含定义。 定义时才分配存储空间。 C和C++的区别 设计思想上： C是面向过程的结构化语言，CPP是面向对象的语言 语法上： CPP具有三大特性，封装继承多态 CPP相对于C增加了许多类型安全的功能，比如四种强制类型转换 CPP支持范式编程，如模板类，函数模板等 struct和class的区别 共同点：C++中，可以用struct和class定义类，都可以继承。\n不同点：struct默认继承权限和默认访问权限时public class类的默认继承权限和访问权限时private。\nvolatile关键字 对类型额外修饰的作用，类似于const。告诉编译器不要对这样的对象进行优化，因为该对象的值可能在程序的控制或检测之外被改变。\nconst关键字 const 可以用于限定变量，指针和函数不可改变，同时明确制定了类型，可以方便编译器做类型检查，也增加了代码的可读性。\nconst修饰变量必须初始化。如果是全局的const变量，通常放在静态区。在局部声明的const变量放在栈区。\nconst修饰成员函数时，函数中的成员变量不可改变，除非该变量特别声明为mutable\nconst可以用来修饰指针，称为常量指针const int *p 指针的指向可以改变，但是不能改变指针指向的值。\nconst修饰常量的指针叫做指针常量，int* const p 指针的指向不可以修改，指针指向的值可以修改。指针常量必须初始化。\nconst可以明确指定类型，而宏定义没有数据类型。\ndefine宏是在预处理阶段展开。const常量是编译运行阶段使用。\n宏定义不分配内存，变量定义分配内存。\nextern关键字 引入同一模块在其他文件中定义的全局变量和函数。 如果在C++里调用了C库定义函数，那么需要使用extern \u0026quot;C\u0026quot; 标识这个函数，告诉编译器使用C的方式进行编译，防止C++的编译方式导致命名重整，无法找到对应的C函数。命名重整的原因在于**C++支持函数重载，而C不支持。**所以C++编译时增加了函数参数的标识符。 extern通常放在为解决符号表中，表示定义不在本文件而引用的变量。 this关键字 解决同名冲突 返回对象本身 this指针的本质是指针常量，指针的指向不可以修改。\nmove函数 将左值强制转换为右值引用，右值引用可以减少一次对象的析构和对象的构造。\n右值引用可以减少深拷贝的次数。\n段错误 段错误通常发生在**访问非法内存地址的时候。**系统会发送一个SIGSEGV11号信号告诉当前进程，进程采取默认的捕获方式，即终止进程。\n野指针 试图修改字符串常量的内容 auto关键字 让编译器能够根据初始值的类型推断变量的类型。当处理复杂类型，比如STL中的类型时，优势最明显。auto p = vt.begin()\n四种强制类型转换 static_cast 低风险的转换，比如整数转浮点数，字符型转整形 const_cast 去掉const关键字的转换，可以去掉带const的指针和引用 dynamic_cast 使具有继承关系的基类转换为派生类，如果不可以转换则返回NULL reinterpret_cast 指针或引用的转换，风险较高 RTTI run time type identification 运行时类型识别。**常常结合typeid()和dynamic_cast实现。**可以根据当前调用的指针是何种类型，经过dynamic_cast转换后，调用非虚函数。**dynamic_cast只能用于指针和引用的转换，要转换的类型中必须包含虚函数，转换成功返回子类的地址，失败返回NULL。**typeid返回一个type_info对象的引用。\n构造函数不能是虚函数 虚函数是通过虚函数表指针来调用的，而虚函数表指针存在对象内存空间。当一个对象调用构造函数时，该对象还没有实例化，即没有分配内存空间，所以虚函数表指针无法找到。\n析构函数尽量是虚函数 析构函数不是虚函数容易引起内存泄漏。\n为了实现多态的动态绑定，通常将基类指针指向派生类对象，当指针销毁时，如果析构函数不是虚函数，根据析构函数在继承中的调用顺序，则派生类对象将不会被析构，造成内存泄漏。\n析构函数不能抛出异常 析构函数抛异常，则异常点之后的的程序不会执行，如果异常点之后有释放资源的操作，则这部分资源无法释放，导致内存泄漏。noexcept\n内存泄漏 不再需要使用的内存单元，没有及时释放。memcheck和valgrind检测内存泄漏的工具。使用RAII资源获取就是初始化和智能指针。\n野指针 一些内存的单元已被释放，之前指向它的指针还在被使用。\nvector和list的区别 vector是动态数组，在内存中分配一块连续的内存空间，因此可以使用下标进行快速的随机访问。但是删除和插入需要移动大量的元素。 list是双向链表，在内存中是不连续的空间，由指针将不同的地址连接在一起。list的插入和删除操作都是O(1)的。 数组必须事先设定固定的长度，不能动态的增减，可能会造成资源浪费。链表可以动态的增减。 浅拷贝 由于编译器默认的拷贝构造函数只是简单的位拷贝，可能会导致内存的重复释放。解决浅拷贝的办法通常使用深拷贝，即自己实现拷贝构造函数，在堆上重新分配内存。\n内存对齐 union最大成员所占的整数倍，同时能容纳其他的成员。union中变量共用内存，应以最长的为准。\nstruct按照成员的声明顺序，依次安排内存，偏移量为成员大小的整数倍，最后结构体的大小为最大成员所占大小的整数倍。在C++中，空结构体和空类的内存所占大小为1个字节。C中空结构体所占大小为0。\n为什么要有内存对齐：1. 硬件原因：**加速CPU的访问速度。**因为CPU和内存数据交换的基本单位是块，块的大小为2的n次方字节。内存未对齐可能需要多次访问内存。2. 平台原因：不是所有的平台都支持任意地址的数据访问。\n#include \u0026lt;iostream\u0026gt; using namespace std; typedef union{ long long i; //8 bytes int k[5]; //4 bytes 最长的成员不是20 char c; // 1 byte }UDATE; //联合体共用内存 最长成员为8字节 结果要为8的倍数 同时要能容纳其他成员，即大于等于20字节 所以为24字节 struct data{ int cat; // 4 bytes UDATE cow; //24 bytes 但是需要先拆开来 最长成员为8字节 double dog; //8 bytes }too; //结构体顺序考虑，结果为最大成员的整数倍，如果后一个成员的长度的开始位置不是整数倍需要填充字节 //cat占4个字节 填充4个字节 //起始位置为8 满足整数倍 cow占用24字节 //起始位置为32 满足整数倍 doule占用4字节 //所以结构体总共占用40字节，同时40也是8的倍数。 UDATE temp; int main(){ cout\u0026lt;\u0026lt;sizeof(temp)\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt; sizeof(struct data)\u0026lt;\u0026lt;endl; //24 40 return 0; } gdb调试 gdb可以用于分析coredump文件，coredump文件中含有当进程被终止时内存，cpu寄存器和各种函数堆栈信息等。\n设置断点 b 120 运行 r 打印遍历p number 查看堆栈bt 查看循环中的变量 i 单步运行n ","permalink":"//localhost:1313/posts/003c++%E8%AF%AD%E8%A8%80/","summary":"\u003ch2 id=\"逻辑用语千万条第一首先往里套\"\u003e逻辑用语千万条，第一首先往里套。\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e首先，其次，然后，最后。\u003c/li\u003e\n\u003cli\u003e第一，第二，第三，第四。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"书籍\"\u003e书籍\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e《C++ primer》 第五版\u003c/li\u003e\n\u003cli\u003e《后台开发》 徐晓鑫\u003c/li\u003e\n\u003cli\u003e《linux高性能服务器编程》 游双\u003c/li\u003e\n\u003cli\u003e《redis设计与实现》黄健宏\u003c/li\u003e\n\u003cli\u003e《muduo库》陈硕\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"static\"\u003estatic\u003c/h2\u003e\n\u003cp\u003estatic的使用可以分为两类，一类是用在\u003cstrong\u003e普通变量和函数\u003c/strong\u003e上，另一类是\u003cstrong\u003e用在类中\u003c/strong\u003e。\u003c/p\u003e","title":"003C++语言"},{"content":"TCP头部 16位源端口 16位目的端口 32位序号 32位确认序号 4位TCP头部长度 单位为4字节 6位标志位 16位滑动窗口 16位校验和 16位紧急指针 注意：TCP的包没有IP地址，只有源端口和目的端口。一个TCP连接需要4个元组来表示一个连接。（源端口，目的端口，源IP，目的IP）\n为什么建立连接需要3次握手 主要是初始化序列号和协商最大报文段长度。\n粘包问题 udp不存在粘包的问题，因为udp是个数据包协议，也就是两段数据间有界限的。要么收不到，要么全收。\n产生粘包的原因：nagle算法为了改善网络传输效率，延迟发送数据。应用层由于某些原因不能及时取出TCP的数据，导致TCP缓冲区存放了多段数据。\n解决方式：封包和拆包。包头存放一个变量记录包体的长度。在所发送的内容前，加上发送内容的长度。\nHTTP原理 http协议是应用层协议，通过请求响应的方式在客户端和服务器端进行通信。\nhttp协议是以明文的方式进行传输，并且是无状态的通信协议。\nhttp与https的区别 传输方式：http是**明文传输，极易被监听和篡改。**而https加入了ssl层，数据经过了加密，从而保护了传输数据的隐私和完整性。 身份认证： http没有身份认证，而https经过证书颁发机构的多重认证。 连接端口：http为80 https为443 实现成本：http基本没有成本，https需要申请证书，同时在加密解密上需要消耗更多的CPU资源，访问速度有可能降低。 加锁的图标显示 谷歌和百度搜索的排名会对非https的排名有影响 私钥能解密，但是不能确认是哪个客户端发送的消息，任何人都可以抵赖。为了防止抵赖，可以使用数字签名。\nhttps是http的安全版，在http的基础上增加了SSL安全层。\n基于性能的考虑，https一般使用非对称加密算法获得密钥，再用对称加密算法对消息内容进行加密。\nhttps发送请求的过程：\n第一步，客户端和服务器端交换SSL版本和加密组件列表，同时服务器端将密钥和签名证书发给客户端。 第二步：客户端根据证书和密钥进行验证，通过以后协商传输的密钥。这一步使用非对称加密算法。 第三步：当双方都获得密钥，且校验码没有问题。则进行TCP三次握手，此时采用对称加密算法，提高效率。 http1.0 与 http1.1的区别 **长连接：**HTTP 1.1支持长连接和请求的流水线处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟。 带宽优化： HTTP/1.1中在请求消息中引入了range头域，它允许只请求资源的某个部分。 **新增响应状态码：**100 continue 已经收到第一部分，正等待剩余部分。 101 switch protocols 服务器已确认切换协议。 **host头域：**允许物理主机上多个虚拟主机共享一个IP 缓存机制更灵活，新增control-cache头域 增加了5个请求方法：put delete connect options trace get和post的区别 都是http的请求方式。\n区别在于：\n**用途上：**get一般用于获取资源，post一般用于创建资源。 位置上：get请求的的数据会在地址栏上显示出来，以问号分割url与传输数据，多个参数用取地址符连接。而post的数据放在请求体中。 **安全性上：**优于get将信息显示在地址栏，所以对于用户密码等个人隐私信息很不安全，而post放在请求体中，在安全性上要稍微好点。 **长度限制：**get使用地址栏发送数据，而地址栏的长度是有限的。 **幂等性上：**get操作没有副作用，多次操作产生的副作用相同，所以get是幂等的，而post用于创建资源是会又副作用的，所以post不是幂等的。 cookie和session cookie和session都是跟踪会话的机制。\n**存储位置：**cookie保存在客户端用来记录信息和确定用户身份，session保存在服务端同样用来记录和确定身份。 **安全性：**cookie放在客户端很容易被查看或者破解，没有session安全。 关联性：session的运行依赖于session id 而session id 存在cookie中。如果浏览器禁止了cookie，可以使用url地址重写来传递session id **性能上：**session会在有效期内存在于服务器的数据库或者文件，当请求过多时，服务器性能会下降。 **大小上：**单个cookie保存的大小不能超过4k 使用cookie来管理session以弥补http中无状态特性。通过对set-cookie头域写入session ID可以免登录，提高访问的效率。\n握手优化：session缓存， session key 放在内存，有内存消耗， 负载均衡后找不session key。session ticket 集群可以共享。\nTCP和UDP的区别 TCP: 面向连接的安全的流式协议，连接的时候进行三次握手，数据发送的时候会进行数据确认，数据丢失之后，会进行数据重传。 确认和重传机制。 UDP: 面向无连接的不安全的报文传输，发出去就不管了，收则全收，丢则全丢。 3次握手和4次挥手 TCP三次握手：客户端向服务器端：发送SYN=1和序号seq 服务器端向客户端：回应确定信号同意连接ACK=1以及自己的连接请求SYN=1还有序号seq 客户端回应服务器端：ACK=1告诉对方它已经知道了服务器端同意，连接成功。\nTCP四次挥手：主动关闭方发送关闭信号，被动关闭方收到信号。然后进入半关闭状态，关闭的一方能接收数据但是不能发送数据。 等到另一个未关闭的一方，发起关闭信号以后，进入TIME_WAIT状态，等待对方2MSL之后，彻底关闭。\n3次握手55555555 客户端发起连接，也就是C语言中的connect函数，发送一个SYN=1的标志位，同时携带一个序号。\n服务器端有一个accept函数，用于响应连接。服务器端响应连接后回复一个ACK=1的标志位，并且也发送一个SYN=1的标志位建立连接。\n客户端收到服务器端的ACK应答以后，说明建立成功。两者都同时进入established状态。同时accept和connect函数调用成功，并返回1。\n4次挥手55555555 主动关闭方向被动关闭放发送FIN标志位，表示要断开连接。被动关闭方同意关闭，并回发ACK标志位。此时主动关闭放进入FIN_WAIT_2状态。以后主动关闭方仍然可以接收数据，但是不可以再发送数据。\n当另一方也决定关闭时，会发送FIN标志位，接收方回复ACK同意关闭，并且自身进入Time_wait状态，等待2MSL时长后关闭。发送方如果收到ACK应答后，就直接关闭，如果没有收到会一直发FIN标志位。\n滑动窗口 流量控制：防止发送方发的太快，耗尽接收方的资源。\n控制机制：滑动窗口\n在TCP报文的头部有一个16位的窗口大小，用于告诉发送方接收方可用的缓冲区大小。\n拥塞窗口 拥塞控制：防止发送方发的太快，使网络来不及处理，从而导致网络拥塞。\n控制机制：拥塞窗口\n慢启动 拥塞避免 快重传 快恢复 **慢启动：**为了防止大量数据瞬间注入网络，引起网络阻塞。慢启动算法设定，最开始窗口为1个最大报文长度。一个传输轮次增加一倍的窗口大小。当达到慢开始门限后，执行拥塞避免算法。 拥塞避免： 每个传输轮次将窗口增加一个单位，即加法增长。 快重传： 当收到3个重复确认以后，执行快恢复算法。慢开始门限和发送窗口减半，然后发缺失的数据，进行加法增长，重新进入拥塞避免阶段。 **快恢复：**慢开始门限减半，发送拥塞窗口设定为门限加3。如果后面依旧收到重复的ACK则进行加法增长窗口，如果收到新的ACK，则拥塞窗口设定为慢开始门限的值，并重新进入拥塞避免阶段。 超时进入的是慢启动，重复确认才进入快恢复。\n选择性重传在options中left edge和right edge告诉发送方已经收到的报文序号\nTCP粘包问题 **udp不会出现粘包。**发送方发送的若干包数据到接收方接收时，包粘在了一起。\n造成粘包的原因时因为发送端延迟发送或者接收方没有及时接收缓冲区中的数据。\n通常可以使用以下三种方式来解决\n编程时设定立即发送的操作指令 把数据长度与消息一起发送。 使用特殊标记来区分消息的间隔 HTTP和HTTPS有什么不同 HTTP协议是一种使用明文数据传输的网络协议。HTTPS协议可以理解为HTTP协议的升级，就是在HTTP的基础上增加了**数据加密。**在数据进行传输之前，对数据进行加密，然后再发送到服务器。这样，就算数据被第三者所截获，但是由于数据是加密的，所以你的个人信息让然是安全的。这就是HTTP和HTTPS的最大区别。\n在浏览器地址栏键入URL，按下回车之后会经历以下流程 浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;（递归式和迭代式） 解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接; 浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器; 服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器; 释放 TCP连接; 浏览器将该 html 文本并显示内容; UDP如何做到可靠 想要做到可靠，必须要做到**无重复，无丢失，无错误，无失序。**借鉴TCP的可靠机制\n发送时进行编号 接收方收到数据发出应答信号（超时重传，3次确认重传） 增加校验位 NAT DNS ARP NAT用于实现从内部IP地址到外部IP地址的映射 DNS提供域名到IP地址的映射或者反过来 ARP提供IP到MAC地址的映射 DNS 基于UDP的协议\n递归查询：父域名代替当前服务器递归查询，最后依次返回 迭代查询：父域名服务器告诉当前服务器下一次查询的位置 http状态码 100 continue 等待继续发送 200 ok 请求成功 206 patial content 部分资源 301 永久重定向 302 临时重定向 307 400 客户端请求报文语法错误 403 禁止访问 404 资源不存在 408 请求超时 500 服务器内部错误 503 服务器不可用 http 2.0 SPDY 二进制分帧 多路复用 首部压缩 服务器推送 http 3.0 QUIC+UDP 0 RTT 没有队头阻塞的多路复用 前向纠错 网络安全 **sql注入：**用户提交一段数据库查询代码，根据程序返回的结果获得它想得知的数据。 dos攻击： 让运行的服务器呈停止状态。集中请求造成资源过载，攻击安全漏洞使服务停止。 TCP原理 面向连接，可靠的，基于字节流的传输层协议\n七层模型 物数网传会表应\nping是从应用层直接使用网络层的ICMP协议的，不经过传输层。原始套接字直接使用网络层的IP。\n两台电脑通信：网线+不同的IP地址和子网掩码，即处于同一网段。\nTCP和UDP可以同时使用相同的端口。\n应用程序可以同时使用TCP和UDP两个协议。\nhub集线器 可以实现多个IP主机通信，但是hub的实现方式是广播，容易产生拥堵。\nswitch交换机 是集线器的升级版，可以广播可单播。ARP不知道对方MAC地址时，先广播6个ff的MAC地址，所有网卡都会接收，但是只有目的IP会单播回应，其他的都会丢弃。然后发送方收到正确的MAC后再单播传输数据。\nARP攻击 给两个MAC地址响应ARP广播的目的IP，经由中间人，窃取信息后再转发到正确的地址。\n默认网关 在同一个交换机连接的网络中，属于同一网段，用不到默认网关。网关用来传递两个不同网段的通信，默认网关通常是路由器。当通信的数据不在当前网段时，即发给默认网关。路由器就是用来连接不同网段的，用来构建一个更大的网络。在传输不同的网段信息时，源IP和目的IP是不变的，源MAC和目的MAC是改变的，每经过一个路由器修改一次，记录的是下一次的目的，和这一次的发送MAC。\n延迟确认 ack会随着响应数据发送给对方，如果没有响应的数据就会等待200ms左右，在这期间如果有对方确认到达则立即发送。如果200ms后仍然没有数据需要发送则单独发送ACK。目的是节省带宽。\nNagle算法 没有已发送未确认报文段时，立即发送数据。 存在未确认报文段时，达到mss时再发。 同时有nagle算法和延迟确认存在时会导致网络效率下降，通常会关闭延迟确认和nagle算法。\nsetsockopt(s,IPPROTO_TCP,TCP_QUICKACK,(int*){1}, sizeof(int)); //关闭延迟确认 setsockopt(client_fd, SOL_TCP, TCP_NODELAY,(int[]){1}, sizeof(int)); //关闭nagle算法 忽略SIGPIPE信号 客户端和服务器端连接建立后，若某一端关闭连接，而另一端仍然向它写数据，第一次写数据后会收到RST响应，第二次写数据时，内核会向进程发送一个SIGPIPE信号，通知进程此连接已断开，而这个信号的默认处理方式是终止进程，服务器直接关闭。\nsignal(SIGPIPE, SIG_IGN) SIGSEGV 11 访问地址无效 SIGIO 29异步通知信号 SIGKILL 9 无条件终止\n传输层与网络层的区别 传输层位于网络层之上，为不同主机上的应用进程提供逻辑通信。端到端传输。 网络层负责ip数据报的产生以及ip数据包在网络中的路由转发。 状态码499 服务器端处理的时间过长，客户端主动关闭了连接。\n分块编码 transfer-encoding:chunked 响应头域 它允许服务器发送给客户端的数据分成多个部分，并且不需要预先直到发送数据的总大小。\nclose_wait 基本的思想就是要检测出对方已经关闭的socket，然后关闭它。维持一个心跳包或者设置一个超时时间。\n","permalink":"//localhost:1313/posts/002%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","summary":"\u003ch2 id=\"tcp头部\"\u003eTCP头部\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e16位源端口\u003c/li\u003e\n\u003cli\u003e16位目的端口\u003c/li\u003e\n\u003cli\u003e32位序号\u003c/li\u003e\n\u003cli\u003e32位确认序号\u003c/li\u003e\n\u003cli\u003e4位TCP头部长度  单位为4字节\u003c/li\u003e\n\u003cli\u003e6位标志位\u003c/li\u003e\n\u003cli\u003e16位滑动窗口\u003c/li\u003e\n\u003cli\u003e16位校验和\u003c/li\u003e\n\u003cli\u003e16位紧急指针\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e注意：\u003cstrong\u003eTCP的包没有IP地址\u003c/strong\u003e，只有源端口和目的端口。一个TCP连接需要4个元组来表示一个连接。（源端口，目的端口，源IP，目的IP）\u003c/p\u003e","title":"002计算机网络"},{"content":"阻塞IO和非阻塞IO 阻塞的文件描述符为阻塞IO 非阻塞的文件描述符为非阻塞IO 同步IO和异步IO 同步IO向应用程序通知的是IO就绪事件。要求用户代码自行执行读写操作，将数据从内核缓冲区读入用户缓冲区。 异步IO向应用程序通知的是IO完成事件 。由内核来执行IO读写操作。在linux环境下，aio.h头文件定义的函数提供了对异步IO的支持。 事件处理模式 reactor 同步IO模型通常用于实现reactor模式。要求主线程只负责监听文件描述符是否有事件发生，有的话就立即将该事件通知工作线程。 proactor 异步IO模型通常用于实现proactor模式。也可以用同步IO模拟出proactor模式。proactor将所有IO操作都交给主线程和内核来处理，工作线程仅仅负责业务逻辑。 Reactor模式的工作流程 主线程往epoll内核事件表中注册socket上的就绪事件。 主线程调用epoll_wait等待socket上有数据可读。 当socket上有数据可读时，epoll_wait通知主线程。主线程将socket可读事件放入请求队列。 睡眠在请求队列上的某个工作线程被唤醒，它从socket读取数据，并处理客户请求，然后往epoll内核事件表中注册该socket上的写就绪事件。 主线程调用epoll_wait等待socket可写。 当socket可写时，epoll_wait通知主线程。主线程将socket可写事件放入请求队列。 睡眠在请求队列上的某个工作线程被唤醒，它往socket上写入服务器处理客户请求的结果。 并发模式 半同步半异步模式：同步线程用于处理客户逻辑，异步线程用于处理IO事件。异步线程监听到客户请求后，就将其封装成请求对象并插入到请求队列中，请求队列将通知某个工作在同步模式下的工作线程来读取并处理该请求对象。半同步半反应堆模式采用的事件处理模式是reactor模式：它要求工作线程自己从socket上读取客户请求和往socket写入服务器应答。半同步半反应堆也可以模拟proactor模式，即由主线程来完成数据的读写。在这种情况下，主线程会将应用程序数据，任务类型等信息封装为一个任务对象，然后将其插入请求队列。工作线程从请求对象取得任务对象以后，可直接处理无需执行读写操作。\n问题：主线程和工作线程共享请求队列需要加锁。工作线程较少时可能产生请求任务堆积。\n领导者追随者模式\n在IO模型中，同步和异步区分的是内核向应用程序通知的是何种事件，是就绪事件还是完成事件，以及该由谁来完成IO读写，是应用程序还是内核。\n在并发模式中，同步指的是程序完全按照代码序列的顺序执行。异步指的是程序的执行需要由系统事件来驱动。常见的系统事件包括中断和信号。\n虚拟地址空间 **虚拟地址是操作系统管理内存的一种方式。**方便不同进程使用的虚拟地址彼此隔离。方便物理内存中不相邻的内存在虚拟地址上视为连续的来使用。虚拟地址和物理地址的映射是通过MMU页表进行的。虚拟内存对实际内存有保护作用。\n什么是进程 进程是系统进行资源分配的基本单位，是程序加载到内存后的执行过程。进程一般由数据段，代码段和进程控制块三部分组成。系统通过进程控制块感知进程的存在并对进程进行控制。由于进程之间空间相互独立，多进程比多线程更安全，一个进程基本上不会影响另外一个进程。\n进程三种状态 创建：创建PCB 就绪 运行 阻塞 终止: 归还PCB 什么是线程 线程是CPU调度的基本单位。一个进程可以包含多个线程，线程自己基本不拥有系统资源，但是它可以和同属于一个进程的其他线程共享进程所拥有的全部资源。多线程之间对内存共享，线程间通信可以直接基于共享内存来实现，比多进程之间通信更轻量。多线程之间切换不需要切换虚拟内存空间、文件描述符等，所以线程的上下文切换也比多进程轻量。\n进程fork以后，遵循读时共享写时复制的机制。\n父子进程长期共享：文件描述符和mmap建立的映射区。\n子进程的进程ID，定时器，未决信号集和父进程不同。\n多进程和多线程的应用场景 一般不同任务间需要大量的通信，使用多线程的场景比多进程多。IO密集型。\n但是多进程有更高的容错性，一个进程的崩溃不会导致整个系统的崩溃，在任务安全性较高的情况下，采用多进程。CPU密集型。\n进程线程的本质区别 进程更安全，一个进程完全不会影响另外的进程。 进程间通信比线程间通信的性能差很多。 线程切换开销更低。 IPC进程间通信55555555555 无名管道pipe（血缘关系的进程） 有名管道fifo （无血缘关系的进程） 共享内存 信号(开销小) 消息队列 信号量 套接字 进程间同步 文件锁 信号量 线程间同步 互斥锁 读写锁(读时共享，写时互斥) 条件变量 信号量(互斥锁的升级版) 自旋锁(可以避免进程或线程上下文的开销) 线程共享资源 文件描述符表（打开的文件） 进程用户ID和进程组ID 进程的**内存地址空间.**text代码段 .data数据段 .bss heap堆区 全局变量 静态变量 每种信号的处理方式 进程的当前目录 线程独享资源 线程栈 寄存器组的值 线程ID 错误返回码errno变量 线程信号屏蔽字 线程优先级 进程调度方式 抢占式：立马停止。 非抢占式：时间片用完或者等待资源时，再调用另一个进程。 进程调度算法 先来先服务 短作业优先 优先级调度 时间片轮转 高响应比优先 管道 管道是一种伪文件，实质为内核缓冲区 大小为4K 内核借用环形队列实现\n管道是半双工的，数据只能单向流动，不可重复读取，只能用于有血缘关系的进程\nLinux命令 find命令，用来查找文件。常用的按照名字查找-name，按照文件类型查找-type，linux常用的文件类型有七种，普通文件，目录文件，管道，套接字，软链接，块设备，字符设备。还可以按照文件大小查询-size。 grep命令，按照文件内容来查找。使用规则是grep option pattern file ps aux curl命令 访问一个网页 df查看磁盘大小 du查看目录大小 free -h 查看内存大小和使用情况 top查看系统的实时负载 netstat -ta 查看监听的TCP stat 获取文件属性 file 查看文件类型 sudo iptables -L 查看防火墙状态 sudo vim etc/sysctl.conf 查看TCP属性 大端字节序和小端字节序 大端字节序：网络字节序（高位存低位） 小端字节序：主机字节序，现代PC机采用小端字节序（低位存低位，高位存高位） 比如0x1f3f5f7f 地址0x1000 0x1001 0x1002 0x1003\n大端法：7f存在0x1003 5f存0x1002 3f存0x1001 1f存0x1000 低存高\n小端法：7f存在0x1000 5f存0x1001 3f存0x1002 1f存0x1003 低存低\nsocket服务器端所用函数 socket 创建socket文件描述符 bind 绑定IP和端口号 listen 监听 accept 接受连接 处理客户端的业务\nsocket客户端所用函数 socket 创建套接字文件描述符 bind 绑定IP和端口号（也可以隐式绑定） connect 尝试连接服务器 处理服务器端的业务\n五种网络IO模型 同步阻塞IO\n同步非阻塞IO\nIO多路复用\n信号驱动IO\n异步IO\nselect与poll、epoll的各自的优缺点和区别 select是跨平台的，windows、linux、unix系统下都有 poll在linux和unix下有 epoll是linux特有，epoll的要义就是高效的监视多个socket 多路IO监听时没有动静，监听会休眠监听。 讲讲epoll的边沿触发和水平触发 水平触发：如果epoll_wait缓冲区有数据则直接返回。 边沿触发：如果一次没有读完epoll_wait缓冲区中的数据，则只有当另外有数据再写入时，才返回。 使用边沿触发和非阻塞IO来达到水平触发的效果，减少了epoll_wait的调用次数，提高了效率。 边沿触发可以只读取缓存区中前面的部分信息，进而分析后面的信息是否有用，如果无用则直接丢弃。 Libevent库 是一个开源的库，封装了socket和IO多路转接，用于高并发服务器的开发。跨平台可移植性好。跨平台，线程安全，基于reactor模式实现的高效网络库。\n协程 协程是一种用户态的轻量级线程。协程的开销远远小于线程的开销。\n协程是一种比线程更加轻量级的存在，一个线程可以拥有多个协程。 无论是进程还是线程，都是由操作系统所管理的。而协程不是被OS所管理，而完全是由程序所控制(也就是在用户态执行)。\n信号 信号是一种不精确通信。\n常用的信号有SIGKILL 9 无条件终止信号，SIGSEGV 11 无效存储访问 SIGPOLL 8 轮询事件信号。\n信号有三种处理方式：忽略，捕获，默认。\nkill命令向进程发送信号\n什么是死锁 因为资源调度的方式不合理或者资源的稀缺性，导致进程间的相互等待。\n死锁的四个必要条件：互斥条件，请求和保持条件，环路等待条件，不可剥夺条件。\n死锁的预防只要破坏死锁产生的四个必要条件。通常采用预先静态分配方法，可以破坏请求和保持条件。\n死锁的避免：采用银行家算法，只要系统处于安全状态，系统便可避免死锁。\n死锁的解决：撤销进程，剥夺资源。\n僵尸进程和孤儿进程 僵尸进程：子进程死亡，而父进程没有进行回收 waitpid回收指定进程 孤儿进程：父进程死亡，而子进程仍然存活，但是系统会让init进程领养孤儿进程。 fork函数 fork函数用来创建子进程 一次调用，两次返回。在父进程中返回子进程的PID，在子进程中返回0\nexec族 在程序中调用另一个可执行程序，但是进程ID不改变。\n网络编程IO 服务器通常需要处理三类事件：IO事件，信号及定时事件。\n事件处理模式：reactor和proactor\n同步IO模型通常用于实现reactor模式\n异步IO则用于实现proactor模式\n什么是reactor模式 它要求主线程只负责监听文件描述符上是否有事件发生，有的话立即将该事件通知工作线程。读写数据，接受新的连接以及处理客户请求均在工作线程中完成。\n什么是proactor模式 它将所有IO操作都交给主线程和内核来处理，工作线程仅仅负责业务逻辑。\nmmap存储映射 将磁盘空间映射到进程空间，**使进程可以采用指针的方式操作这段内存，**而不用调用read和write函数。提高了读写的效率，同时也可以实现进程间的通信。\n异步IO原理 底层将数据准备好后，内核会给进程发送一个异步通知信号SIGIO29通知进程，然后进程调用信号处理函数去读数据，没准备好，数据就忙自己的事情。\nselect poll epoll select单个进程打开的文件描述符有上限，为1024或者2048。select对于有响应的事件需要轮询来查找满足要求的事件。每次调用select都需要把文件描述符集合从用户态拷贝到内核态。 poll描述fd的集合是链式的，解决了打开文件描述符数量的限制。同样需要轮询满足事件的文件描述符。也需要进行用户态和内核态的文件描述符拷贝。poll是水平触发。 epoll使用了mmap内存映射技术和红黑树的数据结构。通过三个函数来监听多个文件描述符，同时不随数量的上升效率呈线性的下降。mmap内存读写快于IO读写，及时共享映射内存的改变。 ","permalink":"//localhost:1313/posts/001%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","summary":"\u003ch2 id=\"阻塞io和非阻塞io\"\u003e阻塞IO和非阻塞IO\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e阻塞的文件描述符\u003c/strong\u003e为阻塞IO\u003c/li\u003e\n\u003cli\u003e非阻塞的文件描述符为非阻塞IO\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"同步io和异步io\"\u003e同步IO和异步IO\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e同步IO向应用程序通知的是\u003cstrong\u003eIO就绪事件\u003c/strong\u003e。要求用户代码自行执行读写操作，将数据从内核缓冲区读入用户缓冲区。\u003c/li\u003e\n\u003cli\u003e异步IO向应用程序通知的是\u003cstrong\u003eIO完成事件\u003c/strong\u003e 。由内核来执行IO读写操作。在linux环境下，aio.h头文件定义的函数提供了对异步IO的支持。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"事件处理模式\"\u003e事件处理模式\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003ereactor 同步IO模型通常用于实现reactor模式。要求主线程只负责监听文件描述符是否有事件发生，有的话就立即将该事件通知工作线程。\u003c/li\u003e\n\u003cli\u003eproactor 异步IO模型通常用于实现proactor模式。也可以用同步IO模拟出proactor模式。proactor将所有IO操作都交给主线程和内核来处理，工作线程仅仅负责业务逻辑。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"reactor模式的工作流程\"\u003eReactor模式的工作流程\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e主线程往epoll内核事件表中注册socket上的就绪事件。\u003c/li\u003e\n\u003cli\u003e主线程调用epoll_wait等待socket上有数据可读。\u003c/li\u003e\n\u003cli\u003e当socket上有数据可读时，epoll_wait通知主线程。主线程将socket可读事件放入请求队列。\u003c/li\u003e\n\u003cli\u003e睡眠在请求队列上的某个工作线程被唤醒，它从socket读取数据，并处理客户请求，然后往epoll内核事件表中注册该socket上的写就绪事件。\u003c/li\u003e\n\u003cli\u003e主线程调用epoll_wait等待socket可写。\u003c/li\u003e\n\u003cli\u003e当socket可写时，epoll_wait通知主线程。主线程将socket可写事件放入请求队列。\u003c/li\u003e\n\u003cli\u003e睡眠在请求队列上的某个工作线程被唤醒，它往socket上写入服务器处理客户请求的结果。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"并发模式\"\u003e并发模式\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e半同步半异步模式：同步线程用于处理客户逻辑，异步线程用于处理IO事件。异步线程监听到客户请求后，就将其封装成请求对象并插入到请求队列中，请求队列将通知某个工作在同步模式下的工作线程来读取并处理该请求对象。半同步半反应堆模式采用的事件处理模式是reactor模式：它要求工作线程自己从socket上读取客户请求和往socket写入服务器应答。半同步半反应堆也可以模拟proactor模式，即\u003cstrong\u003e由主线程来完成数据的读写\u003c/strong\u003e。在这种情况下，主线程会将应用程序数据，\u003cstrong\u003e任务类型等信息封装为一个任务对象\u003c/strong\u003e，\u003cstrong\u003e然后将其插入请求队列\u003c/strong\u003e。\u003cstrong\u003e工作线程从请求对象取得任务对象以后，可直接处理无需执行读写操作。\u003c/strong\u003e\u003c/p\u003e","title":"001操作系统"},{"content":"综合writing 模板 Both the passage and the lecture explore the topic about \u0026hellip;. The reading passage proclaims that \u0026hellip;. While in the lecture , the professor uses three specific perspectives to contradict what the reading states .\nFirst and foremost , the reading part holds the belief that \u0026hellip;. because \u0026hellip;. However , the lecturer doubts the view by stating that \u0026hellip; In order to strength his own point , the professor further explains that \u0026hellip;\nMoreover , the reading maintains that \u0026hellip;.. since \u0026hellip;.. The professor in the lecture , on the contrary , points out that \u0026hellip;. The professor defends his own point with the example of \u0026hellip;.\nLast but not least , the reading material believes/states that \u0026hellip; because \u0026hellip; Nevertheless , the professor argues that \u0026hellip;. For instance , \u0026hellip;.\nBoth the passage and the lecture explore the topic about .... The reading passage proclaims that .... While inthe lecture , the professor uses three specific perspectives to contradict what the reading states . First and foremost , the reading part holds the belief that .... because .... However , the lecturer doubts the view by stating that ... In order to strength his own point , the professor further explains that ... Moreover , the reading maintains that ..... since ..... The professor in the lecture , on the contrary , points out that .... The professor defends his own point with the example of .... Last but not least , the reading material believes/states that ... because ... Nevertheless , the professor argues that .... For instance , .... 讨论writing 模板 As far as I\u0026rsquo;m concerned , I tend to be in favor of the argument that \u0026hellip;. My view is going to be illustrated by following reasons and examples.\nTo start with , just as XXX has said , \u0026hellip;\nIn addition , \u0026hellip;\n150 - 160\nAs far as I\u0026#39;m concerned , I tend to be in favor of the argument that .... To start with , just as XXX has said , ... In addition , ... 科技 产品 消费 效率 心理需求 心理满足 As far as I am concerned buying the newest technological devices would be a wise choice . My view is going to be illustrated by the following reasons and examples.\nTo start with , the newest technological devices help users to improve their efficiency , no matter in work or study . It should be emphasized that along with the accelerating development of the whole society , a higher efficiency becomes more and more important . It allows individuals to accomplish more tasks within relatively certain time limits , which in turn strengthens one\u0026rsquo;s competitiveness and offers them a higher chance to succeed. In that case , buying new technological devices serves better in assisting the person to get high efficiency . To be specific , there is no doubt that new technological devices generally have advantages compared with existing ones . For example, they may offer some new functions or improve existing ones , and all these factors play an essential role in helping people achieve their aims more effectively , removing the barriers as well as difficulties. As a result , people who use new technological devices are capable of finishing tasks more quickly . In other words , new technological devices guarantee high efficiency.\nIn addition , using the newest technological devices also brings individuals the benefit of realizing their higher needs. Thanks to the development of the economy and technology, people in current society have almost fulfilled their basic needs related to survival and safety . Under such circumstances , they have begun to realize those need that are at a higher level . Those needs are usually more psychological and social , which makes the choice of buying the newest technological devices reasonable . To give more details , people using the newest technological devices are able to enjoy the feeling of happiness and satisfaction after they buy it immediately since this behavior continuously implies to them that they have the right and the ability to enjoy the best things. Besides , people who possess the newest devices usually can grab the attention of people surrounding them , which enables them to enclose relationship with others and even harvest other people\u0026rsquo;s respect or envy . All factors listed above , psychological feelings and connections with others , are just what nowadays people mainly are pursuing , and it supports my standpoint that buying the newest devices , rather than adopting them when they are well-adopted , is worth the effort .\nAs far as I am concerned , I tend to be in favor of the argument that people should like to pursue the devices of the newest version. My view is going to illustrated by following reasons and example.\nTo start with, just as Mike has said, the newest technological devices help users to improve their efficiency, no matter in work or study. It should be emphasized that along with the accelerating development of the whole society , a higher efficiency becomes more and more important. It allows individuals to accomplish more tasks within relatively certain time limits , which in turn strengthens one\u0026rsquo;s competitiveness and offers them a higher chance to succeed.\nIn addition , using the newest technological devices also brings individuals the benefit of realizing their higher needs. To be more specific , people using the newest technological devices are able to enjoy the feeling of happiness and satisfaction after they buy it immediately .\nsince this behavior continuously implies to them that they have the right and the ability to enjoy the best things.\n创造力 As far as I am concerned , I tend to be in favor of the argument that the power of creativity far outweighs that basic knowledge in terms of successful inventions. My view is going to illustrated by following reasons and example. To start with , just as Mike has said , the power of creativity far exceeds the power of basic knowledge. For instance , Bell is commonly credited with inventing the first practical telephone by taking advantage of his creativity and numerous endeavors. It is precisely due to his creativity that such scientific breakthroughs have been made. In addition , in the modern world , similar evidence could be also be traced . Steve Jobs , co-founders and former CEO of Apple , shocked the world with his creative electronic products whose superior functions and qualities can never be matched. 压力 健康 生活压力\nAs far as I am concerned , I tend to be in favor of the argument that government should arouse people\u0026rsquo;s awareness of importance of physical soundness. My view is going to be illustrated by following reasons and example. To start with , just as Mike has said , with the acceleration of social development , people , especially young people , are confronted with unprecedentedly fierce competition . For instance , they need to work very hard to guarantee a decent life , which causes them much(way) heavier pressure than before. Under such circumstances , most of them are prone to in a sub-health state . In summary , government should increase access to public exercise equipment in neighborhood , raising people\u0026rsquo;s awareness of the importance of doing exercise regularly through the mass media , which is the government\u0026rsquo;s responsibility. 因特网 科技 社会发展 生活方式\nAs far as I am concerned , I tend to be in favor of the argument that Internet is a treasure trove of information , which offers knowledge on any given topic under the sun. My view is going to be illustrated by following reasons and examples. To start with , just as Mike has said , search engines make information accessible on various subject matters such as government law and services , trade and conferences , market information , new innovations , and technical support , and even dispense advise on love and relationship matters. In addition , it has become common practice to seek assistance from the web in order to research and gather resources for homework , office presentations , and supplement one\u0026rsquo;s own research . The web also updates news about the latest breakthroughs in the field of medicine , technology , and other domains of science . 兴趣 爱好\nAs far as I am concerned , I tend to be in favor of the argument that young students should not decrease an abundance of time that teaching students about music and art . My view is going to be illustrated by following reasons and examples .\nTo start with , just as Mike has said , we should emphasize what is conveyed in the famous saying: \u0026lsquo;Interest is the best teacher.\u0026rsquo; Evidently , the primary step toward a person\u0026rsquo;s success is to have an emotional preference . In fact , interest constitutes the biggest impetus in learning , keeping one refreshed and preventing feelings of boredom and tiredness .\nIn addition , numerous epoch-making accomplishments in the scientific world owe much to the initial interest of the scientists. Therefore , students shouldn\u0026rsquo;t be compelled to increase the time spent on any knowledge field , but rather to keep a balance among all knowledge fields.\n学生是否要 gap \u0026mdash; 兴趣 As far as I am concerned , I tend to be in favor of the argument that students should take at least a year off to work or travel before they begin studying at a university when students finish their high school , which can be beneficial for students to discover their interests. My view is going to be illustrated by the following reasons and examples.\nTo start with , just as Mike has said , the famous saying goes , \u0026quot; Interest is the best teacher.\u0026quot; Evidently , the primary step toward a person\u0026rsquo;s success is to have an emotional preference. In fact , interest constitutes the biggest impetus in learning , keeping one refreshed and preventing feelings of boredom and tiredness. Therefore , it is helpful that spending at least a year work or travel before getting the university education , which is one of the best ways to figure out personal passion if students want to be successful in their future careers.\n以 成绩 评分 As far as I am concerned , I tend to be in favor of the argument that performance should be the only criterion when teachers give grades. My view is going to be illustrated by following reasons and examples . To start with , just as Mike has said , such a strategy would show fairness , which is an important factor to motivate students. The lack of motivation would undoubtedly pose negative effects on student\u0026rsquo;s studies . Consequently , it would even have a lasting effect on their future life. In addition , giving grades based on performance , instead of effort , also means a clear standard . It would be hard for teachers to tell whether a student is working hard or not during the process. It is totally subjective . In contrast , the performance , in other words , the results , cannot tell lies , making the performance-based criteria a wiser one . Do you agree or disagree with the following statement? It is often not a good thing for people to move to a new town or country because they lose their old friends. Use specific reasons and examples to support your answer.\n搬家 好不好 As far as I am concerned , I tend to be in favor of the argument that people wouldn\u0026rsquo;t lose their friends because they move to a new town or country. My view is going to be illustrated by following reasons and example. To start with , just as Mike has said , with the development of society , the infrastructure make it convenient as well as time-saving to travel another town or country, which means people can still meet up with friends easily . Going to a new town or country can also push individuals to broaden their perspectives and see the world in a distinctive way. In addition , the opportunities of being successful in future career are enhanced by settling in a big city . Simultaneously , I believe that the greatest predictor of being successful in the future career is how many hours are devoted to goal , rather than spending too much time with friends . 参考\nTo start with, as Mike mentioned, the development of society has made travel between towns and countries more convenient and time-saving. This means that people can still meet up with friends easily. Moving to a new place can also encourage individuals to broaden their perspectives and see the world in new ways.\nIn addition, settling in a big city can enhance opportunities for future career success. However, I believe that the greatest predictor of success is how many hours one devotes to their goals, rather than spending too much time with friends.\n帮助他人 with the development of \u0026hellip;\u0026hellip;.. = due to the refinement of \u0026hellip;\u0026hellip;\u0026hellip; = As advances in = through the improvement of \u0026hellip;\u0026hellip;\u0026hellip; = due to the advancement of\nAs far as I am concerned , I tend to be in favor of the argument that currently, many people are accepted assistance from others people more readily than before . My view is going to be illustrated by following reason and example. To start with , just as Mike has said , due to the advancement of society , people are wealthier than before , individuals are more likely to spend more time to care about other , someone needs help , since the social responsibility would be powerful enough to push them to help other. In addition , take me for example , every time I see the homeless or someone needs help , I will lend them a hand , holding up social responsibility as much as possible. In this action , it is social harmony that is strongly promoted. ","permalink":"//localhost:1313/posts/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/","summary":"\u003ch1 id=\"综合writing\"\u003e综合writing\u003c/h1\u003e\n\u003ch2 id=\"模板\"\u003e模板\u003c/h2\u003e\n\u003cp\u003eBoth the passage and the lecture explore the topic about  \u0026hellip;.  The reading passage proclaims that \u0026hellip;. While in the lecture , the professor uses three specific \u003cstrong\u003eperspectives\u003c/strong\u003e to contradict what the reading states .\u003c/p\u003e\n\u003cp\u003eFirst and foremost , the reading part holds the belief that \u0026hellip;. because \u0026hellip;. However , the lecturer doubts the view by stating that \u0026hellip; In order to strength his own point , the professor further explains that \u0026hellip;\u003c/p\u003e","title":"英语学习"},{"content":"测试数据范围 时间复杂度 对应数据量 O(n) 1,000,000 O(log N) 100,000 O(n^2) 1,000 O(n^3) 100 特殊情况 10 滑动窗口 动态规划 DP dp分析, 两个角度\n状态表示 集合: 前i个数, 总和为j的所有方案 属性: 状态计算 01背包 n = 4 // 4件物品 m = 5 // 背包最大容量为 5 测试样例 4 5 1 2 2 4 3 4 4 5 j i 状态f[i][j]定义：前 i 个物品，背包容量 j 下的最优解（最大价值）\n前i个物品的价值 1 2 3 4 5 0 0 0 0 0 0 1 2 2 2 2 2 2 2 4 6 6 6 3 2 4 6 6 8 4 2 4 6 6 8 第i个物品的数据 1 2 3 4 volume 1 2 3 4 weight 2 4 4 5 单调栈 合并区间 模板\n排序数组 更新合并左右端点 vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; merge(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; \u0026amp;intervals) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; ans; if (intervals.empty()) return ans; sort(intervals.begin(), intervals.end()); // 先排序 int l = intervals[0][0], r = intervals[0][1]; // 左右端点 for (int i = 1; i \u0026lt; intervals.size(); i++) // 第二数组开始遍历 { if (intervals[i][0] \u0026gt; r) // 第二数组的左端点大于上一数组的右端点, 则保存上一数组 { ans.push_back({l, r}); l = intervals[i][0], r = intervals[i][1]; // 更新左右端点 } else { r = max(r, intervals[i][1]); // 否则更新右端点 } } ans.push_back({l, r}); return ans; } 迪杰斯特拉算法 快速幂 模板\n快速幂 —— 模板题 AcWing 875. 快速幂 求 m^k mod p，时间复杂度 O(logk)。\nint qmi(int m, int k, int p) { int res = 1 % p, t = m; while (k) { if (k\u0026amp;1) res = res * t % p; t = t * t % p; k \u0026gt;\u0026gt;= 1; } return res; } 并查集 ","permalink":"//localhost:1313/posts/algorithm_study/","summary":"\u003ch1 id=\"测试数据范围\"\u003e测试数据范围\u003c/h1\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: center\"\u003e时间复杂度\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e对应数据量\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eO(n)\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e1,000,000\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eO(log N)\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e100,000\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eO(n^2)\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e1,000\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eO(n^3)\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e100\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e特殊情况\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e10\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch1 id=\"滑动窗口\"\u003e滑动窗口\u003c/h1\u003e\n\u003ch1 id=\"动态规划-dp\"\u003e动态规划 DP\u003c/h1\u003e\n\u003cp\u003edp分析, 两个角度\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e状态表示\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003e集合: 前\u003ccode\u003ei\u003c/code\u003e个数, 总和为\u003ccode\u003ej\u003c/code\u003e的所有方案\u003c/li\u003e\n\u003cli\u003e属性:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e状态计算\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"01背包\"\u003e01背包\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 4件物品\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 背包最大容量为 5 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e测试样例\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: center\"\u003e\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003ej\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003ei\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e状态\u003ccode\u003ef[i][j]\u003c/code\u003e定义：\u003cstrong\u003e前 i 个物品\u003c/strong\u003e，\u003cstrong\u003e背包容量 j\u003c/strong\u003e 下的最优解（\u003cstrong\u003e最大价值\u003c/strong\u003e）\u003c/p\u003e","title":"算法学习记录"},{"content":"emplace用法 emplace 是 C++ 中用于容器（如 std::vector, std::map, std::unordered_map 等）的一种方法，允许你在容器中直接构造元素，而不需要先构造再复制或移动。这通常可以提高性能，减少不必要的对象拷贝。\n与 insert 类似\n使用 emplace 的主要特点： 直接在容器中构造：emplace 会接受构造元素所需的所有参数，并在容器的内部直接创建该对象。 避免多次拷贝：与 push_back 或 insert 不同，emplace 不会执行隐式拷贝构造，这样可以避免额外的开销。 示例： 以下是一个使用 std::vector 和 std::unordered_map 的例子，说明 emplace 的使用：\n使用 std::vector #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; class Point { public: int x, y; Point(int x, int y) : x(x), y(y) {} }; int main() { std::vector\u0026lt;Point\u0026gt; points; // 使用 emplace 方法直接构造 Point 对象 points.emplace_back(1, 2); points.emplace_back(3, 4); for (const auto\u0026amp; point : points) { std::cout \u0026lt;\u0026lt; \u0026#34;Point(\u0026#34; \u0026lt;\u0026lt; point.x \u0026lt;\u0026lt; \u0026#34;, \u0026#34; \u0026lt;\u0026lt; point.y \u0026lt;\u0026lt; \u0026#34;)\u0026#34; \u0026lt;\u0026lt; std::endl; } return 0; } 使用 std::unordered_map #include \u0026lt;iostream\u0026gt; #include \u0026lt;unordered_map\u0026gt; #include \u0026lt;string\u0026gt; int main() { std::unordered_map\u0026lt;std::string, int\u0026gt; map; // 使用 emplace 插入键值对 map.emplace(\u0026#34;apple\u0026#34;, 10); map.emplace(\u0026#34;banana\u0026#34;, 20); for (const auto\u0026amp; pair : map) { std::cout \u0026lt;\u0026lt; pair.first \u0026lt;\u0026lt; \u0026#34;: \u0026#34; \u0026lt;\u0026lt; pair.second \u0026lt;\u0026lt; std::endl; } return 0; } 总结： emplace 方法是通过 完美转发 构造元素，可以显著提升性能。 它适用于任何需要插入或添加元素的 STL 容器。 min_element 查找最小元素函数 std::min_element 是 C++ 标准库 \u0026lt;algorithm\u0026gt; 中的一个非常有用的算法函数，它用于在指定范围内查找最小元素。下面我会详细解释 min_element 的用法，以及使用解引用操作符 * 的相关内容。\n1. std::min_element 函数原型 template\u0026lt;class ForwardIt\u0026gt; ForwardIt min_element(ForwardIt first, ForwardIt last); 参数： first: 指向范围开始的迭代器（包含）。 last: 指向范围结束的迭代器（不包含）。 返回值：返回指向容器内最小元素的迭代器。如果范围为空，则返回 last。 用法步骤 包含必要的头文件： 使用 min_element 之前，确保包含 \u0026lt;algorithm\u0026gt; 头文件。 指定范围： 使用容器的 begin() 和 end() 方法来指定需要查找最小元素的范围。 获取最小值： 使用解引用操作符 * 获取迭代器指向的值。 2. 示例代码 以下是一个简单的示例，使用 std::min_element 查找 std::vector 中的最小值：\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;algorithm\u0026gt; int main() { std::vector\u0026lt;int\u0026gt; numbers = {3, 1, 4, 1, 5, 9, 2, 6}; // 使用 min_element 查找最小元素 auto minIt = std::min_element(numbers.begin(), numbers.end()); if (minIt != numbers.end()) { // 使用解引用获取最小值 int minValue = *minIt; std::cout \u0026lt;\u0026lt; \u0026#34;Minimum value: \u0026#34; \u0026lt;\u0026lt; minValue \u0026lt;\u0026lt; std::endl; } else { std::cout \u0026lt;\u0026lt; \u0026#34;The range is empty.\u0026#34; \u0026lt;\u0026lt; std::endl; } return 0; } 3. 代码解析 导入库：导入了 iostream, vector, 和 algorithm。\n定义容器：创建了一个 std::vector 并初始化了一些整数。\n调用 min_element\n：\n使用 std::min_element 来查找最小元素，范围是从 numbers.begin() 到 numbers.end()。 返回的 minIt 是指向最小元素的迭代器。 解引用\n：\n通过 *minIt 获取指向的最小值，并存储到 minValue 中。 输出结果：如果容器非空，则输出最小值。\n4. 注意事项 空范围：如果传递空范围给 min_element（即 first 和 last 相等），则返回 last。 元素类型：min_element 可以处理不同的类型，包括自定义类型，只要提供相应的比较运算符。 性能：min_element 的时间复杂度是 O(n)，适合较小的数据集。 单引号和双引号的区别 在 C++ 中，单引号 ' ' 用于表示字符字面值（character literals），而双引号 \u0026quot; \u0026quot; 用于表示字符串字面值（string literals）。字符字面值只能包含一个字符，例如 'a' 或 '0'，而字符串字面值可以包含多个字符，例如 \u0026quot;Hello\u0026quot;。\n字符字面值只能包含一个字符，例如： char singleChar = \u0026#39;a\u0026#39;; // 单个字符 char digit = \u0026#39;0\u0026#39;; // 数字字符 字符串字面值可以包含多个字符，例如： const char* greeting = \u0026#34;Hello\u0026#34;; // 一个字符串 const char* message = \u0026#34;12345\u0026#34;; // 字符串中的数字 指针就是数组 把指针想象成数组\nint yy = 1; int * xx = \u0026amp; yy; // yy地址: 123 xx ---\u0026gt; 两个内容 | |---\u0026gt;下标 xx 存的值为 0x123 |---\u0026gt;数值 *xx 取值为 1 即 yy的值 xx: val | 1 | ==\u0026gt; *xx index |0x123| ==\u0026gt; xx string进行模拟栈的用法 在 C++ 中，std::string 本身不是一个栈（stack），但可以像栈一样使用，特别是利用其尾部（末尾）操作。你可以使用 push_back 和 pop_back 方法来模拟栈的行为。以下是如何用 std::string 模拟栈的简单示例：\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; using namespace std; int main() { string stack; // 入栈 stack.push_back(\u0026#39;A\u0026#39;); stack.push_back(\u0026#39;B\u0026#39;); stack.push_back(\u0026#39;C\u0026#39;); // 出栈 while (!stack.empty()) { char top = stack.back(); // 获取栈顶元素 stack.pop_back(); // 出栈 cout \u0026lt;\u0026lt; top \u0026lt;\u0026lt; endl; // 打印栈顶元素 } return 0; } 代码解释： 入栈：使用 push_back 方法将元素添加到字符串末尾。 出栈：使用 pop_back 方法移除末尾元素，并使用 back 方法获取栈顶元素（末尾元素）。 检查是否为空：使用 empty 方法来检查栈是否为空。 注意事项： 尽管你可以用 std::string 来模拟栈，但对于更复杂的数据结构，建议使用标准库中的 std::stack，它提供了更明确的接口和更好的语义清晰性。 std::stack 是一个适配器，通常与其他容器（如 std::deque 或 std::vector）一起使用，可以更好地满足栈的需求。 queue容器 在 C++ 中，queue 是一种容器适配器，表示一个先进先出（FIFO，First In First Out）的数据结构。下面是关于 queue 的详细解释，包括其特点、基本操作及使用场景。\n1. 基本概念 先进先出（FIFO）：在队列中，第一个加入的元素是第一个被移除的元素。可以想象成排队买东西，先到的人先服务。 应用：队列广泛用于任务调度、事件驱动编程、宽度优先搜索（BFS）等场景。 2. 引入和定义 要使用 queue，需要引入 C++ STL 的 \u0026lt;queue\u0026gt; 头文件：\n#include \u0026lt;queue\u0026gt; 一个基本的队列定义如下：\nstd::queue\u0026lt;int\u0026gt; myQueue; // 定义一个存储整数的队列 3. 常用操作 a. 入队（Push） 使用 push() 方法将元素添加到队列的尾部。\nmyQueue.push(10); myQueue.push(20); myQueue.push(30); b. 出队（Pop） 使用 pop() 方法移除队列的头部元素（最早入队的元素）。\nmyQueue.pop(); // 移除队头元素（10） c. 访问队头元素 使用 front() 方法获取队头元素，但不会移除它。\nint frontElement = myQueue.front(); // 返回 20 d. 访问队尾元素 使用 back() 方法获取队尾元素，但不会移除它。\nint backElement = myQueue.back(); // 返回 30 e. 检查空状态 使用 empty() 方法检查队列是否为空。\nif (myQueue.empty()) { std::cout \u0026lt;\u0026lt; \u0026#34;队列为空\u0026#34; \u0026lt;\u0026lt; std::endl; } f. 获取队列大小 使用 size() 方法获取队列中元素的数量。\nstd::cout \u0026lt;\u0026lt; \u0026#34;队列大小: \u0026#34; \u0026lt;\u0026lt; myQueue.size() \u0026lt;\u0026lt; std::endl; 4. 示例代码 下面是一个完整的示例，演示如何使用 queue：\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;queue\u0026gt; int main() { std::queue\u0026lt;int\u0026gt; myQueue; // 入队 myQueue.push(10); myQueue.push(20); myQueue.push(30); // 输出队头和队尾元素 std::cout \u0026lt;\u0026lt; \u0026#34;队头元素: \u0026#34; \u0026lt;\u0026lt; myQueue.front() \u0026lt;\u0026lt; std::endl; // 输出 10 std::cout \u0026lt;\u0026lt; \u0026#34;队尾元素: \u0026#34; \u0026lt;\u0026lt; myQueue.back() \u0026lt;\u0026lt; std::endl; // 输出 30 // 移除队头元素 myQueue.pop(); std::cout \u0026lt;\u0026lt; \u0026#34;新的队头元素: \u0026#34; \u0026lt;\u0026lt; myQueue.front() \u0026lt;\u0026lt; std::endl; // 输出 20 // 检查队列大小 std::cout \u0026lt;\u0026lt; \u0026#34;队列大小: \u0026#34; \u0026lt;\u0026lt; myQueue.size() \u0026lt;\u0026lt; std::endl; // 输出 2 return 0; } 5. 特点 动态大小：队列的大小是动态的，根据元素的添加和移除而变化。 基于其他容器：queue 通常是基于 deque（双端队列）或 list 实现的，因此它支持快速插入和删除操作。 类型安全：由于使用模板，queue 可以存储任何类型的数据，确保类型安全。 6. 应用场景 任务调度：在操作系统中，任务调度可以利用队列来管理待处理的任务。 广度优先搜索（BFS）：在图形算法中，queue 是实现 BFS 的重要工具。 事件处理：在图形用户界面（GUI）或游戏开发中，事件通常通过队列进行处理。 7. 总结 C++ 的 queue 提供了一种简单而高效的方法来管理数据。在需要处理顺序、维持元素顺序的场景中，queue 是一个非常有用的工具。它的基本操作简单明了，使得程序员能够快速实现和使用这一数据结构。\n**C++**基础 编译 内联函数 内联函数（inline function）是 C++ 中的一种特殊函数，通过在函数调用处直接插入其代码来提高程序的执行效率。内联函数的主要优点是减少函数调用的开销。\n特点： 定义方式： 使用 inline 关键字定义内联函数：\ninline int add(int a, int b) { return a + b; } 调用开销减少： 由于编译器在每个调用点替换函数体，避免了栈操作和跳转，增强了性能。\n适合小函数： 内联函数通常适用于简单、短小的函数，过大的函数可能导致代码膨胀。\n编译期决策： 编译器可以选择是否将某个函数作为内联函数处理，并不总是强制内联。\n示例： #include \u0026lt;iostream\u0026gt; inline int square(int x) { return x * x; } int main() { std::cout \u0026lt;\u0026lt; \u0026#34;Square of 5: \u0026#34; \u0026lt;\u0026lt; square(5) \u0026lt;\u0026lt; std::endl; return 0; } 在上述示例中，调用 square(5) 时，编译器会在调用处替换为 5 * 5，从而减少函数调用的开销。\n指针 类与对象 类（Class） 类是一个用户定义的数据类型，用于封装数据和函数。类可以包含属性（成员变量）和行为（成员函数）。\n定义示例：\nclass Dog { public: // 属性 std::string name; int age; // 构造函数 Dog(std::string n, int a) : name(n), age(a) {} // 方法 void bark() { std::cout \u0026lt;\u0026lt; name \u0026lt;\u0026lt; \u0026#34; says woof!\u0026#34; \u0026lt;\u0026lt; std::endl; } }; 对象（Object） 对象是类的实例，通过类的构造函数创建。每个对象都有自己的属性值。\n使用示例：\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; class Dog { public: std::string name; int age; Dog(std::string n, int a) : name(n), age(a) {} void bark() { std::cout \u0026lt;\u0026lt; name \u0026lt;\u0026lt; \u0026#34; says woof!\u0026#34; \u0026lt;\u0026lt; std::endl; } }; int main() { // 创建对象 Dog myDog(\u0026#34;Buddy\u0026#34;, 3); // 调用对象的方法 myDog.bark(); // 输出: Buddy says woof! return 0; } 总结 类是模板，用于定义对象的属性和行为。 对象是类的实例，具有具体的状态和行为。类和对象的结合使得 C++ 支持面向对象编程，便于代码的组织、复用和维护。 注意 构造函数 ![](../img/屏幕截图 (2).png)\n析构函数特点 拷贝构造函数 拷贝构造函数，又称复制构造函数，是一种特殊的构造函数，它由编译器调用来完成一些基于同一类的其他对象的构建及初始化。\n其形参必须是引用，但并不限制为const，一般普遍的会加上const限制。此函数经常用在函数调用时用户定义类型的值传递及返回。\n拷贝构造函数要调用基类的拷贝构造函数和成员函数。如果可以的话，它将用常量方式调用，另外，也可以用非常量方式调用。\n友元函数 定义:\n友元是一种定义在类外部的普通函数或类，但它需要在类体内进行说明，为了与该类的成员函数加以区别，在说明时前面加以关键字friend。 友元不是成员函数，但是它可以访问类中的私有成员。 类具有封装和信息隐藏的特性。只有类的成员函数才能访问类的私有成员，程序中的其他函数是无法访问私有成员的。非成员函数可以访问类中的公有成员，但是如果将数据成员都定义为公有的，这又破坏了隐藏的特性。另外，应该看到在某些情况下，特别是在对某些成员函数多次调用时，由于参数传递，类型检查和安全性检查等都需要时间开销，而影响程序的运行效率。 友元函数与一般函数的不同点在于：\n友元函数必须在类的定义中说明，其函数体可在类内定义，也可在类外定义；\n它可以访问该类中的所有成员（公有的、私有的和保护的），而一般函数只能访问类中的公有成员。\n注意事项\n友元关系不能被继承。 友元关系是单向的，不具有交换性。若类B是类A的友元，类A不一定是类B的友元，要看在类中是否有相应的声明。 友元关系不具有传递性。若类B是类A的友元，类C是B的友元，类C不一定是类A的友元，同样要看类中是否有相应的申明。 动态内存 函数重载 函数重载是一种特殊情况，C++允许在同一作用域中声明几个类似的同名函数，这些同名函数的形参列表（参数个数，类型，顺序）必须不同，常用来处理实现功能类似数据类型不同的问题。 所谓函数的重载是指完成不同功能的函数可以具有相同的函数名。 C++的编译器是根据函数的实参来确定应该调用哪一个函数的。 void Swap1(int* a, int* b); void Swap2(float* a, float* b); void Swap3(char* a, char* b); void Swap4(double* a, double* b); 运算符重载 可以重定义或重载大部分 C++ 内置的运算符。这样，您就能使用自定义类型的运算符。\n重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个返回类型和一个参数列表。\nBox operator+(const Box\u0026amp;); 声明加法运算符用于把两个 Box 对象相加，返回最终的 Box 对象。大多数的重载运算符可被定义为普通的非成员函数或者被定义为类成员函数。如果我们定义上面的函数为类的非成员函数，那么我们需要为每次操作传递两个参数，如下所示：\nBox operator+(const Box\u0026amp;, const Box\u0026amp;); 单继承 在C++中所谓“继承”就是在一个已存在的类的基础上建立一个新的类。已存在的类称为“基类(base class)”或“父类(father class)”。新建立的类称为“派生类(derived class)”或“子类(son class)”。\n通过继承机制，可以利用已有的数据类型来定义新的数据类型。所定义的新的数据类型不仅拥有新定义的成员，而且还同时拥有旧的成员。我们称已存在的用来派生新类的类为基类，又称为父类。由已存在的类派生出的新类称为派生类，又称为子类。\n在建立派生类的过程中，基类不会做任何改变，派生类则除了继承基类的所有可引用的成员变量和成员函数外，还可另外定义本身的成员变量和处理这些变量的函数，由于派生类可继承基类的成员变量和成员函数，因此在基类中定义好的数据和函数等的程序代码可重复使用，这样可以提高程序的可靠性。\n当从已有的类中派生出新的类时，可以对派生类做以下几种变化：\n可以继承基类的成员数据或成员函数。 可以增加新的成员变量。 可以增加新的成员函数。 可以重新定义已有的成员函数。 可以改变现有的成员属性。 在C++中有二种继承：单一继承和多重继承。当一个派生类仅由一个基类派生时，称为单一继承；而当一个派生类由二个或更多个基类所派生时，称为多重继承。\n但派生并不是简单的扩充，有可能改变基类的性质。有三种派生方式：公有派生、保护派生、私有派生。默认的是私有派生。\n公有派生（Public Inheritance） 在 C++ 中，公有派生（Public Inheritance）是最常见的类继承方式。通过公有派生，派生类可以继承基类的成员，其访问权限如下：\n公有成员（public）： 在派生类和类外均可访问。 保护成员（protected）： 在派生类内可访问，但在类外不能直接访问。 私有成员（private）： 不能在派生类中访问，只能通过基类的公有或保护成员函数访问。 示例代码 class Base { public: int pubVar; // 可在派生类和类外访问 protected: int protVar; // 可在派生类访问，但类外无法访问 private: int privVar; // 仅能在基类中访问 }; class Derived : public Base { public: void accessMembers() { pubVar = 1; // 可访问 protVar = 2; // 可访问 // privVar = 3; // 错误：无法访问 } }; // 使用示例 int main() { Derived d; d.pubVar = 10; // 可以访问 // d.protVar = 20; // 错误：无法访问 // d.privVar = 30; // 错误：无法访问 return 0; } 使用公有派生时，基类的公有和保护成员在派生类中依然保持其访问权限，而私有成员不可访问。 私有派生（Private Inheritance） 在 C++ 中，私有派生是一种继承方式，其中基类的公有成员和保护成员在派生类中都变为私有成员。这意味着：\n公有成员（public）： 在基类中为公有，但在派生类中变为私有。可以在派生类内部直接使用，但在派生类外部无法访问。 保护成员（protected）： 在基类中为保护，但在派生类中同样变为私有。可以在派生类内部使用，但在外部无法访问。 私有成员（private）： 私有成员在基类中始终不可访问，派生类也无法直接使用。 示例代码 class Base { public: int pubVar; // 公有成员 protected: int protVar; // 保护成员 private: int privVar; // 私有成员 }; class Derived : private Base { public: void accessMembers() { pubVar = 1; // 可以访问（变为私有） protVar = 2; // 可以访问（变为私有） // privVar = 3; // 错误：无法访问 } }; // 使用示例 int main() { Derived d; d.pubVar = 10; // 错误：无法访问 // d.protVar = 20; // 错误：无法访问 // d.privVar = 30; // 错误：无法访问 return 0; } 私有派生通过将基类的公有和保护成员转为私有，增强了基类的封装性，确保只有派生类内部可以使用这些成员，外部无法直接访问。这种方式适用于希望隐藏基类实现细节，同时允许派生类使用基类功能的场景。 3**、【保护派生】**\nclass ClassName: protected BaseClassName\n保护派生时，基类中公有成员和保护成员在派生类中均变为保护的和私有的，在派生类中仍可直接使用这些成员，基类中的私有成员，在派生类中不可直接使用。\n基类：public: (变为保护)在派生类中使用，类外不可使用\nprotected: (变为私有）在派生类中使用，类外不可使用\nprivate: 不能在派生类中和类外使用\n保护派生（Protected Inheritance） 在 C++ 中，保护派生是一种继承方式。通过这种方式，基类的公有成员和保护成员在派生类中被视为保护成员，这意味着它们的访问权限发生了变化：\n公有成员（public）： 在基类中是公有的，但在保护派生中变为保护的。派生类可以内部访问，但类外部无法访问。 保护成员（protected）： 在基类中是保护的，经过保护派生后仍然是保护的，派生类可以内部访问，类外部无法访问。 私有成员（private）： 无论是公有、保护还是私有继承，基类的私有成员始终不可在派生类中访问。 示例代码 class Base { public: int pubVar; // 公有成员 protected: int protVar; // 保护成员 private: int privVar; // 私有成员 }; class Derived : protected Base { public: void accessMembers() { pubVar = 1; // 可以访问（变为保护） protVar = 2; // 可以访问（仍为保护） // privVar = 3; // 错误：无法访问 } }; // 使用示例 int main() { Derived d; // d.pubVar = 10; // 错误：无法访问 // d.protVar = 20; // 错误：无法访问 // d.privVar = 30; // 错误：无法访问 return 0; } 通过保护派生，基类的公有和保护成员变为保护，派生类内部可以直接使用这些成员，但在派生类外部无法访问。这种方式适用于需要隐藏基类实现细节，仅允许派生类使用基类功能的场合。保护派生的访问控制增大了封装性，确保了基类的内聚性。 抽象类与保护的成员函数 在面向对象编程中，一个类如果只能用作基类，不能创建对象，那么这个类被称为抽象类。抽象类的主要目的是用来定义其他类的通用接口或协议，通常包含至少一个抽象方法，这些方法在抽象类中声明但不实现，派生类必须实现这些方法。\n抽象类的定义示例 class AbstractClass { public: virtual void abstractMethod() = 0; // 抽象方法 }; 保护的构造函数和析构函数 在 C++ 中，可以将类的构造函数和析构函数定义为保护的（protected）。这样，外部代码无法直接创建该类的对象，但派生类可以访问和调用这些构造函数和析构函数。这种设计通常用于控制对象的创建和销毁过程，以确保只有派生类能够实例化该类。\n例如：\nclass AbstractBase { protected: AbstractBase() {} // 保护构造函数 virtual ~AbstractBase() {} // 保护析构函数 }; // 派生类可以使用 class ConcreteDerived : public AbstractBase { public: ConcreteDerived() {} }; 私有构造函数和析构函数 如果将一个类的构造函数或析构函数定义为私有的（private），这个类将无法被实例化，也无法被用作基类来派生出新的类。这种设计通常用于工具类等场景，表明该类不应该直接创建对象，而是提供静态功能或数据。\n当把类中的构造函数或析构函数说明为私有的时，所定义的类通常是没有任何实用意义的，一般情况下，不能用它来产生对象，也不能用它来产生派生类。\n例如：\nclass Utility { private: Utility() {} // 私有构造函数 ~Utility() {} // 私有析构函数 public: static void usefulMethod() { // 提供静态方法 } }; 抽象类用于定义子类的接口，不能被实例化。 保护构造函数和析构函数允许派生类访问，控制对象创建。 私有构造函数和析构函数禁止实例化，通常用于工具类。 多继承 //格式为： class 类名:\u0026lt;Access\u0026gt;类名1,..., \u0026lt;Access\u0026gt;类名n { private: ...... ； //私有成员说明; public: ...... ； //公有成员说明; protected: ...... ； //保护的成员说明; }; class D: public A, protected B, private C { ....//派生类中新增加成员 }; 初始化基类成员\n构造函数不能被继承, 派生类的构造函数必须调用基类的构造函数来初始化基类成员基类子对象。\n派生类构造函数的调用顺序如下：\n基类的构造函数 子对象类的构造函数 派生类的构造函数 虚继承 //通过指定类名来解决指定不明确问题 A::v.x = 5; 虚基类 在同一个公共的基类在派生类中产生多个拷贝，不仅多占用了存储空间，而且可能会造成多个拷贝中的数据不一致和模糊的引用。\nD d; d.x=10; //模糊引用 在多重派生的过程中，若使公共基类在派生类中只有一个拷贝，则可将这种基类说明为虚基类。在派生类的定义中，只要在基类的类名前加上关键字virtual，就可以将基类说明为虚基类。\nclass B:public virtual A{ public: int y; B(int a=0, int b=0 ):A(b) { y=a;} }; 这样就不会造成模糊引用。\n由虚基类派生出的对象初始化时，直接调用虚基类的构造函数。因此，若将一个类定义为虚基类，则一定有正确的构造函数可供所有派生类调用。 再次强调，用虚基类进行多重派生时，若虚基类没有缺省的构造函数，则在每一个派生类的构造函数中都必须有对虚基类构造函数的调用 （且首先调用）。 虚函数 虚函数是 C++ 中实现多态性的重要机制。它允许在基类中声明一个函数，并在派生类中重新定义（重写）这个函数。通过虚函数，可以在运行时根据对象的实际类型调用相应的函数，实现动态绑定。\n定义和用法 虚函数通过在基类中使用关键字 virtual 声明。当基类指针或引用指向派生类对象时，虚函数确保调用的是派生类中重写的版本。\n示例代码 #include \u0026lt;iostream\u0026gt; class Base { public: virtual void show() { // 虚函数 std::cout \u0026lt;\u0026lt; \u0026#34;Base class show function called.\u0026#34; \u0026lt;\u0026lt; std::endl; } virtual ~Base() {} // 虚析构函数 }; class Derived : public Base { public: void show() override { // 重写基类的虚函数 std::cout \u0026lt;\u0026lt; \u0026#34;Derived class show function called.\u0026#34; \u0026lt;\u0026lt; std::endl; } }; int main() { Base* ptr; // 基类指针 Derived derivedObj; // 派生类对象 ptr = \u0026amp;derivedObj; // 指向派生类对象 ptr-\u0026gt;show(); // 调用派生类的 show 函数 return 0; } 输出结果 Derived class show function called. 关键点 动态绑定：虚函数的调用决定是在运行时而非编译时，允许实现多态。 基类指针或引用：通过基类指针或引用调用虚函数时，实际调用的是对象的动态类型的相应函数。 虚析构函数：如果类有虚函数，通常应该有虚析构函数，以确保在对象销毁时正确调用派生类的析构函数。 性能开销：虚函数通过虚表（vtable）实现，可能会引入少许性能开销。 抽象类 抽象类是面向对象编程中的一种特殊类型的类，它主要用于定义子类的接口或协议。抽象类不能被实例化，也就是说，无法创建抽象类的对象。它通常包含至少一个抽象方法，即在抽象类中声明但不实现的方法。\n特点 不能实例化：抽象类不能创建对象，只能作为基类使用。 包含抽象方法：至少包含一个纯虚函数（抽象方法），用 = 0 的语法声明。 可包含具体方法：抽象类可以包含具体方法（已经实现的方法）和成员变量。 派生类实现：派生类必须实现所有抽象方法，才能被实例化。 示例代码 #include \u0026lt;iostream\u0026gt; class AbstractClass { public: // 抽象方法 virtual void doSomething() = 0; // 具体方法 void commonFunction() { std::cout \u0026lt;\u0026lt; \u0026#34;This is a common function.\u0026#34; \u0026lt;\u0026lt; std::endl; } }; class ConcreteClass : public AbstractClass { public: // 实现抽象方法 void doSomething() override { std::cout \u0026lt;\u0026lt; \u0026#34;Doing something in ConcreteClass.\u0026#34; \u0026lt;\u0026lt; std::endl; } }; int main() { // AbstractClass obj; // 错误：无法实例化抽象类 ConcreteClass myObject; myObject.commonFunction(); // 调用具体方法 myObject.doSomething(); // 调用实现的抽象方法 return 0; } 输出结果 This is a common function. Doing something in ConcreteClass. 关键点 接口定义：抽象类通过定义接口，规定了派生类应当实现的功能。 增强灵活性：通过使用抽象类，可以轻松实现多态，提高代码的可维护性和扩展性。 防止实例化：使用抽象类可以防止意外创建基类的对象，确保只能使用具体的实现类。 命名空间 **使用命名空间的目的是对标识符的名称进行本地化，以避免命名冲突。在C++中，变量、函数和类都是大量存在的。如果没有命名空间，这些变量、函数、类的名称将都存在于全局命名空间中，会导致很多冲突。 **\nnamespace 关键字使得我们可以通过创建作用范围来对全局命名空间进行分隔。本质上来讲，一个命名空间就定义了一个范围。定义命名空间的基本形式如下：\nnamespace 名称{ 声明 } 在命名空间中定义的任何东西都局限于该命名空间内。\n命名空间可以嵌套，在一个命名空间中定义另一个命名空间。\nnamespace 命名空间名称1{ // 代码声明 namespace命名空间名称2{ // 代码声明 } } 通过使用 :: 运算符来访问嵌套的命名空间中的成员。\n函数模板 模板是泛型编程的基础，泛型编程即以一种独立于任何特定类型的方式编写代码。模板是创建泛型类或函数的蓝图或公式。 模板函数定义的一般形式如下所示：\ntemplate \u0026lt;typename type类型\u0026gt; 返回类型 函数名(参数列表) { // 函数的主体 } type 是函数所使用的数据类型的占位符名称。这个名称可以在函数定义中使用。\n正如我们定义函数模板一样，我们也可以定义类模板。泛型类声明的一般形式如下所示： template \u0026lt;class type\u0026gt; class class-name { } type 是占位符类型名称，可以在类被实例化的时候进行指定。使用一个逗号分隔的列表来定义多个泛型数据类型。\n输入输出流 IO IO流 在C++中允许用户重载运算符\u0026lt;\u0026lt;和\u0026gt;\u0026gt;，实现对象的输入和输出。重载这二个运算符时，在对象所在的类中，将重载这二个运算符的函数说明该类的友元函数。\n文件流 C++标准库专门提供了3个类用于实现文件操作，它们统称为文件流类，这3个类分别为：\nifstream：专用于从文件中读取数据； ofstream：专用于向文件中写入数据； fstream：既可用于从文件中读取数据，又可用于向文件中写入数据。 打开文件可以通过以下两种方式进行：\n调用流对象的 open 成员函数打开文件。 定义文件流对象时，通过构造函数打开文件。 【使用 open 函数打开文件】\n先看第一种文件打开方式。以 ifstream 类为例，该类有一个 open 成员函数，其他两个文件流类也有同样的 open 成员函数：\nvoid open(const char* szFileName, int mode) 第一个参数是指向文件名的指针，第二个参数是文件的打开模式标记。\nios::binary 可以和其他模式标记组合使用，例如：\nios::in | ios::binary表示用二进制模式，以读取的方式打开文件； ios::out | ios::binary表示用二进制模式，以写入的方式打开文件。 在流对象上执行 open 成员函数，给出文件名和打开模式，就可以打开文件。判断文件打开是否成功，可以看“对象名”这个表达式的值是否为 true，如果为 true，则表示文件打开成功。\n**close()方法的用法很简单，其语法格式如下： **\nvoid close(); 调用open()方法打开文件，是文件流对象和文件之间建立关联的过程。那么，调用 close()方法关闭已打开的文件，就可以理解为是切断文件流对象和文件之间的关联。注意，close()方法的功能仅是切断文件流与文件之间的关联，该文件流并会被销毁，其后续还可用于关联其它的文件。\n可以看到，该方法既不需要传递任何参数，也没有返回值。\nSTL标准模板库 STL是Standard Template Library的简称，中文名标准模板库，惠普实验室开发的一系列软件的统称。它是由Alexander Stepanov、Meng Lee和David R Musser在惠普实验室工作时所开发出来的。从根本上说，STL是一些“容器”的集合，这些“容器”有list,vector,set,map等，STL也是算法和其他一些组件的集合。这里的“容器”和算法的集合指的是世界上很多聪明人很多年的杰作。STL的目的是标准化组件，这样就不用重新开发，可以使用现成的组件。STL是C++的一部分，因此不用安装额外的库文件。\nSTL的版本很多，常见的有HP STL、PJ STL、 SGI STL等。\nvector 序列式容器 vector 容器是 STL 中最常用的容器之一，它和 array 容器非常类似，都可以看做是对 C++ 普通数组的“升级版”。不同之处在于，array 实现的是静态数组（容量固定的数组），而 vector 实现的是一个动态数组，即可以进行元素的插入和删除，在此过程中，vector 会动态调整所占用的内存空间，整个过程无需人工干预。\nvector 常被称为向量容器，因为该容器擅长在尾部插入或删除元素，在常量时间内就可以完成，时间复杂度为O(1)；而对于在容器头部或者中部插入或删除元素，则花费时间要长一些（移动元素需要耗费时间），时间复杂度为线性阶O(n)。\ndeque双端队列容器 前面已接触过vector 容器，值得一提的是，deque 容器和 vecotr 容器有很多相似之处，比如：deque 容器也擅长在序列尾部添加或删除元素（时间复杂度为O(1)），而不擅长在序列中间添加或删除元素。deque 容器也可以根据需要修改自身的容量和大小。\n和 vector 不同的是，deque 还擅长在序列头部添加或删除元素，所耗费的时间复杂度也为常数阶O(1)。并且更重要的一点是，deque 容器中存储元素并不能保证所有元素都存储到连续的内存空间中。\n当需要向序列两端频繁的添加或删除元素时，应首选 deque 容器。\nstack 栈容器 stack\u0026lt; T \u0026gt;容器适配器中的数据是以 LIFO (先进后出) 的方式组织的，这和自助餐馆中堆叠的盘子、箱子中的一堆书类似。理论上的 stack 容器及其一些基本操作。只能访问 stack 顶部的元素；只有在移除 stack 顶部的元素后，才能访问下方的元素。\nqueue队列 队列也是一种逻辑数据结构，其具有先进先出的特性，只能在队的前端进行删除， 在队的后端进行插入。针对这种特性，可以实现一些较为复杂的逻辑。在实际应用中，部分程序也正需要这样一种顺序进出的数据处理方式。\nqueue：只允许从一端插入元素（入队），从另一端删除元素（出队）。遵循先进先出（FIFO）的原则。 deque：可以在两端插入和删除元素。支持在前端和后端进行操作。 set容器 STL 对这个序列可以进行查找、插入、删除序列中的任意一个元素，而完成这些操作的时间同这个序列中元素个数的对数成比例关系，并且当游标指向一个已删除的元素时，删除操作无效。\n而一个经过更正的和更加实际的定义应该是：一个集合(set)是一个容器，它其中所包含的元素的值是唯一的。这在收集一个数据的具体值的时候是有用的。集合中的元素按一定的顺序排列，并被作为集合中的实例。一个集合通过一个链表来组织，在插入操作和删除操作上比向量(vector)快，但查找或添加末尾的元素时会有些慢。具体实现采用了红黑树的平衡二叉树的数据结构。\nmap容器 映射和多重映射基于某一类型Key的键集的存在，提供对T类型的数据进行快速和高效的检索。\n对map而言，键只是指存储在容器中的某一成员。Map不支持副本键，multimap支持副本键。Map和multimap对象包涵了键和各个键有关的值，键和值的数据类型是不相同的，这与set不同。set中的key和value是Key类型的，而map中的key和value是一个pair结构中的两个分量。\nC++异常处理 程序中常见的错误有两大类：语法错误和运行错误。在编译时，编译系统能发现程序中的语法错误。\n异常(exception)是运行时(run-time)的错误，通常是非正常条件下引起的，例如，下标(index)越界、new操作不能正常分配所需内存。C语言中，异常通常是通过被调用函数返回一个数值作为标记的。\nC++中，函数可以识别标记为异常的条件，然后通告发生了异常。这种通告异常的机制称为抛出异常(throwing an exception)。\n异常提供了一种转移程序控制权的方式。C++ 异常处理涉及到三个关键字：try、catch、throw。\n**throw：**当问题出现时，程序会抛出一个异常。这是通过使用 throw 关键字来完成的。 **catch：**在您想要处理问题的地方，通过异常处理程序捕获异常。catch 关键字用于捕获异常。 **try：**try 块中的代码标识将被激活的特定异常。它后面通常跟着一个或多个 catch 块。 如果有一个块抛出一个异常，捕获异常的方法会使用 try 和 catch 关键字。try 块中放置可能抛出异常的代码，try 块中的代码被称为保护代码。\n例如\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { double x, y; cout \u0026lt;\u0026lt; \u0026#34;请输入x,y的值:\u0026#34;; cin \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y; try { if (y == 0) throw - 1; // 抛出-1类型异常 else if(x==0) throw - 1.0; // 抛出-1类型异常 else cout \u0026lt;\u0026lt; \u0026#34;x/y=\u0026#34; \u0026lt;\u0026lt; x / y \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; endl; } catch (int e) { cout \u0026lt;\u0026lt; \u0026#34;catch(int) :\u0026#34; \u0026lt;\u0026lt; e \u0026lt;\u0026lt; endl; } catch (double d) { cout \u0026lt;\u0026lt; \u0026#34;catch(double) :\u0026#34; \u0026lt;\u0026lt; d \u0026lt;\u0026lt; endl; } return 0; } ","permalink":"//localhost:1313/posts/c++%E8%AF%AD%E8%A8%80/","summary":"\u003ch1 id=\"emplace用法\"\u003eemplace用法\u003c/h1\u003e\n\u003cp\u003e\u003ccode\u003eemplace\u003c/code\u003e 是 C++ 中用于容器（如 \u003ccode\u003estd::vector\u003c/code\u003e, \u003ccode\u003estd::map\u003c/code\u003e, \u003ccode\u003estd::unordered_map\u003c/code\u003e 等）的一种方法，允许你在容器中直接构造元素，而不需要先构造再复制或移动。这通常可以提高性能，减少不必要的对象拷贝。\u003c/p\u003e","title":"C++基础"},{"content":"go的变量声明 第一种，指定变量类型，如果没有初始化，则变量默认为零值。 例如：\nvar a int // 声明一个整型变量 a，默认为 0 var b float64 // 声明一个浮点型变量 b，默认为 0.0 第二种，根据值自行判定变量类型。 例如：\nvar c = \u0026#34;Hello\u0026#34; // 声明变量 c，类型为 string var d = 42 // 声明变量 d，类型为 int 第三种，如果变量已经使用 var 声明过了，再使用 := 声明变量，就产生编译错误 例如：\nvar e int = 10 // 使用 var 声明 // e := 20 // 编译错误：e 已经被声明过 go的语言常量 常量是一个简单值的标识符，在程序运行时，不会被修改的量。\n常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。\n常量的定义格式：\nconst identifier [type] = value 你可以省略类型说明符 [type]，因为编译器可以根据变量的值来推断其类型。\n显式类型定义： const b string = \u0026quot;abc\u0026quot; 隐式类型定义： const b = \u0026quot;abc\u0026quot; 多个相同类型的声明可以简写为：\nconst c_name1, c_name2 = value1, value2 iota，特殊常量，可以认为是一个可以被编译器修改的常量。\niota 在 const关键字出现时将被重置为 0(const 内部的第一行之前)，const 中每新增一行常量声明将使 iota 计数一次(iota 可理解为 const 语句块中的行索引)。\niota 可以被用作枚举值：\nconst ( a = iota b = iota c = iota ) 第一个 iota 等于 0，每当 iota 在新的一行被使用时，它的值都会自动加 1；所以 a=0, b=1, c=2 可以简写为如下形式：\nconst ( a = iota b c ) iota 用法 实例 package main import \u0026#34;fmt\u0026#34; func main() { const ( a = iota //0 b //1 c //2 d = \u0026#34;ha\u0026#34; //独立值，iota += 1 e //\u0026#34;ha\u0026#34; iota += 1 f = 100 //iota +=1 g //100 iota +=1 h = iota //7,恢复计数 i //8 ) fmt.Println(a,b,c,d,e,f,g,h,i) } 以上实例运行结果为：\n0 1 2 ha ha 100 100 7 8 go的运算符 运算符用于在程序运行时执行数学或逻辑运算。\nGo 语言内置的运算符有：\n算术运算符 关系运算符 逻辑运算符 位运算符 赋值运算符 其他运算符 接下来让我们来详细看看各个运算符的介绍。\n算术运算符 下表列出了所有Go语言的算术运算符。假定 A 值为 10，B 值为 20。\n运算符 描述 实例 + 相加 A + B 输出结果 30 - 相减 A - B 输出结果 -10 * 相乘 A * B 输出结果 200 / 相除 B / A 输出结果 2 % 求余 B % A 输出结果 0 ++ 自增 A++ 输出结果 11 \u0026ndash; 自减 A\u0026ndash; 输出结果 9 以下实例演示了各个算术运算符的用法：\n实例 package main import \u0026#34;fmt\u0026#34; func main() { var a int = 21 var b int = 10 var c int c = a + b fmt.Printf(\u0026#34;第一行 - c 的值为 %d**\\n**\u0026#34;, c ) c = a - b fmt.Printf(\u0026#34;第二行 - c 的值为 %d**\\n**\u0026#34;, c ) c = a * b fmt.Printf(\u0026#34;第三行 - c 的值为 %d**\\n**\u0026#34;, c ) c = a / b fmt.Printf(\u0026#34;第四行 - c 的值为 %d**\\n**\u0026#34;, c ) c = a % b fmt.Printf(\u0026#34;第五行 - c 的值为 %d**\\n**\u0026#34;, c ) a++ fmt.Printf(\u0026#34;第六行 - a 的值为 %d**\\n**\u0026#34;, a ) a=21 // 为了方便测试，a 这里重新赋值为 21 a-- fmt.Printf(\u0026#34;第七行 - a 的值为 %d**\\n**\u0026#34;, a ) } 以上实例运行结果：\n第一行 - c 的值为 31 第二行 - c 的值为 11 第三行 - c 的值为 210 第四行 - c 的值为 2 第五行 - c 的值为 1 第六行 - a 的值为 22 第七行 - a 的值为 20 关系运算符 下表列出了所有Go语言的关系运算符。假定 A 值为 10，B 值为 20。\n运算符 描述 实例 == 检查两个值是否相等，如果相等返回 True 否则返回 False。 (A == B) 为 False != 检查两个值是否不相等，如果不相等返回 True 否则返回 False。 (A != B) 为 True \u0026gt; 检查左边值是否大于右边值，如果是返回 True 否则返回 False。 (A \u0026gt; B) 为 False \u0026lt; 检查左边值是否小于右边值，如果是返回 True 否则返回 False。 (A \u0026lt; B) 为 True \u0026gt;= 检查左边值是否大于等于右边值，如果是返回 True 否则返回 False。 (A \u0026gt;= B) 为 False \u0026lt;= 检查左边值是否小于等于右边值，如果是返回 True 否则返回 False。 (A \u0026lt;= B) 为 True package main import \u0026#34;fmt\u0026#34; func main() { var a bool = true var b bool = false if ( a \u0026amp;\u0026amp; b ) { fmt.Printf(\u0026#34;第一行 - 条件为 true\\n\u0026#34; ) } if ( a || b ) { fmt.Printf(\u0026#34;第二行 - 条件为 true\\n\u0026#34; ) } /* 修改 a 和 b 的值 */ a = false b = true if ( a \u0026amp;\u0026amp; b ) { fmt.Printf(\u0026#34;第三行 - 条件为 true\\n\u0026#34; ) } else { fmt.Printf(\u0026#34;第三行 - 条件为 false\\n\u0026#34; ) } if ( !(a \u0026amp;\u0026amp; b) ) { fmt.Printf(\u0026#34;第四行 - 条件为 true\\n\u0026#34; ) } } 运行结果：\n第一行 - a 不等于 b 第二行 - a 不小于 b 第三行 - a 大于 b 第四行 - a 小于等于 b 第五行 - b 大于等于 a 逻辑运算符 下表列出了所有Go语言的逻辑运算符。假定 A 值为 True，B 值为 False。\n运算符 描述 实例 \u0026amp;\u0026amp; 逻辑 AND 运算符。 如果两边的操作数都是 True，则条件 True，否则为 False。 (A \u0026amp;\u0026amp; B) 为 False || 逻辑 OR 运算符。 如果两边的操作数有一个 True，则条件 True，否则为 False。 (A || B) 为 True ! 逻辑 NOT 运算符。 如果条件为 True，则逻辑 NOT 条件 False，否则为 True。 !(A \u0026amp;\u0026amp; B) 为 True package main import \u0026#34;fmt\u0026#34; func main() { var a bool = true var b bool = false if ( a \u0026amp;\u0026amp; b ) { fmt.Printf(\u0026#34;第一行 - 条件为 true\\n\u0026#34; ) } if ( a || b ) { fmt.Printf(\u0026#34;第二行 - 条件为 true\\n\u0026#34; ) } /* 修改 a 和 b 的值 */ a = false b = true if ( a \u0026amp;\u0026amp; b ) { fmt.Printf(\u0026#34;第三行 - 条件为 true\\n\u0026#34; ) } else { fmt.Printf(\u0026#34;第三行 - 条件为 false\\n\u0026#34; ) } if ( !(a \u0026amp;\u0026amp; b) ) { fmt.Printf(\u0026#34;第四行 - 条件为 true\\n\u0026#34; ) } } 运行结果：\n第二行 - 条件为 true 第三行 - 条件为 false 第四行 - 条件为 true 位运算符 位运算符对整数在内存中的二进制位进行操作。\n下表列出了位运算符 \u0026amp;, |, 和 ^ 的计算：\np q p \u0026amp; q p | q p ^ q 0 0 0 0 0 0 1 0 1 1 1 1 1 1 0 1 0 0 1 1 假定 A = 60; B = 13; 其二进制数转换为：\nA = 0011 1100 B = 0000 1101 ----------------- A\u0026amp;B = 0000 1100 A|B = 0011 1101 A^B = 0011 0001 Go 语言支持的位运算符如下表所示。假定 A 为60，B 为13：\n运算符 描述 实例 \u0026amp; 按位与运算符\u0026quot;\u0026amp;\u0026ldquo;是双目运算符。 其功能是参与运算的两数各对应的二进位相与。 (A \u0026amp; B) 结果为 12, 二进制为 0000 1100 | 按位或运算符\u0026rdquo;|\u0026ldquo;是双目运算符。 其功能是参与运算的两数各对应的二进位相或 (A | B) 结果为 61, 二进制为 0011 1101 ^ 按位异或运算符\u0026rdquo;^\u0026ldquo;是双目运算符。 其功能是参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。 (A ^ B) 结果为 49, 二进制为 0011 0001 \u0026laquo; 左移运算符\u0026rdquo;\u0026laquo;\u0026ldquo;是双目运算符。左移n位就是乘以2的n次方。 其功能把\u0026rdquo;\u0026laquo;\u0026ldquo;左边的运算数的各二进位全部左移若干位，由\u0026rdquo;\u0026laquo;\u0026ldquo;右边的数指定移动的位数，高位丢弃，低位补0。 A \u0026laquo; 2 结果为 240 ，二进制为 1111 0000 \u0026raquo; 右移运算符\u0026rdquo;\u0026raquo;\u0026ldquo;是双目运算符。右移n位就是除以2的n次方。 其功能是把\u0026rdquo;\u0026raquo;\u0026ldquo;左边的运算数的各二进位全部右移若干位，\u0026quot;\u0026raquo;\u0026ldquo;右边的数指定移动的位数。 A \u0026raquo; 2 结果为 15 ，二进制为 0000 1111 package main import \u0026#34;fmt\u0026#34; func main() { var a uint = 60 /* 60 = 0011 1100 */ var b uint = 13 /* 13 = 0000 1101 */ var c uint = 0 c = a \u0026amp; b /* 12 = 0000 1100 */ fmt.Printf(\u0026#34;第一行 - c 的值为 %d\\n\u0026#34;, c ) c = a | b /* 61 = 0011 1101 */ fmt.Printf(\u0026#34;第二行 - c 的值为 %d\\n\u0026#34;, c ) c = a ^ b /* 49 = 0011 0001 */ fmt.Printf(\u0026#34;第三行 - c 的值为 %d\\n\u0026#34;, c ) c = a \u0026lt;\u0026lt; 2 /* 240 = 1111 0000 */ fmt.Printf(\u0026#34;第四行 - c 的值为 %d\\n\u0026#34;, c ) c = a \u0026gt;\u0026gt; 2 /* 15 = 0000 1111 */ fmt.Printf(\u0026#34;第五行 - c 的值为 %d\\n\u0026#34;, c ) } 运行结果：\n第一行 - c 的值为 12 第二行 - c 的值为 61 第三行 - c 的值为 49 第四行 - c 的值为 240 第五行 - c 的值为 15 赋值运算符 下表列出了所有Go语言的赋值运算符。\n运算符 描述 实例 = 简单的赋值运算符，将一个表达式的值赋给一个左值 C = A + B 将 A + B 表达式结果赋值给 C += 相加后再赋值 C += A 等于 C = C + A -= 相减后再赋值 C -= A 等于 C = C - A *= 相乘后再赋值 C *= A 等于 C = C * A /= 相除后再赋值 C /= A 等于 C = C / A %= 求余后再赋值 C %= A 等于 C = C % A \u0026laquo;= 左移后赋值 C \u0026laquo;= 2 等于 C = C \u0026laquo; 2 \u0026raquo;= 右移后赋值 C \u0026raquo;= 2 等于 C = C \u0026raquo; 2 \u0026amp;= 按位与后赋值 C \u0026amp;= 2 等于 C = C \u0026amp; 2 ^= 按位异或后赋值 C ^= 2 等于 C = C ^ 2 |= 按位或后赋值 C |= 2 等于 C = C | 2 package main import \u0026#34;fmt\u0026#34; func main() { var a int = 21 var c int c = a fmt.Printf(\u0026#34;第 1 行 - = 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c += a fmt.Printf(\u0026#34;第 2 行 - += 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c -= a fmt.Printf(\u0026#34;第 3 行 - -= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c *= a fmt.Printf(\u0026#34;第 4 行 - *= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c /= a fmt.Printf(\u0026#34;第 5 行 - /= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c = 200; c \u0026lt;\u0026lt;= 2 fmt.Printf(\u0026#34;第 6行 - \u0026lt;\u0026lt;= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c \u0026gt;\u0026gt;= 2 fmt.Printf(\u0026#34;第 7 行 - \u0026gt;\u0026gt;= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c \u0026amp;= 2 fmt.Printf(\u0026#34;第 8 行 - \u0026amp;= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c ^= 2 fmt.Printf(\u0026#34;第 9 行 - ^= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c |= 2 fmt.Printf(\u0026#34;第 10 行 - |= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) } 运行结果：\n第 1 行 - = 运算符实例，c 值为 = 21 第 2 行 - += 运算符实例，c 值为 = 42 第 3 行 - -= 运算符实例，c 值为 = 21 第 4 行 - *= 运算符实例，c 值为 = 441 第 5 行 - /= 运算符实例，c 值为 = 21 第 6行 - \u0026lt;\u0026lt;= 运算符实例，c 值为 = 800 第 7 行 - \u0026gt;\u0026gt;= 运算符实例，c 值为 = 200 第 8 行 - \u0026amp;= 运算符实例，c 值为 = 0 第 9 行 - ^= 运算符实例，c 值为 = 2 第 10 行 - |= 运算符实例，c 值为 = 2 其他运算符 下表列出了Go语言的其他运算符。\n运算符 描述 实例 \u0026amp; 返回变量存储地址 \u0026amp;a; 将给出变量的实际地址。 * 指针变量。 *a; 是一个指针变量 package main import \u0026#34;fmt\u0026#34; func main() { var a int = 4 var b int32 var c float32 var ptr *int /* 运算符实例 */ fmt.Printf(\u0026#34;第 1 行 - a 变量类型为 = %T\\n\u0026#34;, a ); fmt.Printf(\u0026#34;第 2 行 - b 变量类型为 = %T\\n\u0026#34;, b ); fmt.Printf(\u0026#34;第 3 行 - c 变量类型为 = %T\\n\u0026#34;, c ); /* \u0026amp; 和 * 运算符实例 */ ptr = \u0026amp;a /* \u0026#39;ptr\u0026#39; 包含了 \u0026#39;a\u0026#39; 变量的地址 */ fmt.Printf(\u0026#34;a 的值为 %d\\n\u0026#34;, a); fmt.Printf(\u0026#34;*ptr 为 %d\\n\u0026#34;, *ptr); } 运行结果：\n第 1 行 - a 变量类型为 = int 第 2 行 - b 变量类型为 = int32 第 3 行 - c 变量类型为 = float32 a 的值为 4 *ptr 为 4 运算符优先级 有些运算符拥有较高的优先级，二元运算符的运算方向均是从左至右。下表列出了所有运算符以及它们的优先级，由上至下代表优先级由高到低：\n优先级 运算符 5 * / % \u0026laquo; \u0026raquo; \u0026amp; \u0026amp;^ 4 + - | ^ 3 == != \u0026lt; \u0026lt;= \u0026gt; \u0026gt;= 2 \u0026amp;\u0026amp; 1 || 当然，你可以通过使用括号来临时提升某个表达式的整体运算优先级。\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int = 20 var b int = 10 var c int = 15 var d int = 5 var e int; e = (a + b) * c / d; // ( 30 * 15 ) / 5 fmt.Printf(\u0026#34;(a + b) * c / d 的值为 : %d\\n\u0026#34;, e ); e = ((a + b) * c) / d; // (30 * 15 ) / 5 fmt.Printf(\u0026#34;((a + b) * c) / d 的值为 : %d\\n\u0026#34; , e ); e = (a + b) * (c / d); // (30) * (15/5) fmt.Printf(\u0026#34;(a + b) * (c / d) 的值为 : %d\\n\u0026#34;, e ); e = a + (b * c) / d; // 20 + (150/5) fmt.Printf(\u0026#34;a + (b * c) / d 的值为 : %d\\n\u0026#34; , e ); } 运行结果：\n(a + b) * c / d 的值为 : 90 ((a + b) * c) / d 的值为 : 90 (a + b) * (c / d) 的值为 : 90 a + (b * c) / d 的值为 : 50 补充 Go 的自增，自减只能作为表达式使用，而不能用于赋值语句。\na++ // 这是允许的，类似 a = a + 1,结果与 a++ 相同 a-- //与 a++ 相似 a = a++ // 这是不允许的，会出现编译错误 syntax error: unexpected ++ at end of statement go的条件语句 条件语句需要开发者通过指定一个或多个条件，并通过测试条件是否为 true 来决定是否执行指定语句，并在条件为 false 的情况在执行另外的语句。\nGo 语言提供了以下几种条件判断语句：\n语句 描述 if 语句 if 语句 由一个布尔表达式后紧跟一个或多个语句组成。 if\u0026hellip;else 语句 if 语句 后可以使用可选的 else 语句, else 语句中的表达式在布尔表达式为 false 时执行。 if 嵌套语句 你可以在 if 或 else if 语句中嵌入一个或多个 if 或 else if 语句。 switch 语句 switch 语句用于基于不同条件执行不同动作。 select 语句 select 语句类似于 switch 语句，但是select会随机执行一个可运行的case。如果没有case可运行，它将阻塞，直到有case可运行。 go的循环语句 Go 语言提供了以下几种类型循环处理语句：\n循环类型 描述 for 循环 重复执行语句块 循环嵌套 在 for 循环中嵌套一个或多个 for 循环 循环控制语句 循环控制语句可以控制循环体内语句的执行过程。\nGO 语言支持以下几种循环控制语句：\n控制语句 描述 break 语句 经常用于中断当前 for 循环或跳出 switch 语句 continue 语句 跳过当前循环的剩余语句，然后继续进行下一轮循环。 goto 语句 将控制转移到被标记的语句。 无限循环 如果循环中条件语句永远不为 false 则会进行无限循环，我们可以通过 for 循环语句中只设置一个条件表达式来执行无限循环：\npackage main import \u0026#34;fmt\u0026#34; func main() { for true { fmt.Printf(\u0026#34;这是无限循环。\\n\u0026#34;); } } Go 语言函数 函数是基本的代码块，用于执行一个任务。 Go 语言最少有个 main() 函数。 你可以通过函数来划分不同功能，逻辑上每个函数执行的是指定的任务。 函数声明告诉了编译器函数的名称，返回类型，和参数。 Go 语言标准库提供了多种可动用的内置的函数。例如，len() 函数可以接受不同类型参数并返回该类型的长度。如果我们传入的是字符串则返回字符串的长度，如果传入的是数组，则返回数组中包含的元素个数。 Go 语言函数定义格式如下：\nfunc function_name( [parameter list] ) [return_types] { //函数体 } 函数定义解析：\nfunc：函数由 func 开始声明 function_name：函数名称，参数列表和返回值类型构成了函数签名。 parameter list：参数列表，参数就像一个占位符，当函数被调用时，你可以将值传递给参数，这个值被称为实际参数。参数列表指定的是参数类型、顺序、及参数个数。参数是可选的，也就是说函数也可以不包含参数。 return_types：返回类型，函数返回一列值。return_types 是该列值的数据类型。有些功能不需要返回值，这种情况下 return_types 不是必须的。 函数体：函数定义的代码集合。 实例 以下实例为 max() 函数的代码，该函数传入两个整型参数 num1 和 num2，并返回这两个参数的最大值：\n/* 函数返回两个数的最大值 */ func max(num1, num2 int) int { /* 声明局部变量 */ var result int if (num1 \u0026gt; num2) { result = num1 } else { result = num2 } return result } 函数调用 当创建函数时，你定义了函数需要做什么，通过调用该函数来执行指定任务。\n调用函数，向函数传递参数，并返回值，例如：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 定义局部变量 */ var a int = 100 var b int = 200 var ret int /* 调用函数并返回最大值 */ ret = max(a, b) fmt.Printf( \u0026#34;最大值是 : %d\\n\u0026#34;, ret ) } /* 函数返回两个数的最大值 */ func max(num1, num2 int) int { /* 定义局部变量 */ var result int if (num1 \u0026gt; num2) { result = num1 } else { result = num2 } return result } 以上实例在 main() 函数中调用 max（）函数，执行结果为：\n最大值是 : 200 函数返回多个值 Go 函数可以返回多个值，例如：\n实例 package main import \u0026#34;fmt\u0026#34; func swap(x, y string) (string, string) { return y, x } func main() { a, b := swap(\u0026#34;Google\u0026#34;, \u0026#34;Runoob\u0026#34;) fmt.Println(a, b) } 以上实例执行结果为：\nRunoob Google 函数参数 函数如果使用参数，该变量可称为函数的形参。\n形参就像定义在函数体内的局部变量。\n调用函数，可以通过两种方式来传递参数：\n传递类型 描述 值传递 值传递是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。 引用传递 引用传递是指在调用函数时将实际参数的地址传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。 默认情况下，Go 语言使用的是值传递，即在调用过程中不会影响到实际参数。\n函数用法 函数用法 描述 函数作为另外一个函数的实参 函数定义后可作为另外一个函数的实参数传入 闭包 闭包是匿名函数，可在动态编程中使用 方法 方法就是一个包含了接受者的函数 Go 语言变量作用域 作用域为已声明标识符所表示的常量、类型、变量、函数或包在源代码中的作用范围。\nGo 语言中变量可以在三个地方声明：\n函数内定义的变量称为局部变量 函数外定义的变量称为全局变量 函数定义中的变量称为形式参数 局部变量 在函数体内声明的变量称之为局部变量，它们的作用域只在函数体内，参数和返回值变量也是局部变量。\n以下实例中 main() 函数使用了局部变量 a, b, c：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 声明局部变量 */ var a, b, c int /* 初始化参数 */ a = 10 b = 20 c = a + b fmt.Printf (\u0026#34;结果： a = %d, b = %d and c = %d\\n\u0026#34;, a, b, c) } 以上实例执行输出结果为：\n结果： a = 10, b = 20 and c = 30 全局变量 在函数体外声明的变量称之为全局变量，全局变量可以在整个包甚至外部包（被导出后）使用。\n全局变量可以在任何函数中使用，以下实例演示了如何使用全局变量：\npackage main import \u0026#34;fmt\u0026#34; /* 声明全局变量 */ var g int func main() { /* 声明局部变量 */ var a, b int /* 初始化参数 */ a = 10 b = 20 g = a + b fmt.Printf(\u0026#34;结果： a = %d, b = %d and g = %d\\n\u0026#34;, a, b, g) } 以上实例执行输出结果为：\n结果： a = 10, b = 20 and g = 30 Go 语言程序中全局变量与局部变量名称可以相同，但是函数内的局部变量会被优先考虑。实例如下：\npackage main import \u0026#34;fmt\u0026#34; /* 声明全局变量 */ var g int = 20 func main() { /* 声明局部变量 */ var g int = 10 fmt.Printf (\u0026#34;结果： g = %d\\n\u0026#34;, g) } 以上实例执行输出结果为：\n结果： g = 10 形式参数 形式参数会作为函数的局部变量来使用。实例如下：\npackage main import \u0026#34;fmt\u0026#34; /* 声明全局变量 */ var a int = 20; func main() { /* main 函数中声明局部变量 */ var a int = 10 var b int = 20 var c int = 0 fmt.Printf(\u0026#34;main()函数中 a = %d\\n\u0026#34;, a); c = sum( a, b); fmt.Printf(\u0026#34;main()函数中 c = %d\\n\u0026#34;, c); } /* 函数定义-两数相加 */ func sum(a, b int) int { fmt.Printf(\u0026#34;sum() 函数中 a = %d\\n\u0026#34;, a); fmt.Printf(\u0026#34;sum() 函数中 b = %d\\n\u0026#34;, b); return a + b; } 以上实例执行输出结果为：\nmain()函数中 a = 10 sum() 函数中 a = 10 sum() 函数中 b = 20 main()函数中 c = 30 初始化局部和全局变量 不同类型的局部和全局变量默认值为：\n数据类型 初始化默认值 int 0 float32 0 pointer nil Go 语言数组 Go 语言提供了数组类型的数据结构。\n数组是具有相同唯一类型的一组已编号且长度固定的数据项序列，这种类型可以是任意的原始类型例如整型、字符串或者自定义类型。\n相对于去声明 number0, number1, \u0026hellip;, number99 的变量，使用数组形式 numbers[0], numbers[1] \u0026hellip;, numbers[99] 更加方便且易于扩展。\n数组元素可以通过索引（位置）来读取（或者修改），索引从 0 开始，第一个元素索引为 0，第二个索引为 1，以此类推。\n声明数组 Go 语言数组声明需要指定元素类型及元素个数，语法格式如下：\nvar arrayName [size]dataType 其中，arrayName 是数组的名称，size 是数组的大小，dataType 是数组中元素的数据类型。\n以下定义了数组 balance 长度为 10 类型为 float32：\nvar balance [10]float32 初始化数组 以下演示了数组初始化：\n以下实例声明一个名为 numbers 的整数数组，其大小为 5，在声明时，数组中的每个元素都会根据其数据类型进行默认初始化，对于整数类型，初始值为 0。\nvar numbers [5]int 还可以使用初始化列表来初始化数组的元素：\nvar numbers = [5]int{1, 2, 3, 4, 5} 以上代码声明一个大小为 5 的整数数组，并将其中的元素分别初始化为 1、2、3、4 和 5。\n另外，还可以使用 := 简短声明语法来声明和初始化数组：\nnumbers := [5]int{1, 2, 3, 4, 5} 以上代码创建一个名为 numbers 的整数数组，并将其大小设置为 5，并初始化元素的值。\n**注意：**在 Go 语言中，数组的大小是类型的一部分，因此不同大小的数组是不兼容的，也就是说 [5]int 和 [10]int 是不同的类型。\n以下定义了数组 balance 长度为 5 类型为 float32，并初始化数组的元素：\nvar balance = [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 我们也可以通过字面量在声明数组的同时快速初始化数组：\nbalance := [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 如果数组长度不确定，可以使用 \u0026hellip; 代替数组的长度，编译器会根据元素个数自行推断数组的长度：\nvar balance = [...]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 或 balance := [...]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 如果设置了数组的长度，我们还可以通过指定下标来初始化元素：\n// 将索引为 1 和 3 的元素初始化 balance := [5]float32{1:2.0,3:7.0} 初始化数组中 {} 中的元素个数不能大于 [] 中的数字。\n如果忽略 [] 中的数字不设置数组大小，Go 语言会根据元素的个数来设置数组的大小：\nbalance[4] = 50.0 以上实例读取了第五个元素。数组元素可以通过索引（位置）来读取（或者修改），索引从 0 开始，第一个元素索引为 0，第二个索引为 1，以此类推。\n访问数组元素 数组元素可以通过索引（位置）来读取。格式为数组名后加中括号，中括号中为索引的值。例如：\nvar salary float32 = balance[9] 以上实例读取了数组 balance 第 10 个元素的值。\n以下演示了数组完整操作（声明、赋值、访问）的实例：\npackage main import \u0026#34;fmt\u0026#34; func main() { var n [10]int /* n 是一个长度为 10 的数组 */ var i,j int /* 为数组 n 初始化元素 */ for i = 0; i \u0026lt; 10; i++ { n[i] = i + 100 /* 设置元素为 i + 100 */ } /* 输出每个数组元素的值 */ for j = 0; j \u0026lt; 10; j++ { fmt.Printf(\u0026#34;Element[%d] = %d\\n\u0026#34;, j, n[j] ) } } 结果如下：\nElement[0] = 100 Element[1] = 101 Element[2] = 102 Element[3] = 103 Element[4] = 104 Element[5] = 105 Element[6] = 106 Element[7] = 107 Element[8] = 108 Element[9] = 109 package main import \u0026#34;fmt\u0026#34; func main() { var i,j,k int // 声明数组的同时快速初始化数组 balance := [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0} /* 输出数组元素 */ ... for i = 0; i \u0026lt; 5; i++ { fmt.Printf(\u0026#34;balance[%d] = %f\\n\u0026#34;, i, balance[i] ) } balance2 := [...]float32{1000.0, 2.0, 3.4, 7.0, 50.0} /* 输出每个数组元素的值 */ for j = 0; j \u0026lt; 5; j++ { fmt.Printf(\u0026#34;balance2[%d] = %f\\n\u0026#34;, j, balance2[j] ) } // 将索引为 1 和 3 的元素初始化 balance3 := [5]float32{1:2.0,3:7.0} for k = 0; k \u0026lt; 5; k++ { fmt.Printf(\u0026#34;balance3[%d] = %f\\n\u0026#34;, k, balance3[k] ) } } 结果如下：\nbalance[0] = 1000.000000 balance[1] = 2.000000 balance[2] = 3.400000 balance[3] = 7.000000 balance[4] = 50.000000 balance2[0] = 1000.000000 balance2[1] = 2.000000 balance2[2] = 3.400000 balance2[3] = 7.000000 balance2[4] = 50.000000 balance3[0] = 0.000000 balance3[1] = 2.000000 balance3[2] = 0.000000 balance3[3] = 7.000000 balance3[4] = 0.000000 多维数组 Go 语言支持多维数组，以下为常用的多维数组声明方式：\nvar variable_name [SIZE1][SIZE2]...[SIZEN] variable_type 以下实例声明了三维的整型数组：\nvar threedim [5][10][4]int 二维数组 二维数组是最简单的多维数组，二维数组本质上是由一维数组组成的。二维数组定义方式如下：\nvar arrayName [ x ][ y ] variable_type variable_type 为 Go 语言的数据类型，arrayName 为数组名，二维数组可认为是一个表格，x 为行，y 为列，下图演示了一个二维数组 a 为三行四列：\n二维数组中的元素可通过 a[ i ][ j ]来访问。\npackage main import \u0026#34;fmt\u0026#34; func main() { // Step 1: 创建数组 values := [][]int{} // Step 2: 使用 append() 函数向空的二维数组添加两行一维数组 row1 := []int{1, 2, 3} row2 := []int{4, 5, 6} values = append(values, row1) values = append(values, row2) // Step 3: 显示两行数据 fmt.Println(\u0026#34;Row 1\u0026#34;) fmt.Println(values[0]) fmt.Println(\u0026#34;Row 2\u0026#34;) fmt.Println(values[1]) // Step 4: 访问第一个元素 fmt.Println(\u0026#34;第一个元素为：\u0026#34;) fmt.Println(values[0][0]) } 结果为：\nRow 1 [1 2 3] Row 2 [4 5 6] 第一个元素为： 1 初始化二维数组 多维数组可通过大括号来初始值。以下实例为一个 3 行 4 列的二维数组：\na := [3][4]int{ {0, 1, 2, 3} , /* 第一行索引为 0 */ {4, 5, 6, 7} , /* 第二行索引为 1 */ {8, 9, 10, 11}, /* 第三行索引为 2 */ } **注意：**以上代码中倒数第二行的}必须要有逗号，因为最后一行的} 不能单独一行，也可以写成这样：\na := [3][4]int{ {0, 1, 2, 3} , /* 第一行索引为 0 */ {4, 5, 6, 7} , /* 第二行索引为 1 */ {8, 9, 10, 11}} /* 第三行索引为 2 */ 以下实例初始化一个 2 行 2 列 的二维数组：\npackage main import \u0026#34;fmt\u0026#34; func main() { // 创建二维数组 sites := [2][2]string{} // 向二维数组添加元素 sites[0][0] = \u0026#34;Google\u0026#34; sites[0][1] = \u0026#34;Runoob\u0026#34; sites[1][0] = \u0026#34;Taobao\u0026#34; sites[1][1] = \u0026#34;Weibo\u0026#34; // 显示结果 fmt.Println(sites) } 输出结果为：\n[[Google Runoob] [Taobao Weibo]] 访问二维数组 二维数组通过指定坐标来访问。如数组中的行索引与列索引，例如：\nval := a[2][3] 或 var value int = a[2][3] 以上实例访问了二维数组 val 第三行的第四个元素。\n二维数组可以使用循环嵌套来输出元素：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 数组 - 5 行 2 列*/ var a = [5][2]int{ {0,0}, {1,2}, {2,4}, {3,6},{4,8}} var i, j int /* 输出数组元素 */ for i = 0; i \u0026lt; 5; i++ { for j = 0; j \u0026lt; 2; j++ { fmt.Printf(\u0026#34;a[%d][%d] = %d\\n\u0026#34;, i,j, a[i][j] ) } } } 输出结果为：\na[0][0] = 0 a[0][1] = 0 a[1][0] = 1 a[1][1] = 2 a[2][0] = 2 a[2][1] = 4 a[3][0] = 3 a[3][1] = 6 a[4][0] = 4 a[4][1] = 8 以下实例创建各个维度元素数量不一致的多维数组：\npackage main import \u0026#34;fmt\u0026#34; func main() { // 创建空的二维数组 animals := [][]string{} // 创建三一维数组，各数组长度不同 row1 := []string{\u0026#34;fish\u0026#34;, \u0026#34;shark\u0026#34;, \u0026#34;eel\u0026#34;} row2 := []string{\u0026#34;bird\u0026#34;} row3 := []string{\u0026#34;lizard\u0026#34;, \u0026#34;salamander\u0026#34;} // 使用 append() 函数将一维数组添加到二维数组中 animals = append(animals, row1) animals = append(animals, row2) animals = append(animals, row3) // 循环输出 for i := range animals { fmt.Printf(\u0026#34;Row: %v\\n\u0026#34;, i) fmt.Println(animals[i]) } } 输出结果为：\nRow: 0 [fish shark eel] Row: 1 [bird] Row: 2 [lizard salamander] Go 语言向函数传递数组 Go 语言中的数组是值类型，因此在将数组传递给函数时，实际上是传递数组的副本。\n如果你想向函数传递数组参数，你需要在函数定义时，声明形参为数组，我们可以通过以下两种方式来声明：\n方式一 形参设定数组大小：\nfunc myFunction(param [10]int) { .... } 方式二 形参未设定数组大小：\nfunc myFunction(param []int) { .... } 如果你想要在函数内修改原始数组，可以通过传递数组的指针来实现。\n实例 让我们看下以下实例，实例中函数接收整型数组参数，另一个参数指定了数组元素的个数，并返回平均值：\nfunc getAverage(arr []int, size int) float32 { var i int var avg, sum float32 for i = 0; i \u0026lt; size; ++i { sum += arr[i] } avg = sum / size return avg; } 接下来我们来调用这个函数：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 数组长度为 5 */ var balance = [5]int {1000, 2, 3, 17, 50} var avg float32 /* 数组作为参数传递给函数 */ avg = getAverage( balance, 5 ) ; /* 输出返回的平均值 */ fmt.Printf( \u0026#34;平均值为: %f \u0026#34;, avg ); } func getAverage(arr [5]int, size int) float32 { var i,sum int var avg float32 for i = 0; i \u0026lt; size;i++ { sum += arr[i] } avg = float32(sum) / float32(size) return avg; } 输出结果为：\n平均值为: 214.399994 以上实例中我们使用的形参并未设定数组大小。\n浮点数计算输出有一定的偏差，你也可以转整型来设置精度。\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { a := 1.69 b := 1.7 c := a * b // 结果应该是2.873 fmt.Println(c) // 输出的是2.8729999999999998 } 设置固定精度：\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { a := 1690 // 表示1.69 b := 1700 // 表示1.70 c := a * b // 结果应该是2873000表示 2.873 fmt.Println(c) // 内部编码 fmt.Println(float64(c) / 1000000) // 显示 } 如果你想要在函数内修改原始数组，可以通过传递数组的指针来实现。\n以下实例演示如何向函数传递数组，函数接受一个数组和数组的指针作为参数：\npackage main import \u0026#34;fmt\u0026#34; // 函数接受一个数组作为参数 func modifyArray(arr [5]int) { for i := 0; i \u0026lt; len(arr); i++ { arr[i] = arr[i] * 2 } } // 函数接受一个数组的指针作为参数 func modifyArrayWithPointer(arr *[5]int) { for i := 0; i \u0026lt; len(*arr); i++ { (*arr)[i] = (*arr)[i] * 2 } } func main() { // 创建一个包含5个元素的整数数组 myArray := [5]int{1, 2, 3, 4, 5} fmt.Println(\u0026#34;Original Array:\u0026#34;, myArray) // 传递数组给函数，但不会修改原始数组的值 modifyArray(myArray) fmt.Println(\u0026#34;Array after modifyArray:\u0026#34;, myArray) // 传递数组的指针给函数，可以修改原始数组的值 modifyArrayWithPointer(\u0026amp;myArray) fmt.Println(\u0026#34;Array after modifyArrayWithPointer:\u0026#34;, myArray) } 在上面的例子中，modifyArray 函数接受一个数组，并尝试修改数组的值，但在主函数中调用后，原始数组并未被修改。相反，modifyArrayWithPointer 函数接受一个数组的指针，并通过指针修改了原始数组的值。\n以上实例执行输出结果为：\nOriginal Array: [1 2 3 4 5] Array after modifyArray: [1 2 3 4 5] Array after modifyArrayWithPointer: [2 4 6 8 10] Go 语言指针 Go 语言中指针是很容易学习的，Go 语言中使用指针可以更简单的执行一些任务。\n接下来让我们来一步步学习 Go 语言指针。\n我们都知道，变量是一种使用方便的占位符，用于引用计算机内存地址。\nGo 语言的取地址符是 \u0026amp;，放到一个变量前使用就会返回相应变量的内存地址。\n以下实例演示了变量在内存中地址：\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int = 10 fmt.Printf(\u0026#34;变量的地址: %x\\n\u0026#34;, \u0026amp;a ) } 输出结果为：\n变量的地址: 20818a220 什么是指针 一个指针变量指向了一个值的内存地址。\n类似于变量和常量，在使用指针前你需要声明指针。指针声明格式如下：\nvar var_name *var-type var-type 为指针类型，var_name 为指针变量名，* 号用于指定变量是作为一个指针。以下是有效的指针声明：\nvar ip *int /* 指向整型*/ var fp *float32 /* 指向浮点型 */ 如何使用指针 指针使用流程：\n定义指针变量。 为指针变量赋值。 访问指针变量中指向地址的值。 在指针类型前面加上 * 号（前缀）来获取指针所指向的内容。\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int= 20 /* 声明实际变量 */ var ip *int /* 声明指针变量 */ ip = \u0026amp;a /* 指针变量的存储地址 */ fmt.Printf(\u0026#34;a 变量的地址是: %x\\n\u0026#34;, \u0026amp;a ) /* 指针变量的存储地址 */ fmt.Printf(\u0026#34;ip 变量储存的指针地址: %x\\n\u0026#34;, ip ) /* 使用指针访问值 */ fmt.Printf(\u0026#34;*ip 变量的值: %d\\n\u0026#34;, *ip ) } 输出结果为：\na 变量的地址是: 20818a220 ip 变量储存的指针地址: 20818a220 *ip 变量的值: 20 Go 空指针 当一个指针被定义后没有分配到任何变量时，它的值为 nil。\nnil 指针也称为空指针。\nnil在概念上和其它语言的null、None、nil、NULL一样，都指代零值或空值。\n一个指针变量通常缩写为 ptr。\npackage main import \u0026#34;fmt\u0026#34; func main() { var ptr *int fmt.Printf(\u0026#34;ptr 的值为 : %x\\n\u0026#34;, ptr ) } 输出结果为：\nptr 的值为 : 0 空指针判断：\nif(ptr != nil) /* ptr 不是空指针 */ if(ptr == nil) /* ptr 是空指针 */ Go 语言指针数组 package main import \u0026#34;fmt\u0026#34; const MAX int = 3 func main() { a := []int{10,100,200} var i int for i = 0; i \u0026lt; MAX; i++ { fmt.Printf(\u0026#34;a[%d] = %d\\n\u0026#34;, i, a[i] ) } } 以上代码执行输出结果为：\na[0] = 10 a[1] = 100 a[2] = 200 有一种情况，我们可能需要保存数组，这样我们就需要使用到指针。\n以下声明了整型指针数组：\nvar ptr [MAX]*int; ptr 为整型指针数组。因此每个元素都指向了一个值。以下实例的三个整数将存储在指针数组中：\npackage main import \u0026#34;fmt\u0026#34; const MAX int = 3 func main() { a := []int{10,100,200} var i int var ptr [MAX]*int; for i = 0; i \u0026lt; MAX; i++ { ptr[i] = \u0026amp;a[i] /* 整数地址赋值给指针数组 */ } for i = 0; i \u0026lt; MAX; i++ { fmt.Printf(\u0026#34;a[%d] = %d\\n\u0026#34;, i,*ptr[i] ) } } 输出结果为：\na[0] = 10 a[1] = 100 a[2] = 200 Go 语言指针作为函数参数 Go 语言允许向函数传递指针，只需要在函数定义的参数上设置为指针类型即可。\n以下实例演示了如何向函数传递指针，并在函数调用后修改函数内的值，：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 定义局部变量 */ var a int = 100 var b int= 200 fmt.Printf(\u0026#34;交换前 a 的值 : %d\\n\u0026#34;, a ) fmt.Printf(\u0026#34;交换前 b 的值 : %d\\n\u0026#34;, b ) /* 调用函数用于交换值 * \u0026amp;a 指向 a 变量的地址 * \u0026amp;b 指向 b 变量的地址 */ swap(\u0026amp;a, \u0026amp;b); fmt.Printf(\u0026#34;交换后 a 的值 : %d\\n\u0026#34;, a ) fmt.Printf(\u0026#34;交换后 b 的值 : %d\\n\u0026#34;, b ) } func swap(x *int, y *int) { var temp int temp = *x /* 保存 x 地址的值 */ *x = *y /* 将 y 赋值给 x */ *y = temp /* 将 temp 赋值给 y */ } 输出结果为：\n交换前 a 的值 : 100 交换前 b 的值 : 200 交换后 a 的值 : 200 交换后 b 的值 : 100 Go 语言指向指针的指针 如果一个指针变量存放的又是另一个指针变量的地址，则称这个指针变量为指向指针的指针变量。\n当定义一个指向指针的指针变量时，第一个指针存放第二个指针的地址，第二个指针存放变量的地址：\n指向指针的指针变量声明格式如下：\nvar ptr **int; 以上指向指针的指针变量为整型。\n访问指向指针的指针变量值需要使用两个 * 号，如下所示：\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int var ptr *int var pptr **int a = 3000 /* 指针 ptr 地址 */ ptr = \u0026amp;a /* 指向指针 ptr 地址 */ pptr = \u0026amp;ptr /* 获取 pptr 的值 */ fmt.Printf(\u0026#34;变量 a = %d\\n\u0026#34;, a ) fmt.Printf(\u0026#34;指针变量 *ptr = %d\\n\u0026#34;, *ptr ) fmt.Printf(\u0026#34;指向指针的指针变量 **pptr = %d\\n\u0026#34;, **pptr) } 输出结果为：\n变量 a = 3000 指针变量 *ptr = 3000 指向指针的指针变量 **pptr = 3000 Go 语言结构体 Go 语言中数组可以存储同一类型的数据，但在结构体中我们可以为不同项定义不同的数据类型。\n结构体是由一系列具有相同类型或不同类型的数据构成的数据集合。\n结构体表示一项记录，比如保存图书馆的书籍记录，每本书有以下属性：\nTitle ：标题 Author ： 作者 Subject：学科 ID：书籍ID 定义结构体 结构体定义需要使用 type 和 struct 语句。struct 语句定义一个新的数据类型，结构体中有一个或多个成员。type 语句设定了结构体的名称。结构体的格式如下：\ntype struct_variable_type struct { member definition member definition ... member definition } 一旦定义了结构体类型，它就能用于变量的声明，语法格式如下：\nvariable_name := structure_variable_type {value1, value2...valuen} 或 variable_name := structure_variable_type { key1: value1, key2: value2..., keyn: valuen} package main import \u0026#34;fmt\u0026#34; type Books struct { title string author string subject string book_id int } func main() { // 创建一个新的结构体 fmt.Println(Books{\u0026#34;Go 语言\u0026#34;, \u0026#34;www.runoob.com\u0026#34;, \u0026#34;Go 语言教程\u0026#34;, 6495407}) // 也可以使用 key =\u0026gt; value 格式 fmt.Println(Books{title: \u0026#34;Go 语言\u0026#34;, author: \u0026#34;www.runoob.com\u0026#34;, subject: \u0026#34;Go 语言教程\u0026#34;, book_id: 6495407}) // 忽略的字段为 0 或 空 fmt.Println(Books{title: \u0026#34;Go 语言\u0026#34;, author: \u0026#34;www.runoob.com\u0026#34;}) } 输出结果为：\n{Go 语言 www.runoob.com Go 语言教程 6495407} {Go 语言 www.runoob.com Go 语言教程 6495407} {Go 语言 www.runoob.com 0} 访问结构体成员 如果要访问结构体成员，需要使用点号 . 操作符，格式为：\n结构体.成员名 结构体类型变量使用 struct 关键字定义，实例如下：\npackage main import \u0026#34;fmt\u0026#34; type Books struct { title string author string subject string book_id int } func main() { var Book1 Books /* 声明 Book1 为 Books 类型 */ var Book2 Books /* 声明 Book2 为 Books 类型 */ /* book 1 描述 */ Book1.title = \u0026#34;Go 语言\u0026#34; Book1.author = \u0026#34;www.runoob.com\u0026#34; Book1.subject = \u0026#34;Go 语言教程\u0026#34; Book1.book_id = 6495407 /* book 2 描述 */ Book2.title = \u0026#34;Python 教程\u0026#34; Book2.author = \u0026#34;www.runoob.com\u0026#34; Book2.subject = \u0026#34;Python 语言教程\u0026#34; Book2.book_id = 6495700 /* 打印 Book1 信息 */ fmt.Printf( \u0026#34;Book 1 title : %s\\n\u0026#34;, Book1.title) fmt.Printf( \u0026#34;Book 1 author : %s\\n\u0026#34;, Book1.author) fmt.Printf( \u0026#34;Book 1 subject : %s\\n\u0026#34;, Book1.subject) fmt.Printf( \u0026#34;Book 1 book_id : %d\\n\u0026#34;, Book1.book_id) /* 打印 Book2 信息 */ fmt.Printf( \u0026#34;Book 2 title : %s\\n\u0026#34;, Book2.title) fmt.Printf( \u0026#34;Book 2 author : %s\\n\u0026#34;, Book2.author) fmt.Printf( \u0026#34;Book 2 subject : %s\\n\u0026#34;, Book2.subject) fmt.Printf( \u0026#34;Book 2 book_id : %d\\n\u0026#34;, Book2.book_id) } 运行结果为：\nBook 1 title : Go 语言 Book 1 author : www.runoob.com Book 1 subject : Go 语言教程 Book 1 book_id : 6495407 Book 2 title : Python 教程 Book 2 author : www.runoob.com Book 2 subject : Python 语言教程 Book 2 book_id : 6495700 结构体作为函数参数 你可以像其他数据类型一样将结构体类型作为参数传递给函数。并以以上实例的方式访问结构体变量：\npackage main import \u0026#34;fmt\u0026#34; type Books struct { title string author string subject string book_id int } func main() { var Book1 Books /* 声明 Book1 为 Books 类型 */ var Book2 Books /* 声明 Book2 为 Books 类型 */ /* book 1 描述 */ Book1.title = \u0026#34;Go 语言\u0026#34; Book1.author = \u0026#34;www.runoob.com\u0026#34; Book1.subject = \u0026#34;Go 语言教程\u0026#34; Book1.book_id = 6495407 /* book 2 描述 */ Book2.title = \u0026#34;Python 教程\u0026#34; Book2.author = \u0026#34;www.runoob.com\u0026#34; Book2.subject = \u0026#34;Python 语言教程\u0026#34; Book2.book_id = 6495700 /* 打印 Book1 信息 */ printBook(Book1) /* 打印 Book2 信息 */ printBook(Book2) } func printBook( book Books ) { fmt.Printf( \u0026#34;Book title : %s\\n\u0026#34;, book.title) fmt.Printf( \u0026#34;Book author : %s\\n\u0026#34;, book.author) fmt.Printf( \u0026#34;Book subject : %s\\n\u0026#34;, book.subject) fmt.Printf( \u0026#34;Book book_id : %d\\n\u0026#34;, book.book_id) } 运行结果为：\nBook title : Go 语言 Book author : www.runoob.com Book subject : Go 语言教程 Book book_id : 6495407 Book title : Python 教程 Book author : www.runoob.com Book subject : Python 语言教程 Book book_id : 6495700 结构体指针 你可以定义指向结构体的指针类似于其他指针变量，格式如下：\nvar struct_pointer *Books 以上定义的指针变量可以存储结构体变量的地址。查看结构体变量地址，可以将 \u0026amp; 符号放置于结构体变量前：\nstruct_pointer = \u0026amp;Book1 使用结构体指针访问结构体成员，使用 \u0026ldquo;.\u0026rdquo; 操作符：\nstruct_pointer.title package main import \u0026#34;fmt\u0026#34; type Books struct { title string author string subject string book_id int } func main() { var Book1 Books /* 声明 Book1 为 Books 类型 */ var Book2 Books /* 声明 Book2 为 Books 类型 */ /* book 1 描述 */ Book1.title = \u0026#34;Go 语言\u0026#34; Book1.author = \u0026#34;www.runoob.com\u0026#34; Book1.subject = \u0026#34;Go 语言教程\u0026#34; Book1.book_id = 6495407 /* book 2 描述 */ Book2.title = \u0026#34;Python 教程\u0026#34; Book2.author = \u0026#34;www.runoob.com\u0026#34; Book2.subject = \u0026#34;Python 语言教程\u0026#34; Book2.book_id = 6495700 /* 打印 Book1 信息 */ printBook(\u0026amp;Book1) /* 打印 Book2 信息 */ printBook(\u0026amp;Book2) } func printBook( book *Books ) { fmt.Printf( \u0026#34;Book title : %s\\n\u0026#34;, book.title) fmt.Printf( \u0026#34;Book author : %s\\n\u0026#34;, book.author) fmt.Printf( \u0026#34;Book subject : %s\\n\u0026#34;, book.subject) fmt.Printf( \u0026#34;Book book_id : %d\\n\u0026#34;, book.book_id) } 运行结果为：\nBook title : Go 语言 Book author : www.runoob.com Book subject : Go 语言教程 Book book_id : 6495407 Book title : Python 教程 Book author : www.runoob.com Book subject : Python 语言教程 Book book_id : 6495700 Go 语言切片(Slice) Go 语言切片是对数组的抽象。\nGo 数组的长度不可改变，在特定场景中这样的集合就不太适用，Go 中提供了一种灵活，功能强悍的内置类型切片(\u0026ldquo;动态数组\u0026rdquo;)，与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大。\n定义切片 你可以声明一个未指定大小的数组来定义切片：\nvar identifier []type 切片不需要说明长度。\n或使用 make() 函数来创建切片:\nvar slice1 []type = make([]type, len) 也可以简写为 slice1 := make([]type, len) 也可以指定容量，其中 capacity 为可选参数。\nmake([]T, length, capacity) 这里 len 是数组的长度并且也是切片的初始长度。\n切片初始化 s :=[] int {1,2,3 } 直接初始化切片，[] 表示是切片类型，{1,2,3} 初始化值依次是 1,2,3，其 cap=len=3。\ns := arr[:] 初始化切片 s，是数组 arr 的引用。\ns := arr[startIndex:endIndex] 将 arr 中从下标 startIndex 到 endIndex-1 下的元素创建为一个新的切片。\ns := arr[startIndex:] 默认 endIndex 时将表示一直到arr的最后一个元素。\ns := arr[:endIndex] 默认 startIndex 时将表示从 arr 的第一个元素开始。\ns1 := s[startIndex:endIndex] 通过切片 s 初始化切片 s1。\ns :=make([]int,len,cap) 通过内置函数 make() 初始化切片s，[]int 标识为其元素类型为 int 的切片。\nlen() 和 cap() 函数 切片是可索引的，并且可以由 len() 方法获取长度。\n切片提供了计算容量的方法 cap() 可以测量切片最长可以达到多少。\n以下为具体实例：\npackage main import \u0026#34;fmt\u0026#34; func main() { var numbers = make([]int,3,5) printSlice(numbers) } func printSlice(x []int){ fmt.Printf(\u0026#34;len=%d cap=%d slice=%v\\n\u0026#34;,len(x),cap(x),x) } 输出结果为:\nlen=3 cap=5 slice=[0 0 0] 空(nil)切片 一个切片在未初始化之前默认为 nil，长度为 0，实例如下：\npackage main import \u0026#34;fmt\u0026#34; func main() { var numbers []int printSlice(numbers) if(numbers == nil){ fmt.Printf(\u0026#34;切片是空的\u0026#34;) } } func printSlice(x []int){ fmt.Printf(\u0026#34;len=%d cap=%d slice=%v\\n\u0026#34;,len(x),cap(x),x) } 输出结果为:\nlen=0 cap=0 slice=[] 切片是空的 切片截取 可以通过设置下限及上限来设置截取切片 [lower-bound:upper-bound]，实例如下：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 创建切片 */ numbers := []int{0,1,2,3,4,5,6,7,8} printSlice(numbers) /* 打印原始切片 */ fmt.Println(\u0026#34;numbers ==\u0026#34;, numbers) /* 打印子切片从索引1(包含) 到索引4(不包含)*/ fmt.Println(\u0026#34;numbers[1:4] ==\u0026#34;, numbers[1:4]) /* 默认下限为 0*/ fmt.Println(\u0026#34;numbers[:3] ==\u0026#34;, numbers[:3]) /* 默认上限为 len(s)*/ fmt.Println(\u0026#34;numbers[4:] ==\u0026#34;, numbers[4:]) numbers1 := make([]int,0,5) printSlice(numbers1) /* 打印子切片从索引 0(包含) 到索引 2(不包含) */ number2 := numbers[:2] printSlice(number2) /* 打印子切片从索引 2(包含) 到索引 5(不包含) */ number3 := numbers[2:5] printSlice(number3) } func printSlice(x []int){ fmt.Printf(\u0026#34;len=%d cap=%d slice=%v\\n\u0026#34;,len(x),cap(x),x) } 输出结果为：\nlen=9 cap=9 slice=[0 1 2 3 4 5 6 7 8] numbers == [0 1 2 3 4 5 6 7 8] numbers[1:4] == [1 2 3] numbers[:3] == [0 1 2] numbers[4:] == [4 5 6 7 8] len=0 cap=5 slice=[] len=2 cap=9 slice=[0 1] len=3 cap=7 slice=[2 3 4] append() 和 copy() 函数 如果想增加切片的容量，我们必须创建一个新的更大的切片并把原分片的内容都拷贝过来。\n下面的代码描述了从拷贝切片的 copy 方法和向切片追加新元素的 append 方法。\npackage main import \u0026#34;fmt\u0026#34; func main() { var numbers []int printSlice(numbers) /* 允许追加空切片 */ numbers = append(numbers, 0) printSlice(numbers) /* 向切片添加一个元素 */ numbers = append(numbers, 1) printSlice(numbers) /* 同时添加多个元素 */ numbers = append(numbers, 2,3,4) printSlice(numbers) /* 创建切片 numbers1 是之前切片的两倍容量*/ numbers1 := make([]int, len(numbers), (cap(numbers))*2) /* 拷贝 numbers 的内容到 numbers1 */ copy(numbers1,numbers) printSlice(numbers1) } func printSlice(x []int){ fmt.Printf(\u0026#34;len=%d cap=%d slice=%v\\n\u0026#34;,len(x),cap(x),x) } 输出结果为：\nlen=0 cap=0 slice=[] len=1 cap=1 slice=[0] len=2 cap=2 slice=[0 1] len=5 cap=6 slice=[0 1 2 3 4] len=5 cap=12 slice=[0 1 2 3 4] Go 语言范围(Range) Go 语言中 range 关键字用于 for 循环中迭代数组(array)、切片(slice)、通道(channel)或集合(map)的元素。在数组和切片中它返回元素的索引和索引对应的值，在集合中返回 key-value 对。\nfor 循环的 range 格式可以对 slice、map、数组、字符串等进行迭代循环。格式如下：\nfor key, value := range oldMap { newMap[key] = value } 以上代码中的 key 和 value 是可以省略。\n如果只想读取 key，格式如下：\nfor key := range oldMap 或者这样：\nfor key, _ := range oldMap\n如果只想读取 value，格式如下：\nfor _, value := range oldMap 数组和切片 遍历简单的切片，2**%d 的结果为 2 对应的次方数：\npackage main import \u0026#34;fmt\u0026#34; // 声明一个包含 2 的幂次方的切片 var pow = []int{1, 2, 4, 8, 16, 32, 64, 128} func main() { // 遍历 pow 切片，i 是索引，v 是值 for i, v := range pow { // 打印 2 的 i 次方等于 v fmt.Printf(\u0026#34;2**%d = %d\\n\u0026#34;, i, v) } } 遍历 pow 切片，i 是索引，v 是值\n输出结果为：\n2**0 = 1 2**1 = 2 2**2 = 4 2**3 = 8 2**4 = 16 2**5 = 32 2**6 = 64 2**7 = 128 字符串 range 迭代字符串时，返回每个字符的索引和 Unicode 代码点（rune）。\npackage main import \u0026#34;fmt\u0026#34; func main() { for i, c := range \u0026#34;hello\u0026#34; { fmt.Printf(\u0026#34;index: %d, char: %c\\n\u0026#34;, i, c) } } 输出结果为:\nindex: 0, char: h index: 1, char: e index: 2, char: l index: 3, char: l index: 4, char: o 映射（Map） for 循环的 range 格式可以省略 key 和 value，如下实例：\npackage main import \u0026#34;fmt\u0026#34; func main() { // 创建一个空的 map，key 是 int 类型，value 是 float32 类型 map1 := make(map[int]float32) // 向 map1 中添加 key-value 对 map1[1] = 1.0 map1[2] = 2.0 map1[3] = 3.0 map1[4] = 4.0 // 遍历 map1，读取 key 和 value for key, value := range map1 { // 打印 key 和 value fmt.Printf(\u0026#34;key is: %d - value is: %f\\n\u0026#34;, key, value) } // 遍历 map1，只读取 key for key := range map1 { // 打印 key fmt.Printf(\u0026#34;key is: %d\\n\u0026#34;, key) } // 遍历 map1，只读取 value for _, value := range map1 { // 打印 value fmt.Printf(\u0026#34;value is: %f\\n\u0026#34;, value) } } 输出结果为:\nkey is: 4 - value is: 4.000000 key is: 1 - value is: 1.000000 key is: 2 - value is: 2.000000 key is: 3 - value is: 3.000000 key is: 1 key is: 2 key is: 3 key is: 4 value is: 1.000000 value is: 2.000000 value is: 3.000000 value is: 4.000000 通道（Channel） range 遍历从通道接收的值，直到通道关闭。\npackage main import \u0026#34;fmt\u0026#34; func main() { ch := make(chan int, 2) ch \u0026lt;- 1 ch \u0026lt;- 2 close(ch) for v := range ch { fmt.Println(v) } } 输出结果为:\n1 2 忽略值 在遍历时可以使用 _ 来忽略索引或值。\npackage main import \u0026#34;fmt\u0026#34; func main() { nums := []int{2, 3, 4} // 忽略索引 for _, num := range nums { fmt.Println(\u0026#34;value:\u0026#34;, num) } // 忽略值 for i := range nums { fmt.Println(\u0026#34;index:\u0026#34;, i) } } 输出结果为:\nvalue: 2 value: 3 value: 4 index: 0 index: 1 index: 2 其他 range 遍历其他数据结构：\npackage main import \u0026#34;fmt\u0026#34; func main() { //这是我们使用 range 去求一个 slice 的和。使用数组跟这个很类似 nums := []int{2, 3, 4} sum := 0 for _, num := range nums { sum += num } fmt.Println(\u0026#34;sum:\u0026#34;, sum) //在数组上使用 range 将传入索引和值两个变量。上面那个例子我们不需要使用该元素的序号，所以我们使用空白符\u0026#34;_\u0026#34;省略了。有时侯我们确实需要知道它的索引。 for i, num := range nums { if num == 3 { fmt.Println(\u0026#34;index:\u0026#34;, i) } } //range 也可以用在 map 的键值对上。 kvs := map[string]string{\u0026#34;a\u0026#34;: \u0026#34;apple\u0026#34;, \u0026#34;b\u0026#34;: \u0026#34;banana\u0026#34;} for k, v := range kvs { fmt.Printf(\u0026#34;%s -\u0026gt; %s\\n\u0026#34;, k, v) } //range也可以用来枚举 Unicode 字符串。第一个参数是字符的索引，第二个是字符（Unicode的值）本身。 for i, c := range \u0026#34;go\u0026#34; { fmt.Println(i, c) } } 输出结果为：\nsum: 9 index: 1 a -\u0026gt; apple b -\u0026gt; banana 0 103 1 111 Go 语言Map(集合) Map 是一种无序的键值对的集合。\nMap 最重要的一点是通过 key 来快速检索数据，key 类似于索引，指向数据的值。\nMap 是一种集合，所以我们可以像迭代数组和切片那样迭代它。不过，Map 是无序的，遍历 Map 时返回的键值对的顺序是不确定的。\n在获取 Map 的值时，如果键不存在，返回该类型的零值，例如 int 类型的零值是 0，string 类型的零值是 \u0026ldquo;\u0026quot;。\nMap 是引用类型，如果将一个 Map 传递给一个函数或赋值给另一个变量，它们都指向同一个底层数据结构，因此对 Map 的修改会影响到所有引用它的变量。\n定义 Map 可以使用内建函数 make 或使用 map 关键字来定义 Map:\n/* 使用 make 函数 */ map_variable := make(map[KeyType]ValueType, initialCapacity) 其中 KeyType 是键的类型，ValueType 是值的类型，initialCapacity 是可选的参数，用于指定 Map 的初始容量。Map 的容量是指 Map 中可以保存的键值对的数量，当 Map 中的键值对数量达到容量时，Map 会自动扩容。如果不指定 initialCapacity，Go 语言会根据实际情况选择一个合适的值。\n// 创建一个空的 Map m := make(map[string]int) // 创建一个初始容量为 10 的 Map m := make(map[string]int, 10) 也可以使用字面量创建 Map：键\u0026lt;\u0026mdash;\u0026mdash;\u0026mdash;\u0026gt;值\n// 使用字面量创建 Map m := map[string]int{ \u0026#34;apple\u0026#34;: 1, \u0026#34;banana\u0026#34;: 2, \u0026#34;orange\u0026#34;: 3, } 获取元素：\n// 获取键值对 v1 := m[\u0026#34;apple\u0026#34;] v2, ok := m[\u0026#34;pear\u0026#34;] // 如果键不存在，ok 的值为 false，v2 的值为该类型的零值 修改元素：\n// 修改键值对 m[\u0026#34;apple\u0026#34;] = 5 获取 Map 的长度：\n// 获取 Map 的长度 len := len(m) 遍历 Map：\n// 遍历 Map for k, v := range m { fmt.Printf(\u0026#34;key=%s, value=%d\\n\u0026#34;, k, v) } 删除元素：\n// 删除键值对 delete(m, \u0026#34;banana\u0026#34;) 创建和使用map:\npackage main import \u0026#34;fmt\u0026#34; func main() { var siteMap map[string]string /*创建集合 */ siteMap = make(map[string]string) /* map 插入 key - value 对,各个国家对应的首都 */ siteMap [ \u0026#34;Google\u0026#34; ] = \u0026#34;谷歌\u0026#34; siteMap [ \u0026#34;Runoob\u0026#34; ] = \u0026#34;菜鸟教程\u0026#34; siteMap [ \u0026#34;Baidu\u0026#34; ] = \u0026#34;百度\u0026#34; siteMap [ \u0026#34;Wiki\u0026#34; ] = \u0026#34;维基百科\u0026#34; /*使用键输出地图值 */ for site := range siteMap { fmt.Println(site, \u0026#34;首都是\u0026#34;, siteMap [site]) } /*查看元素在集合中是否存在 */ name, ok := siteMap [ \u0026#34;Facebook\u0026#34; ] /*如果确定是真实的,则存在,否则不存在 */ /*fmt.Println(capital) */ /*fmt.Println(ok) */ if (ok) { fmt.Println(\u0026#34;Facebook 的 站点是\u0026#34;, name) } else { fmt.Println(\u0026#34;Facebook 站点不存在\u0026#34;) } } 运行结果为：\nWiki 首都是 维基百科 Google 首都是 谷歌 Runoob 首都是 菜鸟教程 Baidu 首都是 百度 Facebook 站点不存在 delete() 函数 delete() 函数用于删除集合的元素, 参数为 map 和其对应的 key。实例如下：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 创建map */ countryCapitalMap := map[string]string{\u0026#34;France\u0026#34;: \u0026#34;Paris\u0026#34;, \u0026#34;Italy\u0026#34;: \u0026#34;Rome\u0026#34;, \u0026#34;Japan\u0026#34;: \u0026#34;Tokyo\u0026#34;, \u0026#34;India\u0026#34;: \u0026#34;New delhi\u0026#34;} fmt.Println(\u0026#34;原始地图\u0026#34;) /* 打印地图 */ for country := range countryCapitalMap { fmt.Println(country, \u0026#34;首都是\u0026#34;, countryCapitalMap [ country ]) } /*删除元素*/ delete(countryCapitalMap, \u0026#34;France\u0026#34;) fmt.Println(\u0026#34;法国条目被删除\u0026#34;) fmt.Println(\u0026#34;删除元素后地图\u0026#34;) /*打印地图*/ for country := range countryCapitalMap { fmt.Println(country, \u0026#34;首都是\u0026#34;, countryCapitalMap [ country ]) } } 运行结果为：\n原始地图 India 首都是 New delhi France 首都是 Paris Italy 首都是 Rome Japan 首都是 Tokyo 法国条目被删除 删除元素后地图 Italy 首都是 Rome Japan 首都是 Tokyo India 首都是 New delhi Go 语言递归函数 递归，就是在运行的过程中调用自己。\n语法格式如下：\nfunc recursion() { recursion() */\\* 函数调用自身 \\*/* } func main() { recursion() } Go 语言支持递归。但我们在使用递归时，开发者需要设置退出条件，否则递归将陷入无限循环中。\n递归函数对于解决数学上的问题是非常有用的，就像计算阶乘，生成斐波那契数列等。\n阶乘 以下实例通过 Go 语言的递归函数实例阶乘：\npackage main import \u0026#34;fmt\u0026#34; func Factorial(n uint64)(result uint64) { if (n \u0026gt; 0) { result = n * Factorial(n-1) return result } return 1 } func main() { var i int = 15 fmt.Printf(\u0026#34;%d 的阶乘是 %d\\n\u0026#34;, i, Factorial(uint64(i))) } 输出结果为：\n15 的阶乘是 1307674368000 斐波那契数列 以下实例通过 Go 语言的递归函数实现斐波那契数列：\npackage main import \u0026#34;fmt\u0026#34; func fibonacci(n int) int { if n \u0026lt; 2 { return n } return fibonacci(n-2) + fibonacci(n-1) } func main() { var i int for i = 0; i \u0026lt; 10; i++ { fmt.Printf(\u0026#34;%d\\t\u0026#34;, fibonacci(i)) } } 输出结果为：\n0 1 1 2 3 5 8 13 21 34 求平方根 以下实例通过 Go 语言使用递归方法实现求平方根的代码：\npackage main import ( \u0026#34;fmt\u0026#34; ) func sqrtRecursive(x, guess, prevGuess, epsilon float64) float64 { if diff := guess*guess - x; diff \u0026lt; epsilon \u0026amp;\u0026amp; -diff \u0026lt; epsilon { return guess } newGuess := (guess + x/guess) / 2 if newGuess == prevGuess { return guess } return sqrtRecursive(x, newGuess, guess, epsilon) } func sqrt(x float64) float64 { return sqrtRecursive(x, 1.0, 0.0, 1e-9) } func main() { x := 25.0 result := sqrt(x) fmt.Printf(\u0026#34;%.2f 的平方根为 %.6f\\n\u0026#34;, x, result) } 以上实例中，sqrtRecursive 函数使用递归方式实现平方根的计算。\nsqrtRecursive 函数接受四个参数：\nx 表示待求平方根的数 guess 表示当前猜测的平方根值 prevGuess 表示上一次的猜测值 epsilon 表示精度要求（即接近平方根的程度） 递归的终止条件是当前猜测的平方根与上一次猜测的平方根非常接近，差值小于给定的精度 epsilon。\n在 sqrt 函数中，我们调用 sqrtRecursive 来计算平方根，并传入初始值和精度要求，然后在 main 函数中，我们调用 sqrt 函数来求解平方根，并将结果打印出来。\n执行以上代码输出结果为：\n25.00 的平方根为 5.000000 Go 语言类型转换 类型转换用于将一种数据类型的变量转换为另外一种类型的变量。\nGo 语言类型转换基本格式如下：\ntype_name(expression) type_name 为类型，expression 为表达式。\n数值类型转换 将整型转换为浮点型：\nvar a int = 10 var b float64 = float64(a) 以下实例中将整型转化为浮点型，并计算结果，将结果赋值给浮点型变量：\npackage main import \u0026#34;fmt\u0026#34; func main() { var sum int = 17 var count int = 5 var mean float32 mean = float32(sum)/float32(count) fmt.Printf(\u0026#34;mean 的值为: %f\\n\u0026#34;,mean) } 输出结果为：\nmean 的值为: 3.400000 字符串类型转换 将一个字符串转换成另一个类型，可以使用以下语法：\nvar str string = \u0026#34;10\u0026#34; var num int num, _ = strconv.Atoi(str) 以上代码将字符串变量 str 转换为整型变量 num。\n注意，strconv.Atoi 函数返回两个值，第一个是转换后的整型值，第二个是可能发生的错误，我们可以使用空白标识符 _ 来忽略这个错误。\n以下实例将字符串转换为整数\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { str := \u0026#34;123\u0026#34; num, err := strconv.Atoi(str) if err != nil { fmt.Println(\u0026#34;转换错误:\u0026#34;, err) } else { fmt.Printf(\u0026#34;字符串 \u0026#39;%s\u0026#39; 转换为整数为：%d\\n\u0026#34;, str, num) } } 输出结果为：\n字符串 \u0026#39;123\u0026#39; 转换为整数为：123 将整数转换为字符串：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { num := 123 str := strconv.Itoa(num) fmt.Printf(\u0026#34;整数 %d 转换为字符串为：\u0026#39;%s\u0026#39;\\n\u0026#34;, num, str) } 输出结果为：\n整数 123 转换为字符串为：\u0026#39;123\u0026#39; 将字符串转换为浮点数：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { str := \u0026#34;3.14\u0026#34; num, err := strconv.ParseFloat(str, 64) if err != nil { fmt.Println(\u0026#34;转换错误:\u0026#34;, err) } else { fmt.Printf(\u0026#34;字符串 \u0026#39;%s\u0026#39; 转为浮点型为：%f\\n\u0026#34;, str, num) } } 输出结果为：\n字符串 \u0026#39;3.14\u0026#39; 转为浮点型为：3.140000 将浮点数转换为字符串：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { num := 3.14 str := strconv.FormatFloat(num, \u0026#39;f\u0026#39;, 2, 64) fmt.Printf(\u0026#34;浮点数 %f 转为字符串为：\u0026#39;%s\u0026#39;\\n\u0026#34;, num, str) } 输出结果为：\n浮点数 3.140000 转为字符串为：\u0026#39;3.14\u0026#39; go 不支持隐式转换类型，比如 :\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int64 = 3 var b int32 b = a fmt.Printf(\u0026#34;b 为 : %d\u0026#34;, b) } 此时会报错\ncannot use a (type int64) as type int32 in assignment cannot use b (type int32) as type string in argument to fmt.Printf 但是如果改成 b = int32(a) 就不会报错了:\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int64 = 3 var b int32 b = int32(a) fmt.Printf(\u0026#34;b 为 : %d\u0026#34;, b) } 接口类型转换 接口类型转换有两种情况**：类型断言和类型转换**。\n类型断言 类型断言用于将接口类型转换为指定类型，其语法为：\nvalue.(type) 或者 value.(T) 其中 value 是接口类型的变量，type 或 T 是要转换成的类型。\n如果类型断言成功，它将返回转换后的值和一个布尔值，表示转换是否成功。\npackage main import \u0026#34;fmt\u0026#34; func main() { var i interface{} = \u0026#34;Hello, World\u0026#34; str, ok := i.(string) if ok { fmt.Printf(\u0026#34;\u0026#39;%s\u0026#39; is a string\\n\u0026#34;, str) } else { fmt.Println(\u0026#34;conversion failed\u0026#34;) } } 以上实例中，我们定义了一个接口类型变量 i，并将它赋值为字符串 \u0026ldquo;Hello, World\u0026rdquo;。然后，我们使用类型断言将 i 转换为字符串类型，并将转换后的值赋值给变量 str。最后，我们使用 ok 变量检查类型转换是否成功，如果成功，我们打印转换后的字符串；否则，我们打印转换失败的消息。\n类型转换 类型转换用于将一个接口类型的值转换为另一个接口类型，其语法为：\nT(value) T 是目标接口类型，value 是要转换的值。\n在类型转换中，我们必须保证要转换的值和目标接口类型之间是兼容的，否则编译器会报错。\npackage main import \u0026#34;fmt\u0026#34; // 定义一个接口 Writer type Writer interface { Write([]byte) (int, error) } // 实现 Writer 接口的结构体 StringWriter type StringWriter struct { str string } // 实现 Write 方法 func (sw *StringWriter) Write(data []byte) (int, error) { sw.str += string(data) return len(data), nil } func main() { // 创建一个 StringWriter 实例并赋值给 Writer 接口变量 var w Writer = \u0026amp;StringWriter{} // 将 Writer 接口类型转换为 StringWriter 类型 sw := w.(*StringWriter) // 修改 StringWriter 的字段 sw.str = \u0026#34;Hello, World\u0026#34; // 打印 StringWriter 的字段值 fmt.Println(sw.str) } 解析：\n定义接口和结构体： Writer 接口定义了 Write 方法。 StringWriter 结构体实现了 Write 方法。 类型转换： 将 StringWriter 实例赋值给 Writer 接口变量 w。 使用 w.(*StringWriter) 将 Writer 接口类型转换为 StringWriter 类型。 访问字段： 修改 StringWriter 的字段 str，并打印其值。 空接口类型 空接口 interface{} 可以持有任何类型的值。在实际应用中，空接口经常被用来处理多种类型的值。\npackage main import ( \u0026#34;fmt\u0026#34; ) func printValue(v interface{}) { switch v := v.(type) { case int: fmt.Println(\u0026#34;Integer:\u0026#34;, v) case string: fmt.Println(\u0026#34;String:\u0026#34;, v) default: fmt.Println(\u0026#34;Unknown type\u0026#34;) } } func main() { printValue(42) printValue(\u0026#34;hello\u0026#34;) printValue(3.14) } 在这个例子中，printValue 函数接受一个空接口类型的参数，并使用类型断言和类型选择来处理不同的类型。\nGo 语言接口 interface Go 语言提供了另外一种数据类型即接口，它把所有的具有共性的方法定义在一起，任何其他类型只要实现了这些方法就是实现了这个接口。\n接口可以让我们将不同的类型绑定到一组公共的方法上，从而实现多态和灵活的设计。\nGo 语言中的接口是隐式实现的，也就是说，如果一个类型实现了一个接口定义的所有方法，那么它就自动地实现了该接口。因此，我们可以通过将接口作为参数来实现对不同类型的调用，从而实现多态。\n/* 定义接口 */ type interface_name interface { method_name1 [return_type] method_name2 [return_type] method_name3 [return_type] ... method_namen [return_type] } /* 定义结构体 */ type struct_name struct { /* variables */ } /* 实现接口方法 */ func (struct_name_variable struct_name) method_name1() [return_type] { /* 方法实现 */ } ... func (struct_name_variable struct_name) method_namen() [return_type] { /* 方法实现*/ } 接口的使用：\npackage main import ( \u0026#34;fmt\u0026#34; ) type Phone interface { call() } type NokiaPhone struct { } func (nokiaPhone NokiaPhone) call() { fmt.Println(\u0026#34;I am Nokia, I can call you!\u0026#34;) } type IPhone struct { } func (iPhone IPhone) call() { fmt.Println(\u0026#34;I am iPhone, I can call you!\u0026#34;) } func main() { var phone Phone phone = new(NokiaPhone) phone.call() phone = new(IPhone) phone.call() } 在上面的例子中，我们定义了一个接口 Phone，接口里面有一个方法 call()。然后我们在 main 函数里面定义了一个 Phone 类型变量，并分别为之赋值为 NokiaPhone 和 IPhone。然后调用 call() 方法，输出结果如下：\nI am Nokia, I can call you! I am iPhone, I can call you! 第二个接口实例：\npackage main import \u0026#34;fmt\u0026#34; type Shape interface { area() float64 } type Rectangle struct { width float64 height float64 } func (r Rectangle) area() float64 { return r.width * r.height } type Circle struct { radius float64 } func (c Circle) area() float64 { return 3.14 * c.radius * c.radius } func main() { var s Shape s = Rectangle{width: 10, height: 5} fmt.Printf(\u0026#34;矩形面积: %f\\n\u0026#34;, s.area()) s = Circle{radius: 3} fmt.Printf(\u0026#34;圆形面积: %f\\n\u0026#34;, s.area()) } 以上实例中，我们定义了一个 Shape 接口，它定义了一个方法 area()，该方法返回一个 float64 类型的面积值。然后，我们定义了两个结构体 Rectangle 和 Circle，它们分别实现了 Shape 接口的 area() 方法。在 main() 函数中，我们首先定义了一个 Shape 类型的变量 s，然后分别将 Rectangle 和 Circle 类型的实例赋值给它，并通过 area() 方法计算它们的面积并打印出来，输出结果如下：\n矩形面积: 50.000000 圆形面积: 28.260000 需要注意的是，接口类型变量可以存储任何实现了该接口的类型的值。在示例中，我们将 Rectangle 和 Circle 类型的实例都赋值给了 Shape 类型的变量 s，并通过 area() 方法调用它们的面积计算方法。\nGo 错误处理 Go 语言通过内置的错误接口提供了非常简单的错误处理机制。\nerror 类型是一个接口类型，这是它的定义：\ntype error interface { Error() string } 我们可以在编码中通过实现 error 接口类型来生成错误信息。\n函数通常在最后的返回值中返回错误信息。使用 errors.New 可返回一个错误信息：\nfunc Sqrt(f float64) (float64, error) { if f \u0026lt; 0 { return 0, errors.New(\u0026#34;math: square root of negative number\u0026#34;) } // 实现 } 在下面的例子中，我们在调用 Sqrt 的时候传递的一个负数，然后就得到了 non-nil 的 error 对象，将此对象与 nil 比较，结果为 true，所以 fmt.Println(fmt 包在处理 error 时会调用 Error 方法)被调用，以输出错误，请看下面调用的示例代码：\nresult, err:= Sqrt(-1) if err != nil { fmt.Println(err) } 实例\npackage main import ( \u0026#34;fmt\u0026#34; ) // 定义一个 DivideError 结构 type DivideError struct { dividee int divider int } // 实现 `error` 接口 func (de *DivideError) Error() string { strFormat := ` Cannot proceed, the divider is zero. dividee: %d divider: 0 ` return fmt.Sprintf(strFormat, de.dividee) } // 定义 `int` 类型除法运算的函数 func Divide(varDividee int, varDivider int) (result int, errorMsg string) { if varDivider == 0 { dData := DivideError{ dividee: varDividee, divider: varDivider, } errorMsg = dData.Error() return } else { return varDividee / varDivider, \u0026#34;\u0026#34; } } func main() { // 正常情况 if result, errorMsg := Divide(100, 10); errorMsg == \u0026#34;\u0026#34; { fmt.Println(\u0026#34;100/10 = \u0026#34;, result) } // 当除数为零的时候会返回错误信息 if _, errorMsg := Divide(100, 0); errorMsg != \u0026#34;\u0026#34; { fmt.Println(\u0026#34;errorMsg is: \u0026#34;, errorMsg) } } 输出结果为：\n100/10 = 10 errorMsg is: Cannot proceed, the divider is zero. dividee: 100 divider: 0 Go 并发 并发是指程序同时执行多个任务的能力\nGo 语言支持并发，通过 goroutines 和 channels 提供了一种简洁且高效的方式来实现并发。\ngoroutine goroutine 是轻量级线程，goroutine 的调度是由 Golang 运行时进行管理的。\ngoroutine 语法格式：\ngo 函数名( 参数列表 ) 例如：\ngo f(x, y, z) 开启一个新的 goroutine:\nf(x, y, z) Go 允许使用 go 语句开启一个新的运行期线程， 即 goroutine，以一个不同的、新创建的 goroutine 来执行一个函数。 同一个程序中的所有 goroutine 共享同一个地址空间。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func say(s string) { for i := 0; i \u0026lt; 5; i++ { time.Sleep(100 * time.Millisecond) fmt.Println(s) } } func main() { go say(\u0026#34;world\u0026#34;) say(\u0026#34;hello\u0026#34;) } 执行以上代码，你会看到输出的 hello 和 world 是没有固定先后顺序。因为它们是两个 goroutine 在执行：\nworld hello hello world world hello hello world world hello 通道（channel） 通道（channel）是用来传递数据的一个数据结构。\n通道可用于两个 goroutine 之间通过传递一个指定类型的值来同步运行和通讯。\n使用 make 函数创建一个 channel，使用 \u0026lt;- 操作符发送和接收数据。如果未指定方向，则为双向通道。\nch \u0026lt;- v // 把 v 发送到通道 ch v := \u0026lt;-ch // 从 ch 接收数据 // 并把值赋给 v 声明一个通道很简单，我们使用chan关键字即可，通道在使用前必须先创建：\nch := make(chan int) 注意：默认情况下，通道是不带缓冲区的。发送端发送数据，同时必须有接收端相应的接收数据。\n以下实例通过两个 goroutine 来计算数字之和，在 goroutine 完成计算后，它会计算两个结果的和：\npackage main import \u0026#34;fmt\u0026#34; func sum(s []int, c chan int) { sum := 0 for _, v := range s { sum += v } c \u0026lt;- sum // 把 sum 发送到通道 c } func main() { s := []int{7, 2, 8, -9, 4, 0} c := make(chan int) go sum(s[:len(s)/2], c) go sum(s[len(s)/2:], c) x, y := \u0026lt;-c, \u0026lt;-c // 从通道 c 中接收 fmt.Println(x, y, x+y) } 输出结果为：\n-5 17 12 通道缓冲区 通道可以设置缓冲区，通过 make 的第二个参数指定缓冲区大小：\nch := make(chan int, 100) 带缓冲区的通道允许发送端的数据发送和接收端的数据获取处于异步状态，就是说发送端发送的数据可以放在缓冲区里面，可以等待接收端去获取数据，而不是立刻需要接收端去获取数据。\n不过由于缓冲区的大小是有限的，所以还是必须有接收端来接收数据的，否则缓冲区一满，数据发送端就无法再发送数据了。\n注意：如果通道不带缓冲，发送方会阻塞直到接收方从通道中接收了值。如果通道带缓冲，发送方则会阻塞直到发送的值被拷贝到缓冲区内；如果缓冲区已满，则意味着需要等待直到某个接收方获取到一个值。接收方在有值可以接收之前会一直阻塞。\npackage main import \u0026#34;fmt\u0026#34; func main() { // 这里我们定义了一个可以存储整数类型的带缓冲通道 // 缓冲区大小为2 ch := make(chan int, 2) // 因为 ch 是带缓冲的通道，我们可以同时发送两个数据 // 而不用立刻需要去同步读取数据 ch \u0026lt;- 1 ch \u0026lt;- 2 // 获取这两个数据 fmt.Println(\u0026lt;-ch) fmt.Println(\u0026lt;-ch) } 执行输出结果为：\n1 2 Go 遍历通道与关闭通道 Go 通过 range 关键字来实现遍历读取到的数据，类似于与数组或切片。格式如下：\nv, ok := \u0026lt;-ch 如果通道接收不到数据后 ok 就为 false，这时通道就可以使用 close() 函数来关闭。\npackage main import ( \u0026#34;fmt\u0026#34; ) func fibonacci(n int, c chan int) { x, y := 0, 1 for i := 0; i \u0026lt; n; i++ { c \u0026lt;- x x, y = y, x+y } close(c) } func main() { c := make(chan int, 10) go fibonacci(cap(c), c) // range 函数遍历每个从通道接收到的数据，因为 c 在发送完 10 个 // 数据之后就关闭了通道，所以这里我们 range 函数在接收到 10 个数据 // 之后就结束了。如果上面的 c 通道不关闭，那么 range 函数就不 // 会结束，从而在接收第 11 个数据的时候就阻塞了。 for i := range c { fmt.Println(i) } } 输出结果为：\n0 1 1 2 3 5 8 13 21 34 Select 语句 select 语句使得一个 goroutine 可以等待多个通信操作。select 会阻塞，直到其中的某个 case 可以继续执行：\npackage main import \u0026#34;fmt\u0026#34; func fibonacci(c, quit chan int) { x, y := 0, 1 for { select { case c \u0026lt;- x: x, y = y, x+y case \u0026lt;-quit: fmt.Println(\u0026#34;quit\u0026#34;) return } } } func main() { c := make(chan int) quit := make(chan int) go func() { for i := 0; i \u0026lt; 10; i++ { fmt.Println(\u0026lt;-c) } quit \u0026lt;- 0 }() fibonacci(c, quit) } 以上代码中中，fibonacci goroutine 在 channel c 上发送斐波那契数列，当接收到 quit channel 的信号时退出。\n执行输出结果为：\n0 1 1 2 3 5 8 13 21 34 quit 并发编程小结 Goroutines 是轻量级线程，使用 go 关键字启动。 Channels 用于 goroutines 之间的通信。 Select 语句 用于等待多个 channel 操作。 链接: 菜鸟教程相关笔记补充\n","permalink":"//localhost:1313/posts/go%E8%AF%AD%E8%A8%80/","summary":"\u003ch1 id=\"go的变量声明\"\u003ego的变量声明\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e第一种，指定变量类型，如果没有初始化，则变量默认为零值\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e例如：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 声明一个整型变量 a，默认为 0\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"kt\"\u003efloat64\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 声明一个浮点型变量 b，默认为 0.0\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e第二种，根据值自行判定变量类型。\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e例如：\u003c/p\u003e","title":"Go语言"},{"content":"日常技巧 CTRL + r 等于 window 下的默认 CTRL + y CTRL + f 查找 1. 关于Vim 1.1 Vim的几种模式 正常模式：可以使用快捷键命令，或按:输入命令行。 插入模式：可以输入文本，在正常模式下，按i、a、o等都可以进入插入模式。 可视模式：正常模式下按v可以进入可视模式， 在可视模式下，移动光标可以选择文本。按V进入可视行模式， 总是整行整行的选中。ctrl+v进入可视块模式。 替换模式：正常模式下，按R进入。 2. 启动Vim vim -c cmd file: 在打开文件前，先执行指定的命令； vim -r file: 恢复上次异常退出的文件； vim -R file: 以只读的方式打开文件，但可以强制保存； vim -M file: 以只读的方式打开文件，不可以强制保存； vim -y num file: 将编辑窗口的大小设为num行； vim + file: 从文件的末尾开始； vim +num file: 从第num行开始； vim +/string file: 打开file，并将光标停留在第一个找到的string上。 vim \u0026ndash;remote file: 用已有的vim进程打开指定的文件。 如果你不想启用多个vim会话，这个很有用。但要注意， 如果你用vim，会寻找名叫VIM的服务器；如果你已经有一个gvim在运行了， 你可以用gvim \u0026ndash;remote file在已有的gvim中打开文件。 3. 文档操作 :e file \u0026ndash;关闭当前编辑的文件，并开启新的文件。 如果对当前文件的修改未保存，vi会警告。 :e! file \u0026ndash;放弃对当前文件的修改，编辑新的文件。 :e+file \u0026ndash; 开始新的文件，并从文件尾开始编辑。 :e+n file \u0026ndash; 开始新的文件，并从第n行开始编辑。 :enew \u0026ndash;编译一个未命名的新文档。(CTRL-W n) :e \u0026ndash; 重新加载当前文档。 :e! \u0026ndash; 重新加载当前文档，并丢弃已做的改动。 :e#或ctrl+^ \u0026ndash; 回到刚才编辑的文件，很实用。 :f或ctrl+g \u0026ndash; 显示文档名，是否修改，和光标位置。 :f filename \u0026ndash; 改变编辑的文件名，这时再保存相当于另存为。 gf \u0026ndash; 打开以光标所在字符串为文件名的文件。 :w \u0026ndash; 保存修改。 :n1,n2w filename \u0026ndash; 选择性保存从某n1行到另n2行的内容。 :wq \u0026ndash; 保存并退出。 ZZ \u0026ndash; 保存并退出。 :x \u0026ndash; 保存并退出。 :q[uit] ——退出当前窗口。(CTRL-W q或CTRL-W CTRL-Q) :saveas newfilename \u0026ndash; 另存为 :browse e \u0026ndash; 会打开一个文件浏览器让你选择要编辑的文件。 如果是终端中，则会打开netrw的文件浏览窗口； 如果是gvim，则会打开一个图形界面的浏览窗口。 实际上:browse后可以跟任何编辑文档的命令，如sp等。 用browse打开的起始目录可以由browsedir来设置： :set browsedir=last \u0026ndash; 用上次访问过的目录（默认）； :set browsedir=buffer \u0026ndash; 用当前文件所在目录； :set browsedir=current \u0026ndash; 用当前工作目录； :Sex \u0026ndash; 水平分割一个窗口，浏览文件系统； :Vex \u0026ndash; 垂直分割一个窗口，浏览文件系统； 4. 光标的移动 4.1 基本移动 以下移动都是在normal模式下。\nh或退格: 左移一个字符； l或空格: 右移一个字符； j: 下移一行； k: 上移一行； gj: 移动到一段内的下一行； gk: 移动到一段内的上一行； +或Enter: 把光标移至下一行第一个非空白字符。 -: 把光标移至上一行第一个非空白字符。 w: 前移一个单词，光标停在下一个单词开头； W: 移动下一个单词开头，但忽略一些标点； e: 前移一个单词，光标停在下一个单词末尾； E: 移动到下一个单词末尾，如果词尾有标点，则移动到标点； b: 后移一个单词，光标停在上一个单词开头； B: 移动到上一个单词开头，忽略一些标点； ge: 后移一个单词，光标停在上一个单词末尾； gE: 同 ge ，不过‘单词’包含单词相邻的标点。 (: 前移1句。 ): 后移1句。 {: 前移1段。 }: 后移1段。 fc: 把光标移到同一行的下一个c字符处 Fc: 把光标移到同一行的上一个c字符处 tc: 把光标移到同一行的下一个c字符前 Tc: 把光标移到同一行的上一个c字符后 ;: 配合f \u0026amp; t使用，重复一次 ,: 配合f \u0026amp; t使用，反向重复一次 viw : 选中一个单词 上面的操作都可以配合n使用，比如在正常模式(下面会讲到)下输入3h， 则光标向左移动3个字符。\n0: 移动到行首。 g0: 移到光标所在屏幕行行首。 ^: 移动到本行第一个非空白字符。 g^: 同 ^ ，但是移动到当前屏幕行第一个非空字符处。 $: 移动到行尾。 g$: 移动光标所在屏幕行行尾。 n|: 把光标移到递n列上。 nG: 到文件第n行。 :n 移动到第n行。 :$ 移动到最后一行。 H: 把光标移到屏幕最顶端一行。 M: 把光标移到屏幕中间一行。 L: 把光标移到屏幕最底端一行。 gg: 到文件头部。 G: 到文件尾部。 4.2 翻屏 ctrl+f: 下翻一屏。 ctrl+b: 上翻一屏。 ctrl+d: 下翻半屏。 ctrl+u: 上翻半屏。 ctrl+e: 向下滚动一行。 ctrl+y: 向上滚动一行。 n%: 到文件n%的位置。 zz: 将当前行移动到屏幕中央。 zt: 将当前行移动到屏幕顶端。 zb: 将当前行移动到屏幕底端。 4.3 标记 使用标记可以快速移动。到达标记后，可以用Ctrl+o返回原来的位置。 Ctrl+o和Ctrl+i 很像浏览器上的 后退 和 前进 。\nm{a-z}: 标记光标所在位置，局部标记，只用于当前文件。 m{A-Z}: 标记光标所在位置，全局标记。标记之后，退出Vim， 重新启动，标记仍然有效。 `{a-z}: 移动到标记位置。 \u0026lsquo;{a-z}: 移动到标记行的行首。 `{0-9}：回到上[2-10]次关闭vim时最后离开的位置。 : 移动到上次编辑的位置。''也可以，不过精确到列，而\u0026rsquo;\u0026lsquo;精确到行 。如果想跳转到更老的位置，可以按C-o，跳转到更新的位置用C-i。 `\u0026quot;: 移动到上次离开的地方。 `.: 移动到最后改动的地方。 :marks 显示所有标记。 :delmarks a b \u0026ndash; 删除标记a和b。 :delmarks a-c \u0026ndash; 删除标记a、b和c。 :delmarks a c-f \u0026ndash; 删除标记a、c、d、e、f。 :delmarks! \u0026ndash; 删除当前缓冲区的所有标记。 :help mark-motions 查看更多关于mark的知识。 5. 插入文本 5.1 基本插入 i: 在光标前插入；一个小技巧：按8，再按i，进入插入模式，输入=， 按esc进入命令模式，就会出现8个=。 这在插入分割线时非常有用，如30i+就插入了36个+组成的分割线。 I: 在当前行第一个非空字符前插入； gI: 在当前行第一列插入； a: 在光标后插入； A: 在当前行最后插入； o: 在下面新建一行插入； O: 在上面新建一行插入； :r filename在当前位置插入另一个文件的内容。 :[n]r filename在第n行插入另一个文件的内容。 :r !date 在光标处插入当前日期与时间。同理，:r !command可以将其它shell命令的输出插入当前文档。 5.2 改写插入 c[n]w: 改写光标后1(n)个词。 c[n]l: 改写光标后n个字母。 c[n]h: 改写光标前n个字母。 [n]cc: 修改当前[n]行。 [n]s: 以输入的文本替代光标之后1(n)个字符，相当于c[n]l。 [n]S: 删除指定数目的行，并以所输入文本代替之。 注意，类似cnw,dnw,ynw的形式同样可以写为ncw,ndw,nyw。\n6. 剪切复制和寄存器 6.1 剪切和复制、粘贴 [n]x: 剪切光标右边n个字符，相当于d[n]l。 [n]X: 剪切光标左边n个字符，相当于d[n]h。 y: 复制在可视模式下选中的文本。 yy or Y: 复制整行文本。 y[n]w: 复制一(n)个词。 y[n]l: 复制光标右边1(n)个字符。 y[n]h: 复制光标左边1(n)个字符。 y$: 从光标当前位置复制到行尾。 y0: 从光标当前位置复制到行首。 :m,ny 复制m行到n行的内容。 y1G或ygg: 复制光标以上的所有行。 yG: 复制光标以下的所有行。 yaw和yas：复制一个词和复制一个句子，即使光标不在词首和句首也没关系。 d: 删除（剪切）在可视模式下选中的文本。 d$ or D: 删除（剪切）当前位置到行尾的内容。 d[n]w: 删除（剪切）1(n)个单词 d[n]l: 删除（剪切）光标右边1(n)个字符。 d[n]h: 删除（剪切）光标左边1(n)个字符。 d0: 删除（剪切）当前位置到行首的内容 [n] dd: 删除（剪切）1(n)行。 :m,nd 剪切m行到n行的内容。 d1G或dgg: 剪切光标以上的所有行。 dG: 剪切光标以下的所有行。 daw和das：剪切一个词和剪切一个句子，即使光标不在词首和句首也没关系。 d/f：这是一个比较高级的组合命令，它将删除当前位置 到下一个f之间的内容。 p: 在光标之后粘贴。 P: 在光标之前粘贴。 6.2 文本对象 aw：一个词 as：一句。 ap：一段。 ab：一块（包含在圆括号中的）。 y, d, c, v都可以跟文本对象。\n6.3 寄存器 a-z：都可以用作寄存器名。\u0026ldquo;ayy把当前行的内容放入a寄存器。 A-Z：用大写字母索引寄存器，可以在寄存器中追加内容。 如\u0026quot;Ayy把当前行的内容追加到a寄存器中。 :reg 显示所有寄存器的内容。 \u0026ldquo;\u0026quot;：不加寄存器索引时，默认使用的寄存器。 \u0026ldquo;*：当前选择缓冲区，\u0026quot;*yy把当前行的内容放入当前选择缓冲区。 \u0026ldquo;+：系统剪贴板。\u0026quot;+yy把当前行的内容放入系统剪贴板。 7. 查找与替换 7.1 查找 /something: 在后面的文本中查找something。 ?something: 在前面的文本中查找something。 /pattern/+number: 将光标停在包含pattern的行后面第number行上。 /pattern/-number: 将光标停在包含pattern的行前面第number行上。 n: 向后查找下一个。 N: 向前查找下一个。 可以用grep或vimgrep查找一个模式都在哪些地方出现过，\n其中:grep是调用外部的grep程序，而:vimgrep是vim自己的查找算法。\n用法为： :vim[grep]/pattern/[g] [j] files\ng的含义是如果一个模式在一行中多次出现，则这一行也在结果中多次出现。\nj的含义是grep结束后，结果停在第j项，默认是停在第一项。\nvimgrep前面可以加数字限定搜索结果的上限，如\n:1vim/pattern/ % 只查找那个模式在本文件中的第一个出现。\n其实vimgrep在读纯文本电子书时特别有用，可以生成导航的目录。\n比如电子书中每一节的标题形式为：n. xxxx。你就可以这样：\n:vim/^d{1,}./ %\n然后用:cw或:copen查看结果，可以用C-w H把quickfix窗口移到左侧，\n就更像个目录了。\n7.2 替换 :s/old/new - 用new替换当前行第一个old。 :s/old/new/g - 用new替换当前行所有的old。 :n1,n2s/old/new/g - 用new替换文件n1行到n2行所有的old。 :%s/old/new/g - 用new替换文件中所有的old。 :%s/^/xxx/g - 在每一行的行首插入xxx，^表示行首。 :%s/$/xxx/g - 在每一行的行尾插入xxx，$表示行尾。 所有替换命令末尾加上c，每个替换都将需要用户确认。 如：%s/old/new/gc，加上i则忽略大小写(ignore)。 还有一种比替换更灵活的方式，它是匹配到某个模式后执行某种命令，\n语法为 :[range]g/pattern/command\n例如 :%g/^ xyz/normal dd。\n表示对于以一个空格和xyz开头的行执行normal模式下的dd命令。\n关于range的规定为：\n如果不指定range，则表示当前行。 m,n: 从m行到n行。 0: 最开始一行（可能是这样）。 $: 最后一行 .: 当前行 %: 所有行 7.3 正则表达式 高级的查找替换就要用到正则表达式。\n\\d: 表示十进制数（我猜的） \\s: 表示空格 \\S: 非空字符 \\a: 英文字母 |: 表示 或 .: 表示. {m,n}: 表示m到n个字符。这要和 \\s与\\a等连用，如 \\a{m,n} 表示m 到n个英文字母。 {m,}: 表示m到无限多个字符。 **: 当前目录下的所有子目录。 :help pattern得到更多帮助。\n8. 排版 8.1 基本排版 \u0026laquo; 向左缩进一个shiftwidth \u0026gt;\u0026gt; 向右缩进一个shiftwidth :ce(nter) 本行文字居中 :le(ft) 本行文字靠左 :ri(ght) 本行文字靠右 gq 对选中的文字重排，即对过长的文字进行断行 gqq 重排当前行 gqnq 重排n行 gqap 重排当前段 gqnap 重排n段 gqnj 重排当前行和下面n行 gqQ 重排当前段对文章末尾 J 拼接当前行和下一行 gJ 同 J ，不过合并后不留空格。 8.2 拼写检查 :set spell－开启拼写检查功能 :set nospell－关闭拼写检查功能 ]s－移到下一个拼写错误的单词 [s－作用与上一命令类似，但它是从相反方向进行搜索 z=－显示一个有关拼写错误单词的列表，可从中选择 zg－告诉拼写检查器该单词是拼写正确的 zw－与上一命令相反，告诉拼写检查器该单词是拼写错误的 8.3 统计字数 g ^g可以统计文档字符数，行数。 将光标放在最后一个字符上，用字符数减去行数可以粗略统计中文文档的字数。 以上对 Mac 或 Unix 的文件格式适用。 如果是 Windows 文件格式（即换行符有两个字节），字数的统计方法为： 字符数 - 行数 * 2。\n9. 编辑多个文件 9.1 一次编辑多个文件 我们可以一次打开多个文件，如\nvi a.txt b.txt c.txt 使用:next(:n)编辑下一个文件。 :2n 编辑下2个文件。 使用:previous或:N编辑上一个文件。 使用:wnext，保存当前文件，并编辑下一个文件。 使用:wprevious，保存当前文件，并编辑上一个文件。 使用:args 显示文件列表。 :n filenames或:args filenames 指定新的文件列表。 vi -o filenames 在水平分割的多个窗口中编辑多个文件。 vi -O filenames 在垂直分割的多个窗口中编辑多个文件。 9.2 多标签编辑 vim -p files: 打开多个文件，每个文件占用一个标签页。 :tabe, tabnew \u0026ndash; 如果加文件名，就在新的标签中打开这个文件， 否则打开一个空缓冲区。 ^w gf \u0026ndash; 在新的标签页里打开光标下路径指定的文件。 :tabn \u0026ndash; 切换到下一个标签。Control + PageDown，也可以。 :tabp \u0026ndash; 切换到上一个标签。Control + PageUp，也可以。 [n] gt \u0026ndash; 切换到下一个标签。如果前面加了 n ， 就切换到第n个标签。第一个标签的序号就是1。 :tab split \u0026ndash; 将当前缓冲区的内容在新页签中打开。 :tabc[lose] \u0026ndash; 关闭当前的标签页。 :tabo[nly] \u0026ndash; 关闭其它的标签页。 :tabs \u0026ndash; 列出所有的标签页和它们包含的窗口。 :tabm[ove] [N] \u0026ndash; 移动标签页，移动到第N个标签页之后。 如 tabm 0 当前标签页，就会变成第一个标签页。 9.3 缓冲区 :buffers或:ls或:files 显示缓冲区列表。 ctrl+^：在最近两个缓冲区间切换。 :bn \u0026ndash; 下一个缓冲区。 :bp \u0026ndash; 上一个缓冲区。 :bl \u0026ndash; 最后一个缓冲区。 :b[n]或:[n]b \u0026ndash; 切换到第n个缓冲区。 :nbw(ipeout) \u0026ndash; 彻底删除第n个缓冲区。 :nbd(elete) \u0026ndash; 删除第n个缓冲区，并未真正删除，还在unlisted列表中。 :ba[ll] \u0026ndash; 把所有的缓冲区在当前页中打开，每个缓冲区占一个窗口。 10. 分屏编辑 vim -o file1 file2:水平分割窗口，同时打开file1和file2 vim -O file1 file2:垂直分割窗口，同时打开file1和file2 10.1 水平分割 :split(:sp) \u0026ndash; 把当前窗水平分割成两个窗口。(CTRL-W s 或 CTRL-W CTRL-S) 注意如果在终端下，CTRL-S可能会冻结终端，请按CTRL-Q继续。 :split filename \u0026ndash; 水平分割窗口，并在新窗口中显示另一个文件。 :nsplit(:nsp) \u0026ndash; 水平分割出一个n行高的窗口。 :[N]new \u0026ndash; 水平分割出一个N行高的窗口，并编辑一个新文件。 (CTRL-W n或 CTRL-W CTRL-N) ctrl+w f \u0026ndash;水平分割出一个窗口，并在新窗口打开名称为光标所在词的文件 。 C-w C-^ \u0026ndash; 水平分割一个窗口，打开刚才编辑的文件。 10.2 垂直分割 :vsplit(:vsp) \u0026ndash; 把当前窗口分割成水平分布的两个窗口。 (CTRL-W v或CTRL CTRL-V) :[N]vne[w] \u0026ndash; 垂直分割出一个新窗口。 :vertical 水平分割的命令： 相应的垂直分割。 10.3 关闭子窗口 :qall \u0026ndash; 关闭所有窗口，退出vim。 :wall \u0026ndash; 保存所有修改过的窗口。 :only \u0026ndash; 只保留当前窗口，关闭其它窗口。(CTRL-W o) :close \u0026ndash; 关闭当前窗口，CTRL-W c能实现同样的功能。 (象 :q :x同样工作 ) 10.4 调整窗口大小 ctrl+w + \u0026ndash;当前窗口增高一行。也可以用n增高n行。 ctrl+w - \u0026ndash;当前窗口减小一行。也可以用n减小n行。 ctrl+w _ \u0026ndash;当前窗口扩展到尽可能的大。也可以用n设定行数。 :resize n \u0026ndash; 当前窗口n行高。 ctrl+w = \u0026ndash; 所有窗口同样高度。 n ctrl+w _ \u0026ndash; 当前窗口的高度设定为n行。 ctrl+w \u0026lt; \u0026ndash;当前窗口减少一列。也可以用n减少n列。 ctrl+w \u0026gt; \u0026ndash;当前窗口增宽一列。也可以用n增宽n列。 ctrl+w | \u0026ndash;当前窗口尽可能的宽。也可以用n设定列数。 10.5 切换和移动窗口 如果支持鼠标，切换和调整子窗口的大小就简单了。\nctrl+w ctrl+w: 切换到下一个窗口。或者是ctrl+w w。 ctrl+w p: 切换到前一个窗口。 ctrl+w h(l,j,k):切换到左（右，下，上）的窗口。 ctrl+w t(b):切换到最上（下）面的窗口。 ctrl+w H(L,K,J): 将当前窗口移动到最左（右、上、下）面。 ctrl+w r：旋转窗口的位置。 ctrl+w T: 将当前的窗口移动到新的标签页上。 11. 快速编辑 11.1 改变大小写 ~: 反转光标所在字符的大小写。 可视模式下的U或u：把选中的文本变为大写或小写。 gu(U)接范围（如$，或G），可以把从光标当前位置到指定位置之间字母全部 转换成小写或大写。如ggguG，就是把开头到最后一行之间的字母全部变为小 写。再如gu5j，把当前行和下面四行全部变成小写。 11.2 替换（normal模式） r: 替换光标处的字符，同样支持汉字。 R: 进入替换模式，按esc回到正常模式。 11.3 撤消与重做（normal模式） [n] u: 取消一(n)个改动。 :undo 5 \u0026ndash; 撤销5个改变。 :undolist \u0026ndash; 你的撤销历史。 ctrl + r: 重做最后的改动。 U: 取消当前行中所有的改动。 :earlier 4m \u0026ndash; 回到4分钟前 :later 55s \u0026ndash; 前进55秒 \u0026gt; 在这篇博客中，我引用了作者详细介绍的 Vim 的使用技巧。更多内容请查看原文：Vim 笔记。\n","permalink":"//localhost:1313/posts/vim%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/","summary":"\u003ch1 id=\"日常技巧\"\u003e日常技巧\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eCTRL + r\u003c/code\u003e 等于 window 下的默认 \u003ccode\u003eCTRL + y\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eCTRL + f   查找\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"1-关于vim\"\u003e1. 关于Vim\u003c/h1\u003e\n\u003ch2 id=\"11-vim的几种模式\"\u003e1.1 Vim的几种模式\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e正常模式：可以使用快捷键命令，或按:输入命令行。\u003c/li\u003e\n\u003cli\u003e插入模式：可以输入文本，在正常模式下，按i、a、o等都可以进入插入模式。\u003c/li\u003e\n\u003cli\u003e可视模式：正常模式下按v可以进入可视模式， 在可视模式下，移动光标可以选择文本。按V进入可视行模式， 总是整行整行的选中。ctrl+v进入可视块模式。\u003c/li\u003e\n\u003cli\u003e替换模式：正常模式下，按R进入。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"2-启动vim\"\u003e2. 启动Vim\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003evim -c cmd file: 在打开文件前，先执行指定的命令；\u003c/li\u003e\n\u003cli\u003evim -r file: 恢复上次异常退出的文件；\u003c/li\u003e\n\u003cli\u003evim -R file: 以只读的方式打开文件，但可以强制保存；\u003c/li\u003e\n\u003cli\u003evim -M file: 以只读的方式打开文件，不可以强制保存；\u003c/li\u003e\n\u003cli\u003evim -y num file: 将编辑窗口的大小设为num行；\u003c/li\u003e\n\u003cli\u003evim + file: 从文件的末尾开始；\u003c/li\u003e\n\u003cli\u003evim +num file: 从第num行开始；\u003c/li\u003e\n\u003cli\u003evim +/string file: 打开file，并将光标停留在第一个找到的string上。\u003c/li\u003e\n\u003cli\u003evim \u0026ndash;remote file: 用已有的vim进程打开指定的文件。 如果你不想启用多个vim会话，这个很有用。但要注意， 如果你用vim，会寻找名叫VIM的服务器；如果你已经有一个gvim在运行了， 你可以用gvim \u0026ndash;remote file在已有的gvim中打开文件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"3-文档操作\"\u003e3. 文档操作\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e:e file \u0026ndash;关闭当前编辑的文件，并开启新的文件。 如果对当前文件的修改未保存，vi会警告。\u003c/li\u003e\n\u003cli\u003e:e! file \u0026ndash;放弃对当前文件的修改，编辑新的文件。\u003c/li\u003e\n\u003cli\u003e:e+file \u0026ndash; 开始新的文件，并从文件尾开始编辑。\u003c/li\u003e\n\u003cli\u003e:e+n file \u0026ndash; 开始新的文件，并从第n行开始编辑。\u003c/li\u003e\n\u003cli\u003e:enew \u0026ndash;编译一个未命名的新文档。(CTRL-W n)\u003c/li\u003e\n\u003cli\u003e:e \u0026ndash; 重新加载当前文档。\u003c/li\u003e\n\u003cli\u003e:e! \u0026ndash; 重新加载当前文档，并丢弃已做的改动。\u003c/li\u003e\n\u003cli\u003e:e#或ctrl+^ \u0026ndash; 回到刚才编辑的文件，很实用。\u003c/li\u003e\n\u003cli\u003e:f或ctrl+g \u0026ndash; 显示文档名，是否修改，和光标位置。\u003c/li\u003e\n\u003cli\u003e:f filename \u0026ndash; 改变编辑的文件名，这时再保存相当于另存为。\u003c/li\u003e\n\u003cli\u003egf \u0026ndash; 打开以光标所在字符串为文件名的文件。\u003c/li\u003e\n\u003cli\u003e:w \u0026ndash; 保存修改。\u003c/li\u003e\n\u003cli\u003e:n1,n2w filename \u0026ndash; 选择性保存从某n1行到另n2行的内容。\u003c/li\u003e\n\u003cli\u003e:wq \u0026ndash; 保存并退出。\u003c/li\u003e\n\u003cli\u003eZZ \u0026ndash; 保存并退出。\u003c/li\u003e\n\u003cli\u003e:x \u0026ndash; 保存并退出。\u003c/li\u003e\n\u003cli\u003e:q[uit] ——退出当前窗口。(CTRL-W q或CTRL-W CTRL-Q)\u003c/li\u003e\n\u003cli\u003e:saveas newfilename \u0026ndash; 另存为\u003c/li\u003e\n\u003cli\u003e:browse e \u0026ndash; 会打开一个文件浏览器让你选择要编辑的文件。 如果是终端中，则会打开netrw的文件浏览窗口； 如果是gvim，则会打开一个图形界面的浏览窗口。 实际上:browse后可以跟任何编辑文档的命令，如sp等。 用browse打开的起始目录可以由browsedir来设置：\n\u003cul\u003e\n\u003cli\u003e:set browsedir=last \u0026ndash; 用上次访问过的目录（默认）；\u003c/li\u003e\n\u003cli\u003e:set browsedir=buffer \u0026ndash; 用当前文件所在目录；\u003c/li\u003e\n\u003cli\u003e:set browsedir=current \u0026ndash; 用当前工作目录；\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e:Sex \u0026ndash; 水平分割一个窗口，浏览文件系统；\u003c/li\u003e\n\u003cli\u003e:Vex \u0026ndash; 垂直分割一个窗口，浏览文件系统；\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"4-光标的移动\"\u003e4. 光标的移动\u003c/h1\u003e\n\u003ch2 id=\"41-基本移动\"\u003e4.1 基本移动\u003c/h2\u003e\n\u003cp\u003e以下移动都是在normal模式下。\u003c/p\u003e","title":"Vim操作手册"},{"content":"目前我的解决办法 在 posts 目录下创建一个名为 img 的文件夹，用于存储照片。该文件夹的路径为 ..\\content\\posts\\img。 将需要使用的照片复制并放入 img 文件夹中。在 Markdown 文档中使用照片时，可以通过相对位置进行引用。例如，引用的路径为 \u0026quot;../img/photo1.jpg\u0026quot;。请注意，使用 \u0026quot;../\u0026quot; 可确保照片在博客页面上正确显示。 若想在本地上查看 Markdown 文档中展示的照片，可以使用 \u0026quot;./\u0026quot; 作为引用路径。例如，引用的路径为 \u0026quot;./img/photo1.jpg\u0026quot;。 注意图片命名，确保照片文件名中不包含空格。 有问题的话, 欢迎在评论区留言, 我会尽快回复！\n","permalink":"//localhost:1313/posts/hugo%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/","summary":"\u003ch1 id=\"目前我的解决办法\"\u003e目前我的解决办法\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e在 \u003ccode\u003eposts\u003c/code\u003e 目录下创建一个名为 \u003ccode\u003eimg\u003c/code\u003e 的文件夹，用于存储照片。该文件夹的路径为 \u003ccode\u003e..\\content\\posts\\img\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e将需要使用的照片复制并放入 \u003ccode\u003eimg\u003c/code\u003e 文件夹中。在 Markdown 文档中使用照片时，可以通过相对位置进行引用。例如，引用的路径为 \u003ccode\u003e\u0026quot;../img/photo1.jpg\u0026quot;\u003c/code\u003e。请注意，使用 \u003ccode\u003e\u0026quot;../\u0026quot;\u003c/code\u003e 可确保照片在博客页面上正确显示。\u003c/li\u003e\n\u003cli\u003e若想在\u003cstrong\u003e本地\u003c/strong\u003e上查看 Markdown 文档中展示的照片，可以使用 \u003ccode\u003e\u0026quot;./\u0026quot;\u003c/code\u003e 作为引用路径。例如，引用的路径为 \u003ccode\u003e\u0026quot;./img/photo1.jpg\u0026quot;\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e注意图片命名，确保照片文件名中\u003cstrong\u003e不包含空格\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e有问题的话, 欢迎在评论区留言, 我会尽快回复！\u003c/p\u003e","title":"Hugo博客的图片上传"},{"content":"常用指令 vim 访问文本 退出文本并保存 :wq 返回到上一个文件夹 cd . . 解压指令 tar -zxvf xxxx.tar.gz vi vim 操作 i o a r 进入vim 按下esc , 输入**:** 然后输入wq 保存并退出 :q退出 :q! 不保存退出 yy 拷贝 5yy dd 删除 5dd 撤销 u 行号打开 :set nu 关机 shutdown -h 关机 shutdown -r 重启 reboot 重启 sync 把内存数据存入磁盘 注销用户和登录 logout\n退出root logout\n压缩/解压指令 tar -zxvf xxxx.tar.gz gzip 文件 压缩 gunzip 解压文件 zip 压缩文件夹 unzip 解压文件夹 -r 递归压缩 zip -r xxxxx.zip /home/ [将home目录及其包含的的文件和子文件夹都压缩] -d \u0026lt;可指定目录\u0026gt; unzip -d /opt/tmp /home/xxxxx.zip tar 万能 tar -c 产生打包文件 -v 显示详细信息 -f 指定压缩后的文件名 -z 打包并同时压缩 -x 解压.tar文件 帮助指令 man ls 列出所有指令\nhelp + 指令\nls -la\nls -la /root\n文件目录指令 pwd 显示出地址 cd ~ 回到家目录 cd .. 上一目录 mkdir 创建目录 mkdir -p /home/\u0026hellip;/\u0026hellip;. 创建指定目录 rmdir 删除空目录 强制删除空目录 rm -rf touch 创建空文件 cp 拷贝 cp hello.txt /bbb cp -r /home/bbb /opt 把目录复制到指定目录下 \\cp -r /home/bbb /opt 强制 rm 删除文件或目录 rm -rf /home/bbb 强制删除 -f 就是强制删除不提醒 mv 移动指令 cat 查看文件 -n 行号 less 分屏查看 echo $HOSTNAME 输出环境变量 head 查看文件的前几行 -\u0026gt; 10 行 head xxxx.c tail 查看末尾文件 tail xxxx.c ln -s /root /home/myroot 快捷指令指向 在myroot创建指向/root的快捷方式, cd myroot 就会直接进入/root 文件管理 使用 mkdir 创建目录。例如，mkdir xxxx 将在当前位置创建一个名为 \u0026ldquo;xxxx\u0026rdquo; 的目录。 要创建多级目录，可以使用 mkdir -p 命令。例如，mkdir -p xxx/yyy 将在 \u0026ldquo;xxx\u0026rdquo; 目录下创建一个名为 \u0026ldquo;yyy\u0026rdquo; 的子目录。 使用 mkdir -m 777 命令创建目录时，可以直接设置权限。数字 \u0026ldquo;777\u0026rdquo; 表示所有权限（读、写和执行）。另外，\u0026ldquo;4\u0026rdquo; 代表读权限，\u0026ldquo;2\u0026rdquo; 代表写权限，\u0026ldquo;1\u0026rdquo; 代表执行权限。 mv 命令用于移动文件或重命名文件。例如，mv xxx.c /home/zzz/targetPlace 将把 \u0026ldquo;xxx.c\u0026rdquo; 文件移动到 \u0026ldquo;/home/zzz/targetPlace\u0026rdquo; 目录。 使用 cp 命令复制文件。例如，cp xxx.c /home/zzz/targetPlace 将把 \u0026ldquo;xxx.c\u0026rdquo; 文件复制到 \u0026ldquo;/home/zzz/targetPlace\u0026rdquo; 目录。 若要复制目录，应使用 cp -r 命令。例如，cp -r /home/bbb /opt 将把 \u0026ldquo;/home/bbb\u0026rdquo; 目录复制到 \u0026ldquo;/opt\u0026rdquo; 目录。 rm 用于删除文件或目录，而 rmdir 仅用于删除空目录。删除文件时，使用 rm 文件名；删除目录（及其内容）时，使用 rm -r 目录名；删除空目录时，使用 rmdir 目录名。 使用 chown 和 chgrp 命令更改文件的所有权。例如，chown -R root /home/zzz/targetPlace/xxx.c 将把 \u0026ldquo;xxx.c\u0026rdquo; 文件的所有权更改为 root 用户。同理，使用 chgrp 命令更改文件的群组所有权。 使用 chmod 命令更改文件或目录的权限。例如，chmod 777 xxxx（目录） 将为名为 \u0026ldquo;xxxx\u0026rdquo; 的目录设置所有权限（读、写和执行）。 ln 命令用于创建链接，类似于快捷方式。例如，ln 路径/xxx.c newxxx.c 将在当前位置创建一个指向 \u0026ldquo;xxx.c\u0026rdquo; 的新链接 \u0026ldquo;newxxx.c\u0026rdquo;。若要删除快捷方式，可以使用 rm -rf 命令。 输入/输出重定向是一种将命令的输出发送到文件而不是屏幕的技术。例如，date \u0026gt; xx.txt 将当前日期和时间写入 \u0026ldquo;xx.txt\u0026rdquo; 文件。而 date \u0026gt;\u0026gt; xx.txt 会将日期和时间追加到文件的末尾，常用于日志、脚本和文件中。 cat命令 使用 cat \u0026gt; xxxx.c 创建一个新文件 \u0026ldquo;xxxx.c\u0026rdquo;。此命令进入文本输入模式，可以直接输入内容，输入完成后按 Ctrl+D 保存并退出。\n合并文件可以使用 cat 命令。例如，cat tx1.c tx2.c \u0026gt; tx3.c 将分别将 \u0026ldquo;tx1.c\u0026rdquo; 和 \u0026ldquo;tx2.c\u0026rdquo; 的内容合并并输出到 \u0026ldquo;tx3.c\u0026rdquo; 文件中。\n要向文件末尾添加内容，使用 cat \u0026gt;\u0026gt; tx.c。此命令进入文本输入模式，输入完内容后，同样按 Ctrl+D 保存并退出。\nmore命令 使用 more 命令可以逐屏查看大型文件。例如，more -3 tx 将从文件 \u0026ldquo;tx\u0026rdquo; 的第三行开始显示内容。使用方向键或空格键可以向下滚动，按 q 退出查看。 grep命令 使用 grep -i \u0026quot;abc.....\u0026quot; xxxx.c 查找文件 \u0026ldquo;xxxx.c\u0026rdquo; 中的内容，-i 选项使搜索不区分大小写。 使用 grep -n -i \u0026quot;abc.....\u0026quot; xxxx.c 查找文件 \u0026ldquo;xxxx.c\u0026rdquo; 中的内容，-n 选项会显示匹配行的行号，且同样不区分大小写。 find命令 使用 find -name 'tex*' 查找当前目录及子目录中以 \u0026ldquo;tex\u0026rdquo; 开头的文件，支持模糊查找。 使用 find -name 'te??.c' 查找当前目录及子目录中以 \u0026ldquo;te\u0026rdquo; 开头，后跟任意两个字符且以 \u0026ldquo;.c\u0026rdquo; 结尾的文件。 使用 find -name '[a-z]*.c' 查找当前目录及子目录中以小写字母开头且以 \u0026ldquo;.c\u0026rdquo; 结尾的文件。 locate 命令 要快速定位文件，可以使用 locate xxxx 命令。此命令通过查询系统中的文件数据库，迅速找出包含 \u0026ldquo;xxxx\u0026rdquo; 的文件路径。请确保在使用前更新数据库，通常可以通过 updatedb 命令实现。 who 命令 使用 who 查看当前登录的用户。 使用 who -a 查看详细的用户信息，包括登录时间和终端等。 使用 whoami 查看当前用户的用户名。 使用 uname 命令查看主机信息，uname -a 则显示所有相关信息，包括主机名、内核版本、硬件架构等。常用选项包括： -n: 显示主机名 -r: 显示内核版本 -v: 显示内核版本号 -m: 显示机器硬件名称 -p: 显示处理器架构 -i: 显示硬件平台 -o: 显示操作系统名称 man命令 要查看命令手册，可以使用 man 命令。具体示例：\n使用 man ls 查看 ls 命令的说明书。这将打开 ls 命令的手册页，其中包括用法、选项和示例等详细信息。 要退出手册页，可以按 q。\n软件包管理 apt-get 命令 下载/卸载/管理 软件包\nwhich 命令查找位置\n使用 apt-get 命令下载、卸载和管理软件包。例如：\napt-get install package_name 安装软件包。 apt-get remove package_name 卸载软件包。 使用 which 命令查找可执行文件的位置。例如，which command_name 将显示该命令的完整路径。\n不同系统管理 Debian/Ubuntu 系统 下载软件包: apt-get install package_name 卸载软件包: apt-get remove package_name 更新软件包列表: apt-get update 升级软件包: apt-get upgrade Red Hat/CentOS 系统 下载软件包: yum install package_name 卸载软件包: yum remove package_name 更新软件包列表: yum check-update 升级软件包: yum update Arch Linux 系统 下载软件包: pacman -S package_name 卸载软件包: pacman -R package_name 更新软件包列表和升级: pacman -Syu macOS (使用 Homebrew) 下载软件包: brew install package_name 卸载软件包: brew uninstall package_name 更新软件包列表: brew update 升级软件包: brew upgrade Windows (使用 Chocolatey) 下载软件包: choco install package_name 卸载软件包: choco uninstall package_name 更新软件包: choco upgrade all 文件系统类型 查看swap信息并更改单位显示：free -h。 挂载文件系统：使用 sudo mount 命令挂载文件系统到指定目标点，例如 sudo mount /dev/xxx/yyy target。其中，target 是挂载点。 卸载已挂载的文件系统：使用 umount 命令卸载挂载点，例如 umount target。 查询磁盘使用情况：使用 df -h 命令查看磁盘的可用空间等信息。 检查或修改文件系统：使用 fsck 命令进行磁盘检查和修复。可以使用 -C 和 -t $type $路径 参数来指定检查的类型和路径。具体语法可查看 fsck --help 获取更多信息。 在磁盘上创建文件系统：使用 mkfs 命令。具体文件系统类型可以通过查看系统支持的选项来确定。例如，创建ext4文件系统可以使用 mkfs.ext4 命令。 查看分区表：使用 fdisk -l $路径 命令来查看指定设备的分区表信息。如果只是想列出当前系统所有设备，可以省略 $路径 参数。 使用gzip压缩工具：压缩文件使用 gzip xxxx.c，压缩目录使用 gzip -r /home，解压使用 gzip -d xxxx.c.gz。注意，gzip 会替换原始文件为 .gz 格式。 使用tar命令进行压缩和解压：查看tar的帮助信息可以使用 tar --help。压缩文件可以使用 tar -cvf xxx.tar yyy.c ...，解压可以使用 tar -xf xxx.tar -C $解压放置的位置。 使用bzip压缩和解压缩工具：压缩时使用 bzip2 filename 生成 .bz2 文件，解压缩时使用 bzip2 -d filename.bz2 或 bunzip2 filename.bz2。 使用zip命令创建和解压ZIP文件：压缩时使用 zip archive.zip file1 file2 创建ZIP文件，解压时使用 unzip archive.zip 解压ZIP文件。 用户管理 查看用户信息，可以使用 cat /etc/passwd 命令。 添加用户可以使用 useradd 命令。例如，useradd xxxx 将创建一个名为 \u0026ldquo;xxxx\u0026rdquo; 的新用户。 创建用户组使用 groupadd 命令。例如，groupadd xxxxgroup 将创建一个名为 \u0026ldquo;xxxxgroup\u0026rdquo; 的新用户组。查看所有用户组信息可以使用 cat /etc/group。 要查看用户执行过的命令记录，可以使用 history 命令。 使用 passwd 命令更改密码。执行此命令后，系统会提示输入当前用户的旧密码以及新密码。 删除用户可以使用 userdel 命令。例如，userdel xxxuser 将删除名为 \u0026ldquo;xxxuser\u0026rdquo; 的用户。 管理用户账号，包括修改用户名，可以使用 usermod 命令。例如，usermod -l new_name old_name 将把 \u0026ldquo;old_name\u0026rdquo; 的用户名更改为 \u0026ldquo;new_name\u0026rdquo;。 查看用户信息，可以使用 id xxxname 命令，这将显示名为 \u0026ldquo;xxxname\u0026rdquo; 的用户的详细信息。 用户切换可以使用 su 命令。例如，su root 将切换到 root 用户，而 su xxxname 将切换到名为 \u0026ldquo;xxxname\u0026rdquo; 的用户。 使用 sudo 命令可以以管理员权限执行命令。在执行需要特权的命令前，输入 sudo 和该命令，然后输入管理员密码即可。 进程管理 监视进程： 使用 ps 命令查看当前进程。 查看 ps 手册：man ps。 常用选项： 显示所有进程：ps -e 显示不带终端的所有进程：ps -au 显示特定用户的进程：ps -u root 或 ps -u xxxname 显示详细信息：ps -l 跟踪进程： 使用 top 命令监控进程。 自动更新 4 次后退出：top -n 4 设置刷新时间为 5 秒：top -d 5 仅监控特定进程 ID（如 1810）：top -p 1810 htop 命令： htop 是 top 的升级版，提供更友好的用户界面和交互功能。 终止进程： 使用 kill 命令终止进程。例如，kill 1201 将关闭进程 ID 为 1201 的进程。 设置进程优先级： 查看进程 nice 值并按降序排列：ps axo pid,comm,nice --sort=-nice 查看特定进程的 nice 值：ps -p 1201 -o nice 修改进程的 nice 值：renice -n 10 -p 1201 查看进程属性： 使用 pgrep 命令查找进程。 常用命令： 查询特定进程名：pgrep xxxname 模糊查询进程名：pgrep -l ^xxxname 性能监控 显示和配置网络设备 查看网络设备信息： 使用 ifconfig 命令可以查看当前网络配置。 显示所有网络设备及其状态：ifconfig 帮助文档： 查看 ifconfig 的帮助信息：ifconfig --help 常用选项： 启用网络接口：ifconfig eth0 up （将 eth0 替换为实际接口名） 禁用网络接口：ifconfig eth0 down 设置 IP 地址：ifconfig eth0 192.168.1.100 设置子网掩码：ifconfig eth0 netmask 255.255.255.0 查看特定接口信息：ifconfig eth0 现代替代工具 在许多现代 Linux 发行版中，\nifconfig 已被\nip 命令替代，建议使用：\n查看网络设备信息：ip addr 启用接口：ip link set eth0 up 禁用接口：ip link set eth0 down 设置 IP 地址：ip addr add 192.168.1.100/24 dev eth0 CPU 统计数据 iostat 命令\n：\n基本使用：iostat 显示 CPU 和 I/O 统计信息。 输出磁盘利用率：iostat -d sda1 （显示指定磁盘的利用信息）。 输出 CPU 和磁盘利用率：iostat -t （包含时间戳）。 显示 CPU 和磁盘利用率的详细信息：iostat -m （以兆字节为单位显示）。 查看 CPU 使用情况：iostat -c （只显示 CPU 统计数据）。 I/O 监控 iotop 命令\n：\niotop 用于实时监控 I/O 使用情况。 需要 root 权限，可以使用 sudo iotop 来执行该命令。 CPU 统计信息 mpstat 命令\n：\n使用 mpstat 报告 CPU 统计信息。 显示 CPU 中断数：mpstat -I SUM。 虚拟内存统计 vmstat 命令\n：\n查看所有虚拟内存的统计信息：vmstat -a。 输出磁盘统计数据：vmstat -d。 报告虚拟内存统计的详细信息：vmstat -s。 shell 编程基础 shell入门编程实例 Linux C++引用 Linux C++智能指针 unique_ptr shared_ptr weak_ptr 为什么要使用 weak_ptr指针: 为了解决 shared ptr 循环引用问题。\nLinux客户端与服务器 Linux IO 多路复用 ","permalink":"//localhost:1313/posts/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/","summary":"\u003ch1 id=\"常用指令\"\u003e常用指令\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003evim    访问文本\u003c/li\u003e\n\u003cli\u003e退出文本并保存       :wq\u003c/li\u003e\n\u003cli\u003e返回到上一个文件夹    cd . .\u003c/li\u003e\n\u003cli\u003e解压指令         tar  -zxvf   xxxx.tar.gz\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"vi----vim-操作\"\u003evi    vim 操作\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003ei o a r  进入vim\u003c/li\u003e\n\u003cli\u003e按下esc , 输入**:**   然后输入wq  保存并退出            :q退出      :q!  不保存退出\u003c/li\u003e\n\u003cli\u003eyy 拷贝    5yy\u003c/li\u003e\n\u003cli\u003edd 删除   5dd\u003c/li\u003e\n\u003cli\u003e撤销  u\u003c/li\u003e\n\u003cli\u003e行号打开 :set nu\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"关机\"\u003e关机\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003eshutdown -h  关机\u003c/li\u003e\n\u003cli\u003eshutdown -r  重启\u003c/li\u003e\n\u003cli\u003ereboot  重启\u003c/li\u003e\n\u003cli\u003esync  把内存数据存入磁盘\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"注销用户和登录\"\u003e注销用户和登录\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003elogout\u003c/p\u003e","title":"Linux常用指令"},{"content":"信号与槽机制 PyQt的.ui文件转成.py文件 进入 .ui 文件所在的目录，然后在命令行中输入下面的代码示例。\npyuic5 -x xxxx.ui -o yyyyyy.py\nxxxx.ui 目标文件 \u0026mdash;\u0026gt; yyyyy.py 结果\n设置ui禁止编辑 例如\nui -\u0026gt; tableView -\u0026gt; setEditTriggers(QAbstractItemView::NoEditTriggers); ","permalink":"//localhost:1313/posts/qt_study/","summary":"\u003ch1 id=\"信号与槽机制\"\u003e信号与槽机制\u003c/h1\u003e\n\u003ch2 id=\"heading\"\u003e\u003c/h2\u003e\n\u003ch1 id=\"pyqt的ui文件转成py文件\"\u003ePyQt的\u003ccode\u003e.ui\u003c/code\u003e文件转成\u003ccode\u003e.py\u003c/code\u003e文件\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e进入 \u003ccode\u003e.ui\u003c/code\u003e 文件所在的目录，然后在命令行中输入下面的代码示例。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003epyuic5   -x    xxxx.ui   -o   yyyyyy.py\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003exxxx.ui  目标文件  \u0026mdash;\u0026gt;   yyyyy.py 结果\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"设置ui禁止编辑\"\u003e设置ui禁止编辑\u003c/h1\u003e\n\u003cp\u003e例如\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eui\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etableView\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nf\"\u003esetEditTriggers\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eQAbstractItemView\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eNoEditTriggers\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"Qt开发的学习记录"},{"content":"这是用于测试的文档 This is second post of site.\n$$ a^2 + b^2 = c^2 $$\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;unordered_map\u0026gt; // 使用哈希表 #include \u0026lt;unordered_set\u0026gt; #include \u0026lt;stack\u0026gt; // 使用栈 #include \u0026lt;string\u0026gt; // 使用字符串 #include \u0026lt;utility\u0026gt; #include \u0026lt;cstring\u0026gt; // 有memset将一块内存区域设置为特定的值。 strcpy：复制一个字符串。strcat：连接两个字符串。strlen：获取字符串的长度。strcmp：比较两个字符串。 #include \u0026lt;functional\u0026gt; #include \u0026lt;numeric\u0026gt; using namespace std; typedef long long ll; // 定义long long类型的简写为ll typedef long double ld; // 定义long double类型的简写为ld typedef pair\u0026lt;int, int\u0026gt; pii; // 定义pair\u0026lt;int, int\u0026gt;类型的简写为pii typedef pair\u0026lt;ll, ll\u0026gt; pll; // 定义pair\u0026lt;ll, ll\u0026gt;类型的简写为pll typedef vector\u0026lt;int\u0026gt; vi; // 定义vector\u0026lt;int\u0026gt;类型的简写为vi //--------------------------------模板--------------------------------// class Solution { public: }; int main() { std::vector\u0026lt;int\u0026gt; arr = {5, 3, 8, 1, 2}; std::sort(arr.begin(), arr.end(), std::greater\u0026lt;int\u0026gt;()); for (int num : arr) { std::cout \u0026lt;\u0026lt; num \u0026lt;\u0026lt; \u0026#34; \u0026#34;\u0026lt;\u0026lt;endl; } return 0; } // imgs 11111\n22222\n3333\n","permalink":"//localhost:1313/posts/second-post/","summary":"\u003ch1 id=\"这是用于测试的文档\"\u003e这是用于测试的文档\u003c/h1\u003e\n\u003cp\u003eThis is second post of site.\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003e$$\na^2 + b^2 = c^2\n$$\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;algorithm\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unordered_map\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 使用哈希表\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unordered_set\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stack\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e  \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 使用栈\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 使用字符串\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;utility\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstring\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 有memset将一块内存区域设置为特定的值。 strcpy：复制一个字符串。strcat：连接两个字符串。strlen：获取字符串的长度。strcmp：比较两个字符串。\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;functional\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;numeric\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e       \u003cspan class=\"c1\"\u003e// 定义long long类型的简写为ll\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eld\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// 定义long double类型的简写为ld\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epii\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 定义pair\u0026lt;int, int\u0026gt;类型的简写为pii\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epll\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 定义pair\u0026lt;ll, ll\u0026gt;类型的简写为pll\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003evi\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// 定义vector\u0026lt;int\u0026gt;类型的简写为vi\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//--------------------------------模板--------------------------------//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSolution\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003egreater\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nl\"\u003enum\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"imgs\"\u003eimgs\u003c/h1\u003e\n\u003cp\u003e11111\u003c/p\u003e","title":"Second Post"},{"content":"第一篇博客 感谢 B 站 UP 主 SonnyCalcr 的大力支持，让我得以学习并成功搭建这个个人博客网站。非常感谢他的支持与指导！\n这是这位up主的网站（支持up）：bilibili: SonnyCalcr\n","permalink":"//localhost:1313/posts/firstpost/","summary":"\u003ch1 id=\"第一篇博客\"\u003e第一篇博客\u003c/h1\u003e\n\u003cp\u003e感谢 B 站 UP 主 SonnyCalcr 的大力支持，让我得以学习并成功搭建这个个人博客网站。非常感谢他的支持与指导！\u003c/p\u003e\n\u003cp\u003e这是这位up主的网站（支持up）：\u003ca href=\"https://space.bilibili.com/3493138859559908\"\u003ebilibili: SonnyCalcr\u003c/a\u003e\u003c/p\u003e","title":"FirstPost"},{"content":"","permalink":"//localhost:1313/categories/","summary":"categories","title":"分类"},{"content":"Love and share !🗽\nNever say never !!!\n","permalink":"//localhost:1313/about/","summary":"about","title":"关于"},{"content":"Blog Free Discussion Area Welcome everyone to share your thoughts and opinions in the comments section of the blog!\nThis website is equipped with giscus, a comment system based on GitHub Discussions. Visitors can leave comments and feedback on the site using GitHub! 📋🖋️\nI will respond to all comments and feedback as soon as possible. 🥰\nIf needed, you can also contact me directly via email: authoritysharing@gmail.com 博客的自由交流区 欢迎大家在博客的评论区分享自己的想法和意见！\n本网站配置了 giscus，这是一个基于 GitHub Discussions 实现的评论系统。访客能够通过 GitHub 在网站上留下评论和反馈！ 📋🖋️\n所有的评论和意见，我会尽快回复所有评论和反馈。🥰\n如有需要，也可以直接通过邮件与我联系：authoritysharing@gmail.com ","permalink":"//localhost:1313/posts/%E7%95%99%E8%A8%80%E6%9D%BF/","summary":"\u003ch1 id=\"blog-free-discussion-area\"\u003eBlog Free Discussion Area\u003c/h1\u003e\n\u003cp\u003eWelcome everyone to share your thoughts and opinions in the comments section of the blog!\u003c/p\u003e\n\u003cp\u003eThis website is equipped with \u003ca href=\"https://giscus.app/zh-CN\"\u003egiscus\u003c/a\u003e, a comment system based on \u003ca href=\"https://docs.github.com/en/discussions\"\u003eGitHub Discussions\u003c/a\u003e. Visitors can leave comments and feedback on the site using GitHub! 📋🖋️\u003c/p\u003e\n\u003cp\u003eI will respond to all comments and feedback as soon as possible. 🥰\u003c/p\u003e\n\u003cp\u003eIf needed, you can also contact me directly via email: \u003ca href=\"mailto:authoritysharing@gmail.com\"\u003eauthoritysharing@gmail.com \u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"博客的自由交流区\"\u003e博客的自由交流区\u003c/h1\u003e\n\u003cp\u003e欢迎大家在博客的评论区分享自己的想法和意见！\u003c/p\u003e","title":"留言板📑Message Board ➡️ 在此留言"},{"content":"Draft cwgo server \u0026ndash;type RPC \u0026ndash;module github.com/cloudwego/biz-demo/gomall/demo/demo_thrift \u0026ndash;service demo_thrift \u0026ndash;idl ../../idl/echo.thrift\n不要心急, 每个人都有自己的时区\n社会 8 - 自然 8 - 生命 5 - 文化 3\n对话 - 图书馆 - 课程询问 - 生活 - 师生\n想法 存放仓库, 存放物品 , 订阅 , 存放100年 , 放入海底 托福计划 托福死莽 100分必须上分 cpp 进度学习 坚持 字节训练营学习 身材管理 健身 托福 100 101\n听力是重点\n加油加油加油 🗽🗽🗽🗽🗽🗽🗽🌎 一定要定点突破 一个一个 上午 阅读 1 篇(词汇题积累) 背作文 背单词 早上背书 听力1篇 下午 口语 (克服听力) 2 tasks 晚上 听力 + 阅读1篇 周末 写作文 , 写完背范文 6:30 起床 出门 阅读 20 \u0026mdash;\u0026gt; 28 加多 8 分 8分\n听力 20 \u0026mdash;\u0026gt; 28 加多 8 分 8分\n口语 15 \u0026mdash;\u0026gt; 23 上分 8 分 8分\n写作 18 \u0026mdash;\u0026gt; 23 上分 5 分 5分\n","permalink":"//localhost:1313/posts/000aaadraft/","summary":"\u003ch1 id=\"draft\"\u003eDraft\u003c/h1\u003e\n\u003chr\u003e\n\u003cp\u003ecwgo server \u0026ndash;type RPC \u0026ndash;module github.com/cloudwego/biz-demo/gomall/demo/demo_thrift  \u0026ndash;service demo_thrift  \u0026ndash;idl ../../idl/echo.thrift\u003c/p\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003e不要心急, 每个人都有自己的时区\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e社会 8 - 自然 8  - 生命 5 - 文化 3\u003c/p\u003e\n\u003cp\u003e对话 - 图书馆 - 课程询问 - 生活 - 师生\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"想法\"\u003e想法\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e存放仓库, 存放物品 , 订阅 , 存放100年 , 放入海底\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch1 id=\"托福计划\"\u003e托福计划\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e托福死莽  \u003cstrong\u003e100分\u003c/strong\u003e必须上分\u003c/li\u003e\n\u003cli\u003ecpp 进度学习 坚持\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e字节训练营学习\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e身材管理 健身\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"托福-100\"\u003e托福 100\u003c/h1\u003e\n\u003cp\u003e101\u003c/p\u003e","title":"草稿"},{"content":"问题 我的网站在复制代码时，会把行号也一起复制下来。我尝试了很多办法，但最终决定：\n既然解决不了问题，那就干脆消灭问题吧！😆\n解决办法 在hugo.yaml文件直接增加以下代码, 这段代码的作用是禁用代码块中的行号显示。\nmarkup: highlight: lineNumbers: false ","permalink":"//localhost:1313/posts/%E8%A7%A3%E5%86%B3hugo%E5%A4%8D%E5%88%B6%E8%A1%8C%E5%8F%B7%E9%97%AE%E9%A2%98%E7%9A%84%E5%8A%9E%E6%B3%95/","summary":"\u003ch1 id=\"问题\"\u003e问题\u003c/h1\u003e\n\u003cp\u003e我的网站在复制代码时，会把行号也一起复制下来。我尝试了很多办法，但最终决定：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e既然解决不了问题，那就干脆消灭问题吧！😆\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"解决办法\"\u003e解决办法\u003c/h1\u003e\n\u003cp\u003e在\u003ccode\u003ehugo.yaml\u003c/code\u003e文件直接增加以下代码, 这段代码的作用是禁用代码块中的行号显示。\u003c/p\u003e","title":"解决hugo复制行号问题的办法"},{"content":"Cpp各类模板设置 插入代码模板 \u0026#34;nameXXX\u0026#34;: { \u0026#34;prefix\u0026#34;: \u0026#34;XXX操作码\u0026#34;, \u0026#34;body\u0026#34;: [ \u0026#34;xxxxxx\u0026#34;, \u0026#34;xxxxxx\u0026#34;, \u0026#34;yyyyyy\u0026#34;, \u0026#34;yyyyyy\u0026#34;, \u0026#34;$0\u0026#34; ] }, 头文件 #pragma GCC optimize(\u0026#34;O2\u0026#34;) #include\u0026lt;bits/stdc++.h\u0026gt; #include \u0026lt;iostream\u0026gt; // cin/cout #include \u0026lt;cstdio\u0026gt; // printf/scanf #include \u0026lt;algorithm\u0026gt; #include \u0026lt;vector\u0026gt; // 容器 #include \u0026lt;string\u0026gt; // 字符串 #include \u0026lt;stack\u0026gt; // 栈 #include \u0026lt;queue\u0026gt; // 队列 #include \u0026lt;unordered_map\u0026gt; // 哈希表 #include \u0026lt;unordered_set\u0026gt; // 哈希表 set #include \u0026lt;memory\u0026gt; // 智能指针 #include \u0026lt;functional\u0026gt; #include \u0026lt;numeric\u0026gt; #include \u0026lt;ranges\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;bitset\u0026gt; #include \u0026lt;cmath\u0026gt; using namespace std; typedef long long ll; // long long为ll typedef long double ld; // long doubleld typedef pair\u0026lt;int, int\u0026gt; pii; // pair\u0026lt;int, int\u0026gt;pii typedef pair\u0026lt;ll, ll\u0026gt; pll; // pair\u0026lt;ll, ll\u0026gt;pll typedef vector\u0026lt;int\u0026gt; vi; // vector\u0026lt;int\u0026gt;vi const long long inf = numeric_limits\u0026lt;long long\u0026gt;::max(); // 无穷大 const int N = 100100; // 100 百 , 100100 十万 , 1100100 一百万 , 100100100 一亿 void Mysolve(){ } int main(){ ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); //---------优化 Mysolve(); return 0; } cpp.json 设置\n{ \u0026#34;HEADER\u0026#34;: { \u0026#34;prefix\u0026#34;: \u0026#34;H\u0026#34;, \u0026#34;body\u0026#34;: [ \u0026#34;#pragma GCC optimize(\\\u0026#34;O2\\\u0026#34;)\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;#include\u0026lt;bits/stdc++.h\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;iostream\u0026gt; // cin/cout\u0026#34;, \u0026#34;#include \u0026lt;cstdio\u0026gt; // printf/scanf\u0026#34;, \u0026#34;#include \u0026lt;algorithm\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;vector\u0026gt; // 容器\u0026#34;, \u0026#34;#include \u0026lt;string\u0026gt; // 字符串\u0026#34;, \u0026#34;#include \u0026lt;stack\u0026gt; // 栈\u0026#34;, \u0026#34;#include \u0026lt;queue\u0026gt; // 队列\u0026#34;, \u0026#34;#include \u0026lt;unordered_map\u0026gt; // 哈希表\u0026#34;, \u0026#34;#include \u0026lt;unordered_set\u0026gt; // 哈希表 set\u0026#34;, \u0026#34;#include \u0026lt;memory\u0026gt; // 智能指针\u0026#34;, \u0026#34;#include \u0026lt;functional\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;numeric\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;ranges\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;cstring\u0026gt; \u0026#34;, \u0026#34;#include \u0026lt;bitset\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;cmath\u0026gt;\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;using namespace std;\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;typedef long long ll; // long long为ll\u0026#34;, \u0026#34;typedef long double ld; // long doubleld\u0026#34;, \u0026#34;typedef pair\u0026lt;int, int\u0026gt; pii; // pair\u0026lt;int, int\u0026gt;pii\u0026#34;, \u0026#34;typedef pair\u0026lt;ll, ll\u0026gt; pll; // pair\u0026lt;ll, ll\u0026gt;pll\u0026#34;, \u0026#34;typedef vector\u0026lt;int\u0026gt; vi; // vector\u0026lt;int\u0026gt;vi\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;const long long inf = numeric_limits\u0026lt;long long\u0026gt;::max(); // 无穷大\u0026#34;, \u0026#34;const int N = 100100; // 100100 十万 , 1100100 一百万 , 100100100 一亿\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;void Mysolve(){\u0026#34;, \u0026#34; \u0026#34;, \u0026#34;}\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;int main(){\u0026#34;, \u0026#34; ios::sync_with_stdio(false);\u0026#34;, \u0026#34; cin.tie(NULL);\u0026#34;, \u0026#34; cout.tie(NULL);\u0026#34;, \u0026#34; //---------优化\u0026#34;, \u0026#34;\u0026#34;, \u0026#34; Mysolve();\u0026#34;, \u0026#34; return 0;\u0026#34;, \u0026#34;}\u0026#34;, \u0026#34;$0\u0026#34; ] }, } leetcode模板 \u0026#34;leetcode\u0026#34;: { \u0026#34;prefix\u0026#34;: \u0026#34;lc\u0026#34;, \u0026#34;body\u0026#34;: [ \u0026#34;#pragma GCC optimize(\\\u0026#34;O2\\\u0026#34;)\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;#include\u0026lt;bits/stdc++.h\u0026gt;\u0026#34;, \u0026#34;using namespace std;\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;const long long inf = numeric_limits\u0026lt;long long\u0026gt;::max();\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;$0\u0026#34; ] }, 算法模板\n高精度算法 ","permalink":"//localhost:1313/posts/cppvscode%E6%A8%A1%E6%9D%BF/","summary":"\u003ch1 id=\"cpp各类模板设置\"\u003eCpp各类模板设置\u003c/h1\u003e\n\u003ch2 id=\"插入代码模板\"\u003e插入代码模板\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e\u0026#34;nameXXX\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026#34;prefix\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;XXX操作码\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026#34;body\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;xxxxxx\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;xxxxxx\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;yyyyyy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;yyyyyy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;$0\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"头文件\"\u003e头文件\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#pragma GCC optimize(\u0026#34;O2\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u0026lt;bits/stdc++.h\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e      \u003c/span\u003e\u003cspan class=\"c1\"\u003e// cin/cout\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// printf/scanf\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;algorithm\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 容器\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 字符串\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stack\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e         \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 栈\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;queue\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e         \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 队列\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unordered_map\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 哈希表\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unordered_set\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 哈希表 set\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;memory\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 智能指针\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;functional\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;numeric\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;ranges\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstring\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;bitset\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cmath\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e       \u003cspan class=\"c1\"\u003e// long long为ll\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eld\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// long doubleld\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epii\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// pair\u0026lt;int, int\u0026gt;pii\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epll\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// pair\u0026lt;ll, ll\u0026gt;pll\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003evi\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// vector\u0026lt;int\u0026gt;vi\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003einf\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 无穷大\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e100100\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 100 百 , 100100 十万 , 1100100 一百万 , 100100100 一亿\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eMysolve\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eios\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esync_with_stdio\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ecin\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etie\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etie\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//---------优化\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eMysolve\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003ecpp.json 设置\u003c/p\u003e","title":"CppVsCode代码快捷模板"},{"content":"灵神题单 分享｜如何科学刷题？ - 力扣（LeetCode）\n前言 怎么刷算法题？按照什么顺序刷题？如何科学地刷题训练？\n如果你刚接触力扣，还不熟悉基本编程语法和常用库函数，推荐刷力扣官方的入门题单：\n「新」动计划 · 编程入门 编程基础 0 到 1 有了一些简单题的积累，就可以开始刷我的题单啦~\n分享｜如何科学刷题？ - 力扣（LeetCode） 打开链接 找灵神\n滑动窗口与双指针（定长/不定长/单序列/双序列/三指针） 二分算法（二分答案/最小化最大值/最大化最小值/第K小） 单调栈（基础/矩形面积/贡献法/最小字典序） 网格图（DFS/BFS/综合应用） 位运算（基础/性质/拆位/试填/恒等式/思维） 图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径） 动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望） 常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树） 数学算法（数论/组合/概率期望/博弈/计算几何/随机算法） 贪心与思维（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造） 链表、二叉树与一般树（前后指针/快慢指针/DFS/BFS/直径/LCA） 字符串（KMP/Z函数/Manacher/字符串哈希/AC自动机/后缀数组/子序列自动机） 对于动态规划，至少要做 100 100 道才算入门。\n优点：突击训练特定知识点，可以掌握常用算法套路。按照题单专题刷，一个套路可以解决多个题目，刷题效率高。此外，做同一个专题下的题目，相当于在从不同的角度去观察、思考同一个算法，这能让你更加深刻地理解算法的本质。\n缺点：提前知道题目类型，跳过了一些思考步骤。但比赛/笔试是不会告诉你这题是什么类型的，把 DP 想成贪心的大有人在。可以结合下面的训练方法，锻炼自己判断题目类型的能力。\n训练方法 A 要点：\n按照专题刷题。同一个专题下的题目，套路是一样的，刷题效率杠杠滴~ 从易到难，量力而行。题目已经按照难度分整理好了，按照顺序刷就行~ 推荐先刷【滑动窗口】和【二分】题单，这是两个最基础的算法，套路也较为固定，刷题过程中还可以学到一些做题技巧。其他题单可以按照自己的兴趣选择。\n请结合【基础算法精讲】学习。\n推荐安装 这个插件，可以在题单中自动标记做过的题目。\n训练方法 B 随机刷题，注意控制难度范围，太简单和太难的题目都不能让你进入「心流通道」。\n打开 难度练习。 在设置中关闭算法标签。 选择适合自己的难度范围，开刷！ 优点：做题时不知道题目类型，可以训练实战能力。\n缺点：知识点有些零散，适合已经掌握常用算法的同学查漏补缺，检验自己的学习成果。\n训练方法 C 如果时间很少，可以突击训练 HOT 100。\n最好能默写下来程度\nLeetCode 热题 100 - 学习计划 - 力扣（LeetCode）全球极客挚爱的技术成长平台\n作者：灵茶山艾府 链接：https://leetcode.cn/circle/discuss/RvFUtj/ 来源：力扣（LeetCode） 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n","permalink":"//localhost:1313/posts/leetcode%E5%88%B7%E9%A2%98%E9%A2%98%E5%8D%95/","summary":"\u003ch1 id=\"灵神题单\"\u003e灵神题单\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://leetcode.cn/circle/discuss/RvFUtj/\"\u003e分享｜如何科学刷题？ - 力扣（LeetCode）\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e前言\n怎么刷算法题？按照什么顺序刷题？如何科学地刷题训练？\u003c/p\u003e\n\u003cp\u003e如果你刚接触力扣，还不熟悉基本编程语法和常用库函数，推荐刷力扣官方的入门题单：\u003c/p\u003e","title":"Leetcode刷题题单"},{"content":"Xshell突出显示配置 将命名为 XshellColor.hls 的文件准备好。\n将该文件放置到以下目录： C:\\Users\\Your_name\\Documents\\NetSarang Computer\\7\\Xshell\\HighlightSet Files\n（请将 Your_name 替换为您的实际用户名）\n打开 Xshell 后，即可在颜色设置中选择该高亮配置文件。\n我这是黑暗版风格, 偏护眼\n[Keyword_0] TermBackColor=1 Underline=1 Bold=0 Strikeout=0 Keyword=[_a-z0-9-]+(.[_a-z0-9-]+)*@[a-z0-9-]+(.[a-z0-9-]+)* Description=Email address BackColorIndex=286 UseRegex=1 Italic=0 Enable=0 TextColorIndex=286 CaseSens=0 [Keyword_1] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(?=(\\b|\\D))(((\\d{1,2})|(1\\d{1,2})|(2[0-4]\\d)|(25[0-5]))\\.){3}((\\d{1,2})|(1\\d{1,2})|(2[0-4]\\d)|(25[0-5]))(?=(\\b|\\D))\\s* Description=IPv4 BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=295 CaseSens=0 [Keyword_2] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=[\\[ ]?\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*\\]? Description=IPv6 BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=294 CaseSens=0 [Keyword_3] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(\\berror\\b)|(\\bfail(ed)?\\b)|(\\bfalse\\b)|(\\bdown\\b)|(\\blocked\\b) Description=error, fail, false, down BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=290 CaseSens=0 [Keyword_4] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(\\bactive(d)?\\b)|(\\bsuccess(ful(ly)?)?\\b)|(\\btrue\\b)|(\\bok\\b)|(\\bup\\b)|(\\brunning\\b)|(\\bdeployed\\b)|(\\bunlocked\\b) Description=active, success, true, ok, up BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=291 CaseSens=0 [Keyword_5] TermBackColor=1 Underline=1 Bold=1 Strikeout=0 Keyword=(\\bstart(ed|ing)?\\b)|(\\bbegin(ning)?\\b)|(\\benable(d)?\\b)|(\\bcreate(d)?\\b)|(\\bopen\\b) Description=start, begin, enable, create, open BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=291 CaseSens=0 [Keyword_6] TermBackColor=1 Underline=1 Bold=1 Strikeout=0 Keyword=(\\bstop(ped)?\\b)|(\\bend\\b)|(\\bfinish(ed)?\\b)|(\\bdisable(d)?\\b)|(\\bdelete(d)?\\b)|(\\bclose(d)?\\b) Description=stop, end, finish, disable, delete BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=293 CaseSens=0 [Keyword_7] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(\\bwarn(ing)?\\b)|(\\binactive\\b)|(\\bunknown\\b) Description=warn, inactive, unknown BackColorIndex=292 UseRegex=1 Italic=1 Enable=1 TextColorIndex=282 CaseSens=0 [Colors] Colors=000000,00E4FF,000040,0080FF,400000,C08080,8080FF,C0C0C0,555555,5555FF,55FF55,55FFFF,FF5555,FF55FF,FFFF55,FFFFFF [Keyword_8] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(\\binfo\\b) Description=info BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=291 CaseSens=0 [Keyword_9] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=\\bDEBUG\\b Description=debug BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=293 CaseSens=0 [info] Version=1.1 Count=12 [Keyword_10] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=\\/\\b(\\d|([1-9]\\d)|(1[01]\\d)|(12[0-8]))\\b Description=CIDR BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=284 CaseSens=0 [Keyword_11] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=([a-zA-Z0-9._-]+@([a-zA-Z0-9_-]+\\.)+[a-zA-Z0-9_-]+) Description=Email Regex BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=286 CaseSens=0 ","permalink":"//localhost:1313/posts/xshell%E4%B8%BB%E9%A2%98%E9%85%8D%E8%89%B2%E6%96%87%E4%BB%B6/","summary":"\u003ch1 id=\"xshell突出显示配置\"\u003e\u003ccode\u003eXshell\u003c/code\u003e突出显示配置\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e将命名为 \u003cstrong\u003e\u003ccode\u003eXshellColor.hls\u003c/code\u003e\u003c/strong\u003e 的文件准备好。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e将该文件放置到以下目录：\n\u003cstrong\u003e\u003ccode\u003eC:\\Users\\Your_name\\Documents\\NetSarang Computer\\7\\Xshell\\HighlightSet Files\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e（请将 \u003ccode\u003eYour_name\u003c/code\u003e 替换为您的实际用户名）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e打开 Xshell 后，即可在颜色设置中选择该高亮配置文件。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e我这是黑暗版风格, 偏护眼\u003c/p\u003e","title":"Xshell主题配色文件"},{"content":"加上具体的例子 Add specific examples 帮我理顺并润色以上内容 help me organize and refine the content above. 科学写作专家 - 学术写作 want you to act as an expert in scientific writing, l will provide you with some paragraphs in English and your task is to improve the spelling, grammar clarity, conciseness and overalreadability of the text providedwhile breaking down longsentences, reducing repetitionand providing improvementsuggestions. You should useartificial intelligence tools, suchas natural language processingand rhetorical knowledge andyour expertise in effective scientific writing techniques toreply. Provide the output as a markdown table with the head in Chinese. The first column is the originasentence, and the secondcolumn is the sentence afterediting and the third columnprovides explanation in Chinese Please edit the following text in a scientific tone: ","permalink":"//localhost:1313/posts/ai%E6%8F%90%E7%A4%BA%E8%AF%8D%E6%B1%87%E6%80%BB/","summary":"\u003ch1 id=\"加上具体的例子\"\u003e加上具体的例子\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eAdd\u003c/span\u003e \u003cspan class=\"nx\"\u003especific\u003c/span\u003e \u003cspan class=\"nx\"\u003eexamples\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"帮我理顺并润色以上内容\"\u003e帮我理顺并润色以上内容\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ehelp\u003c/span\u003e \u003cspan class=\"n\"\u003eme\u003c/span\u003e \u003cspan class=\"n\"\u003eorganize\u003c/span\u003e \u003cspan class=\"n\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003erefine\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003econtent\u003c/span\u003e \u003cspan class=\"n\"\u003eabove\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"科学写作专家---学术写作\"\u003e科学写作专家 - 学术写作\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ewant\u003c/span\u003e \u003cspan class=\"n\"\u003eyou\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e \u003cspan class=\"n\"\u003eact\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003ean\u003c/span\u003e \u003cspan class=\"n\"\u003eexpert\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003escientific\u003c/span\u003e \u003cspan class=\"n\"\u003ewriting\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"n\"\u003ewill\u003c/span\u003e \u003cspan class=\"n\"\u003eprovide\u003c/span\u003e \u003cspan class=\"n\"\u003eyou\u003c/span\u003e \u003cspan class=\"k\"\u003ewith\u003c/span\u003e \u003cspan class=\"n\"\u003esome\u003c/span\u003e \u003cspan class=\"n\"\u003eparagraphs\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eEnglish\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003eyour\u003c/span\u003e \u003cspan class=\"n\"\u003etask\u003c/span\u003e \u003cspan class=\"ow\"\u003eis\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e \u003cspan class=\"n\"\u003eimprove\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003espelling\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003egrammar\u003c/span\u003e \u003cspan class=\"n\"\u003eclarity\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003econciseness\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003eoveralreadability\u003c/span\u003e \u003cspan class=\"n\"\u003eof\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"n\"\u003eprovidedwhile\u003c/span\u003e \u003cspan class=\"n\"\u003ebreaking\u003c/span\u003e \u003cspan class=\"n\"\u003edown\u003c/span\u003e \u003cspan class=\"n\"\u003elongsentences\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ereducing\u003c/span\u003e \u003cspan class=\"n\"\u003erepetitionand\u003c/span\u003e \u003cspan class=\"n\"\u003eproviding\u003c/span\u003e \u003cspan class=\"n\"\u003eimprovementsuggestions\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"n\"\u003eYou\u003c/span\u003e \u003cspan class=\"n\"\u003eshould\u003c/span\u003e \u003cspan class=\"n\"\u003euseartificial\u003c/span\u003e \u003cspan class=\"n\"\u003eintelligence\u003c/span\u003e \u003cspan class=\"n\"\u003etools\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esuchas\u003c/span\u003e \u003cspan class=\"n\"\u003enatural\u003c/span\u003e \u003cspan class=\"n\"\u003elanguage\u003c/span\u003e \u003cspan class=\"n\"\u003eprocessingand\u003c/span\u003e \u003cspan class=\"n\"\u003erhetorical\u003c/span\u003e \u003cspan class=\"n\"\u003eknowledge\u003c/span\u003e \u003cspan class=\"n\"\u003eandyour\u003c/span\u003e \u003cspan class=\"n\"\u003eexpertise\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eeffective\u003c/span\u003e \u003cspan class=\"n\"\u003escientific\u003c/span\u003e \u003cspan class=\"n\"\u003ewriting\u003c/span\u003e \u003cspan class=\"n\"\u003etechniques\u003c/span\u003e \u003cspan class=\"n\"\u003etoreply\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"n\"\u003eProvide\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003eoutput\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003emarkdown\u003c/span\u003e \u003cspan class=\"n\"\u003etable\u003c/span\u003e \u003cspan class=\"k\"\u003ewith\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003ehead\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eChinese\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"n\"\u003eThe\u003c/span\u003e \u003cspan class=\"n\"\u003efirst\u003c/span\u003e \u003cspan class=\"n\"\u003ecolumn\u003c/span\u003e \u003cspan class=\"ow\"\u003eis\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003eoriginasentence\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003esecondcolumn\u003c/span\u003e \u003cspan class=\"ow\"\u003eis\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003esentence\u003c/span\u003e \u003cspan class=\"n\"\u003eafterediting\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003ethird\u003c/span\u003e \u003cspan class=\"n\"\u003ecolumnprovides\u003c/span\u003e \u003cspan class=\"n\"\u003eexplanation\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eChinese\u003c/span\u003e \u003cspan class=\"n\"\u003ePlease\u003c/span\u003e \u003cspan class=\"n\"\u003eedit\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003efollowing\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003escientific\u003c/span\u003e \u003cspan class=\"n\"\u003etone\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"heading\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-1\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-2\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-3\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-4\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-5\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-6\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-7\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-8\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-9\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-10\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-11\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-12\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-13\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-14\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-15\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-16\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-17\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-18\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-19\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-20\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-21\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-22\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-23\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-24\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-25\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-26\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-27\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-28\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-29\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-30\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-31\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-32\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-33\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-34\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-35\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-36\"\u003e\u003c/h1\u003e","title":"AI提示词汇总"},{"content":"什么是加密 ","permalink":"//localhost:1313/posts/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E5%92%8C%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%9A%84%E6%80%9D%E8%80%83/","summary":"\u003ch1 id=\"什么是加密\"\u003e什么是加密\u003c/h1\u003e","title":"对称加密和非对称加密的思考"},{"content":" 我的 vscode 的设置.json文件\n2024.11.12 设置 { \u0026#34;editor.fontSize\u0026#34;: 16, \u0026#34;cph.general.autoShowJudge\u0026#34;: false, \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;editor.formatOnType\u0026#34;: true, \u0026#34;files.autoSave\u0026#34;: \u0026#34;afterDelay\u0026#34;, \u0026#34;git.confirmSync\u0026#34;: false, \u0026#34;chat.editor.fontSize\u0026#34;: 18, \u0026#34;window.zoomLevel\u0026#34;: 1, \u0026#34;editor.mouseWheelZoom\u0026#34;: true, \u0026#34;editor.wordWrap\u0026#34;: \u0026#34;on\u0026#34;, \u0026#34;debug.onTaskErrors\u0026#34;: \u0026#34;debugAnyway\u0026#34;, \u0026#34;explorer.confirmDelete\u0026#34;: false, \u0026#34;extensions.experimental.affinity\u0026#34;: { \u0026#34;asvetliakov.vscode-neovim\u0026#34;: 1 }, \u0026#34;workbench.settings.applyToAllProfiles\u0026#34;: [ \u0026#34;editor.fontSize\u0026#34; ], \u0026#34;go.delveConfig\u0026#34;: {}, \u0026#34;[javascript]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;esbenp.prettier-vscode\u0026#34; }, \u0026#34;[markdown]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;esbenp.prettier-vscode\u0026#34; }, \u0026#34;[prisma]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;Prisma.prisma\u0026#34; }, \u0026#34;[typescript]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;esbenp.prettier-vscode\u0026#34; }, \u0026#34;[typescriptreact]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;esbenp.prettier-vscode\u0026#34; }, \u0026#34;editor.codeActionsOnSave\u0026#34;: { \u0026#34;source.addMissingImports\u0026#34;: \u0026#34;explicit\u0026#34;, \u0026#34;source.organizeImports\u0026#34;: \u0026#34;explicit\u0026#34; }, \u0026#34;editor.cursorSmoothCaretAnimation\u0026#34;: \u0026#34;on\u0026#34;, \u0026#34;editor.cursorSurroundingLines\u0026#34;: 5, \u0026#34;editor.fontFamily\u0026#34;: \u0026#34;CaskaydiaCove Nerd Font\u0026#34;, \u0026#34;editor.fontLigatures\u0026#34;: true, \u0026#34;python.analysis.completeFunctionParens\u0026#34;: true, \u0026#34;editor.fontSize\u0026#34;: 18, \u0026#34;editor.fontWeight\u0026#34;: \u0026#34;300\u0026#34;, \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;editor.inlineSuggest.enabled\u0026#34;: true, \u0026#34;editor.lineNumbers\u0026#34;: \u0026#34;relative\u0026#34;, \u0026#34;editor.linkedEditing\u0026#34;: true, \u0026#34;editor.smoothScrolling\u0026#34;: true, \u0026#34;editor.stickyScroll.enabled\u0026#34;: true, \u0026#34;editor.suggest.insertMode\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;editor.suggestFontSize\u0026#34;: 14, \u0026#34;editor.wordWrap\u0026#34;: \u0026#34;on\u0026#34;, \u0026#34;errorLens.fontStyleItalic\u0026#34;: true, \u0026#34;everforest.italicKeywords\u0026#34;: true, \u0026#34;explorer.confirmDelete\u0026#34;: false, \u0026#34;explorer.confirmDragAndDrop\u0026#34;: false, \u0026#34;extensions.autoUpdate\u0026#34;: \u0026#34;onlyEnabledExtensions\u0026#34;, \u0026#34;extensions.ignoreRecommendations\u0026#34;: false, \u0026#34;files.exclude\u0026#34;: { \u0026#34;**/node_modules\u0026#34;: true }, \u0026#34;prettier.semi\u0026#34;: false, \u0026#34;prettier.singleAttributePerLine\u0026#34;: true, \u0026#34;prettier.singleQuote\u0026#34;: true, \u0026#34;prettier.trailingComma\u0026#34;: \u0026#34;all\u0026#34;, \u0026#34;projectManager.git.baseFolders\u0026#34;: [ \u0026#34;$home/workspace\u0026#34; ], \u0026#34;projectManager.sortList\u0026#34;: \u0026#34;Recent\u0026#34;, \u0026#34;sortJSON.orderOverride\u0026#34;: [ \u0026#34;name\u0026#34;, \u0026#34;version\u0026#34;, \u0026#34;main\u0026#34;, \u0026#34;module\u0026#34;, \u0026#34;types\u0026#34;, \u0026#34;typings\u0026#34;, \u0026#34;files\u0026#34;, \u0026#34;publishConfig\u0026#34;, \u0026#34;repository\u0026#34;, \u0026#34;scripts\u0026#34;, \u0026#34;prefix\u0026#34;, \u0026#34;description\u0026#34;, \u0026#34;body\u0026#34; ], \u0026#34;sortJSON.orderUnderride\u0026#34;: [ \u0026#34;resolutions\u0026#34;, \u0026#34;dependencies\u0026#34;, \u0026#34;devDependencies\u0026#34;, \u0026#34;peerDependencies\u0026#34;, \u0026#34;cSpell.userWords\u0026#34; ], \u0026#34;typescript.preferences.importModuleSpecifier\u0026#34;: \u0026#34;relative\u0026#34;, \u0026#34;typescript.updateImportsOnFileMove.enabled\u0026#34;: \u0026#34;always\u0026#34;, \u0026#34;update.showReleaseNotes\u0026#34;: false, \u0026#34;vim.foldfix\u0026#34;: true, \u0026#34;vim.highlightedyank.color\u0026#34;: \u0026#34;rgba(230, 97, 89, 0.7)\u0026#34;, \u0026#34;vim.highlightedyank.enable\u0026#34;: true, \u0026#34;vim.highlightedyank.textColor\u0026#34;: \u0026#34;white\u0026#34;, \u0026#34;vim.hlsearch\u0026#34;: true, \u0026#34;vim.leader\u0026#34;: \u0026#34;\u0026lt;space\u0026gt;\u0026#34;, \u0026#34;vim.normalModeKeyBindingsNonRecursive\u0026#34;: [ { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;r\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.rename\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;w\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;:w!\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;q\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;:q!\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;x\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;:x!\u0026#34; ] }, { \u0026#34;after\u0026#34;: [ \u0026#34;g\u0026#34;, \u0026#34;g\u0026#34;, \u0026#34;V\u0026#34;, \u0026#34;G\u0026#34; ], \u0026#34;before\u0026#34;: [ \u0026#34;\u0026lt;c-a\u0026gt;\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;\u0026lt;leader\u0026gt;\u0026#34;, \u0026#34;k\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.showHover\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;[\u0026#34;, \u0026#34;d\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.marker.prev\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;]\u0026#34;, \u0026#34;d\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.marker.next\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;\u0026lt;leader\u0026gt;\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;a\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.quickFix\u0026#34; ] }, { \u0026#34;after\u0026#34;: [ \u0026#34;^\u0026#34; ], \u0026#34;before\u0026#34;: [ \u0026#34;H\u0026#34; ] }, { \u0026#34;after\u0026#34;: [ \u0026#34;$\u0026#34; ], \u0026#34;before\u0026#34;: [ \u0026#34;L\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;i\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;extension.toggleBool\u0026#34; ] } ], \u0026#34;vim.useSystemClipboard\u0026#34;: true, \u0026#34;window.zoomLevel\u0026#34;: 1, \u0026#34;workbench.iconTheme\u0026#34;: \u0026#34;Monokai Pro Icons\u0026#34;, \u0026#34;workbench.settings.editor\u0026#34;: \u0026#34;json\u0026#34;, \u0026#34;workbench.startupEditor\u0026#34;: \u0026#34;readme\u0026#34;, \u0026#34;zenMode.hideLineNumbers\u0026#34;: false, \u0026#34;vsicons.dontShowNewVersionMessage\u0026#34;: true, \u0026#34;[jsonc]\u0026#34;: { \u0026#34;editor.quickSuggestions\u0026#34;: { \u0026#34;strings\u0026#34;: true }, \u0026#34;editor.suggest.insertMode\u0026#34;: \u0026#34;replace\u0026#34; }, \u0026#34;terminal.integrated.defaultProfile.windows\u0026#34;: \u0026#34;Command Prompt\u0026#34;, \u0026#34;terminal.explorerKind\u0026#34;: \u0026#34;external\u0026#34;, \u0026#34;security.workspace.trust.enabled\u0026#34;: false, \u0026#34;typescript.disableAutomaticTypeAcquisition\u0026#34;: true, \u0026#34;git.enableSmartCommit\u0026#34;: true, \u0026#34;git.openRepositoryInParentFolders\u0026#34;: \u0026#34;always\u0026#34;, \u0026#34;files.autoGuessEncoding\u0026#34;: true, \u0026#34;code-runner.languageIdToFileExtensionMap\u0026#34;: { \u0026#34;bat\u0026#34;: \u0026#34;.bat\u0026#34;, \u0026#34;powershell\u0026#34;: \u0026#34;.ps1\u0026#34;, \u0026#34;typescript\u0026#34;: \u0026#34;.ts\u0026#34; }, \u0026#34;vim.easymotion\u0026#34;: true, // \u0026#34;editor.formatOnType\u0026#34;: true, // \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;go.formatTool\u0026#34;: \u0026#34;gofmt\u0026#34;, \u0026#34;[go]\u0026#34;: { \u0026#34;editor.insertSpaces\u0026#34;: true, \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;editor.codeActionsOnSave\u0026#34;: { \u0026#34;source.organizeImports\u0026#34;: \u0026#34;explicit\u0026#34; }, \u0026#34;editor.suggest.snippetsPreventQuickSuggestions\u0026#34;: false }, \u0026#34;animations.Install-Method\u0026#34;: \u0026#34;Custom CSS and JS\u0026#34;, \u0026#34;apc.imports\u0026#34;: [ \u0026#34;file:///c:/Users/zhang/.vscode/extensions/brandonkirbyson.vscode-animations-2.0.3/dist/updateHandler.js\u0026#34; ], \u0026#34;animations.CursorAnimation\u0026#34;: true, \u0026#34;animations.CursorAnimationOptions\u0026#34;: { \u0026#34;Color\u0026#34;: \u0026#34;#ffb6c1\u0026#34;, \u0026#34;TrailLength\u0026#34;: 8 }, \u0026#34;animations.Smooth-Mode\u0026#34;: false, \u0026#34;marscode.codeCompletionPro\u0026#34;: { \u0026#34;enableCodeCompletionPro\u0026#34;: true }, \u0026#34;marscode.enableCodelens\u0026#34;: { \u0026#34;enableInlineUnitTest\u0026#34;: false, \u0026#34;enableInlineDocumentation\u0026#34;: false }, \u0026#34;vscode_custom_css.imports\u0026#34;: [ \u0026#34;file:///c:/Users/zhang/.vscode/extensions/brandonkirbyson.vscode-animations-2.0.4/dist/updateHandler.js\u0026#34; ] } ","permalink":"//localhost:1313/posts/vscodesetting%E9%85%8D%E7%BD%AE/","summary":"\u003cblockquote\u003e\n\u003cp\u003e我的 \u003ccode\u003evscode\u003c/code\u003e 的设置\u003ccode\u003e.json\u003c/code\u003e文件\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"20241112-设置\"\u003e2024.11.12 设置\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontSize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;cph.general.autoShowJudge\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.formatOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.formatOnType\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;files.autoSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;afterDelay\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;git.confirmSync\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;chat.editor.fontSize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;window.zoomLevel\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.mouseWheelZoom\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.wordWrap\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;on\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;debug.onTaskErrors\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;debugAnyway\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;explorer.confirmDelete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;extensions.experimental.affinity\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;asvetliakov.vscode-neovim\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;workbench.settings.applyToAllProfiles\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;editor.fontSize\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;go.delveConfig\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[javascript]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;esbenp.prettier-vscode\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[markdown]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;esbenp.prettier-vscode\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[prisma]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Prisma.prisma\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[typescript]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;esbenp.prettier-vscode\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[typescriptreact]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;esbenp.prettier-vscode\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.codeActionsOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;source.addMissingImports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;explicit\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;source.organizeImports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;explicit\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.cursorSmoothCaretAnimation\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;on\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.cursorSurroundingLines\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontFamily\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;CaskaydiaCove Nerd Font\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontLigatures\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;python.analysis.completeFunctionParens\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontSize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontWeight\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;300\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.formatOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.inlineSuggest.enabled\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.lineNumbers\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;relative\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.linkedEditing\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.smoothScrolling\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.stickyScroll.enabled\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.suggest.insertMode\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;replace\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.suggestFontSize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e14\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.wordWrap\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;on\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;errorLens.fontStyleItalic\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;everforest.italicKeywords\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;explorer.confirmDelete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;explorer.confirmDragAndDrop\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;extensions.autoUpdate\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;onlyEnabledExtensions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;extensions.ignoreRecommendations\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;files.exclude\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;**/node_modules\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;prettier.semi\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;prettier.singleAttributePerLine\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;prettier.singleQuote\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;prettier.trailingComma\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;all\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;projectManager.git.baseFolders\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;$home/workspace\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;projectManager.sortList\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Recent\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;sortJSON.orderOverride\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;main\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;module\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;types\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;typings\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;files\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;publishConfig\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;repository\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;scripts\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;prefix\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;body\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;sortJSON.orderUnderride\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;resolutions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;dependencies\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;devDependencies\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;peerDependencies\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;cSpell.userWords\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;typescript.preferences.importModuleSpecifier\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;relative\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;typescript.updateImportsOnFileMove.enabled\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;always\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;update.showReleaseNotes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.foldfix\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.highlightedyank.color\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;rgba(230, 97, 89, 0.7)\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.highlightedyank.enable\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.highlightedyank.textColor\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;white\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.hlsearch\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;space\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.normalModeKeyBindingsNonRecursive\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;r\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.rename\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;w\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;:w!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;q\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;:q!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;x\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;:x!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;after\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;g\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;g\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;V\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;G\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;c-a\u0026gt;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;leader\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;k\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.showHover\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;[\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;d\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.marker.prev\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;d\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.marker.next\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;leader\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;c\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.quickFix\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;after\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;^\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;H\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;after\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;$\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;L\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;i\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;extension.toggleBool\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.useSystemClipboard\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;window.zoomLevel\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;workbench.iconTheme\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Monokai Pro Icons\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;workbench.settings.editor\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;json\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;workbench.startupEditor\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;readme\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;zenMode.hideLineNumbers\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vsicons.dontShowNewVersionMessage\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[jsonc]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.quickSuggestions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;strings\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.suggest.insertMode\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;replace\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;terminal.integrated.defaultProfile.windows\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Command Prompt\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;terminal.explorerKind\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;external\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;security.workspace.trust.enabled\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;typescript.disableAutomaticTypeAcquisition\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;git.enableSmartCommit\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;git.openRepositoryInParentFolders\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;always\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;files.autoGuessEncoding\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;code-runner.languageIdToFileExtensionMap\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;bat\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.bat\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;powershell\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.ps1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;typescript\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.ts\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.easymotion\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"c1\"\u003e// \u0026#34;editor.formatOnType\u0026#34;: true,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// \u0026#34;editor.formatOnSave\u0026#34;: true,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;go.formatTool\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;gofmt\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[go]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.insertSpaces\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.formatOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.codeActionsOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;source.organizeImports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;explicit\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.suggest.snippetsPreventQuickSuggestions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;animations.Install-Method\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Custom CSS and JS\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;apc.imports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;file:///c:/Users/zhang/.vscode/extensions/brandonkirbyson.vscode-animations-2.0.3/dist/updateHandler.js\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;animations.CursorAnimation\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;animations.CursorAnimationOptions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;Color\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;#ffb6c1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;TrailLength\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;animations.Smooth-Mode\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;marscode.codeCompletionPro\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;enableCodeCompletionPro\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;marscode.enableCodelens\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;enableInlineUnitTest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;enableInlineDocumentation\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vscode_custom_css.imports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;file:///c:/Users/zhang/.vscode/extensions/brandonkirbyson.vscode-animations-2.0.4/dist/updateHandler.js\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"VsCodeSetting配置"},{"content":"通过hugo创建md文件 打开power shell , 输入 cd E:\\HugoSite\\Hugo\\CooperZhang (目标文件夹) 进入目标位置后 , 输入 hugo new content content\\posts\\要创建的md文件名称.md 回车 , 完成创建 ","permalink":"//localhost:1313/posts/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87hugo%E5%88%9B%E5%BB%BAmarkdown%E6%96%87%E4%BB%B6/","summary":"\u003ch1 id=\"通过hugo创建md文件\"\u003e通过hugo创建md文件\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e打开power shell , 输入 \u003ccode\u003e cd E:\\HugoSite\\Hugo\\CooperZhang\u003c/code\u003e (目标文件夹)\u003c/li\u003e\n\u003cli\u003e进入目标位置后 , 输入\u003ccode\u003e hugo new content content\\posts\\要创建的md文件名称.md\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e回车 , 完成创建\u003c/li\u003e\n\u003c/ol\u003e","title":"如何通过hugo创建markdown文件"},{"content":"goMall电商项目 搭建环境 选择 goland 脚手架 IDL\ncwgo : 自动生成客服端和服务端的代码 thriftgo : protobuf : 服务注册 与 服务发现 分布式部署\n计算机科学的问题都可以通过增加一层来解决 注册中心 配置管理 数据操作 前端 ","permalink":"//localhost:1313/posts/gomall%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE/","summary":"\u003ch1 id=\"gomall电商项目\"\u003egoMall电商项目\u003c/h1\u003e\n\u003ch2 id=\"搭建环境\"\u003e搭建环境\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e选择 goland\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"脚手架\"\u003e脚手架\u003c/h2\u003e\n\u003cp\u003eIDL\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003ecwgo\u003c/strong\u003e : 自动生成客服端和服务端的代码\u003c/li\u003e\n\u003cli\u003ethriftgo :\u003c/li\u003e\n\u003cli\u003eprotobuf :\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"服务注册-与-服务发现\"\u003e服务注册 与 服务发现\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e分布式部署\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003col\u003e\n\u003cli\u003e计算机科学的问题都可以通过增加一层来解决\u003c/li\u003e\n\u003cli\u003e注册中心\u003c/li\u003e\n\u003cli\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"配置管理\"\u003e配置管理\u003c/h2\u003e\n\u003ch2 id=\"数据操作\"\u003e数据操作\u003c/h2\u003e\n\u003ch2 id=\"前端\"\u003e前端\u003c/h2\u003e","title":"GoMall电商项目"},{"content":" 正常: 买入 加粗: 卖出 名称 时间 成交额 💵 发仔 2024.1016 1535 发仔 2024.1104 1651 +116 ","permalink":"//localhost:1313/posts/economyz/","summary":"\u003cul\u003e\n\u003cli\u003e正常: 买入\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e加粗: 卖出\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: center\"\u003e名称\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e时间\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e成交额\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e💵\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e发仔\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e2024.1016\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e1535\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003cstrong\u003e发仔\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003cstrong\u003e2024.1104\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003cstrong\u003e1651\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003cstrong\u003e+116\u003c/strong\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"EconomyZ"},{"content":"字节训练营 结营要求 刷题打卡 \u0026gt; 50\n每天3题\n博客要写至少6篇\n课程 第一门课程 Go 语言上手-基础语言，也就是说现在你们听的这门课程。 主要讲述语言基础语法、入门实战 第二门课程 Go 语言上手-工程实践 主要讲述 并发编程、依赖管理、单元测试、项目实战 第三门课程 高质量编程与性能调优实战。主要讲述 编码规范、性能优化建议、性能分析工具使用、性能优化流程 第四门课程 高性能 Go 语言发行版优化与落地实践。主要讲述 自动内存管理、Go 内存管理及优化、编译器和静态分析、Go 编译器优化 并发编程 协程 通道 sync 测试 HTTP协议 超文本传输协议包含\n请求行 请求头 请求体 传输的包大部分是4k以下\n“Benchmark” “Benchmark” 是一个评估性能或效率的标准或测试。\n在计算机科学和程序开发中，它通常指以下几个方面：\n性能测试： 用于衡量程序、算法或系统在特定条件下的运行效率。常见的基准测试包括处理速度、内存使用、响应时间等。 基准工具： 一些工具和框架专门用于执行基准测试，帮助开发者比较不同实现或版本的性能表现。例如，Go 语言内置的 testing 包支持基准测试，通过 Benchmark 函数来评估代码执行的速度。 行业标准： 行业内的基准参考，用于对比不同产品或服务的性能。例如，计算机硬件的性能基准，可以帮助用户选择合适的设备。 基准测试示例（Go 语言） 在 Go 语言中，你可以使用以下方式进行基准测试：\npackage main import ( \u0026#34;testing\u0026#34; ) // 被测试的函数 func add(a, b int) int { return a + b } // 基准测试 func BenchmarkAdd(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { add(1, 2) } } 刷题笔记 打开抖音互联网发生什么 熟悉TCP/IP , 计算机网络\n协议 打开抖音发生了什么过程 连入互联网 路由 , 交换机 , 网络虚拟化 跨网段 路由不是对称的: 多路 图 路由协议 工作在ip层 但也没这么简单 路由不改IP地址 , 路由是改Mac 找到发包口 ARP协议 广播 , 免费ARP协议 ARP代理 IPV6 , ip冲突情况 解决方案 IP协议 , mac 地址不能代替ip地址 , 向下兼容 协议 ipv4 不够用 , 解决 , NAT , 网路打通后 , 视频下载\n网络传输 , 数据包 DNS请求 UDP协议 , 分片 , 丢包 , 传输效率 和质量 TCP 协议 3次握手 , timewait , HTTP / HTTP 1.1 HTTPS 加密 SSL/TLS 握手 , 对称和非对称加密 网络架构给抖音提质 网络提速\n网络提速 HTTP2.0 , 多路复用 , stream , TCP丢包怎么办 , 对头阻塞 如何解决 , QUIC / HTTP3.0 , UDP 还是TCP , kernel 还是usersapce , 0 RRT , 弱网优势 路径优化\n数据中心分布 同运营商访问 , 通过解析 分析IP 静态资源 路径优化 CDN , 静态缓存 , 边缘机房 \u0026mdash;\u0026gt; 汇聚机房 \u0026mdash;\u0026gt; 核心机房 访问 动态API 播放 评论接口 , 路径优化 DSA 网络稳定\n容灾概念 , 故障发生 - 故障感知- 自动切换 - 服务恢复 故障排除: 故障明确 - 故障止损 - 分段排查 (客户端 , 服务端 , 中间链路) 故障预防 : 监控报警 - 故障演练 - 故障降级 / 止损 网络接入的问题 域名系统\nhost管理 , 面临很多问题 域名系统 替换 host 域名购买 , 配置迁移 开放外部用户访问 , 建设外部网站 自建DNS服务器\nDNS查询过程 DNS 记录类型 权威DNS系统架构 接入HTTPS\n对称加密 和 非对称加密 SSL的 通信过程 证书链 使用 HTTPS 接入全站加速\n全站加速 = 静态加速 + 动态加速\n静态加速 CDN , 缓存 动态加速 DCDN , 原理 , 全站加速应用场景 : 用户登录 : 动态加速 , 短视频加载观看 : 静态加速 , 网页浏览 : 静态加速 + 动态加速 ","permalink":"//localhost:1313/posts/%E5%AD%97%E8%8A%82%E8%AE%AD%E7%BB%83%E8%90%A5%E8%AE%B0%E5%BD%95/","summary":"\u003ch1 id=\"字节训练营\"\u003e字节训练营\u003c/h1\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241101193517595\" loading=\"lazy\" src=\"../img/image-20241101193517595.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241101193517595\" loading=\"lazy\" src=\"./img/image-20241101193517595.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"结营要求\"\u003e结营要求\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e刷题打卡 \u0026gt; 50\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e每天3题\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e博客要写至少6篇\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"课程\"\u003e课程\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e第一门课程 Go 语言上手-基础语言，也就是说现在你们听的这门课程。 主要讲述语言基础语法、入门实战\u003c/li\u003e\n\u003cli\u003e第二门课程 Go 语言上手-工程实践 主要讲述 并发编程、依赖管理、单元测试、项目实战\u003c/li\u003e\n\u003cli\u003e第三门课程 高质量编程与性能调优实战。主要讲述 编码规范、性能优化建议、性能分析工具使用、性能优化流程\u003c/li\u003e\n\u003cli\u003e第四门课程 高性能 Go 语言发行版优化与落地实践。主要讲述 自动内存管理、Go 内存管理及优化、编译器和静态分析、Go 编译器优化\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241101230232086\" loading=\"lazy\" src=\"../img/image-20241101230232086.png\"\u003e\u003c/p\u003e","title":"字节训练营记录"},{"content":"二分 整数二分算法模板 —— 模板题 AcWing 789. 数的范围\ncpp除法默认是向下取整: 如 5 / 2 = 2 上取整 ==\u0026gt; 5 / 2 = 3 ==\u0026gt; 5+1 \u0026gt;\u0026gt; 1\n下取整 ==\u0026gt; 5 / 2 = 2\n\u0026gt;\u0026gt; 右移运算符（Bitwise Right Shift）\n用于将一个整数的二进制位向右移动指定的位数。每右移一位，相当于将数值除以 2。\nint x = 8; // 二进制 1000 int y = x \u0026gt;\u0026gt; 2; // 结果是 2，二进制 0010 模板 整数数组必须是升序排列\nL和R 都是下标\n确定 mid(坐标) , 然后套模板\n**L L L mid mid+1 r r r\t//mid 在左边 , mid = L + r \u0026raquo; 1 , 自动取左 **\n(尽量选 mid 在左边)\nL L L mid-1 mid r r r //mid 在右边 , mid = L + r + 1 \u0026raquo; 1\nbool check(int x) { /* ... */ } // 检查x是否满足某种性质 // 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用： l l l mid mid+1 r r r\t//mid 在左边 , l + r \u0026gt;\u0026gt; 1 , 自动取左 int bsearch_1(int l, int r) { while (l \u0026lt; r) { int mid = l + r \u0026gt;\u0026gt; 1; if (check(mid)) r = mid; // check()判断mid是否满足性质 else l = mid + 1; } return l; } // 向上取整 // ------------------------------------------------------------------------ // 向下取整 // 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用： l l l mid-1 mid r r r //mid 在右边 , l + r + 1 \u0026gt;\u0026gt; 1 int bsearch_2(int l, int r) { while (l \u0026lt; r) { int mid = l + r + 1 \u0026gt;\u0026gt; 1; if (check(mid)) l = mid; else r = mid - 1; } return l; } 如果数据单调, 意味着可以二分\n二分就是找两段不同性质数据的分界点\n浮点数二分算法模板 —— 模板题 AcWing 790. 数的三次方根\nbool check(double x) {/* ... */} // 检查x是否满足某种性质 double bsearch_3(double l, double r) { const double eps = 1e-6; // eps 表示精度，取决于题目对精度的要求 while (r - l \u0026gt; eps) { double mid = (l + r) / 2; if (check(mid)) r = mid; else l = mid; } return l; } 前缀和 作用 : 快速求出一个区间的和 , O(1) S[i] 为前缀和\nS[i] = a[1]+ a[2] + .... + a[i] , S[0] = 0 (默认) S[i] = S[i-1] + a[i] 求a数组中任意区间[l,r]的和 : S[r] - S[l-1] , 注意是求的是第 L 个 到 第 R 个数的和 (不是下标) s[R] = a[1] + ... + a[L-1] + a[L] + ... + a[R] s[L - 1] = a[1] + ... + a[L-1] //结论 s[R] - s[L - 1] = a[L] + ... + a[R] 差分 yxc: 差分是前缀和的逆运算 a1 a2 ... an //数组前缀和 构造 b1 b2 ... bn 使得 ai = b1 + b2 + ... + bi b1 = a1 b2 = a2 - a1 b3 = a3 - a2 ... bn = a_n - a_n-1 可以实现 O(1) 时间把某一个数组区间的每一个值加上一个值 X\nexample: // a 是原数组 , b 是差分数组 b_l + x b_r+1 - x 一开始可以把a看成 0 0 0 \u0026hellip; 0 通过插入insert操作得到a数组 void insert(int l, int r, int c) { b[l] += c; b[r + 1] -= c; } 林小鹿: 类似于数学中的求导和积分，差分可以看成前缀和的逆运算。 差分数组：\n首先给定一个原数组a：a[1], a[2], a[3],,,,,, a[n];\n然后我们构造一个数组b ： b[1] ,b[2] , b[3],,,,,, b[i];\n使得 a[i] = b[1] + b[2 ]+ b[3] +,,,,,, + b[i]\n也就是说，a数组是b数组的前缀和数组，反过来我们把b数组叫做a数组的差分数组。换句话说，每一个a[i]都是b数组中从头开始的一段区间和。\n考虑如何构造差分b数组？\n最为直接的方法\n如下：\na[0 ]= 0; b[1] = a[1] - a[0]; b[2] = a[2] - a[1]; b[3] =a [3] - a[2]; ........ b[n] = a[n] - a[n-1]; 我们只要有b数组，通过前缀和运算，就可以在O(n) 的时间内得到a数组 。\n知道了差分数组有什么用呢？ 别着急，慢慢往下看。\n话说有这么一个问题：\n给定区间[l ,r ]，让我们把a数组中的[ l, r]区间中的每一个数都加上c,即 a[l] + c , a[l+1] + c , a[l+2] + c ,,,,,, a[r] + c;\n暴力做法是for循环l到r区间，时间复杂度O(n)，如果我们需要对原数组执行m次这样的操作，时间复杂度就会变成O(n*m)。有没有更高效的做法吗? 考虑差分做法。\n始终要记得，a数组是b数组的前缀和数组，比如对b数组的b[i]的修改，会影响到a数组中从a[i]及往后的每一个数。\n首先让差分b数组中的 b[l] + c ,a数组变成 a[l] + c ,a[l+1] + c,,,,,, a[n] + c;\n然后我们打个补丁，b[r+1] - c, a数组变成 a[r+1] - c,a[r+2] - c,,,,,,,a[n] - c;\n为啥还要打个补丁？\nb[l] + c，效果使得a数组中 a[l]及以后的数都加上了c(红色部分)，但我们只要求l到r区间加上c, 因此还需要执行 b[r+1] - c,让a数组中a[r+1]及往后的区间再减去c(绿色部分)，这样对于a[r] 以后区间的数相当于没有发生改变。\n因此我们得出一维差分结论：给a数组中的[ l, r]区间中的每一个数都加上c,只需对差分数组b做 b[l] + = c, b[r+1] - = c。时间复杂度为O(1), 大大提高了效率。\n//差分 时间复杂度 o(m) #include\u0026lt;iostream\u0026gt; using namespace std; const int N = 1e5 + 10; int a[N], b[N]; int main() { int n, m; scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;n, \u0026amp;m); for (int i = 1; i \u0026lt;= n; i++) { scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i]); b[i] = a[i] - a[i - 1]; //构建差分数组 } int l, r, c; while (m--) { scanf(\u0026#34;%d%d%d\u0026#34;, \u0026amp;l, \u0026amp;r, \u0026amp;c); b[l] += c; //将序列中[l, r]之间的每个数都加上c b[r + 1] -= c; } for (int i = 1; i \u0026lt;= n; i++) { a[i] = b[i] + a[i - 1]; //前缀和运算 printf(\u0026#34;%d \u0026#34;, a[i]); } return 0; } 双指针 (双指针) O(n) 必要条件 先考虑暴力方式 确定目标数组的单调性 i从 0开始 从前往后遍历 j从 m - 1开始 从后向前遍历 #include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; const int N = 10001; int a[N], b[N]; int main() { int n, m, x; cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m \u0026gt;\u0026gt; x; for (int i = 0; i \u0026lt; n; i++) cin \u0026gt;\u0026gt; a[i]; for (int i = 0; i \u0026lt; m; i++) cin \u0026gt;\u0026gt; b[i]; // sort(a,a+n); // sort(b,b+m); //必须保证两个数组都是单调的 for (int i = 0, j = m - 1; i \u0026lt; n; i++) { while( j \u0026gt;= 0 \u0026amp;\u0026amp; a[i] + b[j] \u0026gt; x) { j--; } if(a[i] + b[j] == x) { cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; j; break; } } return 0; } #include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; const int N = 100100; int a[N], b[N]; int main() { int n; cin \u0026gt;\u0026gt; n; for (int i = 0; i \u0026lt; n; i++) { cin \u0026gt;\u0026gt; a[i]; } int ans = 0; for (int i = 0, j = 0; i \u0026lt; n; i++) { b[a[i]]++; while (b[a[i]] \u0026gt; 1) { b[a[j]]--; j++; } ans = max(ans, i - j + 1); } cout \u0026lt;\u0026lt; ans; return 0; } 归并排序 分治 模板 void merge_sort(int q[], int l, int r) { if (l \u0026gt;= r) return; int mid = l + r \u0026gt;\u0026gt; 1; merge_sort(q, l, mid); merge_sort(q, mid + 1, r); int k = 0, i = l, j = mid + 1; while (i \u0026lt;= mid \u0026amp;\u0026amp; j \u0026lt;= r) if (q[i] \u0026lt;= q[j]) tmp[k ++ ] = q[i ++ ]; else tmp[k ++ ] = q[j ++ ]; while (i \u0026lt;= mid) tmp[k ++ ] = q[i ++ ]; while (j \u0026lt;= r) tmp[k ++ ] = q[j ++ ]; for (i = l, j = 0; i \u0026lt;= r; i ++, j ++ ) q[i] = tmp[j]; } L L L r r r\n确定分界点 递归排序 left right 归并 \u0026ndash; 合二为一 多路归并 重点是 merge() 函数\n贡献法 是一种数学思想 原本是对矩阵的行进行操作, 换一种方式, 变成对矩阵的列进行操作 孤独的区间 , 只有1个 n➡️ 0 1 2 \u0026hellip; n 所有区间⬇️ 子串是连续的\n日期问题 求闰年模板 const int months[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; // 一三五七八十蜡，三十一天永不差 // 一、1、3、5、7、8、10、12 每月31天，4、6、9、11为30天。 二、2月正常为28天，如果为闰年，则多一天为29天。 int is_leap(int year) //判断闰年 { if (year % 4 == 0 \u0026amp;\u0026amp; year % 100 || year % 400 == 0) return 1; return 0; } int get_days(int y, int m) { if ( m == 2) return 28 + is_leap(y); } int months[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; bool check(int date) // 判断日期是否合法 { int year = date / 10000; int month = date % 10000 / 100; int day = date % 100; if (!day || month \u0026lt; 0 || month \u0026gt; 12) return false; if (month != 2 \u0026amp;\u0026amp; day \u0026gt; months[month]) return false; if (month == 2) { if ((year % 4 == 0 \u0026amp;\u0026amp; year % 100 != 0) || (year % 400 == 0)) // 闰年特判 { if (day \u0026gt; 29) return false; } else { if (day \u0026gt; 28) return false; } } return true; } 求区间天数 思想是计算各个日期到公元1.1.1的天数, 再将计算结果相减+1 , 得到结果\n模板\nint months[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; //\t一 三 五 七 八 十 蜡，三十一天永不差 //或 const int months[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;string\u0026gt; using namespace std; int months[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; int day(int n) { int y = n / 10000; // 年 int m = n % 10000 / 100; // 月 int d = n % 10000 % 100; // 日 // 首先更新一下计算年份的二月天数有多少 // 闰年包括普通闰年和世纪闰年 // 普通闰年年分是4倍数不是100倍数（），世纪闰年是400的倍数， // 即100的倍数不是4的倍数不是闰年，如1900 // 判断闰年 if (y % 4 == 0 \u0026amp;\u0026amp; y % 100 != 0 || y % 400 == 0) months[2] = 29; else // 不加这个会错 months[2] = 28; //统计当前年份的总天数 (今年的天数) while (m--) d += months[m]; //计算从公元1年开始开始，一直到\u0026lt;去年\u0026gt;最后一天,不是到0000年 while (y--) d += (y % 4 == 0 \u0026amp;\u0026amp; y % 100 != 0 || y % 400 == 0 ? 366 : 365); // 闰年366天，平年365天 return d; } int main() { int a, b; while (cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b) cout \u0026lt;\u0026lt; abs(day(a) - day(b)) + 1 \u0026lt;\u0026lt; endl; // 由题所示“如果两个日期是连续的我们规定他们之间的天数为两天”，因此我们加一 return 0; } 区间合并 任意多个区间的范围有交集, 快速把这几个区间合并\n贪心思想\n模板ycx\n// 将所有存在交集的区间合并 void merge(vector\u0026lt;PII\u0026gt; \u0026amp;segs) { vector\u0026lt;PII\u0026gt; res; sort(segs.begin(), segs.end()); int st = -2e9, ed = -2e9; for (auto seg : segs) if (ed \u0026lt; seg.first) { if (st != -2e9) res.push_back({st, ed}); st = seg.first, ed = seg.second; } else ed = max(ed, seg.second); if (st != -2e9) res.push_back({st, ed}); segs = res; } 按区间左端点排序\nstart_________________________end 三种情况⬇️\n​ f\u0026mdash;\u0026ndash;s 在区间内 这情况等于不用操作 ​ f\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-s 右端点超出 ​ f\u0026mdash;\u0026mdash;\u0026mdash;-s 全部超出 void merge(vector\u0026lt;Pii\u0026gt; \u0026amp;segment) { vector\u0026lt;Pii\u0026gt; ans; sort(segment.begin(), segment.end()); // 默认排序左端点 int start = -2e9, end = -2e9; for (auto seg : segment) { if (end \u0026lt; seg.first) { if (start != -2e9) // 没有交集 ans.push_back({start, end}); start = seg.first, end = seg.second; } else { end = max(end, seg.second); //合并情况不添加ans } } if (start != -2e9) // 防止vector是空集 , 空集就是也是一个区间 ans.push_back({start, end}); segment = ans; } 递归 ","permalink":"//localhost:1313/posts/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%A4%87%E6%88%98/","summary":"\u003ch1 id=\"二分\"\u003e二分\u003c/h1\u003e\n\u003ch2 id=\"整数二分算法模板\"\u003e\u003cem\u003e整数\u003c/em\u003e二分算法模板\u003c/h2\u003e\n\u003cp\u003e—— 模板题 AcWing 789. 数的范围\u003c/p\u003e\n\u003cp\u003ecpp除法默认是向下取整: 如 \u003ccode\u003e5 / 2 = 2 \u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e上取整 ==\u0026gt; \u003ccode\u003e5 / 2 = 3\u003c/code\u003e  ==\u0026gt;  \u003ccode\u003e5+1 \u0026gt;\u0026gt; 1\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e下取整 ==\u0026gt; \u003ccode\u003e5 / 2 = 2\u003c/code\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003e\u0026gt;\u0026gt; \u003c/code\u003e \u003cstrong\u003e右移运算符（Bitwise Right Shift）\u003c/strong\u003e\u003c/p\u003e","title":"蓝桥杯备战"},{"content":"参考链接: CSDN Qt Creator打造VScode one dark pro主题配色\n代码部分\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;style-scheme version=\u0026#34;1.0\u0026#34; name=\u0026#34;One Dark\u0026#34;\u0026gt; \u0026lt;style name=\u0026#34;Text\u0026#34; foreground=\u0026#34;#abb2bf\u0026#34; background=\u0026#34;#282c34\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Link\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Selection\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LineNumber\u0026#34; foreground=\u0026#34;#4b5363\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;SearchResult\u0026#34; background=\u0026#34;#324365\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;SearchScope\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Parentheses\u0026#34; underlineColor=\u0026#34;#61afef\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;ParenthesesMismatch\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;AutoComplete\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;CurrentLine\u0026#34; background=\u0026#34;#3a3f4b\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;CurrentLineNumber\u0026#34; foreground=\u0026#34;#777c87\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Occurrences\u0026#34; background=\u0026#34;#324365\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Occurrences.Unused\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;DashUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Occurrences.Rename\u0026#34; background=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Number\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;String\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Type\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Local\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Global\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Field\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Static\u0026#34; foreground=\u0026#34;#61afef\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;VirtualMethod\u0026#34; foreground=\u0026#34;#61afef\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Function\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Keyword\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;PrimitiveType\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Operator\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Overloaded Operator\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Punctuation\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Preprocessor\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Label\u0026#34; foreground=\u0026#34;#e06c75\u0026#34; bold=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Comment\u0026#34; foreground=\u0026#34;#5c6370\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Doxygen.Comment\u0026#34; foreground=\u0026#34;#5c6370\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Doxygen.Tag\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;VisualWhitespace\u0026#34; foreground=\u0026#34;#3c4049\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlLocalId\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlExternalId\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlTypeId\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlRootObjectProperty\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlScopeObjectProperty\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlExternalObjectProperty\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;JsScopeVar\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;JsImportVar\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;JsGlobalVar\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlStateName\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Binding\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DisabledCode\u0026#34; foreground=\u0026#34;#5c6370\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;AddedLine\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;RemovedLine\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffFile\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffLocation\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffFileLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#e5c07b\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffContextLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#56b6c2\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffSourceLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#be5046\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffSourceChar\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffDestLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#789353\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffDestChar\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#98c379\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogChangeLine\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogAuthorName\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogCommitDate\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogCommitHash\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogCommitSubject\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogDecoration\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Warning\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;WarningContext\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;DotLine\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Error\u0026#34; underlineColor=\u0026#34;#e06c75\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;ErrorContext\u0026#34; underlineColor=\u0026#34;#e06c75\u0026#34; underlineStyle=\u0026#34;DotLine\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Declaration\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;FunctionDefinition\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;OutputArgument\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LastStyleSentinel\u0026#34;/\u0026gt; \u0026lt;/style-scheme\u0026gt; 主题设置\n[General] ThemeName=One Dark PreferredStyles=Fusion DefaultTextEditorColorScheme=onedark.xml [Palette] shadowBackground=ff21252b text=ffabb2bf textDisabled=99abb2bf textHighlighted=ffd7dae0 toolBarItem=ffabb2bf toolBarItemDisabled=99abb2bf fancyBarsNormalTextColor=ffabb2bf fancyBarsBoldTextColor=ffabb2bf hoverBackground=ff31363f selectedBackground=ff3a3f4b selectedBackgroundText=ffd7dae0 normalBackground=ff282c34 alternateBackground=ff31363f error=ffe06c75 warning=ffe5c07b success=ff98c379 message=ff61afef splitter=ff181a1f textColorLink=61afef textColorLinkVisited=c678dd backgroundColorDisabled=ff21252b [Colors] ;DS controls theme START DScontrolBackground=normalBackground DScontrolOutline=splitter DStextColor=text DSdisabledTextColor=textDisabled DSpanelBackground=ff454444 DShoverHighlight=hoverBackground DScolumnBackground=ff363636 DSfocusEdit=normalBackground DSfocusDrag=ff565656 DScontrolBackgroundPressed=selectedBackground DScontrolBackgroundChecked=selectedBackground DSinteraction=selectedBackground DSsliderActiveTrack=ff7a7a7a DSsliderInactiveTrack=ff4d4d4d DSsliderHandle=ff4b5362 DSsliderActiveTrackHover=ff7f7f7f DSsliderInactiveTrackHover=ff505050 DSsliderHandleHover=ff7a7a7a DSsliderActiveTrackFocus=ffaaaaaa DSsliderInactiveTrackFocus=ff7a7a7a DSsliderHandleFocus=ff1d545c DSerrorColor=error DScontrolBackgroundDisabled=backgroundColorDisabled DScontrolOutlineDisabled=ff4d4d4d DStextColorDisabled=textDisabled DStextSelectionColor=selectedBackground DStextSelectedTextColor=selectedBackgroundText DSscrollBarTrack=ff4d4d4d DSscrollBarHandle=ff4b5362 DScontrolBackgroundInteraction=ff4d4d4d DStranslationIndicatorBorder=splitter DSsectionHeadBackground=alternateBackground DSchangedStateText=message DS3DAxisXColor=error DS3DAxisYColor=success DS3DAxisZColor=message ;DS controls theme END BackgroundColorAlternate=alternateBackground BackgroundColorDark=shadowBackground BackgroundColorHover=hoverBackground BackgroundColorNormal=normalBackground BackgroundColorDisabled=backgroundColorDisabled BackgroundColorSelected=selectedBackground BadgeLabelBackgroundColorChecked=text BadgeLabelBackgroundColorUnchecked=text BadgeLabelTextColorChecked=normalBackground BadgeLabelTextColorUnchecked=normalBackground CanceledSearchTextColor=error ComboBoxArrowColor=toolBarItem ComboBoxArrowColorDisabled=toolBarItemDisabled ComboBoxTextColor=fancyBarsNormalTextColor DetailsButtonBackgroundColorHover=hoverBackground DetailsWidgetBackgroundColor=shadowBackground DockWidgetResizeHandleColor=splitter DoubleTabWidget1stSeparatorColor=splitter DoubleTabWidget1stTabActiveTextColor=text DoubleTabWidget1stTabBackgroundColor=normalBackground DoubleTabWidget1stTabInactiveTextColor=text DoubleTabWidget2ndSeparatorColor=toolBarItemDisabled DoubleTabWidget2ndTabActiveTextColor=text DoubleTabWidget2ndTabBackgroundColor=selectedBackground DoubleTabWidget2ndTabInactiveTextColor=text EditorPlaceholderColor=shadowBackground FancyToolBarSeparatorColor=toolBarItemDisabled FancyTabBarBackgroundColor=shadowBackground FancyTabBarSelectedBackgroundColor=selectedBackground FancyTabWidgetDisabledSelectedTextColor=toolBarItemDisabled FancyTabWidgetDisabledUnselectedTextColor=toolBarItemDisabled FancyTabWidgetEnabledSelectedTextColor=fancyBarsBoldTextColor FancyTabWidgetEnabledUnselectedTextColor=fancyBarsBoldTextColor FancyToolButtonHoverColor=hoverBackground FancyToolButtonSelectedColor=selectedBackground FutureProgressBackgroundColor=shadowBackground IconsBaseColor=toolBarItem IconsDisabledColor=toolBarItemDisabled IconsInfoColor=message IconsInfoToolBarColor=message IconsWarningColor=warning IconsWarningToolBarColor=warning IconsErrorColor=error IconsErrorToolBarColor=error IconsRunColor=success IconsRunToolBarColor=success IconsStopColor=error IconsStopToolBarColor=error IconsInterruptColor=message IconsInterruptToolBarColor=message IconsDebugColor=toolBarItem IconsNavigationArrowsColor=warning IconsBuildHammerHandleColor=b06112 IconsBuildHammerHeadColor=toolBarItem IconsModeWelcomeActiveColor=success IconsModeEditActiveColor=message IconsModeDesignActiveColor=warning IconsModeDebugActiveColor=message IconsModeProjectActiveColor=success IconsModeAnalyzeActiveColor=message IconsModeHelpActiveColor=warning IconsCodeModelKeywordColor=ff777777 IconsCodeModelClassColor=ffc0b550 IconsCodeModelStructColor=ff53b053 IconsCodeModelFunctionColor=ffd34373 IconsCodeModelVariableColor=ff2bbbcc IconsCodeModelEnumColor=ffc0b550 IconsCodeModelMacroColor=ff476ba0 IconsCodeModelAttributeColor=ff316511 IconsCodeModelUniformColor=ff994899 IconsCodeModelVaryingColor=ffa08833 IconsCodeModelOverlayBackgroundColor=normalBackground IconsCodeModelOverlayForegroundColor=text InfoBarBackground=shadowBackground InfoBarText=text MenuBarEmptyAreaBackgroundColor=shadowBackground MenuBarItemBackgroundColor=shadowBackground MenuBarItemTextColorDisabled=textDisabled MenuBarItemTextColorNormal=text MenuItemTextColorDisabled=textDisabled MenuItemTextColorNormal=text MiniProjectTargetSelectorBackgroundColor=shadowBackground MiniProjectTargetSelectorBorderColor=shadowBackground MiniProjectTargetSelectorSummaryBackgroundColor=normalBackground MiniProjectTargetSelectorTextColor=fancyBarsNormalTextColor PanelStatusBarBackgroundColor=shadowBackground PanelsWidgetSeparatorLineColor=splitter PanelTextColorDark=text PanelTextColorMid=text PanelTextColorLight=textHighlighted ProgressBarColorError=error ProgressBarColorFinished=success ProgressBarColorNormal=message ProgressBarTitleColor=text ProgressBarBackgroundColor=alternateBackground SplitterColor=splitter TextColorDisabled=textDisabled TextColorError=error TextColorHighlight=textHighlighted TextColorHighlightBackground=hoverBackground TextColorLink=textColorLink TextColorLinkVisited=textColorLinkVisited TextColorNormal=text ToggleButtonBackgroundColor=shadowBackground ToolBarBackgroundColor=shadowBackground TreeViewArrowColorNormal=hoverBackground TreeViewArrowColorSelected=text OutputPanes_DebugTextColor=text OutputPanes_ErrorMessageTextColor=error OutputPanes_MessageOutput=message OutputPanes_NormalMessageTextColor=text OutputPanes_StdErrTextColor=error OutputPanes_StdOutTextColor=text OutputPanes_WarningMessageTextColor=warning OutputPanes_TestPassTextColor=success OutputPanes_TestFailTextColor=error OutputPanes_TestXFailTextColor=error OutputPanes_TestXPassTextColor=message OutputPanes_TestSkipTextColor=message OutputPanes_TestWarnTextColor=warning OutputPanes_TestFatalTextColor=error OutputPanes_TestDebugTextColor=text OutputPaneButtonFlashColor=error OutputPaneToggleButtonTextColorChecked=fancyBarsNormalTextColor OutputPaneToggleButtonTextColorUnchecked=fancyBarsNormalTextColor Debugger_LogWindow_LogInput=ff56b6c2 Debugger_LogWindow_LogStatus=message Debugger_LogWindow_LogTime=error Debugger_WatchItem_ValueNormal=text Debugger_WatchItem_ValueInvalid=textDisabled Debugger_WatchItem_ValueChanged=error Debugger_Breakpoint_TextMarkColor=message Welcome_TextColor=text Welcome_ForegroundPrimaryColor=text Welcome_ForegroundSecondaryColor=text Welcome_BackgroundColor=normalBackground Welcome_ButtonBackgroundColor=normalBackground Welcome_DividerColor=splitter Welcome_HoverColor=hoverBackground Welcome_LinkColor=textColorLink Welcome_DisabledLinkColor=textDisabled Timeline_TextColor=text Timeline_BackgroundColor1=normalBackground Timeline_BackgroundColor2=shadowBackground Timeline_DividerColor=splitter Timeline_HighlightColor=selectedBackground Timeline_PanelBackgroundColor=alternateBackground Timeline_PanelHeaderColor=normalBackground Timeline_HandleColor=ff4b5362 Timeline_RangeColor=selectedBackground VcsBase_FileStatusUnknown_TextColor=text VcsBase_FileAdded_TextColor=success VcsBase_FileModified_TextColor=warning VcsBase_FileDeleted_TextColor=error VcsBase_FileRenamed_TextColor=message VcsBase_FileUnmerged_TextColor=error Bookmarks_TextMarkColor=message TextEditor_SearchResult_ScrollBarColor=success TextEditor_CurrentLine_ScrollBarColor=message ProjectExplorer_TaskError_TextMarkColor=error ProjectExplorer_TaskWarn_TextMarkColor=warning CodeModel_Error_TextMarkColor=error CodeModel_Warning_TextMarkColor=warning QmlDesigner_BackgroundColor=normalBackground QmlDesigner_HighlightColor=selectedBackground QmlDesigner_FormEditorSelectionColor=message QmlDesigner_FormEditorForegroundColor=normalBackground QmlDesigner_BackgroundColorDarkAlternate=shadowBackground QmlDesigner_BackgroundColorDarker=splitter QmlDesigner_BorderColor=splitter QmlDesigner_ButtonColor=normalBackground QmlDesigner_TabDark=shadowBackground QmlDesigner_TabLight=text QmlDesigner_FormeditorBackgroundColor=normalBackground QmlDesigner_AlternateBackgroundColor=alternateBackground QmlDesigner_ScrollBarHandleColor=ff4b5362 PaletteWindow=shadowBackground PaletteWindowText=text PaletteBase=normalBackground PaletteAlternateBase=alternateBackground PaletteButton=shadowBackground PaletteBrightText=error PaletteText=text PaletteButtonText=text PaletteButtonTextDisabled=textDisabled PaletteToolTipBase=hoverBackground PaletteHighlight=selectedBackground PaletteDark=shadowBackground PaletteHighlightedText=selectedBackgroundText PaletteToolTipText=text PaletteLink=textColorLink PaletteLinkVisited=textColorLinkVisited PaletteWindowDisabled=backgroundColorDisabled PaletteWindowTextDisabled=textDisabled PaletteBaseDisabled=backgroundColorDisabled PaletteTextDisabled=textDisabled [Flags] ComboBoxDrawTextShadow=false DerivePaletteFromTheme=true DrawIndicatorBranch=true DrawSearchResultWidgetFrame=false DrawTargetSelectorBottom=false DrawToolBarHighlights=false DrawToolBarBorders=false ApplyThemePaletteGlobally=true FlatToolBars=true FlatSideBarIcons=true FlatProjectsMode=true FlatMenuBar=true ToolBarIconShadow=true WindowColorAsBase=true DarkUserInterface=true [Gradients] DetailsWidgetHeaderGradient\\1\\color=normalBackground DetailsWidgetHeaderGradient\\1\\pos=1 DetailsWidgetHeaderGradient\\size=1 ","permalink":"//localhost:1313/posts/qt%E4%B8%BB%E9%A2%98onedark%E8%AE%BE%E7%BD%AE/","summary":"\u003cp\u003e参考链接:  CSDN  \u003ca href=\"https://blog.csdn.net/qq_41980754/article/details/119861293\"\u003eQt Creator打造VScode one dark pro主题配色\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e代码部分\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\n\u0026lt;style-scheme version=\u0026#34;1.0\u0026#34; name=\u0026#34;One Dark\u0026#34;\u0026gt;\n  \u0026lt;style name=\u0026#34;Text\u0026#34; foreground=\u0026#34;#abb2bf\u0026#34; background=\u0026#34;#282c34\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Link\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Selection\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LineNumber\u0026#34; foreground=\u0026#34;#4b5363\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;SearchResult\u0026#34; background=\u0026#34;#324365\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;SearchScope\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Parentheses\u0026#34; underlineColor=\u0026#34;#61afef\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;ParenthesesMismatch\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;AutoComplete\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;CurrentLine\u0026#34; background=\u0026#34;#3a3f4b\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;CurrentLineNumber\u0026#34; foreground=\u0026#34;#777c87\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Occurrences\u0026#34; background=\u0026#34;#324365\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Occurrences.Unused\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;DashUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Occurrences.Rename\u0026#34; background=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Number\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;String\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Type\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Local\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Global\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Field\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Static\u0026#34; foreground=\u0026#34;#61afef\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;VirtualMethod\u0026#34; foreground=\u0026#34;#61afef\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Function\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Keyword\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;PrimitiveType\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Operator\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Overloaded Operator\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Punctuation\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Preprocessor\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Label\u0026#34; foreground=\u0026#34;#e06c75\u0026#34; bold=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Comment\u0026#34; foreground=\u0026#34;#5c6370\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Doxygen.Comment\u0026#34; foreground=\u0026#34;#5c6370\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Doxygen.Tag\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;VisualWhitespace\u0026#34; foreground=\u0026#34;#3c4049\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlLocalId\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlExternalId\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlTypeId\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlRootObjectProperty\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlScopeObjectProperty\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlExternalObjectProperty\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;JsScopeVar\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;JsImportVar\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;JsGlobalVar\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlStateName\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Binding\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DisabledCode\u0026#34; foreground=\u0026#34;#5c6370\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;AddedLine\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;RemovedLine\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffFile\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffLocation\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffFileLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#e5c07b\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffContextLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#56b6c2\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffSourceLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#be5046\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffSourceChar\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffDestLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#789353\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffDestChar\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#98c379\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogChangeLine\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogAuthorName\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogCommitDate\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogCommitHash\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogCommitSubject\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogDecoration\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Warning\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;WarningContext\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;DotLine\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Error\u0026#34; underlineColor=\u0026#34;#e06c75\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;ErrorContext\u0026#34; underlineColor=\u0026#34;#e06c75\u0026#34; underlineStyle=\u0026#34;DotLine\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Declaration\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;FunctionDefinition\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;OutputArgument\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LastStyleSentinel\u0026#34;/\u0026gt;\n\u0026lt;/style-scheme\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e主题设置\u003c/p\u003e","title":"Qt主题oneDark设置"},{"content":"在 Go 语言中，cnt := [2]int{} cnt 是一个变量，使用短变量声明 (:=) 定义。 [2]int 表示这是一个长度为 2 的 数组，数组的元素类型是 int。 {} 表示这个数组被初始化为零值，也就是所有的元素都被初始化为整型的零值 0。 示例代码 package main import \u0026#34;fmt\u0026#34; func main() { cnt := [2]int{} fmt.Println(cnt) // 输出: [0 0] } 细节 数组是固定长度的，[2]int 表示它的长度为 2，如果需要动态长度的集合，可以使用切片 ([]int)。\n如果你想明确初始化数组的值，可以写成这样：\ncnt := [2]int{1, 2} fmt.Println(cnt) // 输出: [1 2] 如果只部分初始化，未赋值的部分会使用零值：\ncnt := [2]int{1} fmt.Println(cnt) // 输出: [1 0] range循环时需要注意点 错误的代码：\nbanSet := make(map[string]struct{}) for word := range bannedWords { banSet[word] = struct{}{} } 是不正确的，因为 range 关键字在 Go 语言中用于遍历集合（如数组、切片、映射、字符串等）时，会同时返回索引和值。\n在你的写法中，for word := range bannedWords 只返回了 bannedWords 的索引（即数组或切片的索引），而不是你实际想要的单词。\n正确的写法应该是：\nbanSet := make(map[string]struct{}) for _, word := range bannedWords { banSet[word] = struct{}{} } 解释： for _, word := range bannedWords： range bannedWords 会返回两个值：第一个是索引，第二个是 bannedWords 中的每个元素（即单词）。 你用 _ 来忽略索引，因为你只关心单词 word。 为什么不能直接使用 for word := range bannedWords？ range bannedWords 实际上返回的是索引和值，for word := range bannedWords 只取了第一个值，也就是索引，而不是你期望的单词。 你需要第二个值（单词）来填充 banSet，因此你必须使用 for _, word := range bannedWords。 总结： 你需要在遍历 bannedWords 时获取每个单词的值，因此必须用 for _, word := range bannedWords。\n","permalink":"//localhost:1313/posts/go%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/","summary":"\u003ch1 id=\"在-go-语言中cnt--2int\"\u003e在 Go 语言中，\u003ccode\u003ecnt := [2]int{}\u003c/code\u003e\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecnt\u003c/code\u003e 是一个变量，使用短变量声明 (\u003ccode\u003e:=\u003c/code\u003e) 定义。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e[2]int\u003c/code\u003e 表示这是一个长度为 \u003ccode\u003e2\u003c/code\u003e 的 \u003cstrong\u003e数组\u003c/strong\u003e，数组的元素类型是 \u003ccode\u003eint\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e{}\u003c/code\u003e 表示这个数组被初始化为零值，也就是所有的元素都被初始化为整型的零值 \u003ccode\u003e0\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"示例代码\"\u003e示例代码\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003ecnt\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecnt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 输出: [0 0]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"细节\"\u003e细节\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e数组是固定长度的，\u003ccode\u003e[2]int\u003c/code\u003e 表示它的长度为 \u003ccode\u003e2\u003c/code\u003e，如果需要动态长度的集合，可以使用切片 (\u003ccode\u003e[]int\u003c/code\u003e)。\u003c/p\u003e","title":"Go的使用记录"},{"content":"Interstellar 星际穿越 My favorite movie, without a doubt.\n我最爱的电影。\n","permalink":"//localhost:1313/posts/interstellar/","summary":"\u003ch1 id=\"interstellar-星际穿越\"\u003eInterstellar 星际穿越\u003c/h1\u003e\n\u003cp\u003eMy favorite movie, \u003cstrong\u003ewithout a doubt\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e我最爱的电影。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20241009_233455.207.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20241009_233455.207.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20240917_220015.066.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20240917_220015.066.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20241019_170922.638.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20241019_170922.638.png\"\u003e\u003c/p\u003e","title":"Interstellar"},{"content":" 自我介绍 python有过深入了解吗？ 面向过程和面向对象哪一块用的比较多？那你用面向对象做了哪些工作 说一下C++的编译过程，编译过程中宏定义和const的区别是什么？在大型工程中用const好一些还是宏定义好一些？ 内联函数有了解过吗？讲一下。 虚函数 内联函数和虚函数谁的执行效率更快？为什么？那静态函数呢 静态函数和普通函数运行效率有什么差距吗？ 进程和线程？进程内存分布讲一下 堆和栈的区别 堆里面申请内存有哪些方式？new和malloc的区别 在构造函数里面能调用虚函数吗？为什么？如果子类在构造函数中调用了父类的虚函数会发生什么？ 在析构函数里面能不能抛出异常？如果抛出会发生什么 C++内存泄漏有哪些？一个类既不继承也不是子类，内部也没有虚函数，那他的析构函数需要声明为虚函数吗 C++发生内存泄漏有什么好的办法来解决这个问题？ 智能指针的实现原理是什么？循环引用如何解决 TCP和UDP的区别？ 平时玩游戏吗？LOL。你觉得LOL的战斗逻辑是如何发送到客户端上的？TCP还是UDP 平时有了解过帧同步和状态同步吗？ 设计模式有了解过吗？单例模式主要用于什么情况 比较大型的MVCC了解过吗 如果让你来设计一个LOL商城系统，有一些商城的数据，你会如何用代码来建这个商城？ 有1W个数字，找出最大的10个数字 O(N)的排序有哪些？讲一下基数排序和桶排序 20G的字符串，只有4G的内存，找到出现最多的前10个的字符串？ GPU的渲染(管线)了解过吗？图形学有学过吗？ 你为什么会选择来做游戏？更倾向于做客户端还是服务器的？ dota了解吗 给我简单介绍了一下帧同步和状态同步，然后有一个moba的游戏，使用帧同步还是状态同步？ 玩游戏时掉帧后恢复是使用的帧同步还是状态同步？ 提问环节：比较关注实习生的哪些技能和知识？核心的还是学习和反应能力，反应快的，有面向对象的大工程的经验。 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0421%E7%BD%91%E6%98%93%E4%BA%92%E5%A8%B1/","summary":"\u003col\u003e\n\u003cli\u003e自我介绍\u003c/li\u003e\n\u003cli\u003epython有过深入了解吗？\u003c/li\u003e\n\u003cli\u003e面向过程和面向对象哪一块用的比较多？那你用面向对象做了哪些工作\u003c/li\u003e\n\u003cli\u003e说一下C++的编译过程，编译过程中宏定义和const的区别是什么？在大型工程中用const好一些还是宏定义好一些？\u003c/li\u003e\n\u003cli\u003e内联函数有了解过吗？讲一下。\u003c/li\u003e\n\u003cli\u003e虚函数\u003c/li\u003e\n\u003cli\u003e内联函数和虚函数谁的执行效率更快？为什么？那静态函数呢\u003c/li\u003e\n\u003cli\u003e静态函数和普通函数运行效率有什么差距吗？\u003c/li\u003e\n\u003cli\u003e进程和线程？进程内存分布讲一下\u003c/li\u003e\n\u003cli\u003e堆和栈的区别\u003c/li\u003e\n\u003cli\u003e堆里面申请内存有哪些方式？new和malloc的区别\u003c/li\u003e\n\u003cli\u003e在构造函数里面能调用虚函数吗？为什么？如果子类在构造函数中调用了父类的虚函数会发生什么？\u003c/li\u003e\n\u003cli\u003e在析构函数里面能不能抛出异常？如果抛出会发生什么\u003c/li\u003e\n\u003cli\u003eC++内存泄漏有哪些？一个类既不继承也不是子类，内部也没有虚函数，那他的析构函数需要声明为虚函数吗\u003c/li\u003e\n\u003cli\u003eC++发生内存泄漏有什么好的办法来解决这个问题？\u003c/li\u003e\n\u003cli\u003e智能指针的实现原理是什么？循环引用如何解决\u003c/li\u003e\n\u003cli\u003eTCP和UDP的区别？\u003c/li\u003e\n\u003cli\u003e平时玩游戏吗？LOL。你觉得LOL的战斗逻辑是如何发送到客户端上的？TCP还是UDP\u003c/li\u003e\n\u003cli\u003e平时有了解过帧同步和状态同步吗？\u003c/li\u003e\n\u003cli\u003e设计模式有了解过吗？单例模式主要用于什么情况\u003c/li\u003e\n\u003cli\u003e比较大型的MVCC了解过吗\u003c/li\u003e\n\u003cli\u003e如果让你来设计一个LOL商城系统，有一些商城的数据，你会如何用代码来建这个商城？\u003c/li\u003e\n\u003cli\u003e有1W个数字，找出最大的10个数字\u003c/li\u003e\n\u003cli\u003eO(N)的排序有哪些？讲一下基数排序和桶排序\u003c/li\u003e\n\u003cli\u003e20G的字符串，只有4G的内存，找到出现最多的前10个的字符串？\u003c/li\u003e\n\u003cli\u003eGPU的渲染(管线)了解过吗？图形学有学过吗？\u003c/li\u003e\n\u003cli\u003e你为什么会选择来做游戏？更倾向于做客户端还是服务器的？\u003c/li\u003e\n\u003cli\u003edota了解吗\u003c/li\u003e\n\u003cli\u003e给我简单介绍了一下帧同步和状态同步，然后有一个moba的游戏，使用帧同步还是状态同步？\u003c/li\u003e\n\u003cli\u003e玩游戏时掉帧后恢复是使用的帧同步还是状态同步？\u003c/li\u003e\n\u003cli\u003e提问环节：比较关注实习生的哪些技能和知识？核心的还是学习和反应能力，反应快的，有面向对象的大工程的经验。\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0421网易互娱"},{"content":"2020.4.18\n一面 50min 在C++里面我们什么时候会把析构函数写为虚函数呢 C++中引用和指针有什么样的区别 右值引用，移动语义和完美转发在C++11中起到的作用 简单介绍一下RAII这个机制 简单介绍一下http请求和响应的结构 状态码分为几个类别 301和302这两个状态码有什么样的区别呢 断点续传的功能206 服务器什么时候返回304这个状态码，需要带上一些什么样的特征呢 能简单的介绍一下chunk transfer是一种什么样的传输方式呢 简单介绍一下linux下常用的IO多路复用模型 用epoll实现一个server时浏览器主动关闭了一个连接那么epoll收到的是什么事件呢 简单介绍一下惊群的现象是一个什么样的现象，有什么的办法解决这个现象呢 linux下单进程最大连接数受到哪些因素的限制呢 time_wait起到的作用，有什么办法降低这种状态的数量 编程题：编辑距离 二面 60min 讲一下进程和线程的区别 分页和分段的区别是什么 死锁和如何避免死锁 介绍一下TCP协议和UDP协议的区别 客户端发起连接以后，突然断电了，客户端断开了连接，会产生什么影响 TCP半连接状态解释一下 https密钥交互过程 close_wait的状态 499状态码 myisam和innoDB的区别 B+的调整过程 联合索引和最左原则 我们有哪些分表原则，在什么情况下使用这些分表原则 深浅拷贝解释一下，深浅拷贝的效率上有什么区别呢 栈溢出的原因 讲一下堆和栈的区别 编程题：判环和leetcode原题简化路径 三面 30min 输入网址后发生了什么 我经常会用一些CDN进行静态和动态的加速这个了解吗 DNS解析的时候DNS污染是怎么回事 mysql在分表时是怎么做的 mysql出现慢查询都有哪些原因 什么样的sql会产生IO瓶颈，什么样的sql会产生CPU瓶颈 TCP改成两次握手会产生什么现象，会有问题吗 http和https的区别是什么 编程题：矩阵中最长递增路径 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0418%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/","summary":"\u003cp\u003e2020.4.18\u003c/p\u003e\n\u003ch2 id=\"一面-50min\"\u003e一面 50min\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e在C++里面我们什么时候会把析构函数写为虚函数呢\u003c/li\u003e\n\u003cli\u003eC++中引用和指针有什么样的区别\u003c/li\u003e\n\u003cli\u003e右值引用，移动语义和完美转发在C++11中起到的作用\u003c/li\u003e\n\u003cli\u003e简单介绍一下RAII这个机制\u003c/li\u003e\n\u003cli\u003e简单介绍一下http请求和响应的结构\u003c/li\u003e\n\u003cli\u003e状态码分为几个类别\u003c/li\u003e\n\u003cli\u003e301和302这两个状态码有什么样的区别呢\u003c/li\u003e\n\u003cli\u003e断点续传的功能206\u003c/li\u003e\n\u003cli\u003e服务器什么时候返回304这个状态码，需要带上一些什么样的特征呢\u003c/li\u003e\n\u003cli\u003e能简单的介绍一下chunk transfer是一种什么样的传输方式呢\u003c/li\u003e\n\u003cli\u003e简单介绍一下linux下常用的IO多路复用模型\u003c/li\u003e\n\u003cli\u003e用epoll实现一个server时浏览器主动关闭了一个连接那么epoll收到的是什么事件呢\u003c/li\u003e\n\u003cli\u003e简单介绍一下惊群的现象是一个什么样的现象，有什么的办法解决这个现象呢\u003c/li\u003e\n\u003cli\u003elinux下单进程最大连接数受到哪些因素的限制呢\u003c/li\u003e\n\u003cli\u003etime_wait起到的作用，有什么办法降低这种状态的数量\u003c/li\u003e\n\u003cli\u003e编程题：编辑距离\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"二面-60min\"\u003e二面 60min\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e讲一下进程和线程的区别\u003c/li\u003e\n\u003cli\u003e分页和分段的区别是什么\u003c/li\u003e\n\u003cli\u003e死锁和如何避免死锁\u003c/li\u003e\n\u003cli\u003e介绍一下TCP协议和UDP协议的区别\u003c/li\u003e\n\u003cli\u003e客户端发起连接以后，突然断电了，客户端断开了连接，会产生什么影响\u003c/li\u003e\n\u003cli\u003eTCP半连接状态解释一下\u003c/li\u003e\n\u003cli\u003ehttps密钥交互过程\u003c/li\u003e\n\u003cli\u003eclose_wait的状态\u003c/li\u003e\n\u003cli\u003e499状态码\u003c/li\u003e\n\u003cli\u003emyisam和innoDB的区别\u003c/li\u003e\n\u003cli\u003eB+的调整过程\u003c/li\u003e\n\u003cli\u003e联合索引和最左原则\u003c/li\u003e\n\u003cli\u003e我们有哪些分表原则，在什么情况下使用这些分表原则\u003c/li\u003e\n\u003cli\u003e深浅拷贝解释一下，深浅拷贝的效率上有什么区别呢\u003c/li\u003e\n\u003cli\u003e栈溢出的原因\u003c/li\u003e\n\u003cli\u003e讲一下堆和栈的区别\u003c/li\u003e\n\u003cli\u003e编程题：判环和leetcode原题简化路径\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"三面-30min\"\u003e三面 30min\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e输入网址后发生了什么\u003c/li\u003e\n\u003cli\u003e我经常会用一些CDN进行静态和动态的加速这个了解吗\u003c/li\u003e\n\u003cli\u003eDNS解析的时候DNS污染是怎么回事\u003c/li\u003e\n\u003cli\u003emysql在分表时是怎么做的\u003c/li\u003e\n\u003cli\u003emysql出现慢查询都有哪些原因\u003c/li\u003e\n\u003cli\u003e什么样的sql会产生IO瓶颈，什么样的sql会产生CPU瓶颈\u003c/li\u003e\n\u003cli\u003eTCP改成两次握手会产生什么现象，会有问题吗\u003c/li\u003e\n\u003cli\u003ehttp和https的区别是什么\u003c/li\u003e\n\u003cli\u003e编程题：矩阵中最长递增路径\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0418字节跳动"},{"content":"腾讯深圳4月8号 在你看来epoll是个什么样的东西，边沿触发和水平触发的模式 epoll的通知机制 线程和进程的区别 多线程和多进程的选择上以什么作为考量 堆的数据结构（可能应该写一个类，然后封装一些函数） C++内存模型 static会被放在导出符号表里吗 网络层和传输层最大的区别是什么 TCP头部有哪些 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0408%E8%85%BE%E8%AE%AF%E6%B7%B1%E5%9C%B3/","summary":"\u003ch2 id=\"腾讯深圳4月8号\"\u003e腾讯深圳4月8号\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e在你看来epoll是个什么样的东西，边沿触发和水平触发的模式\u003c/li\u003e\n\u003cli\u003eepoll的通知机制\u003c/li\u003e\n\u003cli\u003e线程和进程的区别\u003c/li\u003e\n\u003cli\u003e多线程和多进程的选择上以什么作为考量\u003c/li\u003e\n\u003cli\u003e堆的数据结构（可能应该写一个类，然后封装一些函数）\u003c/li\u003e\n\u003cli\u003eC++内存模型\u003c/li\u003e\n\u003cli\u003estatic会被放在导出符号表里吗\u003c/li\u003e\n\u003cli\u003e网络层和传输层最大的区别是什么\u003c/li\u003e\n\u003cli\u003eTCP头部有哪些\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0408腾讯深圳"},{"content":"腾讯成都 自我介绍 详细讲一下你的项目 并发量和数据传输效率 TCP拥塞机制 进程有几种状态 事务要满足几个特性 B+树特征是什么样的 B+树查询过程 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0402%E8%85%BE%E8%AE%AF%E6%88%90%E9%83%BD/","summary":"\u003ch2 id=\"腾讯成都\"\u003e腾讯成都\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e自我介绍\u003c/li\u003e\n\u003cli\u003e详细讲一下你的项目\u003c/li\u003e\n\u003cli\u003e并发量和数据传输效率\u003c/li\u003e\n\u003cli\u003eTCP拥塞机制\u003c/li\u003e\n\u003cli\u003e进程有几种状态\u003c/li\u003e\n\u003cli\u003e事务要满足几个特性\u003c/li\u003e\n\u003cli\u003eB+树特征是什么样的\u003c/li\u003e\n\u003cli\u003eB+树查询过程\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0402腾讯成都"},{"content":" 自我介绍 项目web服务器提问(跟socket相关的事件有哪些？epoll监听了socket哪些事件？用的什么模式水平触发还是边沿触发模式？你用的是阻塞IO还是非阻塞IO，为什么用非阻塞?) C++多态是怎么实现的？答到虚函数表指针就就结束了 构造函数可以是虚函数吗？不可以，为什么？ 析构函数可以是虚函数吗？可以。根据我回答扩展的一个问题：父类析构不是虚函数，他的子类有一个父类指针指向子类的对象，然后我释放这个父类指针的时候会调用子类的虚构函数吗？不会。我觉得应该应该回答继承时的虚构顺序，当时没想起。如果不会调用析构函数，子类会被释放吗？不会。面试官主动放弃该话题。 简单说一下new/delete和malloc和free C++11用过哪些？auto, unordered_map, 智能指针 TCP黏包问题如何解决？ TCP的拥塞控制？我答了拥塞窗口。他想听慢重传和快恢复 TIME_WAIT状态解释一下，如何解决这个问题？端口复用 A和B建立连接以后，A拔掉网线,那这个时候B和A的连接还在吗？哪一方会发现呢？不要答心跳包。面试官主动放弃该话题。 说一下多进程和多线程的区别。线程共享哪些内容。 又TM扯到项目中的线程数了。线程的模型是什么样的。 还有什么想问我的？问了他这个岗位做啥的。面向企业的视频会议。 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0306cvte/","summary":"\u003col\u003e\n\u003cli\u003e自我介绍\u003c/li\u003e\n\u003cli\u003e项目web服务器提问(跟socket相关的事件有哪些？epoll监听了socket哪些事件？用的什么模式水平触发还是边沿触发模式？你用的是阻塞IO还是非阻塞IO，为什么用非阻塞?)\u003c/li\u003e\n\u003cli\u003eC++多态是怎么实现的？答到虚函数表指针就就结束了\u003c/li\u003e\n\u003cli\u003e构造函数可以是虚函数吗？不可以，为什么？\u003c/li\u003e\n\u003cli\u003e析构函数可以是虚函数吗？可以。根据我回答扩展的一个问题：父类析构不是虚函数，他的子类有一个父类指针指向子类的对象，然后我释放这个父类指针的时候会调用子类的虚构函数吗？不会。我觉得应该应该回答继承时的虚构顺序，当时没想起。如果不会调用析构函数，子类会被释放吗？不会。面试官主动放弃该话题。\u003c/li\u003e\n\u003cli\u003e简单说一下new/delete和malloc和free\u003c/li\u003e\n\u003cli\u003eC++11用过哪些？auto, unordered_map, 智能指针\u003c/li\u003e\n\u003cli\u003eTCP黏包问题如何解决？\u003c/li\u003e\n\u003cli\u003eTCP的拥塞控制？我答了拥塞窗口。他想听慢重传和快恢复\u003c/li\u003e\n\u003cli\u003eTIME_WAIT状态解释一下，如何解决这个问题？端口复用\u003c/li\u003e\n\u003cli\u003eA和B建立连接以后，A拔掉网线,那这个时候B和A的连接还在吗？哪一方会发现呢？不要答心跳包。面试官主动放弃该话题。\u003c/li\u003e\n\u003cli\u003e说一下多进程和多线程的区别。线程共享哪些内容。\u003c/li\u003e\n\u003cli\u003e又TM扯到项目中的线程数了。线程的模型是什么样的。\u003c/li\u003e\n\u003cli\u003e还有什么想问我的？问了他这个岗位做啥的。面向企业的视频会议。\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0306CVTE"},{"content":"webbench 测压软件 最高并发3W\nwebbench做测试时自身也会消耗CPU和内存资源，为了测试准确，需要将webbench安装在别的服务器上。\ntar -xzvf webbench-1.5.tar.gz cd webbench-1.5 apt-get install ctags make \u0026amp;\u0026amp; make install 测试\nwebbench -c 1000 -t 5 http://127.0.0.1:9999/index.html //1000个客户端 5秒钟时间 github git clone https://github.com/SYaoJun/WebServer.git //把仓库中的内容拷贝到linux系统中 回调函数 函数指针本身是指针变量，指向某个函数的入口地址。\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; int run(void(*step)(void)){ //回调函数的传参是声明的格式 int cnt = 0; while(1){ if(step != NULL) step(); cnt++; sleep(1); } return 0; } void cb(void){ //回调函数 puts(\u0026#34;记秒到时\u0026#34;); } int main(){ run(cb); return 0; } gcc cb.c main.c 信号函数 raise(SIGSEGV) //自己给自己进程发送信号 11 abort() //终止当前进程 测试1s打印多少个数\nalarm函数\n#include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main(){ alarm(1); //计时1s 到时后内核发送一个sigalarm信号终止 for(int i = 0;;i++) printf(\u0026#34;%d\\n\u0026#34;, i); return 0; } setitimer函数\n#include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;sys/time.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int my_alarm(int sec){ struct itimerval it, oldit; it.it_value.tv_sec = sec; //定时长度 it.it_value.tv_usec = 0; //微秒 it.it_interval.tv_sec = 0; //周期定时 it.it_interval.tv_usec = 0; int ret = setitimer(ITIMER_REAL, \u0026amp;it, \u0026amp;oldit); if(ret == -1){ perror(\u0026#34;setitimer error\u0026#34;); exit(1); } return oldit.it_value.tv_sec; } int main(){ my_alarm(1); //计时1s 到时后内核发送一个sigalarm信号终止 for(int i = 0;;i++) printf(\u0026#34;%d\\n\u0026#34;, i); return 0; } 创建线程 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; void* func(void* arg){ //必须为这种类型 printf(\u0026#34;in thread : thread id: %lu, process id: %u\\n\u0026#34;, pthread_self(), getpid()); } int main(void){ //创建线程 pthread_t tid; //重命名的unsigned long 类型 //创建线程API pthread_create(arg1, agr2, arg3, arg4) //arg1: 传入的线程tid地址 //arg2: 线程属性 通常设置为NULL //arg3: 线程执行的任务 函数指针 //arg4: 参数3传递的参数 printf(\u0026#34;in main 1 : thread id: %lu, process id: %u\\n\u0026#34;, pthread_self(), getpid()); int ret = pthread_create(\u0026amp;tid, NULL, func, NULL); if(ret != 0){ perror(\u0026#34;pthread_create error\u0026#34;); exit(1); } sleep(1); //主线程 等待子线程执行完毕 printf(\u0026#34;in main 2 : thread id: %lu, process id: %u\\n\u0026#34;, pthread_self(), getpid()); return 0; } 创建多个子线程 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; void* func(void* arg){ //必须为这种类型 int i = (int)arg; printf(\u0026#34;%dth thread id: %lu, process id: %u\\n\u0026#34;, i, pthread_self(), getpid()); } int main(void){ //创建线程 pthread_t tid; //重命名的unsigned long 类型 //创建线程API pthread_create(arg1, agr2, arg3, arg4) //arg1: 传入的线程tid地址 //arg2: 线程属性 通常设置为NULL //arg3: 线程执行的任务 函数指针 //arg4: 参数3传递的参数 int n = 5, ret; for(int i = 0; i \u0026lt; n; i++){ ret = pthread_create(\u0026amp;tid, NULL, func, (void*)i); if(ret != 0){ fprintf(stderr, \u0026#34;%s pthread_create error\u0026#34;, strerror(ret)); exit(1); } pthread_detach(tid); } sleep(n); //主线程 等待子线程执行完毕 return 0; } mysql使用 mysql在linux环境下结合C语言的使用\nsudo apt-get install mysql-client mysql-server //先安装mysql sudo apt-get install libmysql++-dev //安装库 先启动mysql库 设置好密码 然后使用c程序连接\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;mysql/mysql.h\u0026gt; int main(){ MYSQL mysql; MYSQL_RES *res; MYSQL_ROW row; int i, j; char *query = \u0026#34;select * from people;\u0026#34;; mysql_init(\u0026amp;mysql); //初始化 if(!mysql_real_connect(\u0026amp;mysql,\u0026#34;localhost\u0026#34;,\u0026#34;root\u0026#34;,\u0026#34;password\u0026#34;,\u0026#34;yaojun\u0026#34;,3306,NULL,0)){ //连接数据库 printf(\u0026#34;Error in connecting\u0026#34;); } if(mysql_query(\u0026amp;mysql,query)){ //查询数据库 printf(\u0026#34;Error in querying\u0026#34;); } res = mysql_store_result(\u0026amp;mysql); while(row = mysql_fetch_row(res)){ //读取数据库中的一行 for(i=0;i\u0026lt;mysql_num_fields(res);i++){ fprintf(stdout,\u0026#34;%s \u0026#34;,row[i]); } printf(\u0026#34;\\n\u0026#34;); } mysql_free_result(res); //释放 mysql_close(\u0026amp;mysql); //关闭 return 0; } 编译的命令\ngcc sql.c -lmysqlclient //生成a.out文件 执行 指针和数组 char str[]=\u0026#34;hello\u0026#34;; //字符串含\\0 6字节 char *url =\u0026#34;hello\u0026#34;; //指针64位机 8字节 cout\u0026lt;\u0026lt;sizeof(str)\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;sizeof(url)\u0026lt;\u0026lt;endl; CGI服务器 原理：输出到某个文件描述符上的内容直接发送到客户端连接对应的socket上，此处我们模拟了把服务器端输出到标准输出的内容，直接发送给客户端。\n测试\ntelnet 127.0.0.1 6666 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;netinet/in.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; //命令行参数指定IP和端口 int main(int argc, char *argv[]){ if(argc \u0026lt;= 2){ printf(\u0026#34;at least 3 arguments: file ip port, but you give %d\\n\u0026#34;, argc); return 1; } const char* ip = argv[1]; int port = atoi(argv[2]); int lfd, cfd, ret; struct sockaddr_in serv_addr, clie_addr; lfd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 assert(lfd \u0026gt;= 0); serv_addr.sin_family = AF_INET; serv_addr.sin_port = htons(port); inet_pton(AF_INET, ip, \u0026amp;serv_addr.sin_addr); //端口复用 此处没有卵用 int opt = 1; setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); ret = bind(lfd, (struct sockaddr *)\u0026amp;serv_addr, sizeof(serv_addr) ); assert(ret != -1); ret = listen(lfd, 128); //最大同时连接数 assert(ret != -1); socklen_t clie_addr_len; //套接字长度 clie_addr_len = sizeof(clie_addr); cfd = accept(lfd, (struct sockaddr*)\u0026amp;clie_addr, \u0026amp;clie_addr_len ); if(cfd \u0026lt; 0){ printf(\u0026#34;accept error: %d\u0026#34;, errno); }else{ close(STDOUT_FILENO); dup(cfd); //创建一个新的文件描述符 该文件描述符和原文件描述符指向相同的文件 管道和网络连接 printf(\u0026#34;good night! daisy!\\n\u0026#34;); close(cfd); } close(lfd); return 0; } EPOLLONESHOT事件 一个socket上的某个事件被触发多次，可能产生2个不同的线程处理同一个socket。我们期望的是一个socket在任一时刻都只被一个线程处理。对于注册了EPOLLONESHOT事件的文件描述符，操做系统最多触发其上注册的一个可读可写或者异常事件一次。注册了EPOLLONESHOT事件的socket一旦被某个线程处理完毕，应立即重置这个socket上的EPOLLONESHOT事件。\n监听socket不应设置为EPOLLONESHOT。\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;netinet/in.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;sys/epoll.h\u0026gt; #define MAX_SIZE 1024 //自定义的结构体 struct fds{ int epollfd; int sockfd; }; //设置文件描述符为非阻塞 void setnonblocking(int fd){ int old_option = fcntl(fd, F_GETFL); int new_option = old_option | O_NONBLOCK; fcntl(fd, F_SETFL, new_option); } //添加到epoll内核事件表中 void addfd(int epollfd, int fd, bool oneshot){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET; if(oneshot){ event.events |= EPOLLONESHOT; } epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, \u0026amp;event); //挂到红黑树上 setnonblocking(fd); //设置非阻塞 主要用在读写上 } //重置EPOLLONESHOT事件 void reset_oneshot(int epollfd, int fd){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET | EPOLLONESHOT; epoll_ctl(epollfd, EPOLL_CTL_MOD, fd, \u0026amp;event); //修改注册事件 } //工作线程 void* worker(void* arg){ int sockfd = ((fds*)arg)-\u0026gt;sockfd; int epollfd = ((fds*)arg)-\u0026gt;epollfd; printf(\u0026#34;start new thread to receive data on fd: %d\\n\u0026#34;, sockfd); char buf[MAX_SIZE]; memset(buf, \u0026#39;\\0\u0026#39;, MAX_SIZE); //循环读取sockfd上的数据 直到收到EAGAIN while(1){ int ret = recv(sockfd, buf, MAX_SIZE-1, 0); if(ret == 0){ close(sockfd); printf(\u0026#34;foreiner closed the connection\\n\u0026#34;); break; }else if(ret \u0026lt; 0){ if(errno == EAGAIN){ reset_oneshot(epollfd ,sockfd); printf(\u0026#34;read later\\n\u0026#34;); break; } }else{ printf(\u0026#34;get connection: %s\\n\u0026#34;, buf); //休眠5s模拟数据处理过程 sleep(5); } } printf(\u0026#34;end thread receiving data on fd: %d\\n\u0026#34;, sockfd); } //命令行参数指定IP和端口 int main(int argc, char *argv[]){ if(argc \u0026lt;= 2){ printf(\u0026#34;at least 3 arguments: file ip port, but you give %d\\n\u0026#34;, argc); return 1; } const char* ip = argv[1]; int port = atoi(argv[2]); int lfd, cfd, ret; struct sockaddr_in serv_addr, clie_addr; lfd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 assert(lfd \u0026gt;= 0); serv_addr.sin_family = AF_INET; serv_addr.sin_port = htons(port); inet_pton(AF_INET, ip, \u0026amp;serv_addr.sin_addr); //端口复用 此处没有卵用 int opt = 1; setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); ret = bind(lfd, (struct sockaddr *)\u0026amp;serv_addr, sizeof(serv_addr) ); assert(ret != -1); ret = listen(lfd, 128); //最大同时连接数 assert(ret != -1); epoll_event events[MAX_SIZE]; //返回的数组上限 int epollfd = epoll_create(10); assert(epollfd != -1); //注意监听的套接字不能设置为oneshot addfd(epollfd, lfd, false); //挂上红黑树监听 printf(\u0026#34;addfd\\n\u0026#34;); while(1){ ret = epoll_wait(epollfd, events, MAX_SIZE, -1); //永远不超时 if(ret \u0026lt; 0){ printf(\u0026#34;epoll failure\\n\u0026#34;); break; } for(int i = 0; i \u0026lt; ret; i++){ //循环处理有响应的事件 int sockfd = events[i].data.fd; if(sockfd == lfd){ //如果是监听事件则建立新的连接 printf(\u0026#34;lfd\\n\u0026#34;); socklen_t clie_addr_len; //套接字长度 clie_addr_len = sizeof(clie_addr); cfd = accept(lfd, (struct sockaddr*)\u0026amp;clie_addr, \u0026amp;clie_addr_len ); assert(cfd \u0026gt;= 0); //注册为oneshot事件 addfd(epollfd, cfd, true); //刚刚这里加入的事件加错了 }else if(events[i].events \u0026amp; EPOLLIN){ pthread_t tid; fds fds_for_new_worker; fds_for_new_worker.epollfd = epollfd; fds_for_new_worker.sockfd = sockfd; //新启动一个线程为sockfd服务 pthread_create(\u0026amp;tid, NULL, worker, (void*)\u0026amp;fds_for_new_worker); // pthread_detach(tid); //线程分离 } } } close(lfd); return 0; } 信号屏蔽字 主要函数\nsigaddset() sigprocmask() sigpending() 使用kill发送信号\nkill -6 PID 测试程序\n#include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;signal.h\u0026gt; void print(sigset_t* ped){ for(int i = 0; i \u0026lt; 32; i++){ if(sigismember(ped, i)==1){ putchar(\u0026#39;1\u0026#39;); }else putchar(\u0026#39;0\u0026#39;); } printf(\u0026#34;\\n\u0026#34;); } int main(void){ sigset_t myset, oldset, ped; sigemptyset(\u0026amp;myset); //设置自定义信号集 sigaddset(\u0026amp;myset, SIGINT); sigaddset(\u0026amp;myset, SIGSEGV); sigaddset(\u0026amp;myset, SIGQUIT); sigaddset(\u0026amp;myset, SIGABRT); //设置信号屏蔽字 sigprocmask(SIG_BLOCK, \u0026amp;myset, \u0026amp;oldset); while(1){ sigpending(\u0026amp;ped); print(\u0026amp;ped); sleep(2); } return 0; } sigaction信号捕捉函数 #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;signal.h\u0026gt; void docatch(int signo){ printf(\u0026#34;%d signal has been catched!\\n\u0026#34;, signo); } int main(void){ struct sigaction act; act.sa_handler = docatch; sigemptyset(\u0026amp;act.sa_mask); sigaddset(\u0026amp;act.sa_mask, SIGINT); sigaddset(\u0026amp;act.sa_mask, SIGSEGV); sigaddset(\u0026amp;act.sa_mask, SIGQUIT); act.sa_flags = 0; //默认属性 在信号函数处理期间 本信号再次到达默认屏蔽 sigaction(SIGINT, \u0026amp;act, NULL); while(1); return 0; } 统一事件源 把信号事件的处理放到epoll监听事件中去处理，统一了事件源。当调用信号处理函数时，信号处理函数通过管道将信息传达给epoll上的读端监听事件，再在主循环中处理事件。\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;netinet/in.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;sys/epoll.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #define MAX_SIZE 1024 //自定义的结构体 static int pipefd[2]; struct fds{ int epollfd; int sockfd; }; //设置文件描述符为非阻塞 void setnonblocking(int fd){ int old_option = fcntl(fd, F_GETFL); int new_option = old_option | O_NONBLOCK; fcntl(fd, F_SETFL, new_option); } //添加到epoll内核事件表中 void addfd(int epollfd, int fd, bool oneshot){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET; if(oneshot){ event.events |= EPOLLONESHOT; } epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, \u0026amp;event); //挂到红黑树上 setnonblocking(fd); //设置非阻塞 主要用在读写上 } //信号处理函数 void sig_handler(int sig){ int save_errno = errno; int msg = sig; //我猜想这里重新定义变量的原因在于传的是指针 同时为了保证可重入 send(pipefd[1], (char*)\u0026amp;msg, 1, 0); //pipefd[1]是非阻塞的如果发不出去直接返回 errno = save_errno; } //设置信号处理 void addsig(int sig){ struct sigaction sa; memset(\u0026amp;sa, \u0026#39;\\0\u0026#39;, sizeof(sa)); sa.sa_handler = sig_handler; sa.sa_flags |= SA_RESTART; sigfillset(\u0026amp;sa.sa_mask); // sigaddset(\u0026amp;sa.sa_mask, SIGSEGV); assert(sigaction(sig, \u0026amp;sa, NULL) != -1); //注册监听的信号 } //命令行参数指定IP和端口 int main(int argc, char *argv[]){ if(argc \u0026lt;= 2){ printf(\u0026#34;at least 3 arguments: file ip port, but you give %d\\n\u0026#34;, argc); return 1; } const char* ip = argv[1]; int port = atoi(argv[2]); int lfd, cfd, ret; struct sockaddr_in serv_addr, clie_addr; lfd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 assert(lfd \u0026gt;= 0); serv_addr.sin_family = AF_INET; serv_addr.sin_port = htons(port); inet_pton(AF_INET, ip, \u0026amp;serv_addr.sin_addr); //端口复用 此处没有卵用 int opt = 1; setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); //忽略SIGPIPE信号 signal(SIGPIPE, SIG_IGN); ret = bind(lfd, (struct sockaddr *)\u0026amp;serv_addr, sizeof(serv_addr) ); assert(ret != -1); ret = listen(lfd, 128); //最大同时连接数 assert(ret != -1); epoll_event events[MAX_SIZE]; //返回的数组上限 int epollfd = epoll_create(10); assert(epollfd != -1); //注意监听的套接字不能设置为oneshot addfd(epollfd, lfd, false); //挂上红黑树监听 /*使用socketpair创建全双工的管道*/ ret = socketpair(PF_UNIX, SOCK_STREAM, 0, pipefd); assert(ret != -1); setnonblocking(pipefd[1]); //把写入的管道端置为非阻塞 addfd( epollfd, pipefd[0], false); //设置为oneshot /*设置一些信号的处理函数*/ addsig(SIGHUP); addsig(SIGCHLD); addsig(SIGTERM); addsig(SIGINT); addsig(SIGSEGV); bool stop_server = false; while(!stop_server){ printf(\u0026#34;epoll_wait...\\n\u0026#34;); ret = epoll_wait(epollfd, events, MAX_SIZE, -1); //永远不超时 if((ret \u0026lt; 0) \u0026amp;\u0026amp; (errno != EINTR)){ //这里要设置 被系统调用打断的不算失败 errno不是ret perror(\u0026#34;epoll failure\u0026#34;); exit(1); } for(int i = 0; i \u0026lt; ret; i++){ //循环处理有响应的事件 int sockfd = events[i].data.fd; if(sockfd == lfd){ //如果是监听事件则建立新的连接 socklen_t clie_addr_len; //套接字长度 clie_addr_len = sizeof(clie_addr); cfd = accept(lfd, (struct sockaddr*)\u0026amp;clie_addr, \u0026amp;clie_addr_len ); assert(cfd \u0026gt;= 0); //注册为oneshot事件 addfd(epollfd, cfd, true); /*如果就绪的文件描述符是pipefd[0],就处理信号*/ }else if((sockfd == pipefd[0]) \u0026amp;\u0026amp;(events[i].events \u0026amp; EPOLLIN)){ char buf[MAX_SIZE]; int num = recv(pipefd[0], buf, sizeof(buf), 0); if(num == -1) continue; else if(num == 0) continue; else{ //可能管道有多个信号满足 每次读出一个字符进行处理 for(int j = 0; j \u0026lt; num; j++){ switch(buf[j]){ case SIGSEGV: puts(\u0026#34;段错误信号已处理，收到请回答！\u0026#34;); break; case SIGCHLD: case SIGHUP: continue; case SIGTERM: case SIGINT: stop_server = true;break; } } } }else{} } } printf(\u0026#34;close fds\\n\u0026#34;); close(lfd); close(pipefd[0]); close(pipefd[1]); return 0; } 单例模式 #include \u0026lt;iostream\u0026gt; #include \u0026lt;atomic\u0026gt; #include \u0026lt;mutex\u0026gt; using namespace std; class Singleton{ private: //无法调用构造函数 Singleton(); Singleton(const Singleton\u0026amp; other); public: static Singleton* getInstance(); static Singleton* m_instance; } Singleton* Singleton::m_instance = nullptr; //懒汉式 单线程版 Singleton* Singleton::getInstance(){ if(m_instance == nullptr){ m_instance = new Singleton(); } return m_instance; } //多线程版 Singleton* Singleton::getInstance(){ LOCK lock; if(m_instance == nullptr){ m_instance = new Singleton(); } return m_instance; } 当前时间 #include \u0026lt;time.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main(void){ time_t tm; time(\u0026amp;tm); char time_string[128]; ctime_r(\u0026amp;tm, time_string); printf(\u0026#34;%s\u0026#34;, time_string); return 0; } 初阶日志系统 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;mutex\u0026gt; #include \u0026lt;atomic\u0026gt; using namespace std; class Logger{ public: static Logger* get_instance(); static Logger* log; static mutex log_mutex; static void write_log(int level, char* s); static void create_file(); static int fd; private: Logger(); Logger(const Logger\u0026amp; other); ~Logger(); }; Logger* Logger::log = NULL; mutex Logger::log_mutex; int Logger::fd = 0; Logger::Logger(){}; Logger::~Logger(){ if(log != NULL){ delete log; log = NULL; } close(fd); } Logger* Logger::get_instance(){ if(log == NULL){ log_mutex.lock(); if(log == NULL){ log = new Logger(); } log_mutex.unlock(); } return log; } void Logger::create_file(){ fd = open(\u0026#34;logger.txt\u0026#34;, O_RDWR|O_CREAT|O_TRUNC, 777); assert(fd \u0026gt; 0); } void Logger::write_log(int level, char* s){ int n = strlen(s); log_mutex.lock(); write(fd, s, n); log_mutex.unlock(); } 单例模式 //C++11 atomic std::atomic\u0026lt;Logger*\u0026gt; Logger::log; std::mutex Logger::log_mutex; Logger* Logger::get_instance(){ Logger* tmp = log.load(std::memory_order_relaxed); std::atomic_thread_fence(std::memory_order_acquire); //获取内存fence if(tmp == NULL){ std::lock_guard\u0026lt;std::mutex\u0026gt; lock(log_mutex); tmp = log.load(std::memory_order_relaxed); if(tmp == NUll){ tmp = new Logger; std::atomic_thread_fence(std::memory_order_release); //释放内存fence log.store(tmp, std::memory_order_relaxed); } } return tmp; } 主线程测试 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026#34;logger.h\u0026#34; void* func(void* arg){ char buf[1024]; sprintf(buf, \u0026#34;thread id: %lu, process id: %u\\n\u0026#34;, pthread_self(), getpid()); Logger::log-\u0026gt;write_log(2, buf); } int main(void){ pthread_t tid; //重命名的unsigned long 类型 Logger::log-\u0026gt;create_file(); int n = 5, ret; for(int i = 0; i \u0026lt; n; i++){ // int t = i; ret = pthread_create(\u0026amp;tid, NULL, func, NULL); if(ret != 0){ fprintf(stderr, \u0026#34;%s pthread_create error\u0026#34;, strerror(ret)); exit(1); } pthread_detach(tid); } sleep(n-4); //主线程 等待子线程执行完毕 return 0; } 时间堆 把监听文件描述符加入后，就启动定时器。\nexec函数族 在一个程序中运行另一个程序。当进程调用exec函数时，该进程的用户空间代码和数据完全被新程序替换。调用exec并不创建新进程，所以调用exec前后进程的ID并不改变。\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; int main(){ pid_t pid = fork(); if(pid == -1){ perror(\u0026#34;fork error!\u0026#34;); exit(-1); }else if(pid == 0){ execlp(\u0026#34;ls\u0026#34;, \u0026#34;anythingok\u0026#34;, \u0026#34;-l\u0026#34;, \u0026#34;-a\u0026#34;, NULL); }else if(pid \u0026gt; 0){ sleep(1); puts(\u0026#34;parent over!\u0026#34;); } return 0; } 管道 #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(){ pid_t fd[2]; pipe(fd); //创建管道 int ret = fork(); if(ret \u0026gt; 0){ //父进程 父写 fd[0]读 fd[1]写 close(fd[0]); char *str =\u0026#34;hello world\\n\u0026#34;; write(fd[1], str, strlen(str)); sleep(1); }else if(ret == 0){ //子进程 子读 fd[1]关闭 close(fd[1]); char buf[1024]; int n = read(fd[0], buf, sizeof(buf)); //写到显示器上 write(1, buf, n); } return 0; } CGI使用管道和exec实现 hello里面的输入和输出都被重定向了\n#include\u0026lt;stdio.h\u0026gt; #include\u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; int main(int agrc, char* argv[]){ char bf[100]; read(STDIN_FILENO, bf, sizeof(bf)); sprintf(bf, \u0026#34;Content-Type:text/html;\\r\\n\\r\\nhello world, 你好!\u0026#34;); printf(\u0026#34;%s\u0026#34;, bf); return 0; } 主进程调用已经编译完毕的hello可执行文件\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; int main(){ pid_t pid; int status; int cgi_input[2]; int cgi_output[2]; char buf[1024]; /*创建输入管道*/ if(pipe(cgi_input) \u0026lt; 0){ perror(\u0026#34;pipe error\u0026#34;); exit(1); } /*创建输出管道*/ if(pipe(cgi_output) \u0026lt; 0){ perror(\u0026#34;pipe error\u0026#34;); exit(1); } /*创建子进程*/ if((pid = fork()) \u0026lt; 0){ perror(\u0026#34;fork error!\u0026#34;); exit(-1); } if(pid == 0){ dup2(cgi_input[0], 0); /*将子进程的STDIN重定向到cgi_input[0]*/ dup2(cgi_output[1], 1); /*将子进程的STDOUT重定向到cgi_output[1]*/ /*关闭剩余的两端*/ close(cgi_input[1]); close(cgi_output[0]); /*执行exec文件 即cgi*/ execl(\u0026#34;hello\u0026#34;, \u0026#34;anythingok\u0026#34;, NULL); exit(0); }else if(pid \u0026gt; 0){ /*父进程先给子进程发送数据 然后等待子进程执行完 再读数据*/ /*关闭不用的两个端口*/ close(cgi_input[0]); close(cgi_output[1]); char tmp[100]=\u0026#34;hello child process\u0026#34;; int len = strlen(tmp); /*父进程先写数据*/ write(cgi_input[1], tmp, len); /*父进程阻塞等待读入*/ int n = read(cgi_output[0], buf, sizeof(buf)); int ret = write(STDOUT_FILENO, buf, n); /*关闭管道*/ close(cgi_input[1]); close(cgi_output[0]); waitpid(pid, \u0026amp;status, 0); } return 0; } 多线程服务器 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;sys/epoll.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #include \u0026lt;dirent.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; #define SERV_PORT 9999 #define MAXSIZE 2048 void wait_child(int signo){ while(waitpid(0, NULL, WNOHANG) \u0026gt; 0); return; } int createlistenfd(){ struct sockaddr_in servaddr; int ret; int fd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 if(fd == -1){ perror(\u0026#34;socket error\u0026#34;); exit(1); } //初始化servaddr结构体 bzero(\u0026amp;servaddr, sizeof(servaddr)); servaddr.sin_family = AF_INET; servaddr.sin_port = htons(SERV_PORT); servaddr.sin_addr.s_addr = htonl(INADDR_ANY); //端口复用 int opt = 1; setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); //绑定端口 ret = bind(fd, (struct sockaddr *)\u0026amp;servaddr, sizeof(servaddr)); if (ret == -1){ perror(\u0026#34;bind error\u0026#34;); exit(1); } //设置监听上限 ret = listen(fd, 128); if(ret==-1){ perror(\u0026#34;listen error\u0026#34;); exit(1); } return fd; } void work(int cfd, char* s){ char filename[100]={0}; sscanf(s, \u0026#34;GET /%s\u0026#34;, filename); char *mime; if(strstr(s, \u0026#34;.html\u0026#34;)) mime = \u0026#34;text/html\u0026#34;; else if(strstr(s, \u0026#34;.jpg\u0026#34;)) mime=\u0026#34;image/jpeg\u0026#34;; //构建响应头 发给客户端 // printf(\u0026#34;%s\\n\u0026#34;, filename); char response[MAXSIZE]; sprintf(response, \u0026#34;HTTP/1.1 200 OK\\r\\nContent-Type: %s\\r\\n\\r\\n\u0026#34;, mime); //读取具体的文件内容 int filefd = open(filename, O_RDONLY); if(filefd == -1){ perror(\u0026#34;open error\u0026#34;); sleep(0.5); filefd = open(filename, O_RDONLY); //很奇怪 为什么睡几秒钟之后再打开就不会出错了 if(filefd == -1) exit(1); } int len = strlen(response); int n = read(filefd, response+len, sizeof(response)-len); write(cfd, response, len+n); close(filefd); } int main(void){ int lfd = createlistenfd(); struct sockaddr_in clientaddr; socklen_t clientaddrlen = sizeof(clientaddr); //这是一个传出参数 //accept接受连接请求 pid_t pid; int cfd; while(1){ cfd = accept(lfd, (struct sockaddr *)\u0026amp;clientaddr, \u0026amp;clientaddrlen); if (cfd == -1){ perror(\u0026#34;accept error\u0026#34;); exit(1); } //创建子线程 主线程负责监听和回收子进程 pid = fork(); if(pid \u0026lt; 0){ perror(\u0026#34;fork error\u0026#34;); exit(1); } else if(pid == 0) break; else{ close(cfd); //关闭接收文件描述符 signal(SIGCHLD, wait_child); } } if(pid == 0){ close(lfd); //关闭监听文件描述符 //打印客户端IP和port char buf[MAXSIZE] = {0}; printf(\u0026#34;client IP: %s, client port: %d\\n\u0026#34;, inet_ntop(AF_INET, \u0026amp;clientaddr.sin_addr, buf, sizeof(buf)), ntohs(clientaddr.sin_port)); int n = read(cfd, buf, sizeof(buf)); if(n==0){ close(cfd); } // write(1, buf, n); else work(cfd, buf); } return 0; } 处理客户端注册信息的cgi 存在一些问题，每个网页好像没有传输完成，浏览器总是转圈。 需要结合上面hello程序查询数据库，hello程序的注册还没完善，只能做到查询。等以后有空再做吧。 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;netinet/in.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;sys/epoll.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; #define MAX_SIZE 1024 //自定义的结构体 struct fds{ int epollfd; int sockfd; }; //设置文件描述符为非阻塞 void setnonblocking(int fd){ int old_option = fcntl(fd, F_GETFL); int new_option = old_option | O_NONBLOCK; fcntl(fd, F_SETFL, new_option); } //添加到epoll内核事件表中 void addfd(int epollfd, int fd, bool oneshot){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET; if(oneshot){ event.events |= EPOLLONESHOT; } epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, \u0026amp;event); //挂到红黑树上 setnonblocking(fd); //设置非阻塞 主要用在读写上 } //移除epoll事件 void removefd(int epollfd, int fd){ epoll_ctl(epollfd, EPOLL_CTL_DEL, fd, NULL); close(fd); } //重置EPOLLONESHOT事件 void reset_oneshot(int epollfd, int fd){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET | EPOLLONESHOT; epoll_ctl(epollfd, EPOLL_CTL_MOD, fd, \u0026amp;event); //修改注册事件 } void accept_request(int epollfd, int sockfd, char *s){ char method[32], filename[32], account[32], password[32], phone[32]; sscanf(s, \u0026#34;%s /%s\u0026#34;, method, filename); if(strcasecmp(method, \u0026#34;POST\u0026#34;) == 0){ int len = strlen(s); int i; for(i = 0; i \u0026lt; len; i++){ if(i+2\u0026lt;len \u0026amp;\u0026amp; s[i]==\u0026#39;\\n\u0026#39; \u0026amp;\u0026amp; s[i+1]==\u0026#39;\\r\u0026#39;) break; } int j; i=i+12; for(j = 0; s[i+j]!=\u0026#39;\u0026amp;\u0026#39;; j++) account[j] = s[j+i]; i = i+j+6; for(j = 0; s[i+j]!=\u0026#39;\u0026amp;\u0026#39;; j++) password[j] = s[j+i]; /*2020.4.7成功解析出来账号和密码*/ pid_t pid; int status; int cgi_input[2]; int cgi_output[2]; char buff[1024]; /*创建输入管道*/ if(pipe(cgi_input) \u0026lt; 0){ perror(\u0026#34;pipe error\u0026#34;); exit(1); } /*创建输出管道*/ if(pipe(cgi_output) \u0026lt; 0){ perror(\u0026#34;pipe error\u0026#34;); exit(1); } /*创建子进程*/ if((pid = fork()) \u0026lt; 0){ perror(\u0026#34;fork error!\u0026#34;); exit(-1); } if(pid == 0){ dup2(cgi_input[0], 0); /*将子进程的STDIN重定向到cgi_input[0]*/ dup2(cgi_output[1], 1); /*将子进程的STDOUT重定向到cgi_output[1]*/ /*关闭剩余的两端*/ close(cgi_input[1]); close(cgi_output[0]); /*执行exec文件 即cgi*/ execl(\u0026#34;hello\u0026#34;, \u0026#34;anythingok\u0026#34;, NULL); exit(0); }else if(pid \u0026gt; 0){ /*父进程先给子进程发送数据 然后等待子进程执行完 再读数据*/ /*关闭不用的两个端口*/ close(cgi_input[0]); close(cgi_output[1]); /*父进程先写数据*/ int len = strlen(account); write(cgi_input[1], account, len); /*父进程阻塞等待读入*/ int n = read(cgi_output[0], buff, sizeof(buff)); if(strcmp(buff, password)==0\u0026amp;\u0026amp;strlen(password) != 0){ puts(\u0026#34;密码正确\u0026#34;); }else{ puts(\u0026#34;密码错误\u0026#34;); strcpy(filename, \u0026#34;register.html\u0026#34;); } // int ret = write(STDOUT_FILENO, buf, n); /*关闭管道*/ close(cgi_input[1]); close(cgi_output[0]); waitpid(pid, \u0026amp;status, 0); } } puts(filename); char mime[64]; if(strstr(s, \u0026#34;.html\u0026#34;)) strcpy(mime,\u0026#34;text/html\u0026#34;); else if(strstr(s, \u0026#34;.jpg\u0026#34;)) strcpy(mime,\u0026#34;image/jpeg\u0026#34;); char response[MAX_SIZE+MAX_SIZE]; sprintf(response, \u0026#34;HTTP/1.1 200 OK\\r\\nContent-Type: %s\\r\\n\\r\\n\u0026#34;, mime); int filefd = open(filename, O_RDONLY); if(filefd == -1){ perror(\u0026#34;open error\u0026#34;); exit(1); } int len = strlen(response); int n = read(filefd, response+len, sizeof(response)-len); write(sockfd, response, len+n); close(filefd); } //工作线程 void* worker(void* arg){ int sockfd = ((fds*)arg)-\u0026gt;sockfd; int epollfd = ((fds*)arg)-\u0026gt;epollfd; char buf[MAX_SIZE]; memset(buf, \u0026#39;\\0\u0026#39;, MAX_SIZE); //循环读取sockfd上的数据 直到收到EAGAIN while(1){ int ret = recv(sockfd, buf, MAX_SIZE-1, 0); if(ret == 0){ removefd(epollfd, sockfd); printf(\u0026#34;foreiner closed the connection\\n\u0026#34;); break; }else if(ret \u0026lt; 0){ if(errno == EAGAIN){ // reset_oneshot(epollfd ,sockfd); printf(\u0026#34;read later\\n\u0026#34;); break; } }else{ printf(\u0026#34;get connection:\\n\u0026#34;); //休眠5s模拟数据处理过程 accept_request(epollfd, sockfd, buf); sleep(5); break; } } } //命令行参数指定IP和端口 int main(int argc, char *argv[]){ if(argc \u0026lt; 2){ printf(\u0026#34;at least 2 arguments: file port, but you give %d\\n\u0026#34;, argc); return 1; } int port = atoi(argv[1]); int lfd, cfd, ret; struct sockaddr_in serv_addr, clie_addr; lfd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 assert(lfd \u0026gt;= 0); /*初始化服务器端的套接字地址*/ serv_addr.sin_family = AF_INET; serv_addr.sin_port = htons(port); serv_addr.sin_addr.s_addr = htonl(INADDR_ANY); //端口复用 此处没有卵用 int opt = 1; setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); ret = bind(lfd, (struct sockaddr *)\u0026amp;serv_addr, sizeof(serv_addr) ); assert(ret != -1); ret = listen(lfd, 128); //最大同时连接数 assert(ret != -1); epoll_event events[MAX_SIZE]; //返回的数组上限 int epollfd = epoll_create(10); assert(epollfd != -1); //注意监听的套接字不能设置为oneshot addfd(epollfd, lfd, false); //挂上红黑树监听 while(1){ ret = epoll_wait(epollfd, events, MAX_SIZE, -1); //永远不超时 if(ret \u0026lt; 0){ printf(\u0026#34;epoll failure\\n\u0026#34;); break; } for(int i = 0; i \u0026lt; ret; i++){ //循环处理有响应的事件 int sockfd = events[i].data.fd; if(sockfd == lfd){ //如果是监听事件则建立新的连接 socklen_t clie_addr_len; //套接字长度 clie_addr_len = sizeof(clie_addr); cfd = accept(lfd, (struct sockaddr*)\u0026amp;clie_addr, \u0026amp;clie_addr_len ); assert(cfd \u0026gt;= 0); //注册为oneshot事件 addfd(epollfd, cfd, false); //刚刚这里加入的事件加错了 }else if(events[i].events \u0026amp; EPOLLIN){ pthread_t tid; fds fds_for_new_worker; fds_for_new_worker.epollfd = epollfd; fds_for_new_worker.sockfd = sockfd; //新启动一个线程为sockfd服务 pthread_create(\u0026amp;tid, NULL, worker, (void*)\u0026amp;fds_for_new_worker); // pthread_detach(tid); //线程分离 } } } close(lfd); return 0; } 线程中调用fork函数 pthread_atfork函数确保fork调用后父进程和子进程都拥有一个清楚的锁状态。每个线程都可以独立的设置信号掩码。\nwaitpid回收子进程 #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; void sigchild_handler(int sig){ //在执行SIGCHLD信号期间 可能有多个SIGCHLD到达，但是未决信号集只记录一次。 //所以需要调用while循环回收再退出 while(waitpid(-1, NULL, WNOHANG) \u0026gt; 0){ puts(\u0026#34;回收成功\u0026#34;); } return; } int main(){ pid_t pid; int n = 5, i; signal(SIGCHLD, sigchild_handler); for(i = 0; i \u0026lt; n; i++){ pid = fork(); if(pid \u0026lt; 0){ perror(\u0026#34;fork error\u0026#34;); exit(1); }else if(pid == 0) break; //子进程 直接退出 } if(i \u0026lt; n){ //子进程 sleep(i); printf(\u0026#34;I am %dth child.\\n\u0026#34;, i); }else{ while(1){ //父进程不退出 sleep(1); printf(\u0026#34;I am parent %u\\n\u0026#34;, getpid()); } } return 0; } 自旋锁 线程同步的一种方式。使用自旋锁的线程会反复检查锁变量是否可用。自旋锁不会让出CPU，一种忙等待状态。死循环等待锁被释放。自旋锁避免了进程或线程上下文的开销。自旋锁不适合在单CPU中使用。\n#include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; const int N = 1e7; int num = 0; pthread_spinlock_t spin_lock; void *producer(void *){ int times = N; while(times--){ pthread_spin_lock(\u0026amp;spin_lock); ++num; pthread_spin_unlock(\u0026amp;spin_lock); } } void *comsumer(void*){ int times = N; while(times--){ pthread_spin_lock(\u0026amp;spin_lock); --num; pthread_spin_unlock(\u0026amp;spin_lock); } } int main(){ pthread_spin_init(\u0026amp;spin_lock, 0); pthread_t th1, th2; pthread_create(\u0026amp;th1, NULL, \u0026amp;producer, NULL); pthread_create(\u0026amp;th2, NULL, \u0026amp;comsumer, NULL); pthread_join(th1, NULL); pthread_join(th2, NULL); printf(\u0026#34;num = %d\\n\u0026#34;, num); return 0; } 条件变量 条件变量本身不是锁，但它可以造成线程阻塞。通常与互斥锁配合使用。给多线程提供一个汇合的场所。\npthread_cond_wait(\u0026amp;cond, \u0026amp;mutex) 1. 阻塞等待该条件变量直到满足 2.释放已经掌握的互斥锁 3.满足条件后重新拿锁 #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; const int MAX_BUF = 100; int num = 0; pthread_cond_t cond = PTHREAD_COND_INITIALIZER; pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; void *producer(void *){ while(true){ pthread_mutex_lock(\u0026amp;mutex); while(num \u0026gt;= MAX_BUF){ //由于阻塞解除时，只有一个物品可用 但是却有多个线程解除阻塞 所以需要循环检测一次 //满了 等待消费者消费 pthread_cond_wait(\u0026amp;cond, \u0026amp;mutex); printf(\u0026#34;缓冲区满了 等待消费者消费\\n\u0026#34;); } //生产一个物品 ++num; printf(\u0026#34;生产一个产品，当前产品数量为：%d\\n\u0026#34;, num); sleep(1); pthread_mutex_unlock(\u0026amp;mutex); //通知消费者可消费了 pthread_cond_signal(\u0026amp;cond); printf(\u0026#34;通知消费者...\\n\u0026#34;); sleep(1); } } void *comsumer(void*){ while(true){ pthread_mutex_lock(\u0026amp;mutex); while(num \u0026lt;= 0){ //缓冲区为空 等待生产者生产 pthread_cond_wait(\u0026amp;cond, \u0026amp;mutex); printf(\u0026#34;缓冲区空了 等待生产者生产\\n\u0026#34;); } //生产一个物品 --num; printf(\u0026#34;消费一个产品，当前产品数量为：%d\\n\u0026#34;, num); sleep(1); pthread_mutex_unlock(\u0026amp;mutex); //通知消费者可消费了 pthread_cond_signal(\u0026amp;cond); printf(\u0026#34;通知生产者...\\n\u0026#34;); } } int main(){ pthread_t th1, th2; pthread_create(\u0026amp;th1, NULL, \u0026amp;producer, NULL); pthread_create(\u0026amp;th2, NULL, \u0026amp;comsumer, NULL); pthread_join(th1, NULL); pthread_join(th2, NULL); printf(\u0026#34;num = %d\\n\u0026#34;, num); return 0; } ","permalink":"//localhost:1313/posts/006%E9%A1%B9%E7%9B%AE/","summary":"\u003ch2 id=\"webbench\"\u003ewebbench\u003c/h2\u003e\n\u003cp\u003e测压软件 最高并发3W\u003c/p\u003e\n\u003cp\u003ewebbench做测试时自身也会消耗CPU和内存资源，为了测试准确，需要将webbench安装在别的服务器上。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etar -xzvf webbench-1.5.tar.gz\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e webbench-1.5\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eapt-get install ctags\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emake \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e make install\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e测试\u003c/p\u003e","title":"006项目"},{"content":"单例模式 class A{ public: static A* getInstance(); static A* instance; private: A(); ~A(); }; A* A::instance = nullptr; //内存读写reorder不安全 导致双检查锁失效 //先分配内存 再执行构造器 最后返回给实例 //编译器的优化 A* A::getInstance(){ //读没有问题 写就有问题 //锁前检查 锁的粒度过大 锁后检查安全性 if(instance==nullptr){ mutex.lock(); if(instance==nullptr) instance = new A(); mutex.unlock(); } return instance; } 快排 归并 堆排 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; using namespace std; //快排 时间复杂度 平均nlogn 空间复杂度O(1) void quick_sort(int arr[], int l, int r){ if(l \u0026gt;= r) return; int x = arr[l+r \u0026gt;\u0026gt; 1]; int i = l-1, j = r+1; while(i \u0026lt; j){ while(arr[++i] \u0026lt; x); while(arr[--j] \u0026gt; x); if(i \u0026lt; j) swap(arr[i], arr[j]); } quick_sort(arr, l, j); quick_sort(arr, j+1, r); } //归并 //时间复杂度NlongN 空间复杂度N int tmp[105]; void merge_sort(int arr[], int l, int r){ if(l \u0026gt;= r) return; int mid = (l + r)\u0026gt;\u0026gt;1; merge_sort(arr, l, mid); merge_sort(arr, mid+1, r); //合并 int i = l, j = mid+1, k = 0; while(i \u0026lt;= mid \u0026amp;\u0026amp; j \u0026lt;= r){ //i和j注意了 if(arr[i] \u0026lt; arr[j]) tmp[k++] = arr[i++]; else tmp[k++] = arr[j++]; } while(i \u0026lt;= mid) tmp[k++] = arr[i++]; while(j \u0026lt;= r) tmp[k++] = arr[j++]; for(int i = 0; i \u0026lt; k; i++){ arr[l+i] = tmp[i]; } } //大根堆 把大交换上去 void heapify(int arr[], int r, int n){ int i = 2*r+1, j = 2*r+2; int mx = r; if(i \u0026lt; n \u0026amp;\u0026amp; arr[i] \u0026gt; arr[mx]) mx = i; if(j \u0026lt; n \u0026amp;\u0026amp; arr[j] \u0026gt; arr[mx]) mx = j; if(mx != r) { swap(arr[mx], arr[r]); heapify(arr, mx, n); } } //堆排序 堆化 堆顶取出交换到末尾去 void heap_sort(int arr[], int n){ for(int i = n; i \u0026gt;= 0; i--){ heapify(arr, i, n); //当前的点 总共的点 } //交换完成 for(int i = n-1; i \u0026gt;= 0; i--){ swap(arr[0], arr[i]); heapify(arr, 0, i); //总量减1 } } int main(){ int arr[]{1,93,6,45,2,7,8,45,2123,239,0,3}; int n = 12; // merge_sort(arr, 0, n-1); //如果从0编号 那么儿子节点为2i+1 2i+2 //最后一个节点是啥 heap_sort(arr, n); for(int i = 0; i \u0026lt; n; i++) printf(\u0026#34;%d \u0026#34;, arr[i]); puts(\u0026#34;\u0026#34;); return 0; } kmp算法 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;string\u0026gt; using namespace std; int Next[105]; void getNext(string p){ //按照左神讲的 考查的是当前位置的前一个字符串的最长前后缀 Next[0] = -1; Next[1] = 0; int cn = 0, i = 2; int n = p.size(); while(i \u0026lt; n){ if(p[cn] == p[i-1]) Next[i++] = ++cn; else if(cn) cn = Next[cn]; else Next[i++] = 0; //前后缀为0 } } void kmp(string p, string s){ //首先求next数组 getNext(p); int i = 0, j = 0; int m = s.size(); int n = p.size(); while(i \u0026lt; m \u0026amp;\u0026amp; j \u0026lt; n){ if(s[i] == p[j]) i++, j++; else if(Next[j] == -1) i++; //开头不匹配 else j = Next[j]; if(j==n){ cout\u0026lt;\u0026lt;i-n\u0026lt;\u0026lt;endl; //起始位置 j = Next[j-1]; i--; } } } int main(){ string text = \u0026#34;helloworldllo\u0026#34;; string pattern = \u0026#34;llo\u0026#34;; kmp(pattern, text); return 0; } LRU算法 strcpy和memcpy #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;string\u0026gt; #include \u0026lt;cstring\u0026gt; using namespace std; //内存拷贝函数 按字节拷贝 void* my_memcpy(void* dest, void* src, size_t count){ if(dest == NULL || src == NULL) return NULL; char* pdest = (char*) dest; char* psrc = (char*) src; while(count--){ *pdest++ = *psrc++; } return dest; } //字符串拷贝函数 仅用来拷贝字符串 char* my_strcpy(char* dest, const char* src){ if(dest == NULL || src ==NULL) return NULL; char* pdest = dest; while((*dest++ = *src++) != \u0026#39;\\0\u0026#39;); return pdest; } int main(){ char src[] =\u0026#34;hello\u0026#34;; char dest[100]; //my_memcpy(dest, src, strlen(src)); my_strcpy(dest, src); printf(\u0026#34;%s\\n\u0026#34;, src); return 0; } string类 class String{ public: String(const char* str = NULL); //通用构造函数 String(const String\u0026amp; str); //拷贝构造函数 ~String(); String\u0026amp; operator+(const String \u0026amp;str); String\u0026amp; operator+=(const String \u0026amp;str); char\u0026amp; operator[](const int n) const; String operator=(const String \u0026amp;str) const; bool operator==(const String \u0026amp;str)const; bool operator\u0026lt;(const String \u0026amp;str) const; bool operator\u0026lt;(const String \u0026amp;str) const; size_t size const; //获取长度 //流运算符\u0026gt;\u0026gt; \u0026lt;\u0026lt; private: char* data; //字符串 size_t length; //长度 } String::String(const char* str){ //通用构造函数 if(!str){ length = 0; data = new char[1]; *data=\u0026#39;\\0\u0026#39;; }else{ length = strlen(str); //对空指针调用strlen会导致内存错误 data = new char[length+1]; strcpy(data, str); } } String::String(const String\u0026amp; str){ //拷贝构造 length = str.length; data = new char[length+1]; strcpy(data, str.data); } //析构 String::~String(){ delete []data; length = 0; } //赋值重载 String\u0026amp; String::operator=(const String \u0026amp;str){ delete []data; length = str.length; data = new char[length+1]; strcpy(data, str.data); return *this; } 智能指针shared_ptr #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; using namespace std; template \u0026lt;typename T\u0026gt; class SmartPtr{ private: T * ptr; int* use_count(); SmartPtr(T* p); SmartPtr(const SmartPtr\u0026lt;T\u0026gt; \u0026amp; orig);//拷贝 SmartPtr\u0026lt;T\u0026gt;\u0026amp; operator=(const SmartPtr\u0026lt;T\u0026gt;\u0026amp; orig); ~SmartPtr(); } SmartPtr::SmartPtr(T* p){ ptr = p; *use_count = 1; } SmartPtr::~SmartPtr(){ //析构 delete ptr; ptr = nullptr; delete use_count; use_count = nullptr; } int main(){ return 0; } 写一个函数在main函数执行前先运行 #include \u0026lt;iostream\u0026gt; using namespace std; class Hello{ public: Hello(){ cout\u0026lt;\u0026lt;\u0026#34;before main!\u0026#34;\u0026lt;\u0026lt;endl; } }; Hello w; //全局变量在main之前执行 int main(){ cout\u0026lt;\u0026lt;\u0026#34;I am main\u0026#34;\u0026lt;\u0026lt;endl; return 0; } 匿名管道pipe #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(){ pid_t fd[2]; pipe(fd); //创建管道 int ret = fork(); if(ret \u0026gt; 0){ //父进程 父写 fd[0]读 fd[1]写 close(fd[0]); char *str =\u0026#34;hello world\\n\u0026#34;; write(fd[1], str, strlen(str)); sleep(1); }else if(ret == 0){ //子进程 子读 fd[1]关闭 close(fd[1]); char buf[1024]; int n = read(fd[0], buf, sizeof(buf)); //写到显示器上 write(1, buf, n); } return 0; } rand7产生rand10 leetcode470\nclass Solution { public: int rand10() { int t; while(true){ t = rand7() + (rand7()-1) * 7; if(t \u0026lt;= 40) return t%10 +1; }; return 0; } }; 反转二叉树 class Solution { public: TreeNode* invertTree(TreeNode* root) { //遍历所有点 然后交换左右孩子 dfs(root); return root; } void dfs(TreeNode* root){ if(!root) return; dfs(root-\u0026gt;left); dfs(root-\u0026gt;right); swap(root-\u0026gt;left, root-\u0026gt;right); } }; ","permalink":"//localhost:1313/posts/005%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","summary":"\u003ch2 id=\"单例模式\"\u003e单例模式\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eclass\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nl\"\u003epublic\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nf\"\u003egetInstance\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nl\"\u003eprivate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nf\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t    \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"nf\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//内存读写reorder不安全 导致双检查锁失效\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//先分配内存 再执行构造器 最后返回给实例\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//编译器的优化 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"nf\"\u003egetInstance\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e//读没有问题 写就有问题 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\u003cspan class=\"c1\"\u003e//锁前检查 锁的粒度过大 锁后检查安全性 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003emutex\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003einstance\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"nf\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003emutex\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eunlock\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"快排-归并-堆排\"\u003e快排 归并 堆排\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//快排 时间复杂度 平均nlogn 空间复杂度O(1) \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003equick_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eswap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003equick_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003equick_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//归并\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//时间复杂度NlongN  空间复杂度N\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e105\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003emerge_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003emerge_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"nf\"\u003emerge_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e//合并\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//i和j注意了\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//大根堆 把大交换上去\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eheapify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003emx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003emx\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003emx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003emx\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003emx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emx\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eswap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003emx\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eheapify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emx\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//堆排序 堆化 堆顶取出交换到末尾去\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eheap_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eheapify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//当前的点 总共的点\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//交换完成\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eswap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eheapify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//总量减1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[]{\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e93\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2123\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e239\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// merge_sort(arr, 0, n-1);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e//如果从0编号 那么儿子节点为2i+1 2i+2\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e//最后一个节点是啥\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nf\"\u003eheap_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%d \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003eputs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"kmp算法\"\u003ekmp算法\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e105\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003egetNext\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//按照左神讲的 考查的是当前位置的前一个字符串的最长前后缀\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecn\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ecn\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ecn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecn\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ecn\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ecn\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//前后缀为0\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003ekmp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//首先求next数组\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nf\"\u003egetNext\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//开头不匹配\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//起始位置\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;helloworldllo\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003epattern\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;llo\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003ekmp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epattern\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"lru算法\"\u003eLRU算法\u003c/h2\u003e\n\u003ch2 id=\"strcpy和memcpy\"\u003estrcpy和memcpy\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstring\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//内存拷贝函数 按字节拷贝\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nf\"\u003emy_memcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edest\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epdest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epsrc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epdest\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epsrc\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//字符串拷贝函数 仅用来拷贝字符串\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nf\"\u003emy_strcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edest\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epdest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"sc\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003epdest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//my_memcpy(dest, src, strlen(src));\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nf\"\u003emy_strcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%s\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"string类\"\u003estring类\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eclass\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nl\"\u003epublic\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//通用构造函数\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//拷贝构造函数\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e+=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//获取长度\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e//流运算符\u0026gt;\u0026gt; \u0026lt;\u0026lt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"nl\"\u003eprivate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//字符串\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//长度\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//通用构造函数\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sc\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003estrlen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//对空指针调用strlen会导致内存错误\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003estrcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//拷贝构造\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003estrcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//析构\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e::~\u003c/span\u003e\u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edelete\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//赋值重载\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edelete\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003estrcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"智能指针shared_ptr\"\u003e智能指针shared_ptr\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstring\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003etemplate\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kr\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eclass\u003c/span\u003e \u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nl\"\u003eprivate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nf\"\u003euse_count\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eorig\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//拷贝\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eorig\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eptr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003euse_count\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e::~\u003c/span\u003e\u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e  \u003cspan class=\"c1\"\u003e//析构\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003edelete\u003c/span\u003e \u003cspan class=\"n\"\u003eptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eptr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edelete\u003c/span\u003e \u003cspan class=\"n\"\u003euse_count\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003euse_count\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"写一个函数在main函数执行前先运行\"\u003e写一个函数在main函数执行前先运行\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eHello\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003eHello\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;before main!\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eHello\u003c/span\u003e \u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//全局变量在main之前执行 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;I am main\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"匿名管道pipe\"\u003e匿名管道pipe\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unistd.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003epid_t\u003c/span\u003e \u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003epipe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//创建管道\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003efork\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//父进程 父写 fd[0]读 fd[1]写\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"nf\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;hello world\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nf\"\u003estrlen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003esleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//子进程 子读 fd[1]关闭\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"nf\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1024\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e//写到显示器上\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"nf\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"rand7产生rand10\"\u003erand7产生rand10\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://leetcode-cn.com/problems/implement-rand10-using-rand7/\"\u003eleetcode470\u003c/a\u003e\u003c/p\u003e","title":"005数据结构"},{"content":"B+树 具有n个关键字的节点含有n个分支。而在B树中，具有n个关键字的节点含有n+1个节点。 B+树的叶子节点包含了所有关键字，并且包含信息。 B+树非叶子节点只起索引作用，不存数据。 B+数在叶子节点使用指针将前后磁盘块中的索引连接起来，形成一个线性链表，方便范围查询。 什么是索引 索引是数据表中对字段进行排序的一种数据结构。常用的索引有\nB树 哈希索引 全文索引 Rtree索引\nAVL树，B树，B+树，红黑树，哈希表。\n哈希表和B树不利于范围查找。红黑树在数据量大的时候性能会下降。\n**聚集索引：**数据和索引在一起的。\n**非聚集索引：**索引文件和数据文件是分离的。\n联合索引：对多个字段同时建立的索引。Mysql从左到右的使用索引中的字段，一个查询可以只使用索引中的一部份，但只能是最左侧部分，跳跃索引查询就会导致索引失效。\nB树和B+树的区别 B树：叶节点具有相同的深度，所有索引元素不重复，节点中的数据索引从左到右递增排列。 B+树：非叶子节点不存储数据，只存储索引，叶子节点包含了全部的关键字且存储数据。叶子节点用指针连接从左往右递增排序，提高区间访问的性能。 mysql存储引擎myISAM和InnoDB 存储引擎是基于表的，而不是数据库。\nInnoDB引擎：支持事务，行锁（适合高并发），支持外键。mysql5.5版本后的默认存储引擎 myISAM引擎：不支持事务，不支持外键，支持表锁。优势是访问的速度快。mysql5.5版本前的默认存储引擎。myISAM索引文件和数据文件是分离的。查询较多的更新较少的情况下使用myisam存储引擎。 数据库三大范式 数据库中的所有字段都是不可分割的原子值 满足第一范式的前提下，除主键外的每一列都必须完全依赖于主键。如果不完全依赖，只能发生在联合主键下。 满足第二范式的前提下，除开主键列的其他列之间不能有传递依赖关系。 事务的四个特性ACID 事务是作为单个逻辑工作单元执行的一系列操作。要么完全执行，要么完全不执行。\n**原子性 ：**同一事务中多个操作不能分割，必须是一个整体。 **一致性 ：**事务操作前后的总量保持一致。 **隔离性 ：**多个事务之间的操作互不干扰。 **持久性：**事务提交以后，对数据库中数据的改变是永久的。 事务隔离级别 事务分为四个隔离级别：分别是读未提交，读提交，可重复读，串行化。从前往后隔离级别依次递增，同时执行效率依次下降。mysql的默认隔离级别是可重复读。\n读未提交：会产生脏读，即一个事务读取了另一个事务未提交的内容。 读提交：可以解决脏读问题，但是会产生不可重复读，即一个事务在执行的过程中得到的结果不一致。 可重复读：可以解决不可重复读的问题，但会产生幻读，即一个事务无法看到另一个事务已经提交的内容。 **串行化：**可以解决幻读问题。当同一张表被另一个事务操作时，其他事务的写操作是不可以进行的，进入串行化排队，直到另一个结束，同时还为超时的情况下才可以继续执行。 set global transaction isolation level read committed # 修改隔离级别\u0026#39; select @@x_isolation # 查看隔离级别 主键和外键约束 主键：**唯一且非空。**一个表有且只能由一个主键约束。创建主键会自动创建对应的索引，同样删除主键，对应的索引也会被删除。\n外键约束：如果定义了外键约束，主表中没有的数据在子表中是不可以被使用的。主表中的记录被子表引用，是不可以被删除的。\ninner join 和 left join 等值联接：inner join返回两个表中联接字段相等的行 左联接：left join 返回左表所有记录和右表中联接字段相等的记录，如果左表中的记录在右边不存在，则对应字段设为null。 redis 是C语言编写的基于内存可持久化的key-value内存数据库，使用的是epoll单线程模型。常用的数据结构有set， list，string, hash, sorted set。\n查询 分组查询：count() sum() max() min() avg()\n聚合查询：7种 A B A∪B A∩B A - A∩B B - A∩B A∪B - A∩B\n左连接： A - A∩B 右连接：B - A∩B 内连接：A∩B\n悲观锁和乐观锁 悲观锁： 每次去拿数据时都认为别人会修改，所以每次在拿数据的时候都会上锁。悲观锁由数据库自己实现，共享锁和排他锁是悲观锁的不同实现。悲观锁的缺点：效率低，并行差，增加死锁的概率。 乐观锁：每次去拿数据都认为别人不会修改，所以不会上锁。乐观锁适用于读多，写少的场景。乐观锁常见的实现方式：版本号机制和CAS自旋算法。乐观锁的缺点：ABA问题，循环时间长开销大，只能保证一个共享变量的原子操作。 explain 查看执行计划 使用explain关键字可以模拟优化器执行sql查询语句，从而知道mysql是如何处理sql语句的。分析查询语句或表结构的性能瓶颈。\nexplain + sql语句 show profile 用来分析当前会话中语句执行的资源消耗情况。\n什么时候应该创建索引 频繁查询字段 什么时候不应该创建索引 where条件里用不到的字段 频繁更新的字段 表记录太少\u0026lt;300W 重复且平均的表字段 B+树 B+树是B树的变形，B+树非叶子节点只存索引，不存数据，叶子节点存储所有的索引和数据。B+树三层可以存储上百万条数据，磁盘IO最多三次，每次读取磁盘块到内存后，使用二分查找找到索引的位置。\nB+树是聚集索引，数据和索引在一起。B+树使用指针将叶子节点的连接起来。\nB树 是一种多路平衡二叉树，m阶B树，每个节点最多可以有m-1关键字。所有叶子节点在同一层。每个节点保存索引和数据。\n索引 索引是按照某个字段排序的数据结构。\nACID 事务时单个逻辑工作单元的一系列操作。\n原子性：事务的操作是不可分割的，要么完全成功，要么完全失败。\n一致性：事务操作前后的总量保持不变。\n隔离性：事务之间的操作应该相互隔离。\n持久性：事务一旦提交后，数据库中的值不可更改。\n事务的隔离级别 读未提交：产生脏读，即一个事务可以读取另一个事务未提交的内容。 读提交：解决脏读，产生不可重复读，即事务的两次读取结果不一致。 可重复读：解决不可重复读，但是会产生幻读，即一个事务明明提交了，但是在另一个事务中没有更新。 串行化：当两个事务都在写入内容时，必须排队，当两个事务提交后，才可以执行后续事务。 数据库三大范式 数据库中的所有字段都是不可分割的原子值 在满足第一范式的前提下，除开主键外的其他列都必须完全依赖于主键。 在满足第二范式的前提下，除开主键外的其他列之间不能有传递依赖关系。 myisam和innoDB myisam不支持事务，不支持外键，支持表锁。查询速度较快。适合读多更新少的表。\ninnoDB支持事务，支持外键，支持行锁，因为锁的粒度比较小，所以适合高并发。\n持久化 利用永久性存储介质将数据进行保存，在特定的时间将保存的数据进行恢复的机制叫做持久化。确保数据安全。\n将当前数据状态进行保存，快照形式。RDB 将数据的操作过程进行保存，日志形式。AOF ","permalink":"//localhost:1313/posts/004%E6%95%B0%E6%8D%AE%E5%BA%93/","summary":"\u003ch2 id=\"b树\"\u003eB+树\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e具有n个关键字的节点含有n个分支。而在B树中，具有n个关键字的节点含有n+1个节点。\u003c/li\u003e\n\u003cli\u003eB+树的叶子节点包含了所有关键字，并且包含信息。\u003c/li\u003e\n\u003cli\u003eB+树非叶子节点只起索引作用，不存数据。\u003c/li\u003e\n\u003cli\u003eB+数在叶子节点使用指针将前后磁盘块中的索引连接起来，形成一个线性链表，方便范围查询。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"什么是索引\"\u003e什么是索引\u003c/h2\u003e\n\u003cp\u003e索引是数据表中对\u003cstrong\u003e字段\u003c/strong\u003e进行排序的一种\u003cstrong\u003e数据结构\u003c/strong\u003e。常用的索引有\u003c/p\u003e","title":"004数据库"},{"content":"volatile 用来告诉编译器不要对该变量做任何优化，编译器每次操作该变量时，一定要从内存中取出，而不是使用寄存器中与存在的值，因为值可能已经发生了改变。\n应用场景：\n并行设备的硬件寄存器（如状态寄存器）。 多线程中共享变量。 const 用于限定变量，函数和指针不可改变。\nconst限定全局变量时，变量放在静态区。const限定局部变量时，变量放在栈区。 const修饰类中的成员函数时，表示不可对类的对象更改，如果需要更改类中的成员变量，可以使用mutable关键字。 内联函数和宏定义 宏定义在预编译时展开，内联函数在编译时展开。 宏定义只是简单的文本替换，不进行参数的有效性检查。内联函数会进行类型检查，然后将函数体嵌入到目标代码中。 宏定义不加括号容易出错。内联函数没有普通函数的栈操作，效率很高，但是不正确的时候内联函数会导致代码体积过大。 static 静态全局变量，静态局部变量，静态成员变量，静态成员函数\n静态全局变量和静态局部变量都放在静态区，只在声明时初始化一次，仅在本文件中可见，变量在程序运行期间一直存在。静态局部变量的作用域范围仅在局部，下次调用紧接着上次调用的结果值改变。 静态成员函数和静态成员变量没有this指针，必须通过类名才能访问。 malloc 和 new malloc和free是库函数，new和delete是运算符，可以重载。 malloc申请内存时需要指定内存大小，返回一个void*类型，通常需要强转。new申请内存时无需指定内存大小，返回一个对应类型的指针。 malloc不进行初始化。new在创建非内部类型的对象时，调用构造函数初始化，消亡时会调用析构函数。 malloc申请失败时返回null指针，new申请失败时抛出异常。 指针和引用 引用创建时必须初始化，初始化后不可以改变。指针创建时可以不初始化，初始化时需要分配内存，初始化后也可以改变。引用比指针安全。 引用不存在空值引用，指针可以指向空值 引用的本质是指针常量，由编译器完成转换。 extern 可以被其他源文件调用。 告诉编译器，extern限定的代码使用C语言的编译和连接方式。因为C++支持重载，而C不支持，所以可能导致函数编译后的名称不一致，从而找不到对应的函数。 多态的原理 多态分为静态多态和动态多态。静态多态是通过重载和模板实现的，动态多态是通过继承和虚函数实现的。\n动态多态是让基类的指针或引用指向派生类的对象实现的。定义为虚函数的基类，编译器会自动创建一个虚函数表，派生类在继承时会继承这个虚函数表，每个创建的对象拥有一个虚函数表指针，这个指针指向虚函数表，如果派生类重写了基类的虚函数，则对应的虚函数表入口地址发生了更新。虚函数表为所有对象所共享，通常放在代码段。\n什么是进程 进程是分配资源的基本单位，是程序运行的实例。进程通常分为数据段，代码段和进程控制块。进程的地址空间相互独立，一个进程不可访问另一个进程的数据。进程切换时的开销相对于线程来说比较大，需要保存寄存器的值和刷新块表，切换地址空间等。\n进程间的通信方式 有名管道pipe 无名管道fifo 消息队列 共享内存 信号量 信号 套接字 线程是什么 线程是CPU调度的基本单位。线程是进程的一个执行流程。一个进程中可以由多个线程。线程共享进程的地址空间。线程自身几乎不拥有系统资源，除了栈和寄存器。线程间的通信较为容易。但是需要同步。常用的同步机制有互斥锁，读写锁，信号量，条件变量。\n线程共享 进程打开的文件描述符表 进程ID和组ID 信号的处理方式 打开的工作目录 进程的地址空间(堆区，栈区，共享区) 线程独享 线程ID 线程的寄存器 线程的栈 信号屏蔽字 线程优先级 错误返回码errno 信号 信号是一种不精确的通信方式。常用的信号有15号信号，杀死进程 29号进程 11号段错误\nhttp和https的区别 https是安全版的http协议。\nget和post的区别 get用来获取资源，post用来创建资源。\nget将数据放在url地址栏中，使用问号与url分割，数据间用取地址符分割。post将数据放在请求体中。\n安全性上get放在url容易暴露隐私信息，而post放在请求体中可以适当的避免。\nget在传输的数据受url地址栏的限制，post不受这种限制\nget的操作是幂等的，多次操作产生的影响相同，而post是非幂等的\nB树和B+树的区别 B树是多叉平衡树，**M阶的B树，每个节点最多有M-1个关键字，**每个节点的关键字都按照从小到大的顺序排列，因此查询时可以使用二分查找法。\nB树中所有叶子节点都位于同一层，每个节点都存有索引和数据。\nB树的优点在于查询单个数据时，由于每个key都存有对应的date，查询到后可以直接取回。\nB+树非叶子节点只存索引不存数据，每个叶子节点增加一个指向相邻接叶子节点的指针，所有的节点都存在叶子节点。B+树的优点在于范围查询时，可以利用相邻的指针获得指定范围内的数据。\n网络拥塞 慢启动 拥塞避免 快速重传 快恢复 TCP和udp的区别 tcp面向连接的可靠的流式协议，具有超时重传和确认等机制。\nudp面向无连接的报文协议，发出去就不管了，收则全收，丢则全丢。\n智能指针 unique_ptr\nshared_ptr\nweak_ptr\n四种强制类型转换 const_cast去掉const属性的转换，包括const指针和引用\nstatic_cast用于低风险的转换，比如字符型转整形\ndynamic_cast 用于具有继承关系的派生类和子类的转换，当基类转为子类时，如果转换失败会返回NULL\nreinterpret_cast 任何类型都能转，风险较高\npost和put的区别 post用来创建资源，put用来更新资源\npost是非幂等的，put是幂等的。\n8中请求方法：\nhttp 1.0: get post head\nhttp 1.1: put delete options connect trace\nmmu内存管理器 主要作用：虚拟内存到物理内存的地址映射。 设置修改内存访问级别。\n虚拟内存的作用 解决主存容量有限 分隔进程，保证进程空间彼此独立不受干扰 基于局部性原理进行页面替换 虚拟内存的大小由计算机的地址总线决定\ncache名字和TLB命中没有必然联系，是两种独立的机制。\nCPU和Cache之间交换的单位是字节，Cache和内存之间交换的单位是块。\ncoredump文件 gdb可以用于分析coredump文件。coredump文件含有进程被终止时内存/CPU寄存器和各种函数调用栈的信息。\n产生coredump文件的原因：\n内存访问越界 多线程使用了线程不安全的函数 多线程读写的数据未加锁保护 栈溢出 core文件没有符号表信息，必须结合可执行文件才可调试\n模板特化 全特化：模板参数被指定未确定的类型\n偏特化：模板参数没有被全部确定，需要编译器在编译时进行确定。只能偏特化类模板，不能偏特化函数模板。\n别名模板和变量模板属于语法糖\n元编程 在编译时计算出运行时需要的常数，类型和代码的方法。\n右值引用 右值引用指向要被销毁的对象。右值要么是字面常量，要么是在表达式求值过程中创建的临时对象。\nmove函数将左值转换为右值，调用move函数后源对象只能赋值或销毁。\noverride override在子类中标记某个函数，表示想要覆盖已有的虚函数，如果没有覆盖，编译器会报错。\n加作用域运算符调用特定类的虚函数\n内联函数的优劣 优点：减少函数调用的开销，包括寄存器值的保存和实参的拷贝等。 缺点：增加函数体积，可能导致cache装不下，从而减少了cache的命中率。 inline只是一个请求，编译器有权拒绝。\n拷贝构造函数 调用场景：\n一个对象以值传递传参 一个对象以值传递的方式从函数返回 一个对象通过另一个对象初始化 空类 占有一个字节\n有构造，析构，拷贝，赋值运算符，取地址运算符。\n构造函数可以被重载，析构函数不可以被重载且不能带参数。\nexplicit explicit取消隐式转换，类中构造函数默认是implicit\nexplicit关键字的作用是防止类构造哈桑农户的隐式自动转换，只对有一个参数的构造函数有效。\n堆和栈的区别 申请方式不同。栈由操作系统自动分配，堆需要程序员自己申请。 生长方向不同。栈由高地址向地址生长，是一块连续的内存区域。堆由地址向高地址生长，是不连续的内存区域。在一个链表中记录空间内存地址。 分配速度。栈由系统分配，速度较快。堆使用new分配，速度较慢，且容易产生内部碎片。 C++ 和python的区别 python是解析性语言，无需编译，方便快捷，跨平台性很好。\nC++是编译型语言，先编译后执行，编译后通常不能跨平台。\npython使用严格的缩进来表示不同级别的代码块，在C++中使用花括号。\n索引 select语句调用函数后就不会用到索引\nstatic的作用 static可以用来修饰函数和变量。修饰全局变量和局部变量时都是放在静态区，static变量只初始化一次，在程序结束时销毁，全局和局部的区别在于作用域不同。static可以修饰普通成员函数，表明这个函数只在本文件中有效。static修饰类成员变量是，这些变量为这个类所共享，static修饰类成员函数时，也是所有对象共享这个函数，该函数中没有this指针。同时static类成员函数中只能调用static修饰的函数。\n静态存储区 存放的static修饰的全局变量和局部变量，const修饰的变量以及字符串。 数据段和静态区的区别 数据段存放的是代码的二进制指令。静态区是变量。\n虚函数的实现机制 每个含有虚函数的类都有一个虚函数表，类创建的对象都由编译器自动生成一个虚函数表指针来指向虚函数表。子类继承时会继承这个虚函数表，在子类中如果重写了父类定义的虚函数，这个虚函数中的对应内容会替换为重写的内容。当父类指针或引用指向子类对象时，调用对用对应的虚函数时会根据虚函数表指针找到虚函数表，然后从表中找到重写的虚函数入口地址，然后实现对应的行为。虚函数使代码更具有扩展性。\npython的多态 子类继承父类，子类重写父类的函数，调用时就自动调用了子类的函数。\nC++和python的区别 C++是编译型语言，需要先编译再执行，编译后通常不可以跨平台。 python是解释型语言，直接运行，跨平台好。上手快，容易浮于表面不够深入。 python带来的收益 快速上手机器学习和深度学习，直接调用大量的库函数。\nSTL底层容器和实现原理 vector是动态数组，分配连续的内存，2倍扩容。 list双向表，插入删除效率高。 map和set红黑树，有序的容器。 stack和queue底层可能都是数组实现 unordered_map和unordered_set哈希表。 array栈上分配的数组执行效率快。 tuple元组多数据类型的集合。 快排 基于交换和分治的算法， 平均nlogn 最坏n平方\n四次挥手 主动关闭方发送FIN标志位，自身状态进入FIN_WAIT_1被动关闭方收到FIN后，发送ACK确认，自身进入CLOSE_WAIT状态，当主动关闭方收到ACK后，进入FIN_WAIT_2状态，此时主动关闭方只能接收数据，不能发送数据，因为TCP是全双工的，所以要等待被动关闭方关闭后才结束。此时进行了两次挥手，双方进入半关闭状态。当被动关闭方需要关闭时，发送FIN标志位，发出后自身状态进入LAST_ACK状态，如果对方收到FIN标志位后，发送ACK应答，自身进入TIME_WAIT状态，等待2MSL后关闭连接。等待的2MSL是报文在网络传输中一个来回的长度。确保最后一个ACK能被对方收到。\nstatic关键字 static可以修饰普通函数变量和类成员函数和变量。\nstatic修饰普通变量时，分为全局变量和局部变量，两者都保存在静态区，并且只初始化一次，在整个程序运行期间一直存在。全局变量和局部变量的区别是作用域不同。 static修饰普通函数时，说明此函数只在本文件中可见，防止多个文件的同名冲突。 static修饰类中的成员变量时，必须在类中声明，在类外初始化，初始化的时候分配内存，所有的static成员变量为所有对象共享。 static修饰类中的成员函数时，只能调用static的变量和函数，没有this指针，所有对象共享这个函数，可以使用类名直接调用。 变量分为全局变量和局部变量，static修饰全局变量时，表示这个变量只在本文件中可见\nconst关键字 const用于限定变量指针和函数不可改变，方便编译器做类型检查。\ncons修饰变量时必须初始化。const全局变量通常放在静态区，const局部变量放在栈区。 cosnt修饰成员函数时，函数中的成员变量不可更改，如果要修改成员变量需要声明为mutable const修饰指针有两种，常量指针和指针常量，常量指针是指针的指向的值不可改变，而指针的指向可以改变。指针常量是指向不可变，而值可变。 const和define的区别 const明确指定类型，编译器对类型做检查，而define没有类型也不 检查。 const分配内存，而define不分配。 const在编译期处理，而define在预编译期进行宏替换。define的宏替换不加括号会产生严重的影响。 指针和引用的区别 指针保存的是所指对象的地址，而引用是所指对象的别名。指针通过解引用间接访问所指的对象，而引用直接访问。 指针可以有多级，而引用最多两级。当有两个取地址符时，是右值引用，右值引用可以减少深拷贝的次数。 指针定义时可以不初始化，即使初始化后也可以改变。而引用定义时必须初始化，初始化后不可以改变。 引用的本质是指针常量，编译器帮助转换。指针常量的指向不可以改变，值可以变。 define与内联函数的区别 内联函数是一个函数，在编译期插入到调用的地方，而define在预处理期进行替换。 内联函数避免了函数调用时的压栈和参数拷贝等操作，提高了性能。 内联函数对参数有类型检查。define不加括号容易出错。 new和malloc的区别 malloc是库函数，new是运算符 malloc只分配内存不初始化，而new不仅分配内存也初始化。new分配内存以后自动调用构造函数。 malloc分配内存时必须指定内存大小，而new可以自动计算。malloc分配完成后返回的是void*类型，需要强转，而new返回的是对应类型的指针。 malloc分配内存失败时返回NULL，而new分配内存失败时抛出bad_alloc异常。 http和https的区别 两者都是用于客户端和服务器端通信。\nhttps是http的安全版。\n主要区别在于：\nhttp是明文传输，https是密文传输。 http默认端口是80， https的默认443 https需要验证服务器端的身份，如果CA证书不正确则会中断通信。 CA证书需要成本，加密解密的过程增加CPU和内存的开销。 https增加了ssl层，用于确保传输的安全性。\n通信前先进行ssl层的握手，首先客户端ssl版本号和加密组件发送给服务器端。\n服务器端筛选出可用的ssl版本号和加密算法同时加上CA证书发送给客户端。\n客户端验证CA证书的有效性，如果无效则中断通信。\n若有效客户端发送加密的pre-master secret随机密码串，这一步使用的是非对称加密，用于协商后面对称加密的密钥，所以这一步不能被篡改和截获。客户端得到服务器端的响应后，且验证通过后，后续就使用对称加密加密算法进行加密。然后进行TCP三次握手。\nhttp1.0和http1.1的区别 http1.0只支持短连接，即一次通信完成后就立即断开\nhttp1.1支持长连接，一次TCP建立以后，可以进行多次请求。\nhttp1.0只提供了三种请求方法：get post head\nhttp1.1增加了五种请求方法：put delete connect trace options\nhttp1.1增加了许多状态码，比如100 continue 表示已经收到，等待后续的资源。206 partial content 部分资源\nhttp1.1支持一个物理主机上可以有多个虚拟主机共用一个IP\n","permalink":"//localhost:1313/posts/%E5%85%AB%E8%82%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","summary":"\u003ch2 id=\"volatile\"\u003evolatile\u003c/h2\u003e\n\u003cp\u003e用来告诉编译器不要对该变量做任何优化，编译器每次操作该变量时，一定要从内存中取出，而不是使用寄存器中与存在的值，因为值可能已经发生了改变。\u003c/p\u003e\n\u003cp\u003e应用场景：\u003c/p\u003e","title":"八股基础"},{"content":"逻辑用语千万条，第一首先往里套。 首先，其次，然后，最后。 第一，第二，第三，第四。 书籍 《C++ primer》 第五版 《后台开发》 徐晓鑫 《linux高性能服务器编程》 游双 《redis设计与实现》黄健宏 《muduo库》陈硕 static static的使用可以分为两类，一类是用在普通变量和函数上，另一类是用在类中。\n普通变量分为全局变量和局部变量。声明为静态全局变量是在全局区分配内存，并且只在当前文件可见，在文件之外是不可见的。其他文件定义同名变量不会发生冲突。变量的值只在第一次执行时进行初始化。声明为静态局部变量时与全局变量类似，只是作用域为局部作用域。 静态普通函数，只在当前文件中可见，其他文件中定义同名函数不会发生冲突。 static用在类中，首先是静态成员变量，**在类中声明，类外初始化。**所有对象共享一份数据。 然后是静态成员函数：所有对象共享同一个函数，静态成员函数只能访问静态成员变量。 多态 多态分类两大类：静态多态和动态多态。静态多态是重载和模板。动态多态：也叫运行时多态，是通过继承和虚函数实现的。在具有继承关系的子类中，子类重写父类的虚函数，通过父类引用或指针指向子类对象时，产生不同的行为叫做多态。\n多态的核心在于虚函数表指针，每个对象都有一个虚函数表指针，虚函数表指针指向一张虚函数表，表中记录了虚函数的入口地址，如果子类重写虚函数后，这个地址就会替换掉。多态的好处在于更方便程序的扩展，坏处在于每个对象多了一个4字节的指针，同时每次查询虚函数表需要耗时。\n智能指针 C++11有3个智能指针，分别是unique_ptr, shared_ptr和weak_ptr\nunique_ptr独享指针的所有权，无法进行拷贝构造赋值的操作，只能通过move函数进行所有权的转换。 shared_ptr共享对象，它使用引用计数来保存当前有多少个智能指针在引用这个对象，当引用计数降为0时，对象会被销毁。 weak_ptr称为弱引用，用于辅助shared_ptr正常工作，主要解决shared_ptr可能会产生的环形引用问题。weak_ptr不会增加对象的引用计数，共享指针可以直接赋值给弱指针，同时弱指针可以使用lock函数来获取shared_ptr对象 malloc和new malloc和new都是在堆上开辟内存，进行动态的管理。\nnew是操作符，malloc是库函数 malloc只负责开辟内存，没有初始化功能。new不但能开辟内存，还可以初始化。 malloc必须指定开辟内存的大小，并且返回类型为void*，因此malloc的返回值一般都需要进行类型转换。new可以自动计算出所需内存的大小，并且返回指定类型的指针。 malloc和new如果操作是内置数据类型两者基本类似，不同在于申请失败时。malloc申请失败时返回**NULL。**new申请失败抛出异常。 自定义类型时，new先调用operator new函数申请空间，然后在申请的空间上执行构造函数。 C++内存模型 从高地址到低地址\n环境变量和命令行参数 栈区 共享区 堆区 未初始化数据段.bss 初始化数据段.data 代码段.text 指针和引用的区别 指针保存的是所指对象的地址，而引用是所指对象的别名。指针需要通过解引用间接访问对象的值，引用可以直接访问。 指针可以有多级指针，而引用最多两级。并且两个取地址符是右值引用。右值引用是为了减少深拷贝的次数。 指针可以不初始化，即使初始化以后也可以改变。而引用必须初始化，同时初始化以后不许改变。 引用的本质是指针常量。指针常量不可以修改指向，但是可以修改指向的值。常量指针刚好与之相反。 vector底层原理 首先，vector的基类是三根指针，分别是start/finish/end_of_storage用来指示当前分配到的空间所用的起始位置，终止位置和容量尾部。然后，当finish指针到达end_of_storage的位置时，操作系统会寻找当前容量大小2倍的连续内存空间，并且将旧内存中的数据拷贝到新内存，然后释放旧内存。其次，如果重新分配了内存，原来的迭代器就会失效。频繁的开辟新内存比较耗时。如果可以预知使用的大小，可以使用reserve函数，预先开辟足够大的空间。或者使用swap函数收缩内存空间。\n代码生成可执行文件的过程 主要分为四个步骤\n预编译阶段：对g++编译器指定-E参数，生成.i文件。这个阶段的主要工作是将所有的宏展开，去掉所有的条件预编译指令，将所有的头文件包含进来，删除注释等。 编译阶段：对g++编译器指定-S参数，生成.s汇编文件。这个阶段的主要工作是对代码的语法，语义和词法等进行分析。 汇编阶段: 对g++编译器指定-c参数，生成.o二进制文件。 链接阶段：将各个模块之间的相互引用处理好。把所有的静态库用到的目标文件装入程序中，并进行统一编址，然后进行重定位，即逻辑地址到物理地址的转换。 静态库与动态库 静态库：命名方式为lib开头加上自定义的静态库名，然后以.a结尾。静态库实际上是一组目标文件的集合，再链接阶段与调用的程序生成可执行文件。静态库的优点在于：**代码加载速度快，发布程序时，不需要提供对应的库；**缺点时：可执行文件体积大，**同时如果静态库有修改，调用的程序需要重新编译，**而编译的耗时比较久。 动态库：命名方式为lib开头加上自定义的动态库名，然后以.so结尾。动态库首先生成与位置无关的目标文件，然后再运行时加载到内存。优点是：动态库可以共享，节省了系统资源，动态库进行修改后，无需重新编译。缺点是加载速度比静态链接慢，发布程序时，需要提供动态库。 符号表 每个目标文件除了拥有自己的数据和二进制代码外，还提供了3个表：\n**未解决符号表：**提供了所有在该编译单元里引用但是定义并不是在本编译单元的符号及其出现的地址。【引用无定义】将extern声明的变量置入未解决符号表。【外部链接】 **导出符号表：**提供了本编译单元具有定义，并且愿意提供给其他单元使用的符号及地址。【有定义肯让外用】普通变量及其函数被置入导出符号表。 **地址重定向表：**提供了本编译单元所有对自身地址的引用的记录。static声明的全局变量放入地址重定位表中。【内部链接】 指针常量 int* const p = \u0026amp;a 指针常量必须初始化，一旦初始化完成，就不能再修改它的值，即指针的指向不可变。\n引用的本质是指针常量\n声明和定义的区别 声明是告诉编译器有这个变量和函数的存在，但是需要到其它地方去寻找。 定义包含了声明，但是声明不包含定义。 定义时才分配存储空间。 C和C++的区别 设计思想上： C是面向过程的结构化语言，CPP是面向对象的语言 语法上： CPP具有三大特性，封装继承多态 CPP相对于C增加了许多类型安全的功能，比如四种强制类型转换 CPP支持范式编程，如模板类，函数模板等 struct和class的区别 共同点：C++中，可以用struct和class定义类，都可以继承。\n不同点：struct默认继承权限和默认访问权限时public class类的默认继承权限和访问权限时private。\nvolatile关键字 对类型额外修饰的作用，类似于const。告诉编译器不要对这样的对象进行优化，因为该对象的值可能在程序的控制或检测之外被改变。\nconst关键字 const 可以用于限定变量，指针和函数不可改变，同时明确制定了类型，可以方便编译器做类型检查，也增加了代码的可读性。\nconst修饰变量必须初始化。如果是全局的const变量，通常放在静态区。在局部声明的const变量放在栈区。\nconst修饰成员函数时，函数中的成员变量不可改变，除非该变量特别声明为mutable\nconst可以用来修饰指针，称为常量指针const int *p 指针的指向可以改变，但是不能改变指针指向的值。\nconst修饰常量的指针叫做指针常量，int* const p 指针的指向不可以修改，指针指向的值可以修改。指针常量必须初始化。\nconst可以明确指定类型，而宏定义没有数据类型。\ndefine宏是在预处理阶段展开。const常量是编译运行阶段使用。\n宏定义不分配内存，变量定义分配内存。\nextern关键字 引入同一模块在其他文件中定义的全局变量和函数。 如果在C++里调用了C库定义函数，那么需要使用extern \u0026quot;C\u0026quot; 标识这个函数，告诉编译器使用C的方式进行编译，防止C++的编译方式导致命名重整，无法找到对应的C函数。命名重整的原因在于**C++支持函数重载，而C不支持。**所以C++编译时增加了函数参数的标识符。 extern通常放在为解决符号表中，表示定义不在本文件而引用的变量。 this关键字 解决同名冲突 返回对象本身 this指针的本质是指针常量，指针的指向不可以修改。\nmove函数 将左值强制转换为右值引用，右值引用可以减少一次对象的析构和对象的构造。\n右值引用可以减少深拷贝的次数。\n段错误 段错误通常发生在**访问非法内存地址的时候。**系统会发送一个SIGSEGV11号信号告诉当前进程，进程采取默认的捕获方式，即终止进程。\n野指针 试图修改字符串常量的内容 auto关键字 让编译器能够根据初始值的类型推断变量的类型。当处理复杂类型，比如STL中的类型时，优势最明显。auto p = vt.begin()\n四种强制类型转换 static_cast 低风险的转换，比如整数转浮点数，字符型转整形 const_cast 去掉const关键字的转换，可以去掉带const的指针和引用 dynamic_cast 使具有继承关系的基类转换为派生类，如果不可以转换则返回NULL reinterpret_cast 指针或引用的转换，风险较高 RTTI run time type identification 运行时类型识别。**常常结合typeid()和dynamic_cast实现。**可以根据当前调用的指针是何种类型，经过dynamic_cast转换后，调用非虚函数。**dynamic_cast只能用于指针和引用的转换，要转换的类型中必须包含虚函数，转换成功返回子类的地址，失败返回NULL。**typeid返回一个type_info对象的引用。\n构造函数不能是虚函数 虚函数是通过虚函数表指针来调用的，而虚函数表指针存在对象内存空间。当一个对象调用构造函数时，该对象还没有实例化，即没有分配内存空间，所以虚函数表指针无法找到。\n析构函数尽量是虚函数 析构函数不是虚函数容易引起内存泄漏。\n为了实现多态的动态绑定，通常将基类指针指向派生类对象，当指针销毁时，如果析构函数不是虚函数，根据析构函数在继承中的调用顺序，则派生类对象将不会被析构，造成内存泄漏。\n析构函数不能抛出异常 析构函数抛异常，则异常点之后的的程序不会执行，如果异常点之后有释放资源的操作，则这部分资源无法释放，导致内存泄漏。noexcept\n内存泄漏 不再需要使用的内存单元，没有及时释放。memcheck和valgrind检测内存泄漏的工具。使用RAII资源获取就是初始化和智能指针。\n野指针 一些内存的单元已被释放，之前指向它的指针还在被使用。\nvector和list的区别 vector是动态数组，在内存中分配一块连续的内存空间，因此可以使用下标进行快速的随机访问。但是删除和插入需要移动大量的元素。 list是双向链表，在内存中是不连续的空间，由指针将不同的地址连接在一起。list的插入和删除操作都是O(1)的。 数组必须事先设定固定的长度，不能动态的增减，可能会造成资源浪费。链表可以动态的增减。 浅拷贝 由于编译器默认的拷贝构造函数只是简单的位拷贝，可能会导致内存的重复释放。解决浅拷贝的办法通常使用深拷贝，即自己实现拷贝构造函数，在堆上重新分配内存。\n内存对齐 union最大成员所占的整数倍，同时能容纳其他的成员。union中变量共用内存，应以最长的为准。\nstruct按照成员的声明顺序，依次安排内存，偏移量为成员大小的整数倍，最后结构体的大小为最大成员所占大小的整数倍。在C++中，空结构体和空类的内存所占大小为1个字节。C中空结构体所占大小为0。\n为什么要有内存对齐：1. 硬件原因：**加速CPU的访问速度。**因为CPU和内存数据交换的基本单位是块，块的大小为2的n次方字节。内存未对齐可能需要多次访问内存。2. 平台原因：不是所有的平台都支持任意地址的数据访问。\n#include \u0026lt;iostream\u0026gt; using namespace std; typedef union{ long long i; //8 bytes int k[5]; //4 bytes 最长的成员不是20 char c; // 1 byte }UDATE; //联合体共用内存 最长成员为8字节 结果要为8的倍数 同时要能容纳其他成员，即大于等于20字节 所以为24字节 struct data{ int cat; // 4 bytes UDATE cow; //24 bytes 但是需要先拆开来 最长成员为8字节 double dog; //8 bytes }too; //结构体顺序考虑，结果为最大成员的整数倍，如果后一个成员的长度的开始位置不是整数倍需要填充字节 //cat占4个字节 填充4个字节 //起始位置为8 满足整数倍 cow占用24字节 //起始位置为32 满足整数倍 doule占用4字节 //所以结构体总共占用40字节，同时40也是8的倍数。 UDATE temp; int main(){ cout\u0026lt;\u0026lt;sizeof(temp)\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt; sizeof(struct data)\u0026lt;\u0026lt;endl; //24 40 return 0; } gdb调试 gdb可以用于分析coredump文件，coredump文件中含有当进程被终止时内存，cpu寄存器和各种函数堆栈信息等。\n设置断点 b 120 运行 r 打印遍历p number 查看堆栈bt 查看循环中的变量 i 单步运行n ","permalink":"//localhost:1313/posts/003c++%E8%AF%AD%E8%A8%80/","summary":"\u003ch2 id=\"逻辑用语千万条第一首先往里套\"\u003e逻辑用语千万条，第一首先往里套。\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e首先，其次，然后，最后。\u003c/li\u003e\n\u003cli\u003e第一，第二，第三，第四。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"书籍\"\u003e书籍\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e《C++ primer》 第五版\u003c/li\u003e\n\u003cli\u003e《后台开发》 徐晓鑫\u003c/li\u003e\n\u003cli\u003e《linux高性能服务器编程》 游双\u003c/li\u003e\n\u003cli\u003e《redis设计与实现》黄健宏\u003c/li\u003e\n\u003cli\u003e《muduo库》陈硕\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"static\"\u003estatic\u003c/h2\u003e\n\u003cp\u003estatic的使用可以分为两类，一类是用在\u003cstrong\u003e普通变量和函数\u003c/strong\u003e上，另一类是\u003cstrong\u003e用在类中\u003c/strong\u003e。\u003c/p\u003e","title":"003C++语言"},{"content":"TCP头部 16位源端口 16位目的端口 32位序号 32位确认序号 4位TCP头部长度 单位为4字节 6位标志位 16位滑动窗口 16位校验和 16位紧急指针 注意：TCP的包没有IP地址，只有源端口和目的端口。一个TCP连接需要4个元组来表示一个连接。（源端口，目的端口，源IP，目的IP）\n为什么建立连接需要3次握手 主要是初始化序列号和协商最大报文段长度。\n粘包问题 udp不存在粘包的问题，因为udp是个数据包协议，也就是两段数据间有界限的。要么收不到，要么全收。\n产生粘包的原因：nagle算法为了改善网络传输效率，延迟发送数据。应用层由于某些原因不能及时取出TCP的数据，导致TCP缓冲区存放了多段数据。\n解决方式：封包和拆包。包头存放一个变量记录包体的长度。在所发送的内容前，加上发送内容的长度。\nHTTP原理 http协议是应用层协议，通过请求响应的方式在客户端和服务器端进行通信。\nhttp协议是以明文的方式进行传输，并且是无状态的通信协议。\nhttp与https的区别 传输方式：http是**明文传输，极易被监听和篡改。**而https加入了ssl层，数据经过了加密，从而保护了传输数据的隐私和完整性。 身份认证： http没有身份认证，而https经过证书颁发机构的多重认证。 连接端口：http为80 https为443 实现成本：http基本没有成本，https需要申请证书，同时在加密解密上需要消耗更多的CPU资源，访问速度有可能降低。 加锁的图标显示 谷歌和百度搜索的排名会对非https的排名有影响 私钥能解密，但是不能确认是哪个客户端发送的消息，任何人都可以抵赖。为了防止抵赖，可以使用数字签名。\nhttps是http的安全版，在http的基础上增加了SSL安全层。\n基于性能的考虑，https一般使用非对称加密算法获得密钥，再用对称加密算法对消息内容进行加密。\nhttps发送请求的过程：\n第一步，客户端和服务器端交换SSL版本和加密组件列表，同时服务器端将密钥和签名证书发给客户端。 第二步：客户端根据证书和密钥进行验证，通过以后协商传输的密钥。这一步使用非对称加密算法。 第三步：当双方都获得密钥，且校验码没有问题。则进行TCP三次握手，此时采用对称加密算法，提高效率。 http1.0 与 http1.1的区别 **长连接：**HTTP 1.1支持长连接和请求的流水线处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟。 带宽优化： HTTP/1.1中在请求消息中引入了range头域，它允许只请求资源的某个部分。 **新增响应状态码：**100 continue 已经收到第一部分，正等待剩余部分。 101 switch protocols 服务器已确认切换协议。 **host头域：**允许物理主机上多个虚拟主机共享一个IP 缓存机制更灵活，新增control-cache头域 增加了5个请求方法：put delete connect options trace get和post的区别 都是http的请求方式。\n区别在于：\n**用途上：**get一般用于获取资源，post一般用于创建资源。 位置上：get请求的的数据会在地址栏上显示出来，以问号分割url与传输数据，多个参数用取地址符连接。而post的数据放在请求体中。 **安全性上：**优于get将信息显示在地址栏，所以对于用户密码等个人隐私信息很不安全，而post放在请求体中，在安全性上要稍微好点。 **长度限制：**get使用地址栏发送数据，而地址栏的长度是有限的。 **幂等性上：**get操作没有副作用，多次操作产生的副作用相同，所以get是幂等的，而post用于创建资源是会又副作用的，所以post不是幂等的。 cookie和session cookie和session都是跟踪会话的机制。\n**存储位置：**cookie保存在客户端用来记录信息和确定用户身份，session保存在服务端同样用来记录和确定身份。 **安全性：**cookie放在客户端很容易被查看或者破解，没有session安全。 关联性：session的运行依赖于session id 而session id 存在cookie中。如果浏览器禁止了cookie，可以使用url地址重写来传递session id **性能上：**session会在有效期内存在于服务器的数据库或者文件，当请求过多时，服务器性能会下降。 **大小上：**单个cookie保存的大小不能超过4k 使用cookie来管理session以弥补http中无状态特性。通过对set-cookie头域写入session ID可以免登录，提高访问的效率。\n握手优化：session缓存， session key 放在内存，有内存消耗， 负载均衡后找不session key。session ticket 集群可以共享。\nTCP和UDP的区别 TCP: 面向连接的安全的流式协议，连接的时候进行三次握手，数据发送的时候会进行数据确认，数据丢失之后，会进行数据重传。 确认和重传机制。 UDP: 面向无连接的不安全的报文传输，发出去就不管了，收则全收，丢则全丢。 3次握手和4次挥手 TCP三次握手：客户端向服务器端：发送SYN=1和序号seq 服务器端向客户端：回应确定信号同意连接ACK=1以及自己的连接请求SYN=1还有序号seq 客户端回应服务器端：ACK=1告诉对方它已经知道了服务器端同意，连接成功。\nTCP四次挥手：主动关闭方发送关闭信号，被动关闭方收到信号。然后进入半关闭状态，关闭的一方能接收数据但是不能发送数据。 等到另一个未关闭的一方，发起关闭信号以后，进入TIME_WAIT状态，等待对方2MSL之后，彻底关闭。\n3次握手55555555 客户端发起连接，也就是C语言中的connect函数，发送一个SYN=1的标志位，同时携带一个序号。\n服务器端有一个accept函数，用于响应连接。服务器端响应连接后回复一个ACK=1的标志位，并且也发送一个SYN=1的标志位建立连接。\n客户端收到服务器端的ACK应答以后，说明建立成功。两者都同时进入established状态。同时accept和connect函数调用成功，并返回1。\n4次挥手55555555 主动关闭方向被动关闭放发送FIN标志位，表示要断开连接。被动关闭方同意关闭，并回发ACK标志位。此时主动关闭放进入FIN_WAIT_2状态。以后主动关闭方仍然可以接收数据，但是不可以再发送数据。\n当另一方也决定关闭时，会发送FIN标志位，接收方回复ACK同意关闭，并且自身进入Time_wait状态，等待2MSL时长后关闭。发送方如果收到ACK应答后，就直接关闭，如果没有收到会一直发FIN标志位。\n滑动窗口 流量控制：防止发送方发的太快，耗尽接收方的资源。\n控制机制：滑动窗口\n在TCP报文的头部有一个16位的窗口大小，用于告诉发送方接收方可用的缓冲区大小。\n拥塞窗口 拥塞控制：防止发送方发的太快，使网络来不及处理，从而导致网络拥塞。\n控制机制：拥塞窗口\n慢启动 拥塞避免 快重传 快恢复 **慢启动：**为了防止大量数据瞬间注入网络，引起网络阻塞。慢启动算法设定，最开始窗口为1个最大报文长度。一个传输轮次增加一倍的窗口大小。当达到慢开始门限后，执行拥塞避免算法。 拥塞避免： 每个传输轮次将窗口增加一个单位，即加法增长。 快重传： 当收到3个重复确认以后，执行快恢复算法。慢开始门限和发送窗口减半，然后发缺失的数据，进行加法增长，重新进入拥塞避免阶段。 **快恢复：**慢开始门限减半，发送拥塞窗口设定为门限加3。如果后面依旧收到重复的ACK则进行加法增长窗口，如果收到新的ACK，则拥塞窗口设定为慢开始门限的值，并重新进入拥塞避免阶段。 超时进入的是慢启动，重复确认才进入快恢复。\n选择性重传在options中left edge和right edge告诉发送方已经收到的报文序号\nTCP粘包问题 **udp不会出现粘包。**发送方发送的若干包数据到接收方接收时，包粘在了一起。\n造成粘包的原因时因为发送端延迟发送或者接收方没有及时接收缓冲区中的数据。\n通常可以使用以下三种方式来解决\n编程时设定立即发送的操作指令 把数据长度与消息一起发送。 使用特殊标记来区分消息的间隔 HTTP和HTTPS有什么不同 HTTP协议是一种使用明文数据传输的网络协议。HTTPS协议可以理解为HTTP协议的升级，就是在HTTP的基础上增加了**数据加密。**在数据进行传输之前，对数据进行加密，然后再发送到服务器。这样，就算数据被第三者所截获，但是由于数据是加密的，所以你的个人信息让然是安全的。这就是HTTP和HTTPS的最大区别。\n在浏览器地址栏键入URL，按下回车之后会经历以下流程 浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;（递归式和迭代式） 解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接; 浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器; 服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器; 释放 TCP连接; 浏览器将该 html 文本并显示内容; UDP如何做到可靠 想要做到可靠，必须要做到**无重复，无丢失，无错误，无失序。**借鉴TCP的可靠机制\n发送时进行编号 接收方收到数据发出应答信号（超时重传，3次确认重传） 增加校验位 NAT DNS ARP NAT用于实现从内部IP地址到外部IP地址的映射 DNS提供域名到IP地址的映射或者反过来 ARP提供IP到MAC地址的映射 DNS 基于UDP的协议\n递归查询：父域名代替当前服务器递归查询，最后依次返回 迭代查询：父域名服务器告诉当前服务器下一次查询的位置 http状态码 100 continue 等待继续发送 200 ok 请求成功 206 patial content 部分资源 301 永久重定向 302 临时重定向 307 400 客户端请求报文语法错误 403 禁止访问 404 资源不存在 408 请求超时 500 服务器内部错误 503 服务器不可用 http 2.0 SPDY 二进制分帧 多路复用 首部压缩 服务器推送 http 3.0 QUIC+UDP 0 RTT 没有队头阻塞的多路复用 前向纠错 网络安全 **sql注入：**用户提交一段数据库查询代码，根据程序返回的结果获得它想得知的数据。 dos攻击： 让运行的服务器呈停止状态。集中请求造成资源过载，攻击安全漏洞使服务停止。 TCP原理 面向连接，可靠的，基于字节流的传输层协议\n七层模型 物数网传会表应\nping是从应用层直接使用网络层的ICMP协议的，不经过传输层。原始套接字直接使用网络层的IP。\n两台电脑通信：网线+不同的IP地址和子网掩码，即处于同一网段。\nTCP和UDP可以同时使用相同的端口。\n应用程序可以同时使用TCP和UDP两个协议。\nhub集线器 可以实现多个IP主机通信，但是hub的实现方式是广播，容易产生拥堵。\nswitch交换机 是集线器的升级版，可以广播可单播。ARP不知道对方MAC地址时，先广播6个ff的MAC地址，所有网卡都会接收，但是只有目的IP会单播回应，其他的都会丢弃。然后发送方收到正确的MAC后再单播传输数据。\nARP攻击 给两个MAC地址响应ARP广播的目的IP，经由中间人，窃取信息后再转发到正确的地址。\n默认网关 在同一个交换机连接的网络中，属于同一网段，用不到默认网关。网关用来传递两个不同网段的通信，默认网关通常是路由器。当通信的数据不在当前网段时，即发给默认网关。路由器就是用来连接不同网段的，用来构建一个更大的网络。在传输不同的网段信息时，源IP和目的IP是不变的，源MAC和目的MAC是改变的，每经过一个路由器修改一次，记录的是下一次的目的，和这一次的发送MAC。\n延迟确认 ack会随着响应数据发送给对方，如果没有响应的数据就会等待200ms左右，在这期间如果有对方确认到达则立即发送。如果200ms后仍然没有数据需要发送则单独发送ACK。目的是节省带宽。\nNagle算法 没有已发送未确认报文段时，立即发送数据。 存在未确认报文段时，达到mss时再发。 同时有nagle算法和延迟确认存在时会导致网络效率下降，通常会关闭延迟确认和nagle算法。\nsetsockopt(s,IPPROTO_TCP,TCP_QUICKACK,(int*){1}, sizeof(int)); //关闭延迟确认 setsockopt(client_fd, SOL_TCP, TCP_NODELAY,(int[]){1}, sizeof(int)); //关闭nagle算法 忽略SIGPIPE信号 客户端和服务器端连接建立后，若某一端关闭连接，而另一端仍然向它写数据，第一次写数据后会收到RST响应，第二次写数据时，内核会向进程发送一个SIGPIPE信号，通知进程此连接已断开，而这个信号的默认处理方式是终止进程，服务器直接关闭。\nsignal(SIGPIPE, SIG_IGN) SIGSEGV 11 访问地址无效 SIGIO 29异步通知信号 SIGKILL 9 无条件终止\n传输层与网络层的区别 传输层位于网络层之上，为不同主机上的应用进程提供逻辑通信。端到端传输。 网络层负责ip数据报的产生以及ip数据包在网络中的路由转发。 状态码499 服务器端处理的时间过长，客户端主动关闭了连接。\n分块编码 transfer-encoding:chunked 响应头域 它允许服务器发送给客户端的数据分成多个部分，并且不需要预先直到发送数据的总大小。\nclose_wait 基本的思想就是要检测出对方已经关闭的socket，然后关闭它。维持一个心跳包或者设置一个超时时间。\n","permalink":"//localhost:1313/posts/002%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","summary":"\u003ch2 id=\"tcp头部\"\u003eTCP头部\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e16位源端口\u003c/li\u003e\n\u003cli\u003e16位目的端口\u003c/li\u003e\n\u003cli\u003e32位序号\u003c/li\u003e\n\u003cli\u003e32位确认序号\u003c/li\u003e\n\u003cli\u003e4位TCP头部长度  单位为4字节\u003c/li\u003e\n\u003cli\u003e6位标志位\u003c/li\u003e\n\u003cli\u003e16位滑动窗口\u003c/li\u003e\n\u003cli\u003e16位校验和\u003c/li\u003e\n\u003cli\u003e16位紧急指针\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e注意：\u003cstrong\u003eTCP的包没有IP地址\u003c/strong\u003e，只有源端口和目的端口。一个TCP连接需要4个元组来表示一个连接。（源端口，目的端口，源IP，目的IP）\u003c/p\u003e","title":"002计算机网络"},{"content":"阻塞IO和非阻塞IO 阻塞的文件描述符为阻塞IO 非阻塞的文件描述符为非阻塞IO 同步IO和异步IO 同步IO向应用程序通知的是IO就绪事件。要求用户代码自行执行读写操作，将数据从内核缓冲区读入用户缓冲区。 异步IO向应用程序通知的是IO完成事件 。由内核来执行IO读写操作。在linux环境下，aio.h头文件定义的函数提供了对异步IO的支持。 事件处理模式 reactor 同步IO模型通常用于实现reactor模式。要求主线程只负责监听文件描述符是否有事件发生，有的话就立即将该事件通知工作线程。 proactor 异步IO模型通常用于实现proactor模式。也可以用同步IO模拟出proactor模式。proactor将所有IO操作都交给主线程和内核来处理，工作线程仅仅负责业务逻辑。 Reactor模式的工作流程 主线程往epoll内核事件表中注册socket上的就绪事件。 主线程调用epoll_wait等待socket上有数据可读。 当socket上有数据可读时，epoll_wait通知主线程。主线程将socket可读事件放入请求队列。 睡眠在请求队列上的某个工作线程被唤醒，它从socket读取数据，并处理客户请求，然后往epoll内核事件表中注册该socket上的写就绪事件。 主线程调用epoll_wait等待socket可写。 当socket可写时，epoll_wait通知主线程。主线程将socket可写事件放入请求队列。 睡眠在请求队列上的某个工作线程被唤醒，它往socket上写入服务器处理客户请求的结果。 并发模式 半同步半异步模式：同步线程用于处理客户逻辑，异步线程用于处理IO事件。异步线程监听到客户请求后，就将其封装成请求对象并插入到请求队列中，请求队列将通知某个工作在同步模式下的工作线程来读取并处理该请求对象。半同步半反应堆模式采用的事件处理模式是reactor模式：它要求工作线程自己从socket上读取客户请求和往socket写入服务器应答。半同步半反应堆也可以模拟proactor模式，即由主线程来完成数据的读写。在这种情况下，主线程会将应用程序数据，任务类型等信息封装为一个任务对象，然后将其插入请求队列。工作线程从请求对象取得任务对象以后，可直接处理无需执行读写操作。\n问题：主线程和工作线程共享请求队列需要加锁。工作线程较少时可能产生请求任务堆积。\n领导者追随者模式\n在IO模型中，同步和异步区分的是内核向应用程序通知的是何种事件，是就绪事件还是完成事件，以及该由谁来完成IO读写，是应用程序还是内核。\n在并发模式中，同步指的是程序完全按照代码序列的顺序执行。异步指的是程序的执行需要由系统事件来驱动。常见的系统事件包括中断和信号。\n虚拟地址空间 **虚拟地址是操作系统管理内存的一种方式。**方便不同进程使用的虚拟地址彼此隔离。方便物理内存中不相邻的内存在虚拟地址上视为连续的来使用。虚拟地址和物理地址的映射是通过MMU页表进行的。虚拟内存对实际内存有保护作用。\n什么是进程 进程是系统进行资源分配的基本单位，是程序加载到内存后的执行过程。进程一般由数据段，代码段和进程控制块三部分组成。系统通过进程控制块感知进程的存在并对进程进行控制。由于进程之间空间相互独立，多进程比多线程更安全，一个进程基本上不会影响另外一个进程。\n进程三种状态 创建：创建PCB 就绪 运行 阻塞 终止: 归还PCB 什么是线程 线程是CPU调度的基本单位。一个进程可以包含多个线程，线程自己基本不拥有系统资源，但是它可以和同属于一个进程的其他线程共享进程所拥有的全部资源。多线程之间对内存共享，线程间通信可以直接基于共享内存来实现，比多进程之间通信更轻量。多线程之间切换不需要切换虚拟内存空间、文件描述符等，所以线程的上下文切换也比多进程轻量。\n进程fork以后，遵循读时共享写时复制的机制。\n父子进程长期共享：文件描述符和mmap建立的映射区。\n子进程的进程ID，定时器，未决信号集和父进程不同。\n多进程和多线程的应用场景 一般不同任务间需要大量的通信，使用多线程的场景比多进程多。IO密集型。\n但是多进程有更高的容错性，一个进程的崩溃不会导致整个系统的崩溃，在任务安全性较高的情况下，采用多进程。CPU密集型。\n进程线程的本质区别 进程更安全，一个进程完全不会影响另外的进程。 进程间通信比线程间通信的性能差很多。 线程切换开销更低。 IPC进程间通信55555555555 无名管道pipe（血缘关系的进程） 有名管道fifo （无血缘关系的进程） 共享内存 信号(开销小) 消息队列 信号量 套接字 进程间同步 文件锁 信号量 线程间同步 互斥锁 读写锁(读时共享，写时互斥) 条件变量 信号量(互斥锁的升级版) 自旋锁(可以避免进程或线程上下文的开销) 线程共享资源 文件描述符表（打开的文件） 进程用户ID和进程组ID 进程的**内存地址空间.**text代码段 .data数据段 .bss heap堆区 全局变量 静态变量 每种信号的处理方式 进程的当前目录 线程独享资源 线程栈 寄存器组的值 线程ID 错误返回码errno变量 线程信号屏蔽字 线程优先级 进程调度方式 抢占式：立马停止。 非抢占式：时间片用完或者等待资源时，再调用另一个进程。 进程调度算法 先来先服务 短作业优先 优先级调度 时间片轮转 高响应比优先 管道 管道是一种伪文件，实质为内核缓冲区 大小为4K 内核借用环形队列实现\n管道是半双工的，数据只能单向流动，不可重复读取，只能用于有血缘关系的进程\nLinux命令 find命令，用来查找文件。常用的按照名字查找-name，按照文件类型查找-type，linux常用的文件类型有七种，普通文件，目录文件，管道，套接字，软链接，块设备，字符设备。还可以按照文件大小查询-size。 grep命令，按照文件内容来查找。使用规则是grep option pattern file ps aux curl命令 访问一个网页 df查看磁盘大小 du查看目录大小 free -h 查看内存大小和使用情况 top查看系统的实时负载 netstat -ta 查看监听的TCP stat 获取文件属性 file 查看文件类型 sudo iptables -L 查看防火墙状态 sudo vim etc/sysctl.conf 查看TCP属性 大端字节序和小端字节序 大端字节序：网络字节序（高位存低位） 小端字节序：主机字节序，现代PC机采用小端字节序（低位存低位，高位存高位） 比如0x1f3f5f7f 地址0x1000 0x1001 0x1002 0x1003\n大端法：7f存在0x1003 5f存0x1002 3f存0x1001 1f存0x1000 低存高\n小端法：7f存在0x1000 5f存0x1001 3f存0x1002 1f存0x1003 低存低\nsocket服务器端所用函数 socket 创建socket文件描述符 bind 绑定IP和端口号 listen 监听 accept 接受连接 处理客户端的业务\nsocket客户端所用函数 socket 创建套接字文件描述符 bind 绑定IP和端口号（也可以隐式绑定） connect 尝试连接服务器 处理服务器端的业务\n五种网络IO模型 同步阻塞IO\n同步非阻塞IO\nIO多路复用\n信号驱动IO\n异步IO\nselect与poll、epoll的各自的优缺点和区别 select是跨平台的，windows、linux、unix系统下都有 poll在linux和unix下有 epoll是linux特有，epoll的要义就是高效的监视多个socket 多路IO监听时没有动静，监听会休眠监听。 讲讲epoll的边沿触发和水平触发 水平触发：如果epoll_wait缓冲区有数据则直接返回。 边沿触发：如果一次没有读完epoll_wait缓冲区中的数据，则只有当另外有数据再写入时，才返回。 使用边沿触发和非阻塞IO来达到水平触发的效果，减少了epoll_wait的调用次数，提高了效率。 边沿触发可以只读取缓存区中前面的部分信息，进而分析后面的信息是否有用，如果无用则直接丢弃。 Libevent库 是一个开源的库，封装了socket和IO多路转接，用于高并发服务器的开发。跨平台可移植性好。跨平台，线程安全，基于reactor模式实现的高效网络库。\n协程 协程是一种用户态的轻量级线程。协程的开销远远小于线程的开销。\n协程是一种比线程更加轻量级的存在，一个线程可以拥有多个协程。 无论是进程还是线程，都是由操作系统所管理的。而协程不是被OS所管理，而完全是由程序所控制(也就是在用户态执行)。\n信号 信号是一种不精确通信。\n常用的信号有SIGKILL 9 无条件终止信号，SIGSEGV 11 无效存储访问 SIGPOLL 8 轮询事件信号。\n信号有三种处理方式：忽略，捕获，默认。\nkill命令向进程发送信号\n什么是死锁 因为资源调度的方式不合理或者资源的稀缺性，导致进程间的相互等待。\n死锁的四个必要条件：互斥条件，请求和保持条件，环路等待条件，不可剥夺条件。\n死锁的预防只要破坏死锁产生的四个必要条件。通常采用预先静态分配方法，可以破坏请求和保持条件。\n死锁的避免：采用银行家算法，只要系统处于安全状态，系统便可避免死锁。\n死锁的解决：撤销进程，剥夺资源。\n僵尸进程和孤儿进程 僵尸进程：子进程死亡，而父进程没有进行回收 waitpid回收指定进程 孤儿进程：父进程死亡，而子进程仍然存活，但是系统会让init进程领养孤儿进程。 fork函数 fork函数用来创建子进程 一次调用，两次返回。在父进程中返回子进程的PID，在子进程中返回0\nexec族 在程序中调用另一个可执行程序，但是进程ID不改变。\n网络编程IO 服务器通常需要处理三类事件：IO事件，信号及定时事件。\n事件处理模式：reactor和proactor\n同步IO模型通常用于实现reactor模式\n异步IO则用于实现proactor模式\n什么是reactor模式 它要求主线程只负责监听文件描述符上是否有事件发生，有的话立即将该事件通知工作线程。读写数据，接受新的连接以及处理客户请求均在工作线程中完成。\n什么是proactor模式 它将所有IO操作都交给主线程和内核来处理，工作线程仅仅负责业务逻辑。\nmmap存储映射 将磁盘空间映射到进程空间，**使进程可以采用指针的方式操作这段内存，**而不用调用read和write函数。提高了读写的效率，同时也可以实现进程间的通信。\n异步IO原理 底层将数据准备好后，内核会给进程发送一个异步通知信号SIGIO29通知进程，然后进程调用信号处理函数去读数据，没准备好，数据就忙自己的事情。\nselect poll epoll select单个进程打开的文件描述符有上限，为1024或者2048。select对于有响应的事件需要轮询来查找满足要求的事件。每次调用select都需要把文件描述符集合从用户态拷贝到内核态。 poll描述fd的集合是链式的，解决了打开文件描述符数量的限制。同样需要轮询满足事件的文件描述符。也需要进行用户态和内核态的文件描述符拷贝。poll是水平触发。 epoll使用了mmap内存映射技术和红黑树的数据结构。通过三个函数来监听多个文件描述符，同时不随数量的上升效率呈线性的下降。mmap内存读写快于IO读写，及时共享映射内存的改变。 ","permalink":"//localhost:1313/posts/001%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","summary":"\u003ch2 id=\"阻塞io和非阻塞io\"\u003e阻塞IO和非阻塞IO\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e阻塞的文件描述符\u003c/strong\u003e为阻塞IO\u003c/li\u003e\n\u003cli\u003e非阻塞的文件描述符为非阻塞IO\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"同步io和异步io\"\u003e同步IO和异步IO\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e同步IO向应用程序通知的是\u003cstrong\u003eIO就绪事件\u003c/strong\u003e。要求用户代码自行执行读写操作，将数据从内核缓冲区读入用户缓冲区。\u003c/li\u003e\n\u003cli\u003e异步IO向应用程序通知的是\u003cstrong\u003eIO完成事件\u003c/strong\u003e 。由内核来执行IO读写操作。在linux环境下，aio.h头文件定义的函数提供了对异步IO的支持。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"事件处理模式\"\u003e事件处理模式\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003ereactor 同步IO模型通常用于实现reactor模式。要求主线程只负责监听文件描述符是否有事件发生，有的话就立即将该事件通知工作线程。\u003c/li\u003e\n\u003cli\u003eproactor 异步IO模型通常用于实现proactor模式。也可以用同步IO模拟出proactor模式。proactor将所有IO操作都交给主线程和内核来处理，工作线程仅仅负责业务逻辑。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"reactor模式的工作流程\"\u003eReactor模式的工作流程\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e主线程往epoll内核事件表中注册socket上的就绪事件。\u003c/li\u003e\n\u003cli\u003e主线程调用epoll_wait等待socket上有数据可读。\u003c/li\u003e\n\u003cli\u003e当socket上有数据可读时，epoll_wait通知主线程。主线程将socket可读事件放入请求队列。\u003c/li\u003e\n\u003cli\u003e睡眠在请求队列上的某个工作线程被唤醒，它从socket读取数据，并处理客户请求，然后往epoll内核事件表中注册该socket上的写就绪事件。\u003c/li\u003e\n\u003cli\u003e主线程调用epoll_wait等待socket可写。\u003c/li\u003e\n\u003cli\u003e当socket可写时，epoll_wait通知主线程。主线程将socket可写事件放入请求队列。\u003c/li\u003e\n\u003cli\u003e睡眠在请求队列上的某个工作线程被唤醒，它往socket上写入服务器处理客户请求的结果。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"并发模式\"\u003e并发模式\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e半同步半异步模式：同步线程用于处理客户逻辑，异步线程用于处理IO事件。异步线程监听到客户请求后，就将其封装成请求对象并插入到请求队列中，请求队列将通知某个工作在同步模式下的工作线程来读取并处理该请求对象。半同步半反应堆模式采用的事件处理模式是reactor模式：它要求工作线程自己从socket上读取客户请求和往socket写入服务器应答。半同步半反应堆也可以模拟proactor模式，即\u003cstrong\u003e由主线程来完成数据的读写\u003c/strong\u003e。在这种情况下，主线程会将应用程序数据，\u003cstrong\u003e任务类型等信息封装为一个任务对象\u003c/strong\u003e，\u003cstrong\u003e然后将其插入请求队列\u003c/strong\u003e。\u003cstrong\u003e工作线程从请求对象取得任务对象以后，可直接处理无需执行读写操作。\u003c/strong\u003e\u003c/p\u003e","title":"001操作系统"},{"content":"综合writing 模板 Both the passage and the lecture explore the topic about \u0026hellip;. The reading passage proclaims that \u0026hellip;. While in the lecture , the professor uses three specific perspectives to contradict what the reading states .\nFirst and foremost , the reading part holds the belief that \u0026hellip;. because \u0026hellip;. However , the lecturer doubts the view by stating that \u0026hellip; In order to strength his own point , the professor further explains that \u0026hellip;\nMoreover , the reading maintains that \u0026hellip;.. since \u0026hellip;.. The professor in the lecture , on the contrary , points out that \u0026hellip;. The professor defends his own point with the example of \u0026hellip;.\nLast but not least , the reading material believes/states that \u0026hellip; because \u0026hellip; Nevertheless , the professor argues that \u0026hellip;. For instance , \u0026hellip;.\nBoth the passage and the lecture explore the topic about .... The reading passage proclaims that .... While inthe lecture , the professor uses three specific perspectives to contradict what the reading states . First and foremost , the reading part holds the belief that .... because .... However , the lecturer doubts the view by stating that ... In order to strength his own point , the professor further explains that ... Moreover , the reading maintains that ..... since ..... The professor in the lecture , on the contrary , points out that .... The professor defends his own point with the example of .... Last but not least , the reading material believes/states that ... because ... Nevertheless , the professor argues that .... For instance , .... 讨论writing 模板 As far as I\u0026rsquo;m concerned , I tend to be in favor of the argument that \u0026hellip;. My view is going to be illustrated by following reasons and examples.\nTo start with , just as XXX has said , \u0026hellip;\nIn addition , \u0026hellip;\n150 - 160\nAs far as I\u0026#39;m concerned , I tend to be in favor of the argument that .... To start with , just as XXX has said , ... In addition , ... 科技 产品 消费 效率 心理需求 心理满足 As far as I am concerned buying the newest technological devices would be a wise choice . My view is going to be illustrated by the following reasons and examples.\nTo start with , the newest technological devices help users to improve their efficiency , no matter in work or study . It should be emphasized that along with the accelerating development of the whole society , a higher efficiency becomes more and more important . It allows individuals to accomplish more tasks within relatively certain time limits , which in turn strengthens one\u0026rsquo;s competitiveness and offers them a higher chance to succeed. In that case , buying new technological devices serves better in assisting the person to get high efficiency . To be specific , there is no doubt that new technological devices generally have advantages compared with existing ones . For example, they may offer some new functions or improve existing ones , and all these factors play an essential role in helping people achieve their aims more effectively , removing the barriers as well as difficulties. As a result , people who use new technological devices are capable of finishing tasks more quickly . In other words , new technological devices guarantee high efficiency.\nIn addition , using the newest technological devices also brings individuals the benefit of realizing their higher needs. Thanks to the development of the economy and technology, people in current society have almost fulfilled their basic needs related to survival and safety . Under such circumstances , they have begun to realize those need that are at a higher level . Those needs are usually more psychological and social , which makes the choice of buying the newest technological devices reasonable . To give more details , people using the newest technological devices are able to enjoy the feeling of happiness and satisfaction after they buy it immediately since this behavior continuously implies to them that they have the right and the ability to enjoy the best things. Besides , people who possess the newest devices usually can grab the attention of people surrounding them , which enables them to enclose relationship with others and even harvest other people\u0026rsquo;s respect or envy . All factors listed above , psychological feelings and connections with others , are just what nowadays people mainly are pursuing , and it supports my standpoint that buying the newest devices , rather than adopting them when they are well-adopted , is worth the effort .\nAs far as I am concerned , I tend to be in favor of the argument that people should like to pursue the devices of the newest version. My view is going to illustrated by following reasons and example.\nTo start with, just as Mike has said, the newest technological devices help users to improve their efficiency, no matter in work or study. It should be emphasized that along with the accelerating development of the whole society , a higher efficiency becomes more and more important. It allows individuals to accomplish more tasks within relatively certain time limits , which in turn strengthens one\u0026rsquo;s competitiveness and offers them a higher chance to succeed.\nIn addition , using the newest technological devices also brings individuals the benefit of realizing their higher needs. To be more specific , people using the newest technological devices are able to enjoy the feeling of happiness and satisfaction after they buy it immediately .\nsince this behavior continuously implies to them that they have the right and the ability to enjoy the best things.\n创造力 As far as I am concerned , I tend to be in favor of the argument that the power of creativity far outweighs that basic knowledge in terms of successful inventions. My view is going to illustrated by following reasons and example. To start with , just as Mike has said , the power of creativity far exceeds the power of basic knowledge. For instance , Bell is commonly credited with inventing the first practical telephone by taking advantage of his creativity and numerous endeavors. It is precisely due to his creativity that such scientific breakthroughs have been made. In addition , in the modern world , similar evidence could be also be traced . Steve Jobs , co-founders and former CEO of Apple , shocked the world with his creative electronic products whose superior functions and qualities can never be matched. 压力 健康 生活压力\nAs far as I am concerned , I tend to be in favor of the argument that government should arouse people\u0026rsquo;s awareness of importance of physical soundness. My view is going to be illustrated by following reasons and example. To start with , just as Mike has said , with the acceleration of social development , people , especially young people , are confronted with unprecedentedly fierce competition . For instance , they need to work very hard to guarantee a decent life , which causes them much(way) heavier pressure than before. Under such circumstances , most of them are prone to in a sub-health state . In summary , government should increase access to public exercise equipment in neighborhood , raising people\u0026rsquo;s awareness of the importance of doing exercise regularly through the mass media , which is the government\u0026rsquo;s responsibility. 因特网 科技 社会发展 生活方式\nAs far as I am concerned , I tend to be in favor of the argument that Internet is a treasure trove of information , which offers knowledge on any given topic under the sun. My view is going to be illustrated by following reasons and examples. To start with , just as Mike has said , search engines make information accessible on various subject matters such as government law and services , trade and conferences , market information , new innovations , and technical support , and even dispense advise on love and relationship matters. In addition , it has become common practice to seek assistance from the web in order to research and gather resources for homework , office presentations , and supplement one\u0026rsquo;s own research . The web also updates news about the latest breakthroughs in the field of medicine , technology , and other domains of science . 兴趣 爱好\nAs far as I am concerned , I tend to be in favor of the argument that young students should not decrease an abundance of time that teaching students about music and art . My view is going to be illustrated by following reasons and examples .\nTo start with , just as Mike has said , we should emphasize what is conveyed in the famous saying: \u0026lsquo;Interest is the best teacher.\u0026rsquo; Evidently , the primary step toward a person\u0026rsquo;s success is to have an emotional preference . In fact , interest constitutes the biggest impetus in learning , keeping one refreshed and preventing feelings of boredom and tiredness .\nIn addition , numerous epoch-making accomplishments in the scientific world owe much to the initial interest of the scientists. Therefore , students shouldn\u0026rsquo;t be compelled to increase the time spent on any knowledge field , but rather to keep a balance among all knowledge fields.\n学生是否要 gap \u0026mdash; 兴趣 As far as I am concerned , I tend to be in favor of the argument that students should take at least a year off to work or travel before they begin studying at a university when students finish their high school , which can be beneficial for students to discover their interests. My view is going to be illustrated by the following reasons and examples.\nTo start with , just as Mike has said , the famous saying goes , \u0026quot; Interest is the best teacher.\u0026quot; Evidently , the primary step toward a person\u0026rsquo;s success is to have an emotional preference. In fact , interest constitutes the biggest impetus in learning , keeping one refreshed and preventing feelings of boredom and tiredness. Therefore , it is helpful that spending at least a year work or travel before getting the university education , which is one of the best ways to figure out personal passion if students want to be successful in their future careers.\n以 成绩 评分 As far as I am concerned , I tend to be in favor of the argument that performance should be the only criterion when teachers give grades. My view is going to be illustrated by following reasons and examples . To start with , just as Mike has said , such a strategy would show fairness , which is an important factor to motivate students. The lack of motivation would undoubtedly pose negative effects on student\u0026rsquo;s studies . Consequently , it would even have a lasting effect on their future life. In addition , giving grades based on performance , instead of effort , also means a clear standard . It would be hard for teachers to tell whether a student is working hard or not during the process. It is totally subjective . In contrast , the performance , in other words , the results , cannot tell lies , making the performance-based criteria a wiser one . Do you agree or disagree with the following statement? It is often not a good thing for people to move to a new town or country because they lose their old friends. Use specific reasons and examples to support your answer.\n搬家 好不好 As far as I am concerned , I tend to be in favor of the argument that people wouldn\u0026rsquo;t lose their friends because they move to a new town or country. My view is going to be illustrated by following reasons and example. To start with , just as Mike has said , with the development of society , the infrastructure make it convenient as well as time-saving to travel another town or country, which means people can still meet up with friends easily . Going to a new town or country can also push individuals to broaden their perspectives and see the world in a distinctive way. In addition , the opportunities of being successful in future career are enhanced by settling in a big city . Simultaneously , I believe that the greatest predictor of being successful in the future career is how many hours are devoted to goal , rather than spending too much time with friends . 参考\nTo start with, as Mike mentioned, the development of society has made travel between towns and countries more convenient and time-saving. This means that people can still meet up with friends easily. Moving to a new place can also encourage individuals to broaden their perspectives and see the world in new ways.\nIn addition, settling in a big city can enhance opportunities for future career success. However, I believe that the greatest predictor of success is how many hours one devotes to their goals, rather than spending too much time with friends.\n帮助他人 with the development of \u0026hellip;\u0026hellip;.. = due to the refinement of \u0026hellip;\u0026hellip;\u0026hellip; = As advances in = through the improvement of \u0026hellip;\u0026hellip;\u0026hellip; = due to the advancement of\nAs far as I am concerned , I tend to be in favor of the argument that currently, many people are accepted assistance from others people more readily than before . My view is going to be illustrated by following reason and example. To start with , just as Mike has said , due to the advancement of society , people are wealthier than before , individuals are more likely to spend more time to care about other , someone needs help , since the social responsibility would be powerful enough to push them to help other. In addition , take me for example , every time I see the homeless or someone needs help , I will lend them a hand , holding up social responsibility as much as possible. In this action , it is social harmony that is strongly promoted. ","permalink":"//localhost:1313/posts/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/","summary":"\u003ch1 id=\"综合writing\"\u003e综合writing\u003c/h1\u003e\n\u003ch2 id=\"模板\"\u003e模板\u003c/h2\u003e\n\u003cp\u003eBoth the passage and the lecture explore the topic about  \u0026hellip;.  The reading passage proclaims that \u0026hellip;. While in the lecture , the professor uses three specific \u003cstrong\u003eperspectives\u003c/strong\u003e to contradict what the reading states .\u003c/p\u003e\n\u003cp\u003eFirst and foremost , the reading part holds the belief that \u0026hellip;. because \u0026hellip;. However , the lecturer doubts the view by stating that \u0026hellip; In order to strength his own point , the professor further explains that \u0026hellip;\u003c/p\u003e","title":"英语学习"},{"content":"测试数据范围 时间复杂度 对应数据量 O(n) 1,000,000 O(log N) 100,000 O(n^2) 1,000 O(n^3) 100 特殊情况 10 滑动窗口 动态规划 DP dp分析, 两个角度\n状态表示 集合: 前i个数, 总和为j的所有方案 属性: 状态计算 01背包 n = 4 // 4件物品 m = 5 // 背包最大容量为 5 测试样例 4 5 1 2 2 4 3 4 4 5 j i 状态f[i][j]定义：前 i 个物品，背包容量 j 下的最优解（最大价值）\n前i个物品的价值 1 2 3 4 5 0 0 0 0 0 0 1 2 2 2 2 2 2 2 4 6 6 6 3 2 4 6 6 8 4 2 4 6 6 8 第i个物品的数据 1 2 3 4 volume 1 2 3 4 weight 2 4 4 5 单调栈 合并区间 模板\n排序数组 更新合并左右端点 vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; merge(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; \u0026amp;intervals) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; ans; if (intervals.empty()) return ans; sort(intervals.begin(), intervals.end()); // 先排序 int l = intervals[0][0], r = intervals[0][1]; // 左右端点 for (int i = 1; i \u0026lt; intervals.size(); i++) // 第二数组开始遍历 { if (intervals[i][0] \u0026gt; r) // 第二数组的左端点大于上一数组的右端点, 则保存上一数组 { ans.push_back({l, r}); l = intervals[i][0], r = intervals[i][1]; // 更新左右端点 } else { r = max(r, intervals[i][1]); // 否则更新右端点 } } ans.push_back({l, r}); return ans; } 迪杰斯特拉算法 快速幂 模板\n快速幂 —— 模板题 AcWing 875. 快速幂 求 m^k mod p，时间复杂度 O(logk)。\nint qmi(int m, int k, int p) { int res = 1 % p, t = m; while (k) { if (k\u0026amp;1) res = res * t % p; t = t * t % p; k \u0026gt;\u0026gt;= 1; } return res; } 并查集 ","permalink":"//localhost:1313/posts/algorithm_study/","summary":"\u003ch1 id=\"测试数据范围\"\u003e测试数据范围\u003c/h1\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: center\"\u003e时间复杂度\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e对应数据量\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eO(n)\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e1,000,000\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eO(log N)\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e100,000\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eO(n^2)\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e1,000\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eO(n^3)\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e100\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e特殊情况\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e10\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch1 id=\"滑动窗口\"\u003e滑动窗口\u003c/h1\u003e\n\u003ch1 id=\"动态规划-dp\"\u003e动态规划 DP\u003c/h1\u003e\n\u003cp\u003edp分析, 两个角度\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e状态表示\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003e集合: 前\u003ccode\u003ei\u003c/code\u003e个数, 总和为\u003ccode\u003ej\u003c/code\u003e的所有方案\u003c/li\u003e\n\u003cli\u003e属性:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e状态计算\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"01背包\"\u003e01背包\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 4件物品\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 背包最大容量为 5 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e测试样例\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: center\"\u003e\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003ej\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003ei\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e状态\u003ccode\u003ef[i][j]\u003c/code\u003e定义：\u003cstrong\u003e前 i 个物品\u003c/strong\u003e，\u003cstrong\u003e背包容量 j\u003c/strong\u003e 下的最优解（\u003cstrong\u003e最大价值\u003c/strong\u003e）\u003c/p\u003e","title":"算法学习记录"},{"content":"emplace用法 emplace 是 C++ 中用于容器（如 std::vector, std::map, std::unordered_map 等）的一种方法，允许你在容器中直接构造元素，而不需要先构造再复制或移动。这通常可以提高性能，减少不必要的对象拷贝。\n与 insert 类似\n使用 emplace 的主要特点： 直接在容器中构造：emplace 会接受构造元素所需的所有参数，并在容器的内部直接创建该对象。 避免多次拷贝：与 push_back 或 insert 不同，emplace 不会执行隐式拷贝构造，这样可以避免额外的开销。 示例： 以下是一个使用 std::vector 和 std::unordered_map 的例子，说明 emplace 的使用：\n使用 std::vector #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; class Point { public: int x, y; Point(int x, int y) : x(x), y(y) {} }; int main() { std::vector\u0026lt;Point\u0026gt; points; // 使用 emplace 方法直接构造 Point 对象 points.emplace_back(1, 2); points.emplace_back(3, 4); for (const auto\u0026amp; point : points) { std::cout \u0026lt;\u0026lt; \u0026#34;Point(\u0026#34; \u0026lt;\u0026lt; point.x \u0026lt;\u0026lt; \u0026#34;, \u0026#34; \u0026lt;\u0026lt; point.y \u0026lt;\u0026lt; \u0026#34;)\u0026#34; \u0026lt;\u0026lt; std::endl; } return 0; } 使用 std::unordered_map #include \u0026lt;iostream\u0026gt; #include \u0026lt;unordered_map\u0026gt; #include \u0026lt;string\u0026gt; int main() { std::unordered_map\u0026lt;std::string, int\u0026gt; map; // 使用 emplace 插入键值对 map.emplace(\u0026#34;apple\u0026#34;, 10); map.emplace(\u0026#34;banana\u0026#34;, 20); for (const auto\u0026amp; pair : map) { std::cout \u0026lt;\u0026lt; pair.first \u0026lt;\u0026lt; \u0026#34;: \u0026#34; \u0026lt;\u0026lt; pair.second \u0026lt;\u0026lt; std::endl; } return 0; } 总结： emplace 方法是通过 完美转发 构造元素，可以显著提升性能。 它适用于任何需要插入或添加元素的 STL 容器。 min_element 查找最小元素函数 std::min_element 是 C++ 标准库 \u0026lt;algorithm\u0026gt; 中的一个非常有用的算法函数，它用于在指定范围内查找最小元素。下面我会详细解释 min_element 的用法，以及使用解引用操作符 * 的相关内容。\n1. std::min_element 函数原型 template\u0026lt;class ForwardIt\u0026gt; ForwardIt min_element(ForwardIt first, ForwardIt last); 参数： first: 指向范围开始的迭代器（包含）。 last: 指向范围结束的迭代器（不包含）。 返回值：返回指向容器内最小元素的迭代器。如果范围为空，则返回 last。 用法步骤 包含必要的头文件： 使用 min_element 之前，确保包含 \u0026lt;algorithm\u0026gt; 头文件。 指定范围： 使用容器的 begin() 和 end() 方法来指定需要查找最小元素的范围。 获取最小值： 使用解引用操作符 * 获取迭代器指向的值。 2. 示例代码 以下是一个简单的示例，使用 std::min_element 查找 std::vector 中的最小值：\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;algorithm\u0026gt; int main() { std::vector\u0026lt;int\u0026gt; numbers = {3, 1, 4, 1, 5, 9, 2, 6}; // 使用 min_element 查找最小元素 auto minIt = std::min_element(numbers.begin(), numbers.end()); if (minIt != numbers.end()) { // 使用解引用获取最小值 int minValue = *minIt; std::cout \u0026lt;\u0026lt; \u0026#34;Minimum value: \u0026#34; \u0026lt;\u0026lt; minValue \u0026lt;\u0026lt; std::endl; } else { std::cout \u0026lt;\u0026lt; \u0026#34;The range is empty.\u0026#34; \u0026lt;\u0026lt; std::endl; } return 0; } 3. 代码解析 导入库：导入了 iostream, vector, 和 algorithm。\n定义容器：创建了一个 std::vector 并初始化了一些整数。\n调用 min_element\n：\n使用 std::min_element 来查找最小元素，范围是从 numbers.begin() 到 numbers.end()。 返回的 minIt 是指向最小元素的迭代器。 解引用\n：\n通过 *minIt 获取指向的最小值，并存储到 minValue 中。 输出结果：如果容器非空，则输出最小值。\n4. 注意事项 空范围：如果传递空范围给 min_element（即 first 和 last 相等），则返回 last。 元素类型：min_element 可以处理不同的类型，包括自定义类型，只要提供相应的比较运算符。 性能：min_element 的时间复杂度是 O(n)，适合较小的数据集。 单引号和双引号的区别 在 C++ 中，单引号 ' ' 用于表示字符字面值（character literals），而双引号 \u0026quot; \u0026quot; 用于表示字符串字面值（string literals）。字符字面值只能包含一个字符，例如 'a' 或 '0'，而字符串字面值可以包含多个字符，例如 \u0026quot;Hello\u0026quot;。\n字符字面值只能包含一个字符，例如： char singleChar = \u0026#39;a\u0026#39;; // 单个字符 char digit = \u0026#39;0\u0026#39;; // 数字字符 字符串字面值可以包含多个字符，例如： const char* greeting = \u0026#34;Hello\u0026#34;; // 一个字符串 const char* message = \u0026#34;12345\u0026#34;; // 字符串中的数字 指针就是数组 把指针想象成数组\nint yy = 1; int * xx = \u0026amp; yy; // yy地址: 123 xx ---\u0026gt; 两个内容 | |---\u0026gt;下标 xx 存的值为 0x123 |---\u0026gt;数值 *xx 取值为 1 即 yy的值 xx: val | 1 | ==\u0026gt; *xx index |0x123| ==\u0026gt; xx string进行模拟栈的用法 在 C++ 中，std::string 本身不是一个栈（stack），但可以像栈一样使用，特别是利用其尾部（末尾）操作。你可以使用 push_back 和 pop_back 方法来模拟栈的行为。以下是如何用 std::string 模拟栈的简单示例：\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; using namespace std; int main() { string stack; // 入栈 stack.push_back(\u0026#39;A\u0026#39;); stack.push_back(\u0026#39;B\u0026#39;); stack.push_back(\u0026#39;C\u0026#39;); // 出栈 while (!stack.empty()) { char top = stack.back(); // 获取栈顶元素 stack.pop_back(); // 出栈 cout \u0026lt;\u0026lt; top \u0026lt;\u0026lt; endl; // 打印栈顶元素 } return 0; } 代码解释： 入栈：使用 push_back 方法将元素添加到字符串末尾。 出栈：使用 pop_back 方法移除末尾元素，并使用 back 方法获取栈顶元素（末尾元素）。 检查是否为空：使用 empty 方法来检查栈是否为空。 注意事项： 尽管你可以用 std::string 来模拟栈，但对于更复杂的数据结构，建议使用标准库中的 std::stack，它提供了更明确的接口和更好的语义清晰性。 std::stack 是一个适配器，通常与其他容器（如 std::deque 或 std::vector）一起使用，可以更好地满足栈的需求。 queue容器 在 C++ 中，queue 是一种容器适配器，表示一个先进先出（FIFO，First In First Out）的数据结构。下面是关于 queue 的详细解释，包括其特点、基本操作及使用场景。\n1. 基本概念 先进先出（FIFO）：在队列中，第一个加入的元素是第一个被移除的元素。可以想象成排队买东西，先到的人先服务。 应用：队列广泛用于任务调度、事件驱动编程、宽度优先搜索（BFS）等场景。 2. 引入和定义 要使用 queue，需要引入 C++ STL 的 \u0026lt;queue\u0026gt; 头文件：\n#include \u0026lt;queue\u0026gt; 一个基本的队列定义如下：\nstd::queue\u0026lt;int\u0026gt; myQueue; // 定义一个存储整数的队列 3. 常用操作 a. 入队（Push） 使用 push() 方法将元素添加到队列的尾部。\nmyQueue.push(10); myQueue.push(20); myQueue.push(30); b. 出队（Pop） 使用 pop() 方法移除队列的头部元素（最早入队的元素）。\nmyQueue.pop(); // 移除队头元素（10） c. 访问队头元素 使用 front() 方法获取队头元素，但不会移除它。\nint frontElement = myQueue.front(); // 返回 20 d. 访问队尾元素 使用 back() 方法获取队尾元素，但不会移除它。\nint backElement = myQueue.back(); // 返回 30 e. 检查空状态 使用 empty() 方法检查队列是否为空。\nif (myQueue.empty()) { std::cout \u0026lt;\u0026lt; \u0026#34;队列为空\u0026#34; \u0026lt;\u0026lt; std::endl; } f. 获取队列大小 使用 size() 方法获取队列中元素的数量。\nstd::cout \u0026lt;\u0026lt; \u0026#34;队列大小: \u0026#34; \u0026lt;\u0026lt; myQueue.size() \u0026lt;\u0026lt; std::endl; 4. 示例代码 下面是一个完整的示例，演示如何使用 queue：\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;queue\u0026gt; int main() { std::queue\u0026lt;int\u0026gt; myQueue; // 入队 myQueue.push(10); myQueue.push(20); myQueue.push(30); // 输出队头和队尾元素 std::cout \u0026lt;\u0026lt; \u0026#34;队头元素: \u0026#34; \u0026lt;\u0026lt; myQueue.front() \u0026lt;\u0026lt; std::endl; // 输出 10 std::cout \u0026lt;\u0026lt; \u0026#34;队尾元素: \u0026#34; \u0026lt;\u0026lt; myQueue.back() \u0026lt;\u0026lt; std::endl; // 输出 30 // 移除队头元素 myQueue.pop(); std::cout \u0026lt;\u0026lt; \u0026#34;新的队头元素: \u0026#34; \u0026lt;\u0026lt; myQueue.front() \u0026lt;\u0026lt; std::endl; // 输出 20 // 检查队列大小 std::cout \u0026lt;\u0026lt; \u0026#34;队列大小: \u0026#34; \u0026lt;\u0026lt; myQueue.size() \u0026lt;\u0026lt; std::endl; // 输出 2 return 0; } 5. 特点 动态大小：队列的大小是动态的，根据元素的添加和移除而变化。 基于其他容器：queue 通常是基于 deque（双端队列）或 list 实现的，因此它支持快速插入和删除操作。 类型安全：由于使用模板，queue 可以存储任何类型的数据，确保类型安全。 6. 应用场景 任务调度：在操作系统中，任务调度可以利用队列来管理待处理的任务。 广度优先搜索（BFS）：在图形算法中，queue 是实现 BFS 的重要工具。 事件处理：在图形用户界面（GUI）或游戏开发中，事件通常通过队列进行处理。 7. 总结 C++ 的 queue 提供了一种简单而高效的方法来管理数据。在需要处理顺序、维持元素顺序的场景中，queue 是一个非常有用的工具。它的基本操作简单明了，使得程序员能够快速实现和使用这一数据结构。\n**C++**基础 编译 内联函数 内联函数（inline function）是 C++ 中的一种特殊函数，通过在函数调用处直接插入其代码来提高程序的执行效率。内联函数的主要优点是减少函数调用的开销。\n特点： 定义方式： 使用 inline 关键字定义内联函数：\ninline int add(int a, int b) { return a + b; } 调用开销减少： 由于编译器在每个调用点替换函数体，避免了栈操作和跳转，增强了性能。\n适合小函数： 内联函数通常适用于简单、短小的函数，过大的函数可能导致代码膨胀。\n编译期决策： 编译器可以选择是否将某个函数作为内联函数处理，并不总是强制内联。\n示例： #include \u0026lt;iostream\u0026gt; inline int square(int x) { return x * x; } int main() { std::cout \u0026lt;\u0026lt; \u0026#34;Square of 5: \u0026#34; \u0026lt;\u0026lt; square(5) \u0026lt;\u0026lt; std::endl; return 0; } 在上述示例中，调用 square(5) 时，编译器会在调用处替换为 5 * 5，从而减少函数调用的开销。\n指针 类与对象 类（Class） 类是一个用户定义的数据类型，用于封装数据和函数。类可以包含属性（成员变量）和行为（成员函数）。\n定义示例：\nclass Dog { public: // 属性 std::string name; int age; // 构造函数 Dog(std::string n, int a) : name(n), age(a) {} // 方法 void bark() { std::cout \u0026lt;\u0026lt; name \u0026lt;\u0026lt; \u0026#34; says woof!\u0026#34; \u0026lt;\u0026lt; std::endl; } }; 对象（Object） 对象是类的实例，通过类的构造函数创建。每个对象都有自己的属性值。\n使用示例：\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; class Dog { public: std::string name; int age; Dog(std::string n, int a) : name(n), age(a) {} void bark() { std::cout \u0026lt;\u0026lt; name \u0026lt;\u0026lt; \u0026#34; says woof!\u0026#34; \u0026lt;\u0026lt; std::endl; } }; int main() { // 创建对象 Dog myDog(\u0026#34;Buddy\u0026#34;, 3); // 调用对象的方法 myDog.bark(); // 输出: Buddy says woof! return 0; } 总结 类是模板，用于定义对象的属性和行为。 对象是类的实例，具有具体的状态和行为。类和对象的结合使得 C++ 支持面向对象编程，便于代码的组织、复用和维护。 注意 构造函数 ![](../img/屏幕截图 (2).png)\n析构函数特点 拷贝构造函数 拷贝构造函数，又称复制构造函数，是一种特殊的构造函数，它由编译器调用来完成一些基于同一类的其他对象的构建及初始化。\n其形参必须是引用，但并不限制为const，一般普遍的会加上const限制。此函数经常用在函数调用时用户定义类型的值传递及返回。\n拷贝构造函数要调用基类的拷贝构造函数和成员函数。如果可以的话，它将用常量方式调用，另外，也可以用非常量方式调用。\n友元函数 定义:\n友元是一种定义在类外部的普通函数或类，但它需要在类体内进行说明，为了与该类的成员函数加以区别，在说明时前面加以关键字friend。 友元不是成员函数，但是它可以访问类中的私有成员。 类具有封装和信息隐藏的特性。只有类的成员函数才能访问类的私有成员，程序中的其他函数是无法访问私有成员的。非成员函数可以访问类中的公有成员，但是如果将数据成员都定义为公有的，这又破坏了隐藏的特性。另外，应该看到在某些情况下，特别是在对某些成员函数多次调用时，由于参数传递，类型检查和安全性检查等都需要时间开销，而影响程序的运行效率。 友元函数与一般函数的不同点在于：\n友元函数必须在类的定义中说明，其函数体可在类内定义，也可在类外定义；\n它可以访问该类中的所有成员（公有的、私有的和保护的），而一般函数只能访问类中的公有成员。\n注意事项\n友元关系不能被继承。 友元关系是单向的，不具有交换性。若类B是类A的友元，类A不一定是类B的友元，要看在类中是否有相应的声明。 友元关系不具有传递性。若类B是类A的友元，类C是B的友元，类C不一定是类A的友元，同样要看类中是否有相应的申明。 动态内存 函数重载 函数重载是一种特殊情况，C++允许在同一作用域中声明几个类似的同名函数，这些同名函数的形参列表（参数个数，类型，顺序）必须不同，常用来处理实现功能类似数据类型不同的问题。 所谓函数的重载是指完成不同功能的函数可以具有相同的函数名。 C++的编译器是根据函数的实参来确定应该调用哪一个函数的。 void Swap1(int* a, int* b); void Swap2(float* a, float* b); void Swap3(char* a, char* b); void Swap4(double* a, double* b); 运算符重载 可以重定义或重载大部分 C++ 内置的运算符。这样，您就能使用自定义类型的运算符。\n重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个返回类型和一个参数列表。\nBox operator+(const Box\u0026amp;); 声明加法运算符用于把两个 Box 对象相加，返回最终的 Box 对象。大多数的重载运算符可被定义为普通的非成员函数或者被定义为类成员函数。如果我们定义上面的函数为类的非成员函数，那么我们需要为每次操作传递两个参数，如下所示：\nBox operator+(const Box\u0026amp;, const Box\u0026amp;); 单继承 在C++中所谓“继承”就是在一个已存在的类的基础上建立一个新的类。已存在的类称为“基类(base class)”或“父类(father class)”。新建立的类称为“派生类(derived class)”或“子类(son class)”。\n通过继承机制，可以利用已有的数据类型来定义新的数据类型。所定义的新的数据类型不仅拥有新定义的成员，而且还同时拥有旧的成员。我们称已存在的用来派生新类的类为基类，又称为父类。由已存在的类派生出的新类称为派生类，又称为子类。\n在建立派生类的过程中，基类不会做任何改变，派生类则除了继承基类的所有可引用的成员变量和成员函数外，还可另外定义本身的成员变量和处理这些变量的函数，由于派生类可继承基类的成员变量和成员函数，因此在基类中定义好的数据和函数等的程序代码可重复使用，这样可以提高程序的可靠性。\n当从已有的类中派生出新的类时，可以对派生类做以下几种变化：\n可以继承基类的成员数据或成员函数。 可以增加新的成员变量。 可以增加新的成员函数。 可以重新定义已有的成员函数。 可以改变现有的成员属性。 在C++中有二种继承：单一继承和多重继承。当一个派生类仅由一个基类派生时，称为单一继承；而当一个派生类由二个或更多个基类所派生时，称为多重继承。\n但派生并不是简单的扩充，有可能改变基类的性质。有三种派生方式：公有派生、保护派生、私有派生。默认的是私有派生。\n公有派生（Public Inheritance） 在 C++ 中，公有派生（Public Inheritance）是最常见的类继承方式。通过公有派生，派生类可以继承基类的成员，其访问权限如下：\n公有成员（public）： 在派生类和类外均可访问。 保护成员（protected）： 在派生类内可访问，但在类外不能直接访问。 私有成员（private）： 不能在派生类中访问，只能通过基类的公有或保护成员函数访问。 示例代码 class Base { public: int pubVar; // 可在派生类和类外访问 protected: int protVar; // 可在派生类访问，但类外无法访问 private: int privVar; // 仅能在基类中访问 }; class Derived : public Base { public: void accessMembers() { pubVar = 1; // 可访问 protVar = 2; // 可访问 // privVar = 3; // 错误：无法访问 } }; // 使用示例 int main() { Derived d; d.pubVar = 10; // 可以访问 // d.protVar = 20; // 错误：无法访问 // d.privVar = 30; // 错误：无法访问 return 0; } 使用公有派生时，基类的公有和保护成员在派生类中依然保持其访问权限，而私有成员不可访问。 私有派生（Private Inheritance） 在 C++ 中，私有派生是一种继承方式，其中基类的公有成员和保护成员在派生类中都变为私有成员。这意味着：\n公有成员（public）： 在基类中为公有，但在派生类中变为私有。可以在派生类内部直接使用，但在派生类外部无法访问。 保护成员（protected）： 在基类中为保护，但在派生类中同样变为私有。可以在派生类内部使用，但在外部无法访问。 私有成员（private）： 私有成员在基类中始终不可访问，派生类也无法直接使用。 示例代码 class Base { public: int pubVar; // 公有成员 protected: int protVar; // 保护成员 private: int privVar; // 私有成员 }; class Derived : private Base { public: void accessMembers() { pubVar = 1; // 可以访问（变为私有） protVar = 2; // 可以访问（变为私有） // privVar = 3; // 错误：无法访问 } }; // 使用示例 int main() { Derived d; d.pubVar = 10; // 错误：无法访问 // d.protVar = 20; // 错误：无法访问 // d.privVar = 30; // 错误：无法访问 return 0; } 私有派生通过将基类的公有和保护成员转为私有，增强了基类的封装性，确保只有派生类内部可以使用这些成员，外部无法直接访问。这种方式适用于希望隐藏基类实现细节，同时允许派生类使用基类功能的场景。 3**、【保护派生】**\nclass ClassName: protected BaseClassName\n保护派生时，基类中公有成员和保护成员在派生类中均变为保护的和私有的，在派生类中仍可直接使用这些成员，基类中的私有成员，在派生类中不可直接使用。\n基类：public: (变为保护)在派生类中使用，类外不可使用\nprotected: (变为私有）在派生类中使用，类外不可使用\nprivate: 不能在派生类中和类外使用\n保护派生（Protected Inheritance） 在 C++ 中，保护派生是一种继承方式。通过这种方式，基类的公有成员和保护成员在派生类中被视为保护成员，这意味着它们的访问权限发生了变化：\n公有成员（public）： 在基类中是公有的，但在保护派生中变为保护的。派生类可以内部访问，但类外部无法访问。 保护成员（protected）： 在基类中是保护的，经过保护派生后仍然是保护的，派生类可以内部访问，类外部无法访问。 私有成员（private）： 无论是公有、保护还是私有继承，基类的私有成员始终不可在派生类中访问。 示例代码 class Base { public: int pubVar; // 公有成员 protected: int protVar; // 保护成员 private: int privVar; // 私有成员 }; class Derived : protected Base { public: void accessMembers() { pubVar = 1; // 可以访问（变为保护） protVar = 2; // 可以访问（仍为保护） // privVar = 3; // 错误：无法访问 } }; // 使用示例 int main() { Derived d; // d.pubVar = 10; // 错误：无法访问 // d.protVar = 20; // 错误：无法访问 // d.privVar = 30; // 错误：无法访问 return 0; } 通过保护派生，基类的公有和保护成员变为保护，派生类内部可以直接使用这些成员，但在派生类外部无法访问。这种方式适用于需要隐藏基类实现细节，仅允许派生类使用基类功能的场合。保护派生的访问控制增大了封装性，确保了基类的内聚性。 抽象类与保护的成员函数 在面向对象编程中，一个类如果只能用作基类，不能创建对象，那么这个类被称为抽象类。抽象类的主要目的是用来定义其他类的通用接口或协议，通常包含至少一个抽象方法，这些方法在抽象类中声明但不实现，派生类必须实现这些方法。\n抽象类的定义示例 class AbstractClass { public: virtual void abstractMethod() = 0; // 抽象方法 }; 保护的构造函数和析构函数 在 C++ 中，可以将类的构造函数和析构函数定义为保护的（protected）。这样，外部代码无法直接创建该类的对象，但派生类可以访问和调用这些构造函数和析构函数。这种设计通常用于控制对象的创建和销毁过程，以确保只有派生类能够实例化该类。\n例如：\nclass AbstractBase { protected: AbstractBase() {} // 保护构造函数 virtual ~AbstractBase() {} // 保护析构函数 }; // 派生类可以使用 class ConcreteDerived : public AbstractBase { public: ConcreteDerived() {} }; 私有构造函数和析构函数 如果将一个类的构造函数或析构函数定义为私有的（private），这个类将无法被实例化，也无法被用作基类来派生出新的类。这种设计通常用于工具类等场景，表明该类不应该直接创建对象，而是提供静态功能或数据。\n当把类中的构造函数或析构函数说明为私有的时，所定义的类通常是没有任何实用意义的，一般情况下，不能用它来产生对象，也不能用它来产生派生类。\n例如：\nclass Utility { private: Utility() {} // 私有构造函数 ~Utility() {} // 私有析构函数 public: static void usefulMethod() { // 提供静态方法 } }; 抽象类用于定义子类的接口，不能被实例化。 保护构造函数和析构函数允许派生类访问，控制对象创建。 私有构造函数和析构函数禁止实例化，通常用于工具类。 多继承 //格式为： class 类名:\u0026lt;Access\u0026gt;类名1,..., \u0026lt;Access\u0026gt;类名n { private: ...... ； //私有成员说明; public: ...... ； //公有成员说明; protected: ...... ； //保护的成员说明; }; class D: public A, protected B, private C { ....//派生类中新增加成员 }; 初始化基类成员\n构造函数不能被继承, 派生类的构造函数必须调用基类的构造函数来初始化基类成员基类子对象。\n派生类构造函数的调用顺序如下：\n基类的构造函数 子对象类的构造函数 派生类的构造函数 虚继承 //通过指定类名来解决指定不明确问题 A::v.x = 5; 虚基类 在同一个公共的基类在派生类中产生多个拷贝，不仅多占用了存储空间，而且可能会造成多个拷贝中的数据不一致和模糊的引用。\nD d; d.x=10; //模糊引用 在多重派生的过程中，若使公共基类在派生类中只有一个拷贝，则可将这种基类说明为虚基类。在派生类的定义中，只要在基类的类名前加上关键字virtual，就可以将基类说明为虚基类。\nclass B:public virtual A{ public: int y; B(int a=0, int b=0 ):A(b) { y=a;} }; 这样就不会造成模糊引用。\n由虚基类派生出的对象初始化时，直接调用虚基类的构造函数。因此，若将一个类定义为虚基类，则一定有正确的构造函数可供所有派生类调用。 再次强调，用虚基类进行多重派生时，若虚基类没有缺省的构造函数，则在每一个派生类的构造函数中都必须有对虚基类构造函数的调用 （且首先调用）。 虚函数 虚函数是 C++ 中实现多态性的重要机制。它允许在基类中声明一个函数，并在派生类中重新定义（重写）这个函数。通过虚函数，可以在运行时根据对象的实际类型调用相应的函数，实现动态绑定。\n定义和用法 虚函数通过在基类中使用关键字 virtual 声明。当基类指针或引用指向派生类对象时，虚函数确保调用的是派生类中重写的版本。\n示例代码 #include \u0026lt;iostream\u0026gt; class Base { public: virtual void show() { // 虚函数 std::cout \u0026lt;\u0026lt; \u0026#34;Base class show function called.\u0026#34; \u0026lt;\u0026lt; std::endl; } virtual ~Base() {} // 虚析构函数 }; class Derived : public Base { public: void show() override { // 重写基类的虚函数 std::cout \u0026lt;\u0026lt; \u0026#34;Derived class show function called.\u0026#34; \u0026lt;\u0026lt; std::endl; } }; int main() { Base* ptr; // 基类指针 Derived derivedObj; // 派生类对象 ptr = \u0026amp;derivedObj; // 指向派生类对象 ptr-\u0026gt;show(); // 调用派生类的 show 函数 return 0; } 输出结果 Derived class show function called. 关键点 动态绑定：虚函数的调用决定是在运行时而非编译时，允许实现多态。 基类指针或引用：通过基类指针或引用调用虚函数时，实际调用的是对象的动态类型的相应函数。 虚析构函数：如果类有虚函数，通常应该有虚析构函数，以确保在对象销毁时正确调用派生类的析构函数。 性能开销：虚函数通过虚表（vtable）实现，可能会引入少许性能开销。 抽象类 抽象类是面向对象编程中的一种特殊类型的类，它主要用于定义子类的接口或协议。抽象类不能被实例化，也就是说，无法创建抽象类的对象。它通常包含至少一个抽象方法，即在抽象类中声明但不实现的方法。\n特点 不能实例化：抽象类不能创建对象，只能作为基类使用。 包含抽象方法：至少包含一个纯虚函数（抽象方法），用 = 0 的语法声明。 可包含具体方法：抽象类可以包含具体方法（已经实现的方法）和成员变量。 派生类实现：派生类必须实现所有抽象方法，才能被实例化。 示例代码 #include \u0026lt;iostream\u0026gt; class AbstractClass { public: // 抽象方法 virtual void doSomething() = 0; // 具体方法 void commonFunction() { std::cout \u0026lt;\u0026lt; \u0026#34;This is a common function.\u0026#34; \u0026lt;\u0026lt; std::endl; } }; class ConcreteClass : public AbstractClass { public: // 实现抽象方法 void doSomething() override { std::cout \u0026lt;\u0026lt; \u0026#34;Doing something in ConcreteClass.\u0026#34; \u0026lt;\u0026lt; std::endl; } }; int main() { // AbstractClass obj; // 错误：无法实例化抽象类 ConcreteClass myObject; myObject.commonFunction(); // 调用具体方法 myObject.doSomething(); // 调用实现的抽象方法 return 0; } 输出结果 This is a common function. Doing something in ConcreteClass. 关键点 接口定义：抽象类通过定义接口，规定了派生类应当实现的功能。 增强灵活性：通过使用抽象类，可以轻松实现多态，提高代码的可维护性和扩展性。 防止实例化：使用抽象类可以防止意外创建基类的对象，确保只能使用具体的实现类。 命名空间 **使用命名空间的目的是对标识符的名称进行本地化，以避免命名冲突。在C++中，变量、函数和类都是大量存在的。如果没有命名空间，这些变量、函数、类的名称将都存在于全局命名空间中，会导致很多冲突。 **\nnamespace 关键字使得我们可以通过创建作用范围来对全局命名空间进行分隔。本质上来讲，一个命名空间就定义了一个范围。定义命名空间的基本形式如下：\nnamespace 名称{ 声明 } 在命名空间中定义的任何东西都局限于该命名空间内。\n命名空间可以嵌套，在一个命名空间中定义另一个命名空间。\nnamespace 命名空间名称1{ // 代码声明 namespace命名空间名称2{ // 代码声明 } } 通过使用 :: 运算符来访问嵌套的命名空间中的成员。\n函数模板 模板是泛型编程的基础，泛型编程即以一种独立于任何特定类型的方式编写代码。模板是创建泛型类或函数的蓝图或公式。 模板函数定义的一般形式如下所示：\ntemplate \u0026lt;typename type类型\u0026gt; 返回类型 函数名(参数列表) { // 函数的主体 } type 是函数所使用的数据类型的占位符名称。这个名称可以在函数定义中使用。\n正如我们定义函数模板一样，我们也可以定义类模板。泛型类声明的一般形式如下所示： template \u0026lt;class type\u0026gt; class class-name { } type 是占位符类型名称，可以在类被实例化的时候进行指定。使用一个逗号分隔的列表来定义多个泛型数据类型。\n输入输出流 IO IO流 在C++中允许用户重载运算符\u0026lt;\u0026lt;和\u0026gt;\u0026gt;，实现对象的输入和输出。重载这二个运算符时，在对象所在的类中，将重载这二个运算符的函数说明该类的友元函数。\n文件流 C++标准库专门提供了3个类用于实现文件操作，它们统称为文件流类，这3个类分别为：\nifstream：专用于从文件中读取数据； ofstream：专用于向文件中写入数据； fstream：既可用于从文件中读取数据，又可用于向文件中写入数据。 打开文件可以通过以下两种方式进行：\n调用流对象的 open 成员函数打开文件。 定义文件流对象时，通过构造函数打开文件。 【使用 open 函数打开文件】\n先看第一种文件打开方式。以 ifstream 类为例，该类有一个 open 成员函数，其他两个文件流类也有同样的 open 成员函数：\nvoid open(const char* szFileName, int mode) 第一个参数是指向文件名的指针，第二个参数是文件的打开模式标记。\nios::binary 可以和其他模式标记组合使用，例如：\nios::in | ios::binary表示用二进制模式，以读取的方式打开文件； ios::out | ios::binary表示用二进制模式，以写入的方式打开文件。 在流对象上执行 open 成员函数，给出文件名和打开模式，就可以打开文件。判断文件打开是否成功，可以看“对象名”这个表达式的值是否为 true，如果为 true，则表示文件打开成功。\n**close()方法的用法很简单，其语法格式如下： **\nvoid close(); 调用open()方法打开文件，是文件流对象和文件之间建立关联的过程。那么，调用 close()方法关闭已打开的文件，就可以理解为是切断文件流对象和文件之间的关联。注意，close()方法的功能仅是切断文件流与文件之间的关联，该文件流并会被销毁，其后续还可用于关联其它的文件。\n可以看到，该方法既不需要传递任何参数，也没有返回值。\nSTL标准模板库 STL是Standard Template Library的简称，中文名标准模板库，惠普实验室开发的一系列软件的统称。它是由Alexander Stepanov、Meng Lee和David R Musser在惠普实验室工作时所开发出来的。从根本上说，STL是一些“容器”的集合，这些“容器”有list,vector,set,map等，STL也是算法和其他一些组件的集合。这里的“容器”和算法的集合指的是世界上很多聪明人很多年的杰作。STL的目的是标准化组件，这样就不用重新开发，可以使用现成的组件。STL是C++的一部分，因此不用安装额外的库文件。\nSTL的版本很多，常见的有HP STL、PJ STL、 SGI STL等。\nvector 序列式容器 vector 容器是 STL 中最常用的容器之一，它和 array 容器非常类似，都可以看做是对 C++ 普通数组的“升级版”。不同之处在于，array 实现的是静态数组（容量固定的数组），而 vector 实现的是一个动态数组，即可以进行元素的插入和删除，在此过程中，vector 会动态调整所占用的内存空间，整个过程无需人工干预。\nvector 常被称为向量容器，因为该容器擅长在尾部插入或删除元素，在常量时间内就可以完成，时间复杂度为O(1)；而对于在容器头部或者中部插入或删除元素，则花费时间要长一些（移动元素需要耗费时间），时间复杂度为线性阶O(n)。\ndeque双端队列容器 前面已接触过vector 容器，值得一提的是，deque 容器和 vecotr 容器有很多相似之处，比如：deque 容器也擅长在序列尾部添加或删除元素（时间复杂度为O(1)），而不擅长在序列中间添加或删除元素。deque 容器也可以根据需要修改自身的容量和大小。\n和 vector 不同的是，deque 还擅长在序列头部添加或删除元素，所耗费的时间复杂度也为常数阶O(1)。并且更重要的一点是，deque 容器中存储元素并不能保证所有元素都存储到连续的内存空间中。\n当需要向序列两端频繁的添加或删除元素时，应首选 deque 容器。\nstack 栈容器 stack\u0026lt; T \u0026gt;容器适配器中的数据是以 LIFO (先进后出) 的方式组织的，这和自助餐馆中堆叠的盘子、箱子中的一堆书类似。理论上的 stack 容器及其一些基本操作。只能访问 stack 顶部的元素；只有在移除 stack 顶部的元素后，才能访问下方的元素。\nqueue队列 队列也是一种逻辑数据结构，其具有先进先出的特性，只能在队的前端进行删除， 在队的后端进行插入。针对这种特性，可以实现一些较为复杂的逻辑。在实际应用中，部分程序也正需要这样一种顺序进出的数据处理方式。\nqueue：只允许从一端插入元素（入队），从另一端删除元素（出队）。遵循先进先出（FIFO）的原则。 deque：可以在两端插入和删除元素。支持在前端和后端进行操作。 set容器 STL 对这个序列可以进行查找、插入、删除序列中的任意一个元素，而完成这些操作的时间同这个序列中元素个数的对数成比例关系，并且当游标指向一个已删除的元素时，删除操作无效。\n而一个经过更正的和更加实际的定义应该是：一个集合(set)是一个容器，它其中所包含的元素的值是唯一的。这在收集一个数据的具体值的时候是有用的。集合中的元素按一定的顺序排列，并被作为集合中的实例。一个集合通过一个链表来组织，在插入操作和删除操作上比向量(vector)快，但查找或添加末尾的元素时会有些慢。具体实现采用了红黑树的平衡二叉树的数据结构。\nmap容器 映射和多重映射基于某一类型Key的键集的存在，提供对T类型的数据进行快速和高效的检索。\n对map而言，键只是指存储在容器中的某一成员。Map不支持副本键，multimap支持副本键。Map和multimap对象包涵了键和各个键有关的值，键和值的数据类型是不相同的，这与set不同。set中的key和value是Key类型的，而map中的key和value是一个pair结构中的两个分量。\nC++异常处理 程序中常见的错误有两大类：语法错误和运行错误。在编译时，编译系统能发现程序中的语法错误。\n异常(exception)是运行时(run-time)的错误，通常是非正常条件下引起的，例如，下标(index)越界、new操作不能正常分配所需内存。C语言中，异常通常是通过被调用函数返回一个数值作为标记的。\nC++中，函数可以识别标记为异常的条件，然后通告发生了异常。这种通告异常的机制称为抛出异常(throwing an exception)。\n异常提供了一种转移程序控制权的方式。C++ 异常处理涉及到三个关键字：try、catch、throw。\n**throw：**当问题出现时，程序会抛出一个异常。这是通过使用 throw 关键字来完成的。 **catch：**在您想要处理问题的地方，通过异常处理程序捕获异常。catch 关键字用于捕获异常。 **try：**try 块中的代码标识将被激活的特定异常。它后面通常跟着一个或多个 catch 块。 如果有一个块抛出一个异常，捕获异常的方法会使用 try 和 catch 关键字。try 块中放置可能抛出异常的代码，try 块中的代码被称为保护代码。\n例如\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { double x, y; cout \u0026lt;\u0026lt; \u0026#34;请输入x,y的值:\u0026#34;; cin \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y; try { if (y == 0) throw - 1; // 抛出-1类型异常 else if(x==0) throw - 1.0; // 抛出-1类型异常 else cout \u0026lt;\u0026lt; \u0026#34;x/y=\u0026#34; \u0026lt;\u0026lt; x / y \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; endl; } catch (int e) { cout \u0026lt;\u0026lt; \u0026#34;catch(int) :\u0026#34; \u0026lt;\u0026lt; e \u0026lt;\u0026lt; endl; } catch (double d) { cout \u0026lt;\u0026lt; \u0026#34;catch(double) :\u0026#34; \u0026lt;\u0026lt; d \u0026lt;\u0026lt; endl; } return 0; } ","permalink":"//localhost:1313/posts/c++%E8%AF%AD%E8%A8%80/","summary":"\u003ch1 id=\"emplace用法\"\u003eemplace用法\u003c/h1\u003e\n\u003cp\u003e\u003ccode\u003eemplace\u003c/code\u003e 是 C++ 中用于容器（如 \u003ccode\u003estd::vector\u003c/code\u003e, \u003ccode\u003estd::map\u003c/code\u003e, \u003ccode\u003estd::unordered_map\u003c/code\u003e 等）的一种方法，允许你在容器中直接构造元素，而不需要先构造再复制或移动。这通常可以提高性能，减少不必要的对象拷贝。\u003c/p\u003e","title":"C++基础"},{"content":"go的变量声明 第一种，指定变量类型，如果没有初始化，则变量默认为零值。 例如：\nvar a int // 声明一个整型变量 a，默认为 0 var b float64 // 声明一个浮点型变量 b，默认为 0.0 第二种，根据值自行判定变量类型。 例如：\nvar c = \u0026#34;Hello\u0026#34; // 声明变量 c，类型为 string var d = 42 // 声明变量 d，类型为 int 第三种，如果变量已经使用 var 声明过了，再使用 := 声明变量，就产生编译错误 例如：\nvar e int = 10 // 使用 var 声明 // e := 20 // 编译错误：e 已经被声明过 go的语言常量 常量是一个简单值的标识符，在程序运行时，不会被修改的量。\n常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。\n常量的定义格式：\nconst identifier [type] = value 你可以省略类型说明符 [type]，因为编译器可以根据变量的值来推断其类型。\n显式类型定义： const b string = \u0026quot;abc\u0026quot; 隐式类型定义： const b = \u0026quot;abc\u0026quot; 多个相同类型的声明可以简写为：\nconst c_name1, c_name2 = value1, value2 iota，特殊常量，可以认为是一个可以被编译器修改的常量。\niota 在 const关键字出现时将被重置为 0(const 内部的第一行之前)，const 中每新增一行常量声明将使 iota 计数一次(iota 可理解为 const 语句块中的行索引)。\niota 可以被用作枚举值：\nconst ( a = iota b = iota c = iota ) 第一个 iota 等于 0，每当 iota 在新的一行被使用时，它的值都会自动加 1；所以 a=0, b=1, c=2 可以简写为如下形式：\nconst ( a = iota b c ) iota 用法 实例 package main import \u0026#34;fmt\u0026#34; func main() { const ( a = iota //0 b //1 c //2 d = \u0026#34;ha\u0026#34; //独立值，iota += 1 e //\u0026#34;ha\u0026#34; iota += 1 f = 100 //iota +=1 g //100 iota +=1 h = iota //7,恢复计数 i //8 ) fmt.Println(a,b,c,d,e,f,g,h,i) } 以上实例运行结果为：\n0 1 2 ha ha 100 100 7 8 go的运算符 运算符用于在程序运行时执行数学或逻辑运算。\nGo 语言内置的运算符有：\n算术运算符 关系运算符 逻辑运算符 位运算符 赋值运算符 其他运算符 接下来让我们来详细看看各个运算符的介绍。\n算术运算符 下表列出了所有Go语言的算术运算符。假定 A 值为 10，B 值为 20。\n运算符 描述 实例 + 相加 A + B 输出结果 30 - 相减 A - B 输出结果 -10 * 相乘 A * B 输出结果 200 / 相除 B / A 输出结果 2 % 求余 B % A 输出结果 0 ++ 自增 A++ 输出结果 11 \u0026ndash; 自减 A\u0026ndash; 输出结果 9 以下实例演示了各个算术运算符的用法：\n实例 package main import \u0026#34;fmt\u0026#34; func main() { var a int = 21 var b int = 10 var c int c = a + b fmt.Printf(\u0026#34;第一行 - c 的值为 %d**\\n**\u0026#34;, c ) c = a - b fmt.Printf(\u0026#34;第二行 - c 的值为 %d**\\n**\u0026#34;, c ) c = a * b fmt.Printf(\u0026#34;第三行 - c 的值为 %d**\\n**\u0026#34;, c ) c = a / b fmt.Printf(\u0026#34;第四行 - c 的值为 %d**\\n**\u0026#34;, c ) c = a % b fmt.Printf(\u0026#34;第五行 - c 的值为 %d**\\n**\u0026#34;, c ) a++ fmt.Printf(\u0026#34;第六行 - a 的值为 %d**\\n**\u0026#34;, a ) a=21 // 为了方便测试，a 这里重新赋值为 21 a-- fmt.Printf(\u0026#34;第七行 - a 的值为 %d**\\n**\u0026#34;, a ) } 以上实例运行结果：\n第一行 - c 的值为 31 第二行 - c 的值为 11 第三行 - c 的值为 210 第四行 - c 的值为 2 第五行 - c 的值为 1 第六行 - a 的值为 22 第七行 - a 的值为 20 关系运算符 下表列出了所有Go语言的关系运算符。假定 A 值为 10，B 值为 20。\n运算符 描述 实例 == 检查两个值是否相等，如果相等返回 True 否则返回 False。 (A == B) 为 False != 检查两个值是否不相等，如果不相等返回 True 否则返回 False。 (A != B) 为 True \u0026gt; 检查左边值是否大于右边值，如果是返回 True 否则返回 False。 (A \u0026gt; B) 为 False \u0026lt; 检查左边值是否小于右边值，如果是返回 True 否则返回 False。 (A \u0026lt; B) 为 True \u0026gt;= 检查左边值是否大于等于右边值，如果是返回 True 否则返回 False。 (A \u0026gt;= B) 为 False \u0026lt;= 检查左边值是否小于等于右边值，如果是返回 True 否则返回 False。 (A \u0026lt;= B) 为 True package main import \u0026#34;fmt\u0026#34; func main() { var a bool = true var b bool = false if ( a \u0026amp;\u0026amp; b ) { fmt.Printf(\u0026#34;第一行 - 条件为 true\\n\u0026#34; ) } if ( a || b ) { fmt.Printf(\u0026#34;第二行 - 条件为 true\\n\u0026#34; ) } /* 修改 a 和 b 的值 */ a = false b = true if ( a \u0026amp;\u0026amp; b ) { fmt.Printf(\u0026#34;第三行 - 条件为 true\\n\u0026#34; ) } else { fmt.Printf(\u0026#34;第三行 - 条件为 false\\n\u0026#34; ) } if ( !(a \u0026amp;\u0026amp; b) ) { fmt.Printf(\u0026#34;第四行 - 条件为 true\\n\u0026#34; ) } } 运行结果：\n第一行 - a 不等于 b 第二行 - a 不小于 b 第三行 - a 大于 b 第四行 - a 小于等于 b 第五行 - b 大于等于 a 逻辑运算符 下表列出了所有Go语言的逻辑运算符。假定 A 值为 True，B 值为 False。\n运算符 描述 实例 \u0026amp;\u0026amp; 逻辑 AND 运算符。 如果两边的操作数都是 True，则条件 True，否则为 False。 (A \u0026amp;\u0026amp; B) 为 False || 逻辑 OR 运算符。 如果两边的操作数有一个 True，则条件 True，否则为 False。 (A || B) 为 True ! 逻辑 NOT 运算符。 如果条件为 True，则逻辑 NOT 条件 False，否则为 True。 !(A \u0026amp;\u0026amp; B) 为 True package main import \u0026#34;fmt\u0026#34; func main() { var a bool = true var b bool = false if ( a \u0026amp;\u0026amp; b ) { fmt.Printf(\u0026#34;第一行 - 条件为 true\\n\u0026#34; ) } if ( a || b ) { fmt.Printf(\u0026#34;第二行 - 条件为 true\\n\u0026#34; ) } /* 修改 a 和 b 的值 */ a = false b = true if ( a \u0026amp;\u0026amp; b ) { fmt.Printf(\u0026#34;第三行 - 条件为 true\\n\u0026#34; ) } else { fmt.Printf(\u0026#34;第三行 - 条件为 false\\n\u0026#34; ) } if ( !(a \u0026amp;\u0026amp; b) ) { fmt.Printf(\u0026#34;第四行 - 条件为 true\\n\u0026#34; ) } } 运行结果：\n第二行 - 条件为 true 第三行 - 条件为 false 第四行 - 条件为 true 位运算符 位运算符对整数在内存中的二进制位进行操作。\n下表列出了位运算符 \u0026amp;, |, 和 ^ 的计算：\np q p \u0026amp; q p | q p ^ q 0 0 0 0 0 0 1 0 1 1 1 1 1 1 0 1 0 0 1 1 假定 A = 60; B = 13; 其二进制数转换为：\nA = 0011 1100 B = 0000 1101 ----------------- A\u0026amp;B = 0000 1100 A|B = 0011 1101 A^B = 0011 0001 Go 语言支持的位运算符如下表所示。假定 A 为60，B 为13：\n运算符 描述 实例 \u0026amp; 按位与运算符\u0026quot;\u0026amp;\u0026ldquo;是双目运算符。 其功能是参与运算的两数各对应的二进位相与。 (A \u0026amp; B) 结果为 12, 二进制为 0000 1100 | 按位或运算符\u0026rdquo;|\u0026ldquo;是双目运算符。 其功能是参与运算的两数各对应的二进位相或 (A | B) 结果为 61, 二进制为 0011 1101 ^ 按位异或运算符\u0026rdquo;^\u0026ldquo;是双目运算符。 其功能是参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。 (A ^ B) 结果为 49, 二进制为 0011 0001 \u0026laquo; 左移运算符\u0026rdquo;\u0026laquo;\u0026ldquo;是双目运算符。左移n位就是乘以2的n次方。 其功能把\u0026rdquo;\u0026laquo;\u0026ldquo;左边的运算数的各二进位全部左移若干位，由\u0026rdquo;\u0026laquo;\u0026ldquo;右边的数指定移动的位数，高位丢弃，低位补0。 A \u0026laquo; 2 结果为 240 ，二进制为 1111 0000 \u0026raquo; 右移运算符\u0026rdquo;\u0026raquo;\u0026ldquo;是双目运算符。右移n位就是除以2的n次方。 其功能是把\u0026rdquo;\u0026raquo;\u0026ldquo;左边的运算数的各二进位全部右移若干位，\u0026quot;\u0026raquo;\u0026ldquo;右边的数指定移动的位数。 A \u0026raquo; 2 结果为 15 ，二进制为 0000 1111 package main import \u0026#34;fmt\u0026#34; func main() { var a uint = 60 /* 60 = 0011 1100 */ var b uint = 13 /* 13 = 0000 1101 */ var c uint = 0 c = a \u0026amp; b /* 12 = 0000 1100 */ fmt.Printf(\u0026#34;第一行 - c 的值为 %d\\n\u0026#34;, c ) c = a | b /* 61 = 0011 1101 */ fmt.Printf(\u0026#34;第二行 - c 的值为 %d\\n\u0026#34;, c ) c = a ^ b /* 49 = 0011 0001 */ fmt.Printf(\u0026#34;第三行 - c 的值为 %d\\n\u0026#34;, c ) c = a \u0026lt;\u0026lt; 2 /* 240 = 1111 0000 */ fmt.Printf(\u0026#34;第四行 - c 的值为 %d\\n\u0026#34;, c ) c = a \u0026gt;\u0026gt; 2 /* 15 = 0000 1111 */ fmt.Printf(\u0026#34;第五行 - c 的值为 %d\\n\u0026#34;, c ) } 运行结果：\n第一行 - c 的值为 12 第二行 - c 的值为 61 第三行 - c 的值为 49 第四行 - c 的值为 240 第五行 - c 的值为 15 赋值运算符 下表列出了所有Go语言的赋值运算符。\n运算符 描述 实例 = 简单的赋值运算符，将一个表达式的值赋给一个左值 C = A + B 将 A + B 表达式结果赋值给 C += 相加后再赋值 C += A 等于 C = C + A -= 相减后再赋值 C -= A 等于 C = C - A *= 相乘后再赋值 C *= A 等于 C = C * A /= 相除后再赋值 C /= A 等于 C = C / A %= 求余后再赋值 C %= A 等于 C = C % A \u0026laquo;= 左移后赋值 C \u0026laquo;= 2 等于 C = C \u0026laquo; 2 \u0026raquo;= 右移后赋值 C \u0026raquo;= 2 等于 C = C \u0026raquo; 2 \u0026amp;= 按位与后赋值 C \u0026amp;= 2 等于 C = C \u0026amp; 2 ^= 按位异或后赋值 C ^= 2 等于 C = C ^ 2 |= 按位或后赋值 C |= 2 等于 C = C | 2 package main import \u0026#34;fmt\u0026#34; func main() { var a int = 21 var c int c = a fmt.Printf(\u0026#34;第 1 行 - = 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c += a fmt.Printf(\u0026#34;第 2 行 - += 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c -= a fmt.Printf(\u0026#34;第 3 行 - -= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c *= a fmt.Printf(\u0026#34;第 4 行 - *= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c /= a fmt.Printf(\u0026#34;第 5 行 - /= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c = 200; c \u0026lt;\u0026lt;= 2 fmt.Printf(\u0026#34;第 6行 - \u0026lt;\u0026lt;= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c \u0026gt;\u0026gt;= 2 fmt.Printf(\u0026#34;第 7 行 - \u0026gt;\u0026gt;= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c \u0026amp;= 2 fmt.Printf(\u0026#34;第 8 行 - \u0026amp;= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c ^= 2 fmt.Printf(\u0026#34;第 9 行 - ^= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c |= 2 fmt.Printf(\u0026#34;第 10 行 - |= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) } 运行结果：\n第 1 行 - = 运算符实例，c 值为 = 21 第 2 行 - += 运算符实例，c 值为 = 42 第 3 行 - -= 运算符实例，c 值为 = 21 第 4 行 - *= 运算符实例，c 值为 = 441 第 5 行 - /= 运算符实例，c 值为 = 21 第 6行 - \u0026lt;\u0026lt;= 运算符实例，c 值为 = 800 第 7 行 - \u0026gt;\u0026gt;= 运算符实例，c 值为 = 200 第 8 行 - \u0026amp;= 运算符实例，c 值为 = 0 第 9 行 - ^= 运算符实例，c 值为 = 2 第 10 行 - |= 运算符实例，c 值为 = 2 其他运算符 下表列出了Go语言的其他运算符。\n运算符 描述 实例 \u0026amp; 返回变量存储地址 \u0026amp;a; 将给出变量的实际地址。 * 指针变量。 *a; 是一个指针变量 package main import \u0026#34;fmt\u0026#34; func main() { var a int = 4 var b int32 var c float32 var ptr *int /* 运算符实例 */ fmt.Printf(\u0026#34;第 1 行 - a 变量类型为 = %T\\n\u0026#34;, a ); fmt.Printf(\u0026#34;第 2 行 - b 变量类型为 = %T\\n\u0026#34;, b ); fmt.Printf(\u0026#34;第 3 行 - c 变量类型为 = %T\\n\u0026#34;, c ); /* \u0026amp; 和 * 运算符实例 */ ptr = \u0026amp;a /* \u0026#39;ptr\u0026#39; 包含了 \u0026#39;a\u0026#39; 变量的地址 */ fmt.Printf(\u0026#34;a 的值为 %d\\n\u0026#34;, a); fmt.Printf(\u0026#34;*ptr 为 %d\\n\u0026#34;, *ptr); } 运行结果：\n第 1 行 - a 变量类型为 = int 第 2 行 - b 变量类型为 = int32 第 3 行 - c 变量类型为 = float32 a 的值为 4 *ptr 为 4 运算符优先级 有些运算符拥有较高的优先级，二元运算符的运算方向均是从左至右。下表列出了所有运算符以及它们的优先级，由上至下代表优先级由高到低：\n优先级 运算符 5 * / % \u0026laquo; \u0026raquo; \u0026amp; \u0026amp;^ 4 + - | ^ 3 == != \u0026lt; \u0026lt;= \u0026gt; \u0026gt;= 2 \u0026amp;\u0026amp; 1 || 当然，你可以通过使用括号来临时提升某个表达式的整体运算优先级。\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int = 20 var b int = 10 var c int = 15 var d int = 5 var e int; e = (a + b) * c / d; // ( 30 * 15 ) / 5 fmt.Printf(\u0026#34;(a + b) * c / d 的值为 : %d\\n\u0026#34;, e ); e = ((a + b) * c) / d; // (30 * 15 ) / 5 fmt.Printf(\u0026#34;((a + b) * c) / d 的值为 : %d\\n\u0026#34; , e ); e = (a + b) * (c / d); // (30) * (15/5) fmt.Printf(\u0026#34;(a + b) * (c / d) 的值为 : %d\\n\u0026#34;, e ); e = a + (b * c) / d; // 20 + (150/5) fmt.Printf(\u0026#34;a + (b * c) / d 的值为 : %d\\n\u0026#34; , e ); } 运行结果：\n(a + b) * c / d 的值为 : 90 ((a + b) * c) / d 的值为 : 90 (a + b) * (c / d) 的值为 : 90 a + (b * c) / d 的值为 : 50 补充 Go 的自增，自减只能作为表达式使用，而不能用于赋值语句。\na++ // 这是允许的，类似 a = a + 1,结果与 a++ 相同 a-- //与 a++ 相似 a = a++ // 这是不允许的，会出现编译错误 syntax error: unexpected ++ at end of statement go的条件语句 条件语句需要开发者通过指定一个或多个条件，并通过测试条件是否为 true 来决定是否执行指定语句，并在条件为 false 的情况在执行另外的语句。\nGo 语言提供了以下几种条件判断语句：\n语句 描述 if 语句 if 语句 由一个布尔表达式后紧跟一个或多个语句组成。 if\u0026hellip;else 语句 if 语句 后可以使用可选的 else 语句, else 语句中的表达式在布尔表达式为 false 时执行。 if 嵌套语句 你可以在 if 或 else if 语句中嵌入一个或多个 if 或 else if 语句。 switch 语句 switch 语句用于基于不同条件执行不同动作。 select 语句 select 语句类似于 switch 语句，但是select会随机执行一个可运行的case。如果没有case可运行，它将阻塞，直到有case可运行。 go的循环语句 Go 语言提供了以下几种类型循环处理语句：\n循环类型 描述 for 循环 重复执行语句块 循环嵌套 在 for 循环中嵌套一个或多个 for 循环 循环控制语句 循环控制语句可以控制循环体内语句的执行过程。\nGO 语言支持以下几种循环控制语句：\n控制语句 描述 break 语句 经常用于中断当前 for 循环或跳出 switch 语句 continue 语句 跳过当前循环的剩余语句，然后继续进行下一轮循环。 goto 语句 将控制转移到被标记的语句。 无限循环 如果循环中条件语句永远不为 false 则会进行无限循环，我们可以通过 for 循环语句中只设置一个条件表达式来执行无限循环：\npackage main import \u0026#34;fmt\u0026#34; func main() { for true { fmt.Printf(\u0026#34;这是无限循环。\\n\u0026#34;); } } Go 语言函数 函数是基本的代码块，用于执行一个任务。 Go 语言最少有个 main() 函数。 你可以通过函数来划分不同功能，逻辑上每个函数执行的是指定的任务。 函数声明告诉了编译器函数的名称，返回类型，和参数。 Go 语言标准库提供了多种可动用的内置的函数。例如，len() 函数可以接受不同类型参数并返回该类型的长度。如果我们传入的是字符串则返回字符串的长度，如果传入的是数组，则返回数组中包含的元素个数。 Go 语言函数定义格式如下：\nfunc function_name( [parameter list] ) [return_types] { //函数体 } 函数定义解析：\nfunc：函数由 func 开始声明 function_name：函数名称，参数列表和返回值类型构成了函数签名。 parameter list：参数列表，参数就像一个占位符，当函数被调用时，你可以将值传递给参数，这个值被称为实际参数。参数列表指定的是参数类型、顺序、及参数个数。参数是可选的，也就是说函数也可以不包含参数。 return_types：返回类型，函数返回一列值。return_types 是该列值的数据类型。有些功能不需要返回值，这种情况下 return_types 不是必须的。 函数体：函数定义的代码集合。 实例 以下实例为 max() 函数的代码，该函数传入两个整型参数 num1 和 num2，并返回这两个参数的最大值：\n/* 函数返回两个数的最大值 */ func max(num1, num2 int) int { /* 声明局部变量 */ var result int if (num1 \u0026gt; num2) { result = num1 } else { result = num2 } return result } 函数调用 当创建函数时，你定义了函数需要做什么，通过调用该函数来执行指定任务。\n调用函数，向函数传递参数，并返回值，例如：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 定义局部变量 */ var a int = 100 var b int = 200 var ret int /* 调用函数并返回最大值 */ ret = max(a, b) fmt.Printf( \u0026#34;最大值是 : %d\\n\u0026#34;, ret ) } /* 函数返回两个数的最大值 */ func max(num1, num2 int) int { /* 定义局部变量 */ var result int if (num1 \u0026gt; num2) { result = num1 } else { result = num2 } return result } 以上实例在 main() 函数中调用 max（）函数，执行结果为：\n最大值是 : 200 函数返回多个值 Go 函数可以返回多个值，例如：\n实例 package main import \u0026#34;fmt\u0026#34; func swap(x, y string) (string, string) { return y, x } func main() { a, b := swap(\u0026#34;Google\u0026#34;, \u0026#34;Runoob\u0026#34;) fmt.Println(a, b) } 以上实例执行结果为：\nRunoob Google 函数参数 函数如果使用参数，该变量可称为函数的形参。\n形参就像定义在函数体内的局部变量。\n调用函数，可以通过两种方式来传递参数：\n传递类型 描述 值传递 值传递是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。 引用传递 引用传递是指在调用函数时将实际参数的地址传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。 默认情况下，Go 语言使用的是值传递，即在调用过程中不会影响到实际参数。\n函数用法 函数用法 描述 函数作为另外一个函数的实参 函数定义后可作为另外一个函数的实参数传入 闭包 闭包是匿名函数，可在动态编程中使用 方法 方法就是一个包含了接受者的函数 Go 语言变量作用域 作用域为已声明标识符所表示的常量、类型、变量、函数或包在源代码中的作用范围。\nGo 语言中变量可以在三个地方声明：\n函数内定义的变量称为局部变量 函数外定义的变量称为全局变量 函数定义中的变量称为形式参数 局部变量 在函数体内声明的变量称之为局部变量，它们的作用域只在函数体内，参数和返回值变量也是局部变量。\n以下实例中 main() 函数使用了局部变量 a, b, c：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 声明局部变量 */ var a, b, c int /* 初始化参数 */ a = 10 b = 20 c = a + b fmt.Printf (\u0026#34;结果： a = %d, b = %d and c = %d\\n\u0026#34;, a, b, c) } 以上实例执行输出结果为：\n结果： a = 10, b = 20 and c = 30 全局变量 在函数体外声明的变量称之为全局变量，全局变量可以在整个包甚至外部包（被导出后）使用。\n全局变量可以在任何函数中使用，以下实例演示了如何使用全局变量：\npackage main import \u0026#34;fmt\u0026#34; /* 声明全局变量 */ var g int func main() { /* 声明局部变量 */ var a, b int /* 初始化参数 */ a = 10 b = 20 g = a + b fmt.Printf(\u0026#34;结果： a = %d, b = %d and g = %d\\n\u0026#34;, a, b, g) } 以上实例执行输出结果为：\n结果： a = 10, b = 20 and g = 30 Go 语言程序中全局变量与局部变量名称可以相同，但是函数内的局部变量会被优先考虑。实例如下：\npackage main import \u0026#34;fmt\u0026#34; /* 声明全局变量 */ var g int = 20 func main() { /* 声明局部变量 */ var g int = 10 fmt.Printf (\u0026#34;结果： g = %d\\n\u0026#34;, g) } 以上实例执行输出结果为：\n结果： g = 10 形式参数 形式参数会作为函数的局部变量来使用。实例如下：\npackage main import \u0026#34;fmt\u0026#34; /* 声明全局变量 */ var a int = 20; func main() { /* main 函数中声明局部变量 */ var a int = 10 var b int = 20 var c int = 0 fmt.Printf(\u0026#34;main()函数中 a = %d\\n\u0026#34;, a); c = sum( a, b); fmt.Printf(\u0026#34;main()函数中 c = %d\\n\u0026#34;, c); } /* 函数定义-两数相加 */ func sum(a, b int) int { fmt.Printf(\u0026#34;sum() 函数中 a = %d\\n\u0026#34;, a); fmt.Printf(\u0026#34;sum() 函数中 b = %d\\n\u0026#34;, b); return a + b; } 以上实例执行输出结果为：\nmain()函数中 a = 10 sum() 函数中 a = 10 sum() 函数中 b = 20 main()函数中 c = 30 初始化局部和全局变量 不同类型的局部和全局变量默认值为：\n数据类型 初始化默认值 int 0 float32 0 pointer nil Go 语言数组 Go 语言提供了数组类型的数据结构。\n数组是具有相同唯一类型的一组已编号且长度固定的数据项序列，这种类型可以是任意的原始类型例如整型、字符串或者自定义类型。\n相对于去声明 number0, number1, \u0026hellip;, number99 的变量，使用数组形式 numbers[0], numbers[1] \u0026hellip;, numbers[99] 更加方便且易于扩展。\n数组元素可以通过索引（位置）来读取（或者修改），索引从 0 开始，第一个元素索引为 0，第二个索引为 1，以此类推。\n声明数组 Go 语言数组声明需要指定元素类型及元素个数，语法格式如下：\nvar arrayName [size]dataType 其中，arrayName 是数组的名称，size 是数组的大小，dataType 是数组中元素的数据类型。\n以下定义了数组 balance 长度为 10 类型为 float32：\nvar balance [10]float32 初始化数组 以下演示了数组初始化：\n以下实例声明一个名为 numbers 的整数数组，其大小为 5，在声明时，数组中的每个元素都会根据其数据类型进行默认初始化，对于整数类型，初始值为 0。\nvar numbers [5]int 还可以使用初始化列表来初始化数组的元素：\nvar numbers = [5]int{1, 2, 3, 4, 5} 以上代码声明一个大小为 5 的整数数组，并将其中的元素分别初始化为 1、2、3、4 和 5。\n另外，还可以使用 := 简短声明语法来声明和初始化数组：\nnumbers := [5]int{1, 2, 3, 4, 5} 以上代码创建一个名为 numbers 的整数数组，并将其大小设置为 5，并初始化元素的值。\n**注意：**在 Go 语言中，数组的大小是类型的一部分，因此不同大小的数组是不兼容的，也就是说 [5]int 和 [10]int 是不同的类型。\n以下定义了数组 balance 长度为 5 类型为 float32，并初始化数组的元素：\nvar balance = [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 我们也可以通过字面量在声明数组的同时快速初始化数组：\nbalance := [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 如果数组长度不确定，可以使用 \u0026hellip; 代替数组的长度，编译器会根据元素个数自行推断数组的长度：\nvar balance = [...]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 或 balance := [...]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 如果设置了数组的长度，我们还可以通过指定下标来初始化元素：\n// 将索引为 1 和 3 的元素初始化 balance := [5]float32{1:2.0,3:7.0} 初始化数组中 {} 中的元素个数不能大于 [] 中的数字。\n如果忽略 [] 中的数字不设置数组大小，Go 语言会根据元素的个数来设置数组的大小：\nbalance[4] = 50.0 以上实例读取了第五个元素。数组元素可以通过索引（位置）来读取（或者修改），索引从 0 开始，第一个元素索引为 0，第二个索引为 1，以此类推。\n访问数组元素 数组元素可以通过索引（位置）来读取。格式为数组名后加中括号，中括号中为索引的值。例如：\nvar salary float32 = balance[9] 以上实例读取了数组 balance 第 10 个元素的值。\n以下演示了数组完整操作（声明、赋值、访问）的实例：\npackage main import \u0026#34;fmt\u0026#34; func main() { var n [10]int /* n 是一个长度为 10 的数组 */ var i,j int /* 为数组 n 初始化元素 */ for i = 0; i \u0026lt; 10; i++ { n[i] = i + 100 /* 设置元素为 i + 100 */ } /* 输出每个数组元素的值 */ for j = 0; j \u0026lt; 10; j++ { fmt.Printf(\u0026#34;Element[%d] = %d\\n\u0026#34;, j, n[j] ) } } 结果如下：\nElement[0] = 100 Element[1] = 101 Element[2] = 102 Element[3] = 103 Element[4] = 104 Element[5] = 105 Element[6] = 106 Element[7] = 107 Element[8] = 108 Element[9] = 109 package main import \u0026#34;fmt\u0026#34; func main() { var i,j,k int // 声明数组的同时快速初始化数组 balance := [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0} /* 输出数组元素 */ ... for i = 0; i \u0026lt; 5; i++ { fmt.Printf(\u0026#34;balance[%d] = %f\\n\u0026#34;, i, balance[i] ) } balance2 := [...]float32{1000.0, 2.0, 3.4, 7.0, 50.0} /* 输出每个数组元素的值 */ for j = 0; j \u0026lt; 5; j++ { fmt.Printf(\u0026#34;balance2[%d] = %f\\n\u0026#34;, j, balance2[j] ) } // 将索引为 1 和 3 的元素初始化 balance3 := [5]float32{1:2.0,3:7.0} for k = 0; k \u0026lt; 5; k++ { fmt.Printf(\u0026#34;balance3[%d] = %f\\n\u0026#34;, k, balance3[k] ) } } 结果如下：\nbalance[0] = 1000.000000 balance[1] = 2.000000 balance[2] = 3.400000 balance[3] = 7.000000 balance[4] = 50.000000 balance2[0] = 1000.000000 balance2[1] = 2.000000 balance2[2] = 3.400000 balance2[3] = 7.000000 balance2[4] = 50.000000 balance3[0] = 0.000000 balance3[1] = 2.000000 balance3[2] = 0.000000 balance3[3] = 7.000000 balance3[4] = 0.000000 多维数组 Go 语言支持多维数组，以下为常用的多维数组声明方式：\nvar variable_name [SIZE1][SIZE2]...[SIZEN] variable_type 以下实例声明了三维的整型数组：\nvar threedim [5][10][4]int 二维数组 二维数组是最简单的多维数组，二维数组本质上是由一维数组组成的。二维数组定义方式如下：\nvar arrayName [ x ][ y ] variable_type variable_type 为 Go 语言的数据类型，arrayName 为数组名，二维数组可认为是一个表格，x 为行，y 为列，下图演示了一个二维数组 a 为三行四列：\n二维数组中的元素可通过 a[ i ][ j ]来访问。\npackage main import \u0026#34;fmt\u0026#34; func main() { // Step 1: 创建数组 values := [][]int{} // Step 2: 使用 append() 函数向空的二维数组添加两行一维数组 row1 := []int{1, 2, 3} row2 := []int{4, 5, 6} values = append(values, row1) values = append(values, row2) // Step 3: 显示两行数据 fmt.Println(\u0026#34;Row 1\u0026#34;) fmt.Println(values[0]) fmt.Println(\u0026#34;Row 2\u0026#34;) fmt.Println(values[1]) // Step 4: 访问第一个元素 fmt.Println(\u0026#34;第一个元素为：\u0026#34;) fmt.Println(values[0][0]) } 结果为：\nRow 1 [1 2 3] Row 2 [4 5 6] 第一个元素为： 1 初始化二维数组 多维数组可通过大括号来初始值。以下实例为一个 3 行 4 列的二维数组：\na := [3][4]int{ {0, 1, 2, 3} , /* 第一行索引为 0 */ {4, 5, 6, 7} , /* 第二行索引为 1 */ {8, 9, 10, 11}, /* 第三行索引为 2 */ } **注意：**以上代码中倒数第二行的}必须要有逗号，因为最后一行的} 不能单独一行，也可以写成这样：\na := [3][4]int{ {0, 1, 2, 3} , /* 第一行索引为 0 */ {4, 5, 6, 7} , /* 第二行索引为 1 */ {8, 9, 10, 11}} /* 第三行索引为 2 */ 以下实例初始化一个 2 行 2 列 的二维数组：\npackage main import \u0026#34;fmt\u0026#34; func main() { // 创建二维数组 sites := [2][2]string{} // 向二维数组添加元素 sites[0][0] = \u0026#34;Google\u0026#34; sites[0][1] = \u0026#34;Runoob\u0026#34; sites[1][0] = \u0026#34;Taobao\u0026#34; sites[1][1] = \u0026#34;Weibo\u0026#34; // 显示结果 fmt.Println(sites) } 输出结果为：\n[[Google Runoob] [Taobao Weibo]] 访问二维数组 二维数组通过指定坐标来访问。如数组中的行索引与列索引，例如：\nval := a[2][3] 或 var value int = a[2][3] 以上实例访问了二维数组 val 第三行的第四个元素。\n二维数组可以使用循环嵌套来输出元素：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 数组 - 5 行 2 列*/ var a = [5][2]int{ {0,0}, {1,2}, {2,4}, {3,6},{4,8}} var i, j int /* 输出数组元素 */ for i = 0; i \u0026lt; 5; i++ { for j = 0; j \u0026lt; 2; j++ { fmt.Printf(\u0026#34;a[%d][%d] = %d\\n\u0026#34;, i,j, a[i][j] ) } } } 输出结果为：\na[0][0] = 0 a[0][1] = 0 a[1][0] = 1 a[1][1] = 2 a[2][0] = 2 a[2][1] = 4 a[3][0] = 3 a[3][1] = 6 a[4][0] = 4 a[4][1] = 8 以下实例创建各个维度元素数量不一致的多维数组：\npackage main import \u0026#34;fmt\u0026#34; func main() { // 创建空的二维数组 animals := [][]string{} // 创建三一维数组，各数组长度不同 row1 := []string{\u0026#34;fish\u0026#34;, \u0026#34;shark\u0026#34;, \u0026#34;eel\u0026#34;} row2 := []string{\u0026#34;bird\u0026#34;} row3 := []string{\u0026#34;lizard\u0026#34;, \u0026#34;salamander\u0026#34;} // 使用 append() 函数将一维数组添加到二维数组中 animals = append(animals, row1) animals = append(animals, row2) animals = append(animals, row3) // 循环输出 for i := range animals { fmt.Printf(\u0026#34;Row: %v\\n\u0026#34;, i) fmt.Println(animals[i]) } } 输出结果为：\nRow: 0 [fish shark eel] Row: 1 [bird] Row: 2 [lizard salamander] Go 语言向函数传递数组 Go 语言中的数组是值类型，因此在将数组传递给函数时，实际上是传递数组的副本。\n如果你想向函数传递数组参数，你需要在函数定义时，声明形参为数组，我们可以通过以下两种方式来声明：\n方式一 形参设定数组大小：\nfunc myFunction(param [10]int) { .... } 方式二 形参未设定数组大小：\nfunc myFunction(param []int) { .... } 如果你想要在函数内修改原始数组，可以通过传递数组的指针来实现。\n实例 让我们看下以下实例，实例中函数接收整型数组参数，另一个参数指定了数组元素的个数，并返回平均值：\nfunc getAverage(arr []int, size int) float32 { var i int var avg, sum float32 for i = 0; i \u0026lt; size; ++i { sum += arr[i] } avg = sum / size return avg; } 接下来我们来调用这个函数：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 数组长度为 5 */ var balance = [5]int {1000, 2, 3, 17, 50} var avg float32 /* 数组作为参数传递给函数 */ avg = getAverage( balance, 5 ) ; /* 输出返回的平均值 */ fmt.Printf( \u0026#34;平均值为: %f \u0026#34;, avg ); } func getAverage(arr [5]int, size int) float32 { var i,sum int var avg float32 for i = 0; i \u0026lt; size;i++ { sum += arr[i] } avg = float32(sum) / float32(size) return avg; } 输出结果为：\n平均值为: 214.399994 以上实例中我们使用的形参并未设定数组大小。\n浮点数计算输出有一定的偏差，你也可以转整型来设置精度。\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { a := 1.69 b := 1.7 c := a * b // 结果应该是2.873 fmt.Println(c) // 输出的是2.8729999999999998 } 设置固定精度：\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { a := 1690 // 表示1.69 b := 1700 // 表示1.70 c := a * b // 结果应该是2873000表示 2.873 fmt.Println(c) // 内部编码 fmt.Println(float64(c) / 1000000) // 显示 } 如果你想要在函数内修改原始数组，可以通过传递数组的指针来实现。\n以下实例演示如何向函数传递数组，函数接受一个数组和数组的指针作为参数：\npackage main import \u0026#34;fmt\u0026#34; // 函数接受一个数组作为参数 func modifyArray(arr [5]int) { for i := 0; i \u0026lt; len(arr); i++ { arr[i] = arr[i] * 2 } } // 函数接受一个数组的指针作为参数 func modifyArrayWithPointer(arr *[5]int) { for i := 0; i \u0026lt; len(*arr); i++ { (*arr)[i] = (*arr)[i] * 2 } } func main() { // 创建一个包含5个元素的整数数组 myArray := [5]int{1, 2, 3, 4, 5} fmt.Println(\u0026#34;Original Array:\u0026#34;, myArray) // 传递数组给函数，但不会修改原始数组的值 modifyArray(myArray) fmt.Println(\u0026#34;Array after modifyArray:\u0026#34;, myArray) // 传递数组的指针给函数，可以修改原始数组的值 modifyArrayWithPointer(\u0026amp;myArray) fmt.Println(\u0026#34;Array after modifyArrayWithPointer:\u0026#34;, myArray) } 在上面的例子中，modifyArray 函数接受一个数组，并尝试修改数组的值，但在主函数中调用后，原始数组并未被修改。相反，modifyArrayWithPointer 函数接受一个数组的指针，并通过指针修改了原始数组的值。\n以上实例执行输出结果为：\nOriginal Array: [1 2 3 4 5] Array after modifyArray: [1 2 3 4 5] Array after modifyArrayWithPointer: [2 4 6 8 10] Go 语言指针 Go 语言中指针是很容易学习的，Go 语言中使用指针可以更简单的执行一些任务。\n接下来让我们来一步步学习 Go 语言指针。\n我们都知道，变量是一种使用方便的占位符，用于引用计算机内存地址。\nGo 语言的取地址符是 \u0026amp;，放到一个变量前使用就会返回相应变量的内存地址。\n以下实例演示了变量在内存中地址：\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int = 10 fmt.Printf(\u0026#34;变量的地址: %x\\n\u0026#34;, \u0026amp;a ) } 输出结果为：\n变量的地址: 20818a220 什么是指针 一个指针变量指向了一个值的内存地址。\n类似于变量和常量，在使用指针前你需要声明指针。指针声明格式如下：\nvar var_name *var-type var-type 为指针类型，var_name 为指针变量名，* 号用于指定变量是作为一个指针。以下是有效的指针声明：\nvar ip *int /* 指向整型*/ var fp *float32 /* 指向浮点型 */ 如何使用指针 指针使用流程：\n定义指针变量。 为指针变量赋值。 访问指针变量中指向地址的值。 在指针类型前面加上 * 号（前缀）来获取指针所指向的内容。\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int= 20 /* 声明实际变量 */ var ip *int /* 声明指针变量 */ ip = \u0026amp;a /* 指针变量的存储地址 */ fmt.Printf(\u0026#34;a 变量的地址是: %x\\n\u0026#34;, \u0026amp;a ) /* 指针变量的存储地址 */ fmt.Printf(\u0026#34;ip 变量储存的指针地址: %x\\n\u0026#34;, ip ) /* 使用指针访问值 */ fmt.Printf(\u0026#34;*ip 变量的值: %d\\n\u0026#34;, *ip ) } 输出结果为：\na 变量的地址是: 20818a220 ip 变量储存的指针地址: 20818a220 *ip 变量的值: 20 Go 空指针 当一个指针被定义后没有分配到任何变量时，它的值为 nil。\nnil 指针也称为空指针。\nnil在概念上和其它语言的null、None、nil、NULL一样，都指代零值或空值。\n一个指针变量通常缩写为 ptr。\npackage main import \u0026#34;fmt\u0026#34; func main() { var ptr *int fmt.Printf(\u0026#34;ptr 的值为 : %x\\n\u0026#34;, ptr ) } 输出结果为：\nptr 的值为 : 0 空指针判断：\nif(ptr != nil) /* ptr 不是空指针 */ if(ptr == nil) /* ptr 是空指针 */ Go 语言指针数组 package main import \u0026#34;fmt\u0026#34; const MAX int = 3 func main() { a := []int{10,100,200} var i int for i = 0; i \u0026lt; MAX; i++ { fmt.Printf(\u0026#34;a[%d] = %d\\n\u0026#34;, i, a[i] ) } } 以上代码执行输出结果为：\na[0] = 10 a[1] = 100 a[2] = 200 有一种情况，我们可能需要保存数组，这样我们就需要使用到指针。\n以下声明了整型指针数组：\nvar ptr [MAX]*int; ptr 为整型指针数组。因此每个元素都指向了一个值。以下实例的三个整数将存储在指针数组中：\npackage main import \u0026#34;fmt\u0026#34; const MAX int = 3 func main() { a := []int{10,100,200} var i int var ptr [MAX]*int; for i = 0; i \u0026lt; MAX; i++ { ptr[i] = \u0026amp;a[i] /* 整数地址赋值给指针数组 */ } for i = 0; i \u0026lt; MAX; i++ { fmt.Printf(\u0026#34;a[%d] = %d\\n\u0026#34;, i,*ptr[i] ) } } 输出结果为：\na[0] = 10 a[1] = 100 a[2] = 200 Go 语言指针作为函数参数 Go 语言允许向函数传递指针，只需要在函数定义的参数上设置为指针类型即可。\n以下实例演示了如何向函数传递指针，并在函数调用后修改函数内的值，：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 定义局部变量 */ var a int = 100 var b int= 200 fmt.Printf(\u0026#34;交换前 a 的值 : %d\\n\u0026#34;, a ) fmt.Printf(\u0026#34;交换前 b 的值 : %d\\n\u0026#34;, b ) /* 调用函数用于交换值 * \u0026amp;a 指向 a 变量的地址 * \u0026amp;b 指向 b 变量的地址 */ swap(\u0026amp;a, \u0026amp;b); fmt.Printf(\u0026#34;交换后 a 的值 : %d\\n\u0026#34;, a ) fmt.Printf(\u0026#34;交换后 b 的值 : %d\\n\u0026#34;, b ) } func swap(x *int, y *int) { var temp int temp = *x /* 保存 x 地址的值 */ *x = *y /* 将 y 赋值给 x */ *y = temp /* 将 temp 赋值给 y */ } 输出结果为：\n交换前 a 的值 : 100 交换前 b 的值 : 200 交换后 a 的值 : 200 交换后 b 的值 : 100 Go 语言指向指针的指针 如果一个指针变量存放的又是另一个指针变量的地址，则称这个指针变量为指向指针的指针变量。\n当定义一个指向指针的指针变量时，第一个指针存放第二个指针的地址，第二个指针存放变量的地址：\n指向指针的指针变量声明格式如下：\nvar ptr **int; 以上指向指针的指针变量为整型。\n访问指向指针的指针变量值需要使用两个 * 号，如下所示：\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int var ptr *int var pptr **int a = 3000 /* 指针 ptr 地址 */ ptr = \u0026amp;a /* 指向指针 ptr 地址 */ pptr = \u0026amp;ptr /* 获取 pptr 的值 */ fmt.Printf(\u0026#34;变量 a = %d\\n\u0026#34;, a ) fmt.Printf(\u0026#34;指针变量 *ptr = %d\\n\u0026#34;, *ptr ) fmt.Printf(\u0026#34;指向指针的指针变量 **pptr = %d\\n\u0026#34;, **pptr) } 输出结果为：\n变量 a = 3000 指针变量 *ptr = 3000 指向指针的指针变量 **pptr = 3000 Go 语言结构体 Go 语言中数组可以存储同一类型的数据，但在结构体中我们可以为不同项定义不同的数据类型。\n结构体是由一系列具有相同类型或不同类型的数据构成的数据集合。\n结构体表示一项记录，比如保存图书馆的书籍记录，每本书有以下属性：\nTitle ：标题 Author ： 作者 Subject：学科 ID：书籍ID 定义结构体 结构体定义需要使用 type 和 struct 语句。struct 语句定义一个新的数据类型，结构体中有一个或多个成员。type 语句设定了结构体的名称。结构体的格式如下：\ntype struct_variable_type struct { member definition member definition ... member definition } 一旦定义了结构体类型，它就能用于变量的声明，语法格式如下：\nvariable_name := structure_variable_type {value1, value2...valuen} 或 variable_name := structure_variable_type { key1: value1, key2: value2..., keyn: valuen} package main import \u0026#34;fmt\u0026#34; type Books struct { title string author string subject string book_id int } func main() { // 创建一个新的结构体 fmt.Println(Books{\u0026#34;Go 语言\u0026#34;, \u0026#34;www.runoob.com\u0026#34;, \u0026#34;Go 语言教程\u0026#34;, 6495407}) // 也可以使用 key =\u0026gt; value 格式 fmt.Println(Books{title: \u0026#34;Go 语言\u0026#34;, author: \u0026#34;www.runoob.com\u0026#34;, subject: \u0026#34;Go 语言教程\u0026#34;, book_id: 6495407}) // 忽略的字段为 0 或 空 fmt.Println(Books{title: \u0026#34;Go 语言\u0026#34;, author: \u0026#34;www.runoob.com\u0026#34;}) } 输出结果为：\n{Go 语言 www.runoob.com Go 语言教程 6495407} {Go 语言 www.runoob.com Go 语言教程 6495407} {Go 语言 www.runoob.com 0} 访问结构体成员 如果要访问结构体成员，需要使用点号 . 操作符，格式为：\n结构体.成员名 结构体类型变量使用 struct 关键字定义，实例如下：\npackage main import \u0026#34;fmt\u0026#34; type Books struct { title string author string subject string book_id int } func main() { var Book1 Books /* 声明 Book1 为 Books 类型 */ var Book2 Books /* 声明 Book2 为 Books 类型 */ /* book 1 描述 */ Book1.title = \u0026#34;Go 语言\u0026#34; Book1.author = \u0026#34;www.runoob.com\u0026#34; Book1.subject = \u0026#34;Go 语言教程\u0026#34; Book1.book_id = 6495407 /* book 2 描述 */ Book2.title = \u0026#34;Python 教程\u0026#34; Book2.author = \u0026#34;www.runoob.com\u0026#34; Book2.subject = \u0026#34;Python 语言教程\u0026#34; Book2.book_id = 6495700 /* 打印 Book1 信息 */ fmt.Printf( \u0026#34;Book 1 title : %s\\n\u0026#34;, Book1.title) fmt.Printf( \u0026#34;Book 1 author : %s\\n\u0026#34;, Book1.author) fmt.Printf( \u0026#34;Book 1 subject : %s\\n\u0026#34;, Book1.subject) fmt.Printf( \u0026#34;Book 1 book_id : %d\\n\u0026#34;, Book1.book_id) /* 打印 Book2 信息 */ fmt.Printf( \u0026#34;Book 2 title : %s\\n\u0026#34;, Book2.title) fmt.Printf( \u0026#34;Book 2 author : %s\\n\u0026#34;, Book2.author) fmt.Printf( \u0026#34;Book 2 subject : %s\\n\u0026#34;, Book2.subject) fmt.Printf( \u0026#34;Book 2 book_id : %d\\n\u0026#34;, Book2.book_id) } 运行结果为：\nBook 1 title : Go 语言 Book 1 author : www.runoob.com Book 1 subject : Go 语言教程 Book 1 book_id : 6495407 Book 2 title : Python 教程 Book 2 author : www.runoob.com Book 2 subject : Python 语言教程 Book 2 book_id : 6495700 结构体作为函数参数 你可以像其他数据类型一样将结构体类型作为参数传递给函数。并以以上实例的方式访问结构体变量：\npackage main import \u0026#34;fmt\u0026#34; type Books struct { title string author string subject string book_id int } func main() { var Book1 Books /* 声明 Book1 为 Books 类型 */ var Book2 Books /* 声明 Book2 为 Books 类型 */ /* book 1 描述 */ Book1.title = \u0026#34;Go 语言\u0026#34; Book1.author = \u0026#34;www.runoob.com\u0026#34; Book1.subject = \u0026#34;Go 语言教程\u0026#34; Book1.book_id = 6495407 /* book 2 描述 */ Book2.title = \u0026#34;Python 教程\u0026#34; Book2.author = \u0026#34;www.runoob.com\u0026#34; Book2.subject = \u0026#34;Python 语言教程\u0026#34; Book2.book_id = 6495700 /* 打印 Book1 信息 */ printBook(Book1) /* 打印 Book2 信息 */ printBook(Book2) } func printBook( book Books ) { fmt.Printf( \u0026#34;Book title : %s\\n\u0026#34;, book.title) fmt.Printf( \u0026#34;Book author : %s\\n\u0026#34;, book.author) fmt.Printf( \u0026#34;Book subject : %s\\n\u0026#34;, book.subject) fmt.Printf( \u0026#34;Book book_id : %d\\n\u0026#34;, book.book_id) } 运行结果为：\nBook title : Go 语言 Book author : www.runoob.com Book subject : Go 语言教程 Book book_id : 6495407 Book title : Python 教程 Book author : www.runoob.com Book subject : Python 语言教程 Book book_id : 6495700 结构体指针 你可以定义指向结构体的指针类似于其他指针变量，格式如下：\nvar struct_pointer *Books 以上定义的指针变量可以存储结构体变量的地址。查看结构体变量地址，可以将 \u0026amp; 符号放置于结构体变量前：\nstruct_pointer = \u0026amp;Book1 使用结构体指针访问结构体成员，使用 \u0026ldquo;.\u0026rdquo; 操作符：\nstruct_pointer.title package main import \u0026#34;fmt\u0026#34; type Books struct { title string author string subject string book_id int } func main() { var Book1 Books /* 声明 Book1 为 Books 类型 */ var Book2 Books /* 声明 Book2 为 Books 类型 */ /* book 1 描述 */ Book1.title = \u0026#34;Go 语言\u0026#34; Book1.author = \u0026#34;www.runoob.com\u0026#34; Book1.subject = \u0026#34;Go 语言教程\u0026#34; Book1.book_id = 6495407 /* book 2 描述 */ Book2.title = \u0026#34;Python 教程\u0026#34; Book2.author = \u0026#34;www.runoob.com\u0026#34; Book2.subject = \u0026#34;Python 语言教程\u0026#34; Book2.book_id = 6495700 /* 打印 Book1 信息 */ printBook(\u0026amp;Book1) /* 打印 Book2 信息 */ printBook(\u0026amp;Book2) } func printBook( book *Books ) { fmt.Printf( \u0026#34;Book title : %s\\n\u0026#34;, book.title) fmt.Printf( \u0026#34;Book author : %s\\n\u0026#34;, book.author) fmt.Printf( \u0026#34;Book subject : %s\\n\u0026#34;, book.subject) fmt.Printf( \u0026#34;Book book_id : %d\\n\u0026#34;, book.book_id) } 运行结果为：\nBook title : Go 语言 Book author : www.runoob.com Book subject : Go 语言教程 Book book_id : 6495407 Book title : Python 教程 Book author : www.runoob.com Book subject : Python 语言教程 Book book_id : 6495700 Go 语言切片(Slice) Go 语言切片是对数组的抽象。\nGo 数组的长度不可改变，在特定场景中这样的集合就不太适用，Go 中提供了一种灵活，功能强悍的内置类型切片(\u0026ldquo;动态数组\u0026rdquo;)，与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大。\n定义切片 你可以声明一个未指定大小的数组来定义切片：\nvar identifier []type 切片不需要说明长度。\n或使用 make() 函数来创建切片:\nvar slice1 []type = make([]type, len) 也可以简写为 slice1 := make([]type, len) 也可以指定容量，其中 capacity 为可选参数。\nmake([]T, length, capacity) 这里 len 是数组的长度并且也是切片的初始长度。\n切片初始化 s :=[] int {1,2,3 } 直接初始化切片，[] 表示是切片类型，{1,2,3} 初始化值依次是 1,2,3，其 cap=len=3。\ns := arr[:] 初始化切片 s，是数组 arr 的引用。\ns := arr[startIndex:endIndex] 将 arr 中从下标 startIndex 到 endIndex-1 下的元素创建为一个新的切片。\ns := arr[startIndex:] 默认 endIndex 时将表示一直到arr的最后一个元素。\ns := arr[:endIndex] 默认 startIndex 时将表示从 arr 的第一个元素开始。\ns1 := s[startIndex:endIndex] 通过切片 s 初始化切片 s1。\ns :=make([]int,len,cap) 通过内置函数 make() 初始化切片s，[]int 标识为其元素类型为 int 的切片。\nlen() 和 cap() 函数 切片是可索引的，并且可以由 len() 方法获取长度。\n切片提供了计算容量的方法 cap() 可以测量切片最长可以达到多少。\n以下为具体实例：\npackage main import \u0026#34;fmt\u0026#34; func main() { var numbers = make([]int,3,5) printSlice(numbers) } func printSlice(x []int){ fmt.Printf(\u0026#34;len=%d cap=%d slice=%v\\n\u0026#34;,len(x),cap(x),x) } 输出结果为:\nlen=3 cap=5 slice=[0 0 0] 空(nil)切片 一个切片在未初始化之前默认为 nil，长度为 0，实例如下：\npackage main import \u0026#34;fmt\u0026#34; func main() { var numbers []int printSlice(numbers) if(numbers == nil){ fmt.Printf(\u0026#34;切片是空的\u0026#34;) } } func printSlice(x []int){ fmt.Printf(\u0026#34;len=%d cap=%d slice=%v\\n\u0026#34;,len(x),cap(x),x) } 输出结果为:\nlen=0 cap=0 slice=[] 切片是空的 切片截取 可以通过设置下限及上限来设置截取切片 [lower-bound:upper-bound]，实例如下：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 创建切片 */ numbers := []int{0,1,2,3,4,5,6,7,8} printSlice(numbers) /* 打印原始切片 */ fmt.Println(\u0026#34;numbers ==\u0026#34;, numbers) /* 打印子切片从索引1(包含) 到索引4(不包含)*/ fmt.Println(\u0026#34;numbers[1:4] ==\u0026#34;, numbers[1:4]) /* 默认下限为 0*/ fmt.Println(\u0026#34;numbers[:3] ==\u0026#34;, numbers[:3]) /* 默认上限为 len(s)*/ fmt.Println(\u0026#34;numbers[4:] ==\u0026#34;, numbers[4:]) numbers1 := make([]int,0,5) printSlice(numbers1) /* 打印子切片从索引 0(包含) 到索引 2(不包含) */ number2 := numbers[:2] printSlice(number2) /* 打印子切片从索引 2(包含) 到索引 5(不包含) */ number3 := numbers[2:5] printSlice(number3) } func printSlice(x []int){ fmt.Printf(\u0026#34;len=%d cap=%d slice=%v\\n\u0026#34;,len(x),cap(x),x) } 输出结果为：\nlen=9 cap=9 slice=[0 1 2 3 4 5 6 7 8] numbers == [0 1 2 3 4 5 6 7 8] numbers[1:4] == [1 2 3] numbers[:3] == [0 1 2] numbers[4:] == [4 5 6 7 8] len=0 cap=5 slice=[] len=2 cap=9 slice=[0 1] len=3 cap=7 slice=[2 3 4] append() 和 copy() 函数 如果想增加切片的容量，我们必须创建一个新的更大的切片并把原分片的内容都拷贝过来。\n下面的代码描述了从拷贝切片的 copy 方法和向切片追加新元素的 append 方法。\npackage main import \u0026#34;fmt\u0026#34; func main() { var numbers []int printSlice(numbers) /* 允许追加空切片 */ numbers = append(numbers, 0) printSlice(numbers) /* 向切片添加一个元素 */ numbers = append(numbers, 1) printSlice(numbers) /* 同时添加多个元素 */ numbers = append(numbers, 2,3,4) printSlice(numbers) /* 创建切片 numbers1 是之前切片的两倍容量*/ numbers1 := make([]int, len(numbers), (cap(numbers))*2) /* 拷贝 numbers 的内容到 numbers1 */ copy(numbers1,numbers) printSlice(numbers1) } func printSlice(x []int){ fmt.Printf(\u0026#34;len=%d cap=%d slice=%v\\n\u0026#34;,len(x),cap(x),x) } 输出结果为：\nlen=0 cap=0 slice=[] len=1 cap=1 slice=[0] len=2 cap=2 slice=[0 1] len=5 cap=6 slice=[0 1 2 3 4] len=5 cap=12 slice=[0 1 2 3 4] Go 语言范围(Range) Go 语言中 range 关键字用于 for 循环中迭代数组(array)、切片(slice)、通道(channel)或集合(map)的元素。在数组和切片中它返回元素的索引和索引对应的值，在集合中返回 key-value 对。\nfor 循环的 range 格式可以对 slice、map、数组、字符串等进行迭代循环。格式如下：\nfor key, value := range oldMap { newMap[key] = value } 以上代码中的 key 和 value 是可以省略。\n如果只想读取 key，格式如下：\nfor key := range oldMap 或者这样：\nfor key, _ := range oldMap\n如果只想读取 value，格式如下：\nfor _, value := range oldMap 数组和切片 遍历简单的切片，2**%d 的结果为 2 对应的次方数：\npackage main import \u0026#34;fmt\u0026#34; // 声明一个包含 2 的幂次方的切片 var pow = []int{1, 2, 4, 8, 16, 32, 64, 128} func main() { // 遍历 pow 切片，i 是索引，v 是值 for i, v := range pow { // 打印 2 的 i 次方等于 v fmt.Printf(\u0026#34;2**%d = %d\\n\u0026#34;, i, v) } } 遍历 pow 切片，i 是索引，v 是值\n输出结果为：\n2**0 = 1 2**1 = 2 2**2 = 4 2**3 = 8 2**4 = 16 2**5 = 32 2**6 = 64 2**7 = 128 字符串 range 迭代字符串时，返回每个字符的索引和 Unicode 代码点（rune）。\npackage main import \u0026#34;fmt\u0026#34; func main() { for i, c := range \u0026#34;hello\u0026#34; { fmt.Printf(\u0026#34;index: %d, char: %c\\n\u0026#34;, i, c) } } 输出结果为:\nindex: 0, char: h index: 1, char: e index: 2, char: l index: 3, char: l index: 4, char: o 映射（Map） for 循环的 range 格式可以省略 key 和 value，如下实例：\npackage main import \u0026#34;fmt\u0026#34; func main() { // 创建一个空的 map，key 是 int 类型，value 是 float32 类型 map1 := make(map[int]float32) // 向 map1 中添加 key-value 对 map1[1] = 1.0 map1[2] = 2.0 map1[3] = 3.0 map1[4] = 4.0 // 遍历 map1，读取 key 和 value for key, value := range map1 { // 打印 key 和 value fmt.Printf(\u0026#34;key is: %d - value is: %f\\n\u0026#34;, key, value) } // 遍历 map1，只读取 key for key := range map1 { // 打印 key fmt.Printf(\u0026#34;key is: %d\\n\u0026#34;, key) } // 遍历 map1，只读取 value for _, value := range map1 { // 打印 value fmt.Printf(\u0026#34;value is: %f\\n\u0026#34;, value) } } 输出结果为:\nkey is: 4 - value is: 4.000000 key is: 1 - value is: 1.000000 key is: 2 - value is: 2.000000 key is: 3 - value is: 3.000000 key is: 1 key is: 2 key is: 3 key is: 4 value is: 1.000000 value is: 2.000000 value is: 3.000000 value is: 4.000000 通道（Channel） range 遍历从通道接收的值，直到通道关闭。\npackage main import \u0026#34;fmt\u0026#34; func main() { ch := make(chan int, 2) ch \u0026lt;- 1 ch \u0026lt;- 2 close(ch) for v := range ch { fmt.Println(v) } } 输出结果为:\n1 2 忽略值 在遍历时可以使用 _ 来忽略索引或值。\npackage main import \u0026#34;fmt\u0026#34; func main() { nums := []int{2, 3, 4} // 忽略索引 for _, num := range nums { fmt.Println(\u0026#34;value:\u0026#34;, num) } // 忽略值 for i := range nums { fmt.Println(\u0026#34;index:\u0026#34;, i) } } 输出结果为:\nvalue: 2 value: 3 value: 4 index: 0 index: 1 index: 2 其他 range 遍历其他数据结构：\npackage main import \u0026#34;fmt\u0026#34; func main() { //这是我们使用 range 去求一个 slice 的和。使用数组跟这个很类似 nums := []int{2, 3, 4} sum := 0 for _, num := range nums { sum += num } fmt.Println(\u0026#34;sum:\u0026#34;, sum) //在数组上使用 range 将传入索引和值两个变量。上面那个例子我们不需要使用该元素的序号，所以我们使用空白符\u0026#34;_\u0026#34;省略了。有时侯我们确实需要知道它的索引。 for i, num := range nums { if num == 3 { fmt.Println(\u0026#34;index:\u0026#34;, i) } } //range 也可以用在 map 的键值对上。 kvs := map[string]string{\u0026#34;a\u0026#34;: \u0026#34;apple\u0026#34;, \u0026#34;b\u0026#34;: \u0026#34;banana\u0026#34;} for k, v := range kvs { fmt.Printf(\u0026#34;%s -\u0026gt; %s\\n\u0026#34;, k, v) } //range也可以用来枚举 Unicode 字符串。第一个参数是字符的索引，第二个是字符（Unicode的值）本身。 for i, c := range \u0026#34;go\u0026#34; { fmt.Println(i, c) } } 输出结果为：\nsum: 9 index: 1 a -\u0026gt; apple b -\u0026gt; banana 0 103 1 111 Go 语言Map(集合) Map 是一种无序的键值对的集合。\nMap 最重要的一点是通过 key 来快速检索数据，key 类似于索引，指向数据的值。\nMap 是一种集合，所以我们可以像迭代数组和切片那样迭代它。不过，Map 是无序的，遍历 Map 时返回的键值对的顺序是不确定的。\n在获取 Map 的值时，如果键不存在，返回该类型的零值，例如 int 类型的零值是 0，string 类型的零值是 \u0026ldquo;\u0026quot;。\nMap 是引用类型，如果将一个 Map 传递给一个函数或赋值给另一个变量，它们都指向同一个底层数据结构，因此对 Map 的修改会影响到所有引用它的变量。\n定义 Map 可以使用内建函数 make 或使用 map 关键字来定义 Map:\n/* 使用 make 函数 */ map_variable := make(map[KeyType]ValueType, initialCapacity) 其中 KeyType 是键的类型，ValueType 是值的类型，initialCapacity 是可选的参数，用于指定 Map 的初始容量。Map 的容量是指 Map 中可以保存的键值对的数量，当 Map 中的键值对数量达到容量时，Map 会自动扩容。如果不指定 initialCapacity，Go 语言会根据实际情况选择一个合适的值。\n// 创建一个空的 Map m := make(map[string]int) // 创建一个初始容量为 10 的 Map m := make(map[string]int, 10) 也可以使用字面量创建 Map：键\u0026lt;\u0026mdash;\u0026mdash;\u0026mdash;\u0026gt;值\n// 使用字面量创建 Map m := map[string]int{ \u0026#34;apple\u0026#34;: 1, \u0026#34;banana\u0026#34;: 2, \u0026#34;orange\u0026#34;: 3, } 获取元素：\n// 获取键值对 v1 := m[\u0026#34;apple\u0026#34;] v2, ok := m[\u0026#34;pear\u0026#34;] // 如果键不存在，ok 的值为 false，v2 的值为该类型的零值 修改元素：\n// 修改键值对 m[\u0026#34;apple\u0026#34;] = 5 获取 Map 的长度：\n// 获取 Map 的长度 len := len(m) 遍历 Map：\n// 遍历 Map for k, v := range m { fmt.Printf(\u0026#34;key=%s, value=%d\\n\u0026#34;, k, v) } 删除元素：\n// 删除键值对 delete(m, \u0026#34;banana\u0026#34;) 创建和使用map:\npackage main import \u0026#34;fmt\u0026#34; func main() { var siteMap map[string]string /*创建集合 */ siteMap = make(map[string]string) /* map 插入 key - value 对,各个国家对应的首都 */ siteMap [ \u0026#34;Google\u0026#34; ] = \u0026#34;谷歌\u0026#34; siteMap [ \u0026#34;Runoob\u0026#34; ] = \u0026#34;菜鸟教程\u0026#34; siteMap [ \u0026#34;Baidu\u0026#34; ] = \u0026#34;百度\u0026#34; siteMap [ \u0026#34;Wiki\u0026#34; ] = \u0026#34;维基百科\u0026#34; /*使用键输出地图值 */ for site := range siteMap { fmt.Println(site, \u0026#34;首都是\u0026#34;, siteMap [site]) } /*查看元素在集合中是否存在 */ name, ok := siteMap [ \u0026#34;Facebook\u0026#34; ] /*如果确定是真实的,则存在,否则不存在 */ /*fmt.Println(capital) */ /*fmt.Println(ok) */ if (ok) { fmt.Println(\u0026#34;Facebook 的 站点是\u0026#34;, name) } else { fmt.Println(\u0026#34;Facebook 站点不存在\u0026#34;) } } 运行结果为：\nWiki 首都是 维基百科 Google 首都是 谷歌 Runoob 首都是 菜鸟教程 Baidu 首都是 百度 Facebook 站点不存在 delete() 函数 delete() 函数用于删除集合的元素, 参数为 map 和其对应的 key。实例如下：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 创建map */ countryCapitalMap := map[string]string{\u0026#34;France\u0026#34;: \u0026#34;Paris\u0026#34;, \u0026#34;Italy\u0026#34;: \u0026#34;Rome\u0026#34;, \u0026#34;Japan\u0026#34;: \u0026#34;Tokyo\u0026#34;, \u0026#34;India\u0026#34;: \u0026#34;New delhi\u0026#34;} fmt.Println(\u0026#34;原始地图\u0026#34;) /* 打印地图 */ for country := range countryCapitalMap { fmt.Println(country, \u0026#34;首都是\u0026#34;, countryCapitalMap [ country ]) } /*删除元素*/ delete(countryCapitalMap, \u0026#34;France\u0026#34;) fmt.Println(\u0026#34;法国条目被删除\u0026#34;) fmt.Println(\u0026#34;删除元素后地图\u0026#34;) /*打印地图*/ for country := range countryCapitalMap { fmt.Println(country, \u0026#34;首都是\u0026#34;, countryCapitalMap [ country ]) } } 运行结果为：\n原始地图 India 首都是 New delhi France 首都是 Paris Italy 首都是 Rome Japan 首都是 Tokyo 法国条目被删除 删除元素后地图 Italy 首都是 Rome Japan 首都是 Tokyo India 首都是 New delhi Go 语言递归函数 递归，就是在运行的过程中调用自己。\n语法格式如下：\nfunc recursion() { recursion() */\\* 函数调用自身 \\*/* } func main() { recursion() } Go 语言支持递归。但我们在使用递归时，开发者需要设置退出条件，否则递归将陷入无限循环中。\n递归函数对于解决数学上的问题是非常有用的，就像计算阶乘，生成斐波那契数列等。\n阶乘 以下实例通过 Go 语言的递归函数实例阶乘：\npackage main import \u0026#34;fmt\u0026#34; func Factorial(n uint64)(result uint64) { if (n \u0026gt; 0) { result = n * Factorial(n-1) return result } return 1 } func main() { var i int = 15 fmt.Printf(\u0026#34;%d 的阶乘是 %d\\n\u0026#34;, i, Factorial(uint64(i))) } 输出结果为：\n15 的阶乘是 1307674368000 斐波那契数列 以下实例通过 Go 语言的递归函数实现斐波那契数列：\npackage main import \u0026#34;fmt\u0026#34; func fibonacci(n int) int { if n \u0026lt; 2 { return n } return fibonacci(n-2) + fibonacci(n-1) } func main() { var i int for i = 0; i \u0026lt; 10; i++ { fmt.Printf(\u0026#34;%d\\t\u0026#34;, fibonacci(i)) } } 输出结果为：\n0 1 1 2 3 5 8 13 21 34 求平方根 以下实例通过 Go 语言使用递归方法实现求平方根的代码：\npackage main import ( \u0026#34;fmt\u0026#34; ) func sqrtRecursive(x, guess, prevGuess, epsilon float64) float64 { if diff := guess*guess - x; diff \u0026lt; epsilon \u0026amp;\u0026amp; -diff \u0026lt; epsilon { return guess } newGuess := (guess + x/guess) / 2 if newGuess == prevGuess { return guess } return sqrtRecursive(x, newGuess, guess, epsilon) } func sqrt(x float64) float64 { return sqrtRecursive(x, 1.0, 0.0, 1e-9) } func main() { x := 25.0 result := sqrt(x) fmt.Printf(\u0026#34;%.2f 的平方根为 %.6f\\n\u0026#34;, x, result) } 以上实例中，sqrtRecursive 函数使用递归方式实现平方根的计算。\nsqrtRecursive 函数接受四个参数：\nx 表示待求平方根的数 guess 表示当前猜测的平方根值 prevGuess 表示上一次的猜测值 epsilon 表示精度要求（即接近平方根的程度） 递归的终止条件是当前猜测的平方根与上一次猜测的平方根非常接近，差值小于给定的精度 epsilon。\n在 sqrt 函数中，我们调用 sqrtRecursive 来计算平方根，并传入初始值和精度要求，然后在 main 函数中，我们调用 sqrt 函数来求解平方根，并将结果打印出来。\n执行以上代码输出结果为：\n25.00 的平方根为 5.000000 Go 语言类型转换 类型转换用于将一种数据类型的变量转换为另外一种类型的变量。\nGo 语言类型转换基本格式如下：\ntype_name(expression) type_name 为类型，expression 为表达式。\n数值类型转换 将整型转换为浮点型：\nvar a int = 10 var b float64 = float64(a) 以下实例中将整型转化为浮点型，并计算结果，将结果赋值给浮点型变量：\npackage main import \u0026#34;fmt\u0026#34; func main() { var sum int = 17 var count int = 5 var mean float32 mean = float32(sum)/float32(count) fmt.Printf(\u0026#34;mean 的值为: %f\\n\u0026#34;,mean) } 输出结果为：\nmean 的值为: 3.400000 字符串类型转换 将一个字符串转换成另一个类型，可以使用以下语法：\nvar str string = \u0026#34;10\u0026#34; var num int num, _ = strconv.Atoi(str) 以上代码将字符串变量 str 转换为整型变量 num。\n注意，strconv.Atoi 函数返回两个值，第一个是转换后的整型值，第二个是可能发生的错误，我们可以使用空白标识符 _ 来忽略这个错误。\n以下实例将字符串转换为整数\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { str := \u0026#34;123\u0026#34; num, err := strconv.Atoi(str) if err != nil { fmt.Println(\u0026#34;转换错误:\u0026#34;, err) } else { fmt.Printf(\u0026#34;字符串 \u0026#39;%s\u0026#39; 转换为整数为：%d\\n\u0026#34;, str, num) } } 输出结果为：\n字符串 \u0026#39;123\u0026#39; 转换为整数为：123 将整数转换为字符串：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { num := 123 str := strconv.Itoa(num) fmt.Printf(\u0026#34;整数 %d 转换为字符串为：\u0026#39;%s\u0026#39;\\n\u0026#34;, num, str) } 输出结果为：\n整数 123 转换为字符串为：\u0026#39;123\u0026#39; 将字符串转换为浮点数：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { str := \u0026#34;3.14\u0026#34; num, err := strconv.ParseFloat(str, 64) if err != nil { fmt.Println(\u0026#34;转换错误:\u0026#34;, err) } else { fmt.Printf(\u0026#34;字符串 \u0026#39;%s\u0026#39; 转为浮点型为：%f\\n\u0026#34;, str, num) } } 输出结果为：\n字符串 \u0026#39;3.14\u0026#39; 转为浮点型为：3.140000 将浮点数转换为字符串：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { num := 3.14 str := strconv.FormatFloat(num, \u0026#39;f\u0026#39;, 2, 64) fmt.Printf(\u0026#34;浮点数 %f 转为字符串为：\u0026#39;%s\u0026#39;\\n\u0026#34;, num, str) } 输出结果为：\n浮点数 3.140000 转为字符串为：\u0026#39;3.14\u0026#39; go 不支持隐式转换类型，比如 :\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int64 = 3 var b int32 b = a fmt.Printf(\u0026#34;b 为 : %d\u0026#34;, b) } 此时会报错\ncannot use a (type int64) as type int32 in assignment cannot use b (type int32) as type string in argument to fmt.Printf 但是如果改成 b = int32(a) 就不会报错了:\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int64 = 3 var b int32 b = int32(a) fmt.Printf(\u0026#34;b 为 : %d\u0026#34;, b) } 接口类型转换 接口类型转换有两种情况**：类型断言和类型转换**。\n类型断言 类型断言用于将接口类型转换为指定类型，其语法为：\nvalue.(type) 或者 value.(T) 其中 value 是接口类型的变量，type 或 T 是要转换成的类型。\n如果类型断言成功，它将返回转换后的值和一个布尔值，表示转换是否成功。\npackage main import \u0026#34;fmt\u0026#34; func main() { var i interface{} = \u0026#34;Hello, World\u0026#34; str, ok := i.(string) if ok { fmt.Printf(\u0026#34;\u0026#39;%s\u0026#39; is a string\\n\u0026#34;, str) } else { fmt.Println(\u0026#34;conversion failed\u0026#34;) } } 以上实例中，我们定义了一个接口类型变量 i，并将它赋值为字符串 \u0026ldquo;Hello, World\u0026rdquo;。然后，我们使用类型断言将 i 转换为字符串类型，并将转换后的值赋值给变量 str。最后，我们使用 ok 变量检查类型转换是否成功，如果成功，我们打印转换后的字符串；否则，我们打印转换失败的消息。\n类型转换 类型转换用于将一个接口类型的值转换为另一个接口类型，其语法为：\nT(value) T 是目标接口类型，value 是要转换的值。\n在类型转换中，我们必须保证要转换的值和目标接口类型之间是兼容的，否则编译器会报错。\npackage main import \u0026#34;fmt\u0026#34; // 定义一个接口 Writer type Writer interface { Write([]byte) (int, error) } // 实现 Writer 接口的结构体 StringWriter type StringWriter struct { str string } // 实现 Write 方法 func (sw *StringWriter) Write(data []byte) (int, error) { sw.str += string(data) return len(data), nil } func main() { // 创建一个 StringWriter 实例并赋值给 Writer 接口变量 var w Writer = \u0026amp;StringWriter{} // 将 Writer 接口类型转换为 StringWriter 类型 sw := w.(*StringWriter) // 修改 StringWriter 的字段 sw.str = \u0026#34;Hello, World\u0026#34; // 打印 StringWriter 的字段值 fmt.Println(sw.str) } 解析：\n定义接口和结构体： Writer 接口定义了 Write 方法。 StringWriter 结构体实现了 Write 方法。 类型转换： 将 StringWriter 实例赋值给 Writer 接口变量 w。 使用 w.(*StringWriter) 将 Writer 接口类型转换为 StringWriter 类型。 访问字段： 修改 StringWriter 的字段 str，并打印其值。 空接口类型 空接口 interface{} 可以持有任何类型的值。在实际应用中，空接口经常被用来处理多种类型的值。\npackage main import ( \u0026#34;fmt\u0026#34; ) func printValue(v interface{}) { switch v := v.(type) { case int: fmt.Println(\u0026#34;Integer:\u0026#34;, v) case string: fmt.Println(\u0026#34;String:\u0026#34;, v) default: fmt.Println(\u0026#34;Unknown type\u0026#34;) } } func main() { printValue(42) printValue(\u0026#34;hello\u0026#34;) printValue(3.14) } 在这个例子中，printValue 函数接受一个空接口类型的参数，并使用类型断言和类型选择来处理不同的类型。\nGo 语言接口 interface Go 语言提供了另外一种数据类型即接口，它把所有的具有共性的方法定义在一起，任何其他类型只要实现了这些方法就是实现了这个接口。\n接口可以让我们将不同的类型绑定到一组公共的方法上，从而实现多态和灵活的设计。\nGo 语言中的接口是隐式实现的，也就是说，如果一个类型实现了一个接口定义的所有方法，那么它就自动地实现了该接口。因此，我们可以通过将接口作为参数来实现对不同类型的调用，从而实现多态。\n/* 定义接口 */ type interface_name interface { method_name1 [return_type] method_name2 [return_type] method_name3 [return_type] ... method_namen [return_type] } /* 定义结构体 */ type struct_name struct { /* variables */ } /* 实现接口方法 */ func (struct_name_variable struct_name) method_name1() [return_type] { /* 方法实现 */ } ... func (struct_name_variable struct_name) method_namen() [return_type] { /* 方法实现*/ } 接口的使用：\npackage main import ( \u0026#34;fmt\u0026#34; ) type Phone interface { call() } type NokiaPhone struct { } func (nokiaPhone NokiaPhone) call() { fmt.Println(\u0026#34;I am Nokia, I can call you!\u0026#34;) } type IPhone struct { } func (iPhone IPhone) call() { fmt.Println(\u0026#34;I am iPhone, I can call you!\u0026#34;) } func main() { var phone Phone phone = new(NokiaPhone) phone.call() phone = new(IPhone) phone.call() } 在上面的例子中，我们定义了一个接口 Phone，接口里面有一个方法 call()。然后我们在 main 函数里面定义了一个 Phone 类型变量，并分别为之赋值为 NokiaPhone 和 IPhone。然后调用 call() 方法，输出结果如下：\nI am Nokia, I can call you! I am iPhone, I can call you! 第二个接口实例：\npackage main import \u0026#34;fmt\u0026#34; type Shape interface { area() float64 } type Rectangle struct { width float64 height float64 } func (r Rectangle) area() float64 { return r.width * r.height } type Circle struct { radius float64 } func (c Circle) area() float64 { return 3.14 * c.radius * c.radius } func main() { var s Shape s = Rectangle{width: 10, height: 5} fmt.Printf(\u0026#34;矩形面积: %f\\n\u0026#34;, s.area()) s = Circle{radius: 3} fmt.Printf(\u0026#34;圆形面积: %f\\n\u0026#34;, s.area()) } 以上实例中，我们定义了一个 Shape 接口，它定义了一个方法 area()，该方法返回一个 float64 类型的面积值。然后，我们定义了两个结构体 Rectangle 和 Circle，它们分别实现了 Shape 接口的 area() 方法。在 main() 函数中，我们首先定义了一个 Shape 类型的变量 s，然后分别将 Rectangle 和 Circle 类型的实例赋值给它，并通过 area() 方法计算它们的面积并打印出来，输出结果如下：\n矩形面积: 50.000000 圆形面积: 28.260000 需要注意的是，接口类型变量可以存储任何实现了该接口的类型的值。在示例中，我们将 Rectangle 和 Circle 类型的实例都赋值给了 Shape 类型的变量 s，并通过 area() 方法调用它们的面积计算方法。\nGo 错误处理 Go 语言通过内置的错误接口提供了非常简单的错误处理机制。\nerror 类型是一个接口类型，这是它的定义：\ntype error interface { Error() string } 我们可以在编码中通过实现 error 接口类型来生成错误信息。\n函数通常在最后的返回值中返回错误信息。使用 errors.New 可返回一个错误信息：\nfunc Sqrt(f float64) (float64, error) { if f \u0026lt; 0 { return 0, errors.New(\u0026#34;math: square root of negative number\u0026#34;) } // 实现 } 在下面的例子中，我们在调用 Sqrt 的时候传递的一个负数，然后就得到了 non-nil 的 error 对象，将此对象与 nil 比较，结果为 true，所以 fmt.Println(fmt 包在处理 error 时会调用 Error 方法)被调用，以输出错误，请看下面调用的示例代码：\nresult, err:= Sqrt(-1) if err != nil { fmt.Println(err) } 实例\npackage main import ( \u0026#34;fmt\u0026#34; ) // 定义一个 DivideError 结构 type DivideError struct { dividee int divider int } // 实现 `error` 接口 func (de *DivideError) Error() string { strFormat := ` Cannot proceed, the divider is zero. dividee: %d divider: 0 ` return fmt.Sprintf(strFormat, de.dividee) } // 定义 `int` 类型除法运算的函数 func Divide(varDividee int, varDivider int) (result int, errorMsg string) { if varDivider == 0 { dData := DivideError{ dividee: varDividee, divider: varDivider, } errorMsg = dData.Error() return } else { return varDividee / varDivider, \u0026#34;\u0026#34; } } func main() { // 正常情况 if result, errorMsg := Divide(100, 10); errorMsg == \u0026#34;\u0026#34; { fmt.Println(\u0026#34;100/10 = \u0026#34;, result) } // 当除数为零的时候会返回错误信息 if _, errorMsg := Divide(100, 0); errorMsg != \u0026#34;\u0026#34; { fmt.Println(\u0026#34;errorMsg is: \u0026#34;, errorMsg) } } 输出结果为：\n100/10 = 10 errorMsg is: Cannot proceed, the divider is zero. dividee: 100 divider: 0 Go 并发 并发是指程序同时执行多个任务的能力\nGo 语言支持并发，通过 goroutines 和 channels 提供了一种简洁且高效的方式来实现并发。\ngoroutine goroutine 是轻量级线程，goroutine 的调度是由 Golang 运行时进行管理的。\ngoroutine 语法格式：\ngo 函数名( 参数列表 ) 例如：\ngo f(x, y, z) 开启一个新的 goroutine:\nf(x, y, z) Go 允许使用 go 语句开启一个新的运行期线程， 即 goroutine，以一个不同的、新创建的 goroutine 来执行一个函数。 同一个程序中的所有 goroutine 共享同一个地址空间。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func say(s string) { for i := 0; i \u0026lt; 5; i++ { time.Sleep(100 * time.Millisecond) fmt.Println(s) } } func main() { go say(\u0026#34;world\u0026#34;) say(\u0026#34;hello\u0026#34;) } 执行以上代码，你会看到输出的 hello 和 world 是没有固定先后顺序。因为它们是两个 goroutine 在执行：\nworld hello hello world world hello hello world world hello 通道（channel） 通道（channel）是用来传递数据的一个数据结构。\n通道可用于两个 goroutine 之间通过传递一个指定类型的值来同步运行和通讯。\n使用 make 函数创建一个 channel，使用 \u0026lt;- 操作符发送和接收数据。如果未指定方向，则为双向通道。\nch \u0026lt;- v // 把 v 发送到通道 ch v := \u0026lt;-ch // 从 ch 接收数据 // 并把值赋给 v 声明一个通道很简单，我们使用chan关键字即可，通道在使用前必须先创建：\nch := make(chan int) 注意：默认情况下，通道是不带缓冲区的。发送端发送数据，同时必须有接收端相应的接收数据。\n以下实例通过两个 goroutine 来计算数字之和，在 goroutine 完成计算后，它会计算两个结果的和：\npackage main import \u0026#34;fmt\u0026#34; func sum(s []int, c chan int) { sum := 0 for _, v := range s { sum += v } c \u0026lt;- sum // 把 sum 发送到通道 c } func main() { s := []int{7, 2, 8, -9, 4, 0} c := make(chan int) go sum(s[:len(s)/2], c) go sum(s[len(s)/2:], c) x, y := \u0026lt;-c, \u0026lt;-c // 从通道 c 中接收 fmt.Println(x, y, x+y) } 输出结果为：\n-5 17 12 通道缓冲区 通道可以设置缓冲区，通过 make 的第二个参数指定缓冲区大小：\nch := make(chan int, 100) 带缓冲区的通道允许发送端的数据发送和接收端的数据获取处于异步状态，就是说发送端发送的数据可以放在缓冲区里面，可以等待接收端去获取数据，而不是立刻需要接收端去获取数据。\n不过由于缓冲区的大小是有限的，所以还是必须有接收端来接收数据的，否则缓冲区一满，数据发送端就无法再发送数据了。\n注意：如果通道不带缓冲，发送方会阻塞直到接收方从通道中接收了值。如果通道带缓冲，发送方则会阻塞直到发送的值被拷贝到缓冲区内；如果缓冲区已满，则意味着需要等待直到某个接收方获取到一个值。接收方在有值可以接收之前会一直阻塞。\npackage main import \u0026#34;fmt\u0026#34; func main() { // 这里我们定义了一个可以存储整数类型的带缓冲通道 // 缓冲区大小为2 ch := make(chan int, 2) // 因为 ch 是带缓冲的通道，我们可以同时发送两个数据 // 而不用立刻需要去同步读取数据 ch \u0026lt;- 1 ch \u0026lt;- 2 // 获取这两个数据 fmt.Println(\u0026lt;-ch) fmt.Println(\u0026lt;-ch) } 执行输出结果为：\n1 2 Go 遍历通道与关闭通道 Go 通过 range 关键字来实现遍历读取到的数据，类似于与数组或切片。格式如下：\nv, ok := \u0026lt;-ch 如果通道接收不到数据后 ok 就为 false，这时通道就可以使用 close() 函数来关闭。\npackage main import ( \u0026#34;fmt\u0026#34; ) func fibonacci(n int, c chan int) { x, y := 0, 1 for i := 0; i \u0026lt; n; i++ { c \u0026lt;- x x, y = y, x+y } close(c) } func main() { c := make(chan int, 10) go fibonacci(cap(c), c) // range 函数遍历每个从通道接收到的数据，因为 c 在发送完 10 个 // 数据之后就关闭了通道，所以这里我们 range 函数在接收到 10 个数据 // 之后就结束了。如果上面的 c 通道不关闭，那么 range 函数就不 // 会结束，从而在接收第 11 个数据的时候就阻塞了。 for i := range c { fmt.Println(i) } } 输出结果为：\n0 1 1 2 3 5 8 13 21 34 Select 语句 select 语句使得一个 goroutine 可以等待多个通信操作。select 会阻塞，直到其中的某个 case 可以继续执行：\npackage main import \u0026#34;fmt\u0026#34; func fibonacci(c, quit chan int) { x, y := 0, 1 for { select { case c \u0026lt;- x: x, y = y, x+y case \u0026lt;-quit: fmt.Println(\u0026#34;quit\u0026#34;) return } } } func main() { c := make(chan int) quit := make(chan int) go func() { for i := 0; i \u0026lt; 10; i++ { fmt.Println(\u0026lt;-c) } quit \u0026lt;- 0 }() fibonacci(c, quit) } 以上代码中中，fibonacci goroutine 在 channel c 上发送斐波那契数列，当接收到 quit channel 的信号时退出。\n执行输出结果为：\n0 1 1 2 3 5 8 13 21 34 quit 并发编程小结 Goroutines 是轻量级线程，使用 go 关键字启动。 Channels 用于 goroutines 之间的通信。 Select 语句 用于等待多个 channel 操作。 链接: 菜鸟教程相关笔记补充\n","permalink":"//localhost:1313/posts/go%E8%AF%AD%E8%A8%80/","summary":"\u003ch1 id=\"go的变量声明\"\u003ego的变量声明\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e第一种，指定变量类型，如果没有初始化，则变量默认为零值\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e例如：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 声明一个整型变量 a，默认为 0\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"kt\"\u003efloat64\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 声明一个浮点型变量 b，默认为 0.0\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e第二种，根据值自行判定变量类型。\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e例如：\u003c/p\u003e","title":"Go语言"},{"content":"日常技巧 CTRL + r 等于 window 下的默认 CTRL + y CTRL + f 查找 1. 关于Vim 1.1 Vim的几种模式 正常模式：可以使用快捷键命令，或按:输入命令行。 插入模式：可以输入文本，在正常模式下，按i、a、o等都可以进入插入模式。 可视模式：正常模式下按v可以进入可视模式， 在可视模式下，移动光标可以选择文本。按V进入可视行模式， 总是整行整行的选中。ctrl+v进入可视块模式。 替换模式：正常模式下，按R进入。 2. 启动Vim vim -c cmd file: 在打开文件前，先执行指定的命令； vim -r file: 恢复上次异常退出的文件； vim -R file: 以只读的方式打开文件，但可以强制保存； vim -M file: 以只读的方式打开文件，不可以强制保存； vim -y num file: 将编辑窗口的大小设为num行； vim + file: 从文件的末尾开始； vim +num file: 从第num行开始； vim +/string file: 打开file，并将光标停留在第一个找到的string上。 vim \u0026ndash;remote file: 用已有的vim进程打开指定的文件。 如果你不想启用多个vim会话，这个很有用。但要注意， 如果你用vim，会寻找名叫VIM的服务器；如果你已经有一个gvim在运行了， 你可以用gvim \u0026ndash;remote file在已有的gvim中打开文件。 3. 文档操作 :e file \u0026ndash;关闭当前编辑的文件，并开启新的文件。 如果对当前文件的修改未保存，vi会警告。 :e! file \u0026ndash;放弃对当前文件的修改，编辑新的文件。 :e+file \u0026ndash; 开始新的文件，并从文件尾开始编辑。 :e+n file \u0026ndash; 开始新的文件，并从第n行开始编辑。 :enew \u0026ndash;编译一个未命名的新文档。(CTRL-W n) :e \u0026ndash; 重新加载当前文档。 :e! \u0026ndash; 重新加载当前文档，并丢弃已做的改动。 :e#或ctrl+^ \u0026ndash; 回到刚才编辑的文件，很实用。 :f或ctrl+g \u0026ndash; 显示文档名，是否修改，和光标位置。 :f filename \u0026ndash; 改变编辑的文件名，这时再保存相当于另存为。 gf \u0026ndash; 打开以光标所在字符串为文件名的文件。 :w \u0026ndash; 保存修改。 :n1,n2w filename \u0026ndash; 选择性保存从某n1行到另n2行的内容。 :wq \u0026ndash; 保存并退出。 ZZ \u0026ndash; 保存并退出。 :x \u0026ndash; 保存并退出。 :q[uit] ——退出当前窗口。(CTRL-W q或CTRL-W CTRL-Q) :saveas newfilename \u0026ndash; 另存为 :browse e \u0026ndash; 会打开一个文件浏览器让你选择要编辑的文件。 如果是终端中，则会打开netrw的文件浏览窗口； 如果是gvim，则会打开一个图形界面的浏览窗口。 实际上:browse后可以跟任何编辑文档的命令，如sp等。 用browse打开的起始目录可以由browsedir来设置： :set browsedir=last \u0026ndash; 用上次访问过的目录（默认）； :set browsedir=buffer \u0026ndash; 用当前文件所在目录； :set browsedir=current \u0026ndash; 用当前工作目录； :Sex \u0026ndash; 水平分割一个窗口，浏览文件系统； :Vex \u0026ndash; 垂直分割一个窗口，浏览文件系统； 4. 光标的移动 4.1 基本移动 以下移动都是在normal模式下。\nh或退格: 左移一个字符； l或空格: 右移一个字符； j: 下移一行； k: 上移一行； gj: 移动到一段内的下一行； gk: 移动到一段内的上一行； +或Enter: 把光标移至下一行第一个非空白字符。 -: 把光标移至上一行第一个非空白字符。 w: 前移一个单词，光标停在下一个单词开头； W: 移动下一个单词开头，但忽略一些标点； e: 前移一个单词，光标停在下一个单词末尾； E: 移动到下一个单词末尾，如果词尾有标点，则移动到标点； b: 后移一个单词，光标停在上一个单词开头； B: 移动到上一个单词开头，忽略一些标点； ge: 后移一个单词，光标停在上一个单词末尾； gE: 同 ge ，不过‘单词’包含单词相邻的标点。 (: 前移1句。 ): 后移1句。 {: 前移1段。 }: 后移1段。 fc: 把光标移到同一行的下一个c字符处 Fc: 把光标移到同一行的上一个c字符处 tc: 把光标移到同一行的下一个c字符前 Tc: 把光标移到同一行的上一个c字符后 ;: 配合f \u0026amp; t使用，重复一次 ,: 配合f \u0026amp; t使用，反向重复一次 viw : 选中一个单词 上面的操作都可以配合n使用，比如在正常模式(下面会讲到)下输入3h， 则光标向左移动3个字符。\n0: 移动到行首。 g0: 移到光标所在屏幕行行首。 ^: 移动到本行第一个非空白字符。 g^: 同 ^ ，但是移动到当前屏幕行第一个非空字符处。 $: 移动到行尾。 g$: 移动光标所在屏幕行行尾。 n|: 把光标移到递n列上。 nG: 到文件第n行。 :n 移动到第n行。 :$ 移动到最后一行。 H: 把光标移到屏幕最顶端一行。 M: 把光标移到屏幕中间一行。 L: 把光标移到屏幕最底端一行。 gg: 到文件头部。 G: 到文件尾部。 4.2 翻屏 ctrl+f: 下翻一屏。 ctrl+b: 上翻一屏。 ctrl+d: 下翻半屏。 ctrl+u: 上翻半屏。 ctrl+e: 向下滚动一行。 ctrl+y: 向上滚动一行。 n%: 到文件n%的位置。 zz: 将当前行移动到屏幕中央。 zt: 将当前行移动到屏幕顶端。 zb: 将当前行移动到屏幕底端。 4.3 标记 使用标记可以快速移动。到达标记后，可以用Ctrl+o返回原来的位置。 Ctrl+o和Ctrl+i 很像浏览器上的 后退 和 前进 。\nm{a-z}: 标记光标所在位置，局部标记，只用于当前文件。 m{A-Z}: 标记光标所在位置，全局标记。标记之后，退出Vim， 重新启动，标记仍然有效。 `{a-z}: 移动到标记位置。 \u0026lsquo;{a-z}: 移动到标记行的行首。 `{0-9}：回到上[2-10]次关闭vim时最后离开的位置。 : 移动到上次编辑的位置。''也可以，不过精确到列，而\u0026rsquo;\u0026lsquo;精确到行 。如果想跳转到更老的位置，可以按C-o，跳转到更新的位置用C-i。 `\u0026quot;: 移动到上次离开的地方。 `.: 移动到最后改动的地方。 :marks 显示所有标记。 :delmarks a b \u0026ndash; 删除标记a和b。 :delmarks a-c \u0026ndash; 删除标记a、b和c。 :delmarks a c-f \u0026ndash; 删除标记a、c、d、e、f。 :delmarks! \u0026ndash; 删除当前缓冲区的所有标记。 :help mark-motions 查看更多关于mark的知识。 5. 插入文本 5.1 基本插入 i: 在光标前插入；一个小技巧：按8，再按i，进入插入模式，输入=， 按esc进入命令模式，就会出现8个=。 这在插入分割线时非常有用，如30i+就插入了36个+组成的分割线。 I: 在当前行第一个非空字符前插入； gI: 在当前行第一列插入； a: 在光标后插入； A: 在当前行最后插入； o: 在下面新建一行插入； O: 在上面新建一行插入； :r filename在当前位置插入另一个文件的内容。 :[n]r filename在第n行插入另一个文件的内容。 :r !date 在光标处插入当前日期与时间。同理，:r !command可以将其它shell命令的输出插入当前文档。 5.2 改写插入 c[n]w: 改写光标后1(n)个词。 c[n]l: 改写光标后n个字母。 c[n]h: 改写光标前n个字母。 [n]cc: 修改当前[n]行。 [n]s: 以输入的文本替代光标之后1(n)个字符，相当于c[n]l。 [n]S: 删除指定数目的行，并以所输入文本代替之。 注意，类似cnw,dnw,ynw的形式同样可以写为ncw,ndw,nyw。\n6. 剪切复制和寄存器 6.1 剪切和复制、粘贴 [n]x: 剪切光标右边n个字符，相当于d[n]l。 [n]X: 剪切光标左边n个字符，相当于d[n]h。 y: 复制在可视模式下选中的文本。 yy or Y: 复制整行文本。 y[n]w: 复制一(n)个词。 y[n]l: 复制光标右边1(n)个字符。 y[n]h: 复制光标左边1(n)个字符。 y$: 从光标当前位置复制到行尾。 y0: 从光标当前位置复制到行首。 :m,ny 复制m行到n行的内容。 y1G或ygg: 复制光标以上的所有行。 yG: 复制光标以下的所有行。 yaw和yas：复制一个词和复制一个句子，即使光标不在词首和句首也没关系。 d: 删除（剪切）在可视模式下选中的文本。 d$ or D: 删除（剪切）当前位置到行尾的内容。 d[n]w: 删除（剪切）1(n)个单词 d[n]l: 删除（剪切）光标右边1(n)个字符。 d[n]h: 删除（剪切）光标左边1(n)个字符。 d0: 删除（剪切）当前位置到行首的内容 [n] dd: 删除（剪切）1(n)行。 :m,nd 剪切m行到n行的内容。 d1G或dgg: 剪切光标以上的所有行。 dG: 剪切光标以下的所有行。 daw和das：剪切一个词和剪切一个句子，即使光标不在词首和句首也没关系。 d/f：这是一个比较高级的组合命令，它将删除当前位置 到下一个f之间的内容。 p: 在光标之后粘贴。 P: 在光标之前粘贴。 6.2 文本对象 aw：一个词 as：一句。 ap：一段。 ab：一块（包含在圆括号中的）。 y, d, c, v都可以跟文本对象。\n6.3 寄存器 a-z：都可以用作寄存器名。\u0026ldquo;ayy把当前行的内容放入a寄存器。 A-Z：用大写字母索引寄存器，可以在寄存器中追加内容。 如\u0026quot;Ayy把当前行的内容追加到a寄存器中。 :reg 显示所有寄存器的内容。 \u0026ldquo;\u0026quot;：不加寄存器索引时，默认使用的寄存器。 \u0026ldquo;*：当前选择缓冲区，\u0026quot;*yy把当前行的内容放入当前选择缓冲区。 \u0026ldquo;+：系统剪贴板。\u0026quot;+yy把当前行的内容放入系统剪贴板。 7. 查找与替换 7.1 查找 /something: 在后面的文本中查找something。 ?something: 在前面的文本中查找something。 /pattern/+number: 将光标停在包含pattern的行后面第number行上。 /pattern/-number: 将光标停在包含pattern的行前面第number行上。 n: 向后查找下一个。 N: 向前查找下一个。 可以用grep或vimgrep查找一个模式都在哪些地方出现过，\n其中:grep是调用外部的grep程序，而:vimgrep是vim自己的查找算法。\n用法为： :vim[grep]/pattern/[g] [j] files\ng的含义是如果一个模式在一行中多次出现，则这一行也在结果中多次出现。\nj的含义是grep结束后，结果停在第j项，默认是停在第一项。\nvimgrep前面可以加数字限定搜索结果的上限，如\n:1vim/pattern/ % 只查找那个模式在本文件中的第一个出现。\n其实vimgrep在读纯文本电子书时特别有用，可以生成导航的目录。\n比如电子书中每一节的标题形式为：n. xxxx。你就可以这样：\n:vim/^d{1,}./ %\n然后用:cw或:copen查看结果，可以用C-w H把quickfix窗口移到左侧，\n就更像个目录了。\n7.2 替换 :s/old/new - 用new替换当前行第一个old。 :s/old/new/g - 用new替换当前行所有的old。 :n1,n2s/old/new/g - 用new替换文件n1行到n2行所有的old。 :%s/old/new/g - 用new替换文件中所有的old。 :%s/^/xxx/g - 在每一行的行首插入xxx，^表示行首。 :%s/$/xxx/g - 在每一行的行尾插入xxx，$表示行尾。 所有替换命令末尾加上c，每个替换都将需要用户确认。 如：%s/old/new/gc，加上i则忽略大小写(ignore)。 还有一种比替换更灵活的方式，它是匹配到某个模式后执行某种命令，\n语法为 :[range]g/pattern/command\n例如 :%g/^ xyz/normal dd。\n表示对于以一个空格和xyz开头的行执行normal模式下的dd命令。\n关于range的规定为：\n如果不指定range，则表示当前行。 m,n: 从m行到n行。 0: 最开始一行（可能是这样）。 $: 最后一行 .: 当前行 %: 所有行 7.3 正则表达式 高级的查找替换就要用到正则表达式。\n\\d: 表示十进制数（我猜的） \\s: 表示空格 \\S: 非空字符 \\a: 英文字母 |: 表示 或 .: 表示. {m,n}: 表示m到n个字符。这要和 \\s与\\a等连用，如 \\a{m,n} 表示m 到n个英文字母。 {m,}: 表示m到无限多个字符。 **: 当前目录下的所有子目录。 :help pattern得到更多帮助。\n8. 排版 8.1 基本排版 \u0026laquo; 向左缩进一个shiftwidth \u0026gt;\u0026gt; 向右缩进一个shiftwidth :ce(nter) 本行文字居中 :le(ft) 本行文字靠左 :ri(ght) 本行文字靠右 gq 对选中的文字重排，即对过长的文字进行断行 gqq 重排当前行 gqnq 重排n行 gqap 重排当前段 gqnap 重排n段 gqnj 重排当前行和下面n行 gqQ 重排当前段对文章末尾 J 拼接当前行和下一行 gJ 同 J ，不过合并后不留空格。 8.2 拼写检查 :set spell－开启拼写检查功能 :set nospell－关闭拼写检查功能 ]s－移到下一个拼写错误的单词 [s－作用与上一命令类似，但它是从相反方向进行搜索 z=－显示一个有关拼写错误单词的列表，可从中选择 zg－告诉拼写检查器该单词是拼写正确的 zw－与上一命令相反，告诉拼写检查器该单词是拼写错误的 8.3 统计字数 g ^g可以统计文档字符数，行数。 将光标放在最后一个字符上，用字符数减去行数可以粗略统计中文文档的字数。 以上对 Mac 或 Unix 的文件格式适用。 如果是 Windows 文件格式（即换行符有两个字节），字数的统计方法为： 字符数 - 行数 * 2。\n9. 编辑多个文件 9.1 一次编辑多个文件 我们可以一次打开多个文件，如\nvi a.txt b.txt c.txt 使用:next(:n)编辑下一个文件。 :2n 编辑下2个文件。 使用:previous或:N编辑上一个文件。 使用:wnext，保存当前文件，并编辑下一个文件。 使用:wprevious，保存当前文件，并编辑上一个文件。 使用:args 显示文件列表。 :n filenames或:args filenames 指定新的文件列表。 vi -o filenames 在水平分割的多个窗口中编辑多个文件。 vi -O filenames 在垂直分割的多个窗口中编辑多个文件。 9.2 多标签编辑 vim -p files: 打开多个文件，每个文件占用一个标签页。 :tabe, tabnew \u0026ndash; 如果加文件名，就在新的标签中打开这个文件， 否则打开一个空缓冲区。 ^w gf \u0026ndash; 在新的标签页里打开光标下路径指定的文件。 :tabn \u0026ndash; 切换到下一个标签。Control + PageDown，也可以。 :tabp \u0026ndash; 切换到上一个标签。Control + PageUp，也可以。 [n] gt \u0026ndash; 切换到下一个标签。如果前面加了 n ， 就切换到第n个标签。第一个标签的序号就是1。 :tab split \u0026ndash; 将当前缓冲区的内容在新页签中打开。 :tabc[lose] \u0026ndash; 关闭当前的标签页。 :tabo[nly] \u0026ndash; 关闭其它的标签页。 :tabs \u0026ndash; 列出所有的标签页和它们包含的窗口。 :tabm[ove] [N] \u0026ndash; 移动标签页，移动到第N个标签页之后。 如 tabm 0 当前标签页，就会变成第一个标签页。 9.3 缓冲区 :buffers或:ls或:files 显示缓冲区列表。 ctrl+^：在最近两个缓冲区间切换。 :bn \u0026ndash; 下一个缓冲区。 :bp \u0026ndash; 上一个缓冲区。 :bl \u0026ndash; 最后一个缓冲区。 :b[n]或:[n]b \u0026ndash; 切换到第n个缓冲区。 :nbw(ipeout) \u0026ndash; 彻底删除第n个缓冲区。 :nbd(elete) \u0026ndash; 删除第n个缓冲区，并未真正删除，还在unlisted列表中。 :ba[ll] \u0026ndash; 把所有的缓冲区在当前页中打开，每个缓冲区占一个窗口。 10. 分屏编辑 vim -o file1 file2:水平分割窗口，同时打开file1和file2 vim -O file1 file2:垂直分割窗口，同时打开file1和file2 10.1 水平分割 :split(:sp) \u0026ndash; 把当前窗水平分割成两个窗口。(CTRL-W s 或 CTRL-W CTRL-S) 注意如果在终端下，CTRL-S可能会冻结终端，请按CTRL-Q继续。 :split filename \u0026ndash; 水平分割窗口，并在新窗口中显示另一个文件。 :nsplit(:nsp) \u0026ndash; 水平分割出一个n行高的窗口。 :[N]new \u0026ndash; 水平分割出一个N行高的窗口，并编辑一个新文件。 (CTRL-W n或 CTRL-W CTRL-N) ctrl+w f \u0026ndash;水平分割出一个窗口，并在新窗口打开名称为光标所在词的文件 。 C-w C-^ \u0026ndash; 水平分割一个窗口，打开刚才编辑的文件。 10.2 垂直分割 :vsplit(:vsp) \u0026ndash; 把当前窗口分割成水平分布的两个窗口。 (CTRL-W v或CTRL CTRL-V) :[N]vne[w] \u0026ndash; 垂直分割出一个新窗口。 :vertical 水平分割的命令： 相应的垂直分割。 10.3 关闭子窗口 :qall \u0026ndash; 关闭所有窗口，退出vim。 :wall \u0026ndash; 保存所有修改过的窗口。 :only \u0026ndash; 只保留当前窗口，关闭其它窗口。(CTRL-W o) :close \u0026ndash; 关闭当前窗口，CTRL-W c能实现同样的功能。 (象 :q :x同样工作 ) 10.4 调整窗口大小 ctrl+w + \u0026ndash;当前窗口增高一行。也可以用n增高n行。 ctrl+w - \u0026ndash;当前窗口减小一行。也可以用n减小n行。 ctrl+w _ \u0026ndash;当前窗口扩展到尽可能的大。也可以用n设定行数。 :resize n \u0026ndash; 当前窗口n行高。 ctrl+w = \u0026ndash; 所有窗口同样高度。 n ctrl+w _ \u0026ndash; 当前窗口的高度设定为n行。 ctrl+w \u0026lt; \u0026ndash;当前窗口减少一列。也可以用n减少n列。 ctrl+w \u0026gt; \u0026ndash;当前窗口增宽一列。也可以用n增宽n列。 ctrl+w | \u0026ndash;当前窗口尽可能的宽。也可以用n设定列数。 10.5 切换和移动窗口 如果支持鼠标，切换和调整子窗口的大小就简单了。\nctrl+w ctrl+w: 切换到下一个窗口。或者是ctrl+w w。 ctrl+w p: 切换到前一个窗口。 ctrl+w h(l,j,k):切换到左（右，下，上）的窗口。 ctrl+w t(b):切换到最上（下）面的窗口。 ctrl+w H(L,K,J): 将当前窗口移动到最左（右、上、下）面。 ctrl+w r：旋转窗口的位置。 ctrl+w T: 将当前的窗口移动到新的标签页上。 11. 快速编辑 11.1 改变大小写 ~: 反转光标所在字符的大小写。 可视模式下的U或u：把选中的文本变为大写或小写。 gu(U)接范围（如$，或G），可以把从光标当前位置到指定位置之间字母全部 转换成小写或大写。如ggguG，就是把开头到最后一行之间的字母全部变为小 写。再如gu5j，把当前行和下面四行全部变成小写。 11.2 替换（normal模式） r: 替换光标处的字符，同样支持汉字。 R: 进入替换模式，按esc回到正常模式。 11.3 撤消与重做（normal模式） [n] u: 取消一(n)个改动。 :undo 5 \u0026ndash; 撤销5个改变。 :undolist \u0026ndash; 你的撤销历史。 ctrl + r: 重做最后的改动。 U: 取消当前行中所有的改动。 :earlier 4m \u0026ndash; 回到4分钟前 :later 55s \u0026ndash; 前进55秒 \u0026gt; 在这篇博客中，我引用了作者详细介绍的 Vim 的使用技巧。更多内容请查看原文：Vim 笔记。\n","permalink":"//localhost:1313/posts/vim%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/","summary":"\u003ch1 id=\"日常技巧\"\u003e日常技巧\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eCTRL + r\u003c/code\u003e 等于 window 下的默认 \u003ccode\u003eCTRL + y\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eCTRL + f   查找\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"1-关于vim\"\u003e1. 关于Vim\u003c/h1\u003e\n\u003ch2 id=\"11-vim的几种模式\"\u003e1.1 Vim的几种模式\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e正常模式：可以使用快捷键命令，或按:输入命令行。\u003c/li\u003e\n\u003cli\u003e插入模式：可以输入文本，在正常模式下，按i、a、o等都可以进入插入模式。\u003c/li\u003e\n\u003cli\u003e可视模式：正常模式下按v可以进入可视模式， 在可视模式下，移动光标可以选择文本。按V进入可视行模式， 总是整行整行的选中。ctrl+v进入可视块模式。\u003c/li\u003e\n\u003cli\u003e替换模式：正常模式下，按R进入。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"2-启动vim\"\u003e2. 启动Vim\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003evim -c cmd file: 在打开文件前，先执行指定的命令；\u003c/li\u003e\n\u003cli\u003evim -r file: 恢复上次异常退出的文件；\u003c/li\u003e\n\u003cli\u003evim -R file: 以只读的方式打开文件，但可以强制保存；\u003c/li\u003e\n\u003cli\u003evim -M file: 以只读的方式打开文件，不可以强制保存；\u003c/li\u003e\n\u003cli\u003evim -y num file: 将编辑窗口的大小设为num行；\u003c/li\u003e\n\u003cli\u003evim + file: 从文件的末尾开始；\u003c/li\u003e\n\u003cli\u003evim +num file: 从第num行开始；\u003c/li\u003e\n\u003cli\u003evim +/string file: 打开file，并将光标停留在第一个找到的string上。\u003c/li\u003e\n\u003cli\u003evim \u0026ndash;remote file: 用已有的vim进程打开指定的文件。 如果你不想启用多个vim会话，这个很有用。但要注意， 如果你用vim，会寻找名叫VIM的服务器；如果你已经有一个gvim在运行了， 你可以用gvim \u0026ndash;remote file在已有的gvim中打开文件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"3-文档操作\"\u003e3. 文档操作\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e:e file \u0026ndash;关闭当前编辑的文件，并开启新的文件。 如果对当前文件的修改未保存，vi会警告。\u003c/li\u003e\n\u003cli\u003e:e! file \u0026ndash;放弃对当前文件的修改，编辑新的文件。\u003c/li\u003e\n\u003cli\u003e:e+file \u0026ndash; 开始新的文件，并从文件尾开始编辑。\u003c/li\u003e\n\u003cli\u003e:e+n file \u0026ndash; 开始新的文件，并从第n行开始编辑。\u003c/li\u003e\n\u003cli\u003e:enew \u0026ndash;编译一个未命名的新文档。(CTRL-W n)\u003c/li\u003e\n\u003cli\u003e:e \u0026ndash; 重新加载当前文档。\u003c/li\u003e\n\u003cli\u003e:e! \u0026ndash; 重新加载当前文档，并丢弃已做的改动。\u003c/li\u003e\n\u003cli\u003e:e#或ctrl+^ \u0026ndash; 回到刚才编辑的文件，很实用。\u003c/li\u003e\n\u003cli\u003e:f或ctrl+g \u0026ndash; 显示文档名，是否修改，和光标位置。\u003c/li\u003e\n\u003cli\u003e:f filename \u0026ndash; 改变编辑的文件名，这时再保存相当于另存为。\u003c/li\u003e\n\u003cli\u003egf \u0026ndash; 打开以光标所在字符串为文件名的文件。\u003c/li\u003e\n\u003cli\u003e:w \u0026ndash; 保存修改。\u003c/li\u003e\n\u003cli\u003e:n1,n2w filename \u0026ndash; 选择性保存从某n1行到另n2行的内容。\u003c/li\u003e\n\u003cli\u003e:wq \u0026ndash; 保存并退出。\u003c/li\u003e\n\u003cli\u003eZZ \u0026ndash; 保存并退出。\u003c/li\u003e\n\u003cli\u003e:x \u0026ndash; 保存并退出。\u003c/li\u003e\n\u003cli\u003e:q[uit] ——退出当前窗口。(CTRL-W q或CTRL-W CTRL-Q)\u003c/li\u003e\n\u003cli\u003e:saveas newfilename \u0026ndash; 另存为\u003c/li\u003e\n\u003cli\u003e:browse e \u0026ndash; 会打开一个文件浏览器让你选择要编辑的文件。 如果是终端中，则会打开netrw的文件浏览窗口； 如果是gvim，则会打开一个图形界面的浏览窗口。 实际上:browse后可以跟任何编辑文档的命令，如sp等。 用browse打开的起始目录可以由browsedir来设置：\n\u003cul\u003e\n\u003cli\u003e:set browsedir=last \u0026ndash; 用上次访问过的目录（默认）；\u003c/li\u003e\n\u003cli\u003e:set browsedir=buffer \u0026ndash; 用当前文件所在目录；\u003c/li\u003e\n\u003cli\u003e:set browsedir=current \u0026ndash; 用当前工作目录；\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e:Sex \u0026ndash; 水平分割一个窗口，浏览文件系统；\u003c/li\u003e\n\u003cli\u003e:Vex \u0026ndash; 垂直分割一个窗口，浏览文件系统；\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"4-光标的移动\"\u003e4. 光标的移动\u003c/h1\u003e\n\u003ch2 id=\"41-基本移动\"\u003e4.1 基本移动\u003c/h2\u003e\n\u003cp\u003e以下移动都是在normal模式下。\u003c/p\u003e","title":"Vim操作手册"},{"content":"目前我的解决办法 在 posts 目录下创建一个名为 img 的文件夹，用于存储照片。该文件夹的路径为 ..\\content\\posts\\img。 将需要使用的照片复制并放入 img 文件夹中。在 Markdown 文档中使用照片时，可以通过相对位置进行引用。例如，引用的路径为 \u0026quot;../img/photo1.jpg\u0026quot;。请注意，使用 \u0026quot;../\u0026quot; 可确保照片在博客页面上正确显示。 若想在本地上查看 Markdown 文档中展示的照片，可以使用 \u0026quot;./\u0026quot; 作为引用路径。例如，引用的路径为 \u0026quot;./img/photo1.jpg\u0026quot;。 注意图片命名，确保照片文件名中不包含空格。 有问题的话, 欢迎在评论区留言, 我会尽快回复！\n","permalink":"//localhost:1313/posts/hugo%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/","summary":"\u003ch1 id=\"目前我的解决办法\"\u003e目前我的解决办法\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e在 \u003ccode\u003eposts\u003c/code\u003e 目录下创建一个名为 \u003ccode\u003eimg\u003c/code\u003e 的文件夹，用于存储照片。该文件夹的路径为 \u003ccode\u003e..\\content\\posts\\img\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e将需要使用的照片复制并放入 \u003ccode\u003eimg\u003c/code\u003e 文件夹中。在 Markdown 文档中使用照片时，可以通过相对位置进行引用。例如，引用的路径为 \u003ccode\u003e\u0026quot;../img/photo1.jpg\u0026quot;\u003c/code\u003e。请注意，使用 \u003ccode\u003e\u0026quot;../\u0026quot;\u003c/code\u003e 可确保照片在博客页面上正确显示。\u003c/li\u003e\n\u003cli\u003e若想在\u003cstrong\u003e本地\u003c/strong\u003e上查看 Markdown 文档中展示的照片，可以使用 \u003ccode\u003e\u0026quot;./\u0026quot;\u003c/code\u003e 作为引用路径。例如，引用的路径为 \u003ccode\u003e\u0026quot;./img/photo1.jpg\u0026quot;\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e注意图片命名，确保照片文件名中\u003cstrong\u003e不包含空格\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e有问题的话, 欢迎在评论区留言, 我会尽快回复！\u003c/p\u003e","title":"Hugo博客的图片上传"},{"content":"常用指令 vim 访问文本 退出文本并保存 :wq 返回到上一个文件夹 cd . . 解压指令 tar -zxvf xxxx.tar.gz vi vim 操作 i o a r 进入vim 按下esc , 输入**:** 然后输入wq 保存并退出 :q退出 :q! 不保存退出 yy 拷贝 5yy dd 删除 5dd 撤销 u 行号打开 :set nu 关机 shutdown -h 关机 shutdown -r 重启 reboot 重启 sync 把内存数据存入磁盘 注销用户和登录 logout\n退出root logout\n压缩/解压指令 tar -zxvf xxxx.tar.gz gzip 文件 压缩 gunzip 解压文件 zip 压缩文件夹 unzip 解压文件夹 -r 递归压缩 zip -r xxxxx.zip /home/ [将home目录及其包含的的文件和子文件夹都压缩] -d \u0026lt;可指定目录\u0026gt; unzip -d /opt/tmp /home/xxxxx.zip tar 万能 tar -c 产生打包文件 -v 显示详细信息 -f 指定压缩后的文件名 -z 打包并同时压缩 -x 解压.tar文件 帮助指令 man ls 列出所有指令\nhelp + 指令\nls -la\nls -la /root\n文件目录指令 pwd 显示出地址 cd ~ 回到家目录 cd .. 上一目录 mkdir 创建目录 mkdir -p /home/\u0026hellip;/\u0026hellip;. 创建指定目录 rmdir 删除空目录 强制删除空目录 rm -rf touch 创建空文件 cp 拷贝 cp hello.txt /bbb cp -r /home/bbb /opt 把目录复制到指定目录下 \\cp -r /home/bbb /opt 强制 rm 删除文件或目录 rm -rf /home/bbb 强制删除 -f 就是强制删除不提醒 mv 移动指令 cat 查看文件 -n 行号 less 分屏查看 echo $HOSTNAME 输出环境变量 head 查看文件的前几行 -\u0026gt; 10 行 head xxxx.c tail 查看末尾文件 tail xxxx.c ln -s /root /home/myroot 快捷指令指向 在myroot创建指向/root的快捷方式, cd myroot 就会直接进入/root 文件管理 使用 mkdir 创建目录。例如，mkdir xxxx 将在当前位置创建一个名为 \u0026ldquo;xxxx\u0026rdquo; 的目录。 要创建多级目录，可以使用 mkdir -p 命令。例如，mkdir -p xxx/yyy 将在 \u0026ldquo;xxx\u0026rdquo; 目录下创建一个名为 \u0026ldquo;yyy\u0026rdquo; 的子目录。 使用 mkdir -m 777 命令创建目录时，可以直接设置权限。数字 \u0026ldquo;777\u0026rdquo; 表示所有权限（读、写和执行）。另外，\u0026ldquo;4\u0026rdquo; 代表读权限，\u0026ldquo;2\u0026rdquo; 代表写权限，\u0026ldquo;1\u0026rdquo; 代表执行权限。 mv 命令用于移动文件或重命名文件。例如，mv xxx.c /home/zzz/targetPlace 将把 \u0026ldquo;xxx.c\u0026rdquo; 文件移动到 \u0026ldquo;/home/zzz/targetPlace\u0026rdquo; 目录。 使用 cp 命令复制文件。例如，cp xxx.c /home/zzz/targetPlace 将把 \u0026ldquo;xxx.c\u0026rdquo; 文件复制到 \u0026ldquo;/home/zzz/targetPlace\u0026rdquo; 目录。 若要复制目录，应使用 cp -r 命令。例如，cp -r /home/bbb /opt 将把 \u0026ldquo;/home/bbb\u0026rdquo; 目录复制到 \u0026ldquo;/opt\u0026rdquo; 目录。 rm 用于删除文件或目录，而 rmdir 仅用于删除空目录。删除文件时，使用 rm 文件名；删除目录（及其内容）时，使用 rm -r 目录名；删除空目录时，使用 rmdir 目录名。 使用 chown 和 chgrp 命令更改文件的所有权。例如，chown -R root /home/zzz/targetPlace/xxx.c 将把 \u0026ldquo;xxx.c\u0026rdquo; 文件的所有权更改为 root 用户。同理，使用 chgrp 命令更改文件的群组所有权。 使用 chmod 命令更改文件或目录的权限。例如，chmod 777 xxxx（目录） 将为名为 \u0026ldquo;xxxx\u0026rdquo; 的目录设置所有权限（读、写和执行）。 ln 命令用于创建链接，类似于快捷方式。例如，ln 路径/xxx.c newxxx.c 将在当前位置创建一个指向 \u0026ldquo;xxx.c\u0026rdquo; 的新链接 \u0026ldquo;newxxx.c\u0026rdquo;。若要删除快捷方式，可以使用 rm -rf 命令。 输入/输出重定向是一种将命令的输出发送到文件而不是屏幕的技术。例如，date \u0026gt; xx.txt 将当前日期和时间写入 \u0026ldquo;xx.txt\u0026rdquo; 文件。而 date \u0026gt;\u0026gt; xx.txt 会将日期和时间追加到文件的末尾，常用于日志、脚本和文件中。 cat命令 使用 cat \u0026gt; xxxx.c 创建一个新文件 \u0026ldquo;xxxx.c\u0026rdquo;。此命令进入文本输入模式，可以直接输入内容，输入完成后按 Ctrl+D 保存并退出。\n合并文件可以使用 cat 命令。例如，cat tx1.c tx2.c \u0026gt; tx3.c 将分别将 \u0026ldquo;tx1.c\u0026rdquo; 和 \u0026ldquo;tx2.c\u0026rdquo; 的内容合并并输出到 \u0026ldquo;tx3.c\u0026rdquo; 文件中。\n要向文件末尾添加内容，使用 cat \u0026gt;\u0026gt; tx.c。此命令进入文本输入模式，输入完内容后，同样按 Ctrl+D 保存并退出。\nmore命令 使用 more 命令可以逐屏查看大型文件。例如，more -3 tx 将从文件 \u0026ldquo;tx\u0026rdquo; 的第三行开始显示内容。使用方向键或空格键可以向下滚动，按 q 退出查看。 grep命令 使用 grep -i \u0026quot;abc.....\u0026quot; xxxx.c 查找文件 \u0026ldquo;xxxx.c\u0026rdquo; 中的内容，-i 选项使搜索不区分大小写。 使用 grep -n -i \u0026quot;abc.....\u0026quot; xxxx.c 查找文件 \u0026ldquo;xxxx.c\u0026rdquo; 中的内容，-n 选项会显示匹配行的行号，且同样不区分大小写。 find命令 使用 find -name 'tex*' 查找当前目录及子目录中以 \u0026ldquo;tex\u0026rdquo; 开头的文件，支持模糊查找。 使用 find -name 'te??.c' 查找当前目录及子目录中以 \u0026ldquo;te\u0026rdquo; 开头，后跟任意两个字符且以 \u0026ldquo;.c\u0026rdquo; 结尾的文件。 使用 find -name '[a-z]*.c' 查找当前目录及子目录中以小写字母开头且以 \u0026ldquo;.c\u0026rdquo; 结尾的文件。 locate 命令 要快速定位文件，可以使用 locate xxxx 命令。此命令通过查询系统中的文件数据库，迅速找出包含 \u0026ldquo;xxxx\u0026rdquo; 的文件路径。请确保在使用前更新数据库，通常可以通过 updatedb 命令实现。 who 命令 使用 who 查看当前登录的用户。 使用 who -a 查看详细的用户信息，包括登录时间和终端等。 使用 whoami 查看当前用户的用户名。 使用 uname 命令查看主机信息，uname -a 则显示所有相关信息，包括主机名、内核版本、硬件架构等。常用选项包括： -n: 显示主机名 -r: 显示内核版本 -v: 显示内核版本号 -m: 显示机器硬件名称 -p: 显示处理器架构 -i: 显示硬件平台 -o: 显示操作系统名称 man命令 要查看命令手册，可以使用 man 命令。具体示例：\n使用 man ls 查看 ls 命令的说明书。这将打开 ls 命令的手册页，其中包括用法、选项和示例等详细信息。 要退出手册页，可以按 q。\n软件包管理 apt-get 命令 下载/卸载/管理 软件包\nwhich 命令查找位置\n使用 apt-get 命令下载、卸载和管理软件包。例如：\napt-get install package_name 安装软件包。 apt-get remove package_name 卸载软件包。 使用 which 命令查找可执行文件的位置。例如，which command_name 将显示该命令的完整路径。\n不同系统管理 Debian/Ubuntu 系统 下载软件包: apt-get install package_name 卸载软件包: apt-get remove package_name 更新软件包列表: apt-get update 升级软件包: apt-get upgrade Red Hat/CentOS 系统 下载软件包: yum install package_name 卸载软件包: yum remove package_name 更新软件包列表: yum check-update 升级软件包: yum update Arch Linux 系统 下载软件包: pacman -S package_name 卸载软件包: pacman -R package_name 更新软件包列表和升级: pacman -Syu macOS (使用 Homebrew) 下载软件包: brew install package_name 卸载软件包: brew uninstall package_name 更新软件包列表: brew update 升级软件包: brew upgrade Windows (使用 Chocolatey) 下载软件包: choco install package_name 卸载软件包: choco uninstall package_name 更新软件包: choco upgrade all 文件系统类型 查看swap信息并更改单位显示：free -h。 挂载文件系统：使用 sudo mount 命令挂载文件系统到指定目标点，例如 sudo mount /dev/xxx/yyy target。其中，target 是挂载点。 卸载已挂载的文件系统：使用 umount 命令卸载挂载点，例如 umount target。 查询磁盘使用情况：使用 df -h 命令查看磁盘的可用空间等信息。 检查或修改文件系统：使用 fsck 命令进行磁盘检查和修复。可以使用 -C 和 -t $type $路径 参数来指定检查的类型和路径。具体语法可查看 fsck --help 获取更多信息。 在磁盘上创建文件系统：使用 mkfs 命令。具体文件系统类型可以通过查看系统支持的选项来确定。例如，创建ext4文件系统可以使用 mkfs.ext4 命令。 查看分区表：使用 fdisk -l $路径 命令来查看指定设备的分区表信息。如果只是想列出当前系统所有设备，可以省略 $路径 参数。 使用gzip压缩工具：压缩文件使用 gzip xxxx.c，压缩目录使用 gzip -r /home，解压使用 gzip -d xxxx.c.gz。注意，gzip 会替换原始文件为 .gz 格式。 使用tar命令进行压缩和解压：查看tar的帮助信息可以使用 tar --help。压缩文件可以使用 tar -cvf xxx.tar yyy.c ...，解压可以使用 tar -xf xxx.tar -C $解压放置的位置。 使用bzip压缩和解压缩工具：压缩时使用 bzip2 filename 生成 .bz2 文件，解压缩时使用 bzip2 -d filename.bz2 或 bunzip2 filename.bz2。 使用zip命令创建和解压ZIP文件：压缩时使用 zip archive.zip file1 file2 创建ZIP文件，解压时使用 unzip archive.zip 解压ZIP文件。 用户管理 查看用户信息，可以使用 cat /etc/passwd 命令。 添加用户可以使用 useradd 命令。例如，useradd xxxx 将创建一个名为 \u0026ldquo;xxxx\u0026rdquo; 的新用户。 创建用户组使用 groupadd 命令。例如，groupadd xxxxgroup 将创建一个名为 \u0026ldquo;xxxxgroup\u0026rdquo; 的新用户组。查看所有用户组信息可以使用 cat /etc/group。 要查看用户执行过的命令记录，可以使用 history 命令。 使用 passwd 命令更改密码。执行此命令后，系统会提示输入当前用户的旧密码以及新密码。 删除用户可以使用 userdel 命令。例如，userdel xxxuser 将删除名为 \u0026ldquo;xxxuser\u0026rdquo; 的用户。 管理用户账号，包括修改用户名，可以使用 usermod 命令。例如，usermod -l new_name old_name 将把 \u0026ldquo;old_name\u0026rdquo; 的用户名更改为 \u0026ldquo;new_name\u0026rdquo;。 查看用户信息，可以使用 id xxxname 命令，这将显示名为 \u0026ldquo;xxxname\u0026rdquo; 的用户的详细信息。 用户切换可以使用 su 命令。例如，su root 将切换到 root 用户，而 su xxxname 将切换到名为 \u0026ldquo;xxxname\u0026rdquo; 的用户。 使用 sudo 命令可以以管理员权限执行命令。在执行需要特权的命令前，输入 sudo 和该命令，然后输入管理员密码即可。 进程管理 监视进程： 使用 ps 命令查看当前进程。 查看 ps 手册：man ps。 常用选项： 显示所有进程：ps -e 显示不带终端的所有进程：ps -au 显示特定用户的进程：ps -u root 或 ps -u xxxname 显示详细信息：ps -l 跟踪进程： 使用 top 命令监控进程。 自动更新 4 次后退出：top -n 4 设置刷新时间为 5 秒：top -d 5 仅监控特定进程 ID（如 1810）：top -p 1810 htop 命令： htop 是 top 的升级版，提供更友好的用户界面和交互功能。 终止进程： 使用 kill 命令终止进程。例如，kill 1201 将关闭进程 ID 为 1201 的进程。 设置进程优先级： 查看进程 nice 值并按降序排列：ps axo pid,comm,nice --sort=-nice 查看特定进程的 nice 值：ps -p 1201 -o nice 修改进程的 nice 值：renice -n 10 -p 1201 查看进程属性： 使用 pgrep 命令查找进程。 常用命令： 查询特定进程名：pgrep xxxname 模糊查询进程名：pgrep -l ^xxxname 性能监控 显示和配置网络设备 查看网络设备信息： 使用 ifconfig 命令可以查看当前网络配置。 显示所有网络设备及其状态：ifconfig 帮助文档： 查看 ifconfig 的帮助信息：ifconfig --help 常用选项： 启用网络接口：ifconfig eth0 up （将 eth0 替换为实际接口名） 禁用网络接口：ifconfig eth0 down 设置 IP 地址：ifconfig eth0 192.168.1.100 设置子网掩码：ifconfig eth0 netmask 255.255.255.0 查看特定接口信息：ifconfig eth0 现代替代工具 在许多现代 Linux 发行版中，\nifconfig 已被\nip 命令替代，建议使用：\n查看网络设备信息：ip addr 启用接口：ip link set eth0 up 禁用接口：ip link set eth0 down 设置 IP 地址：ip addr add 192.168.1.100/24 dev eth0 CPU 统计数据 iostat 命令\n：\n基本使用：iostat 显示 CPU 和 I/O 统计信息。 输出磁盘利用率：iostat -d sda1 （显示指定磁盘的利用信息）。 输出 CPU 和磁盘利用率：iostat -t （包含时间戳）。 显示 CPU 和磁盘利用率的详细信息：iostat -m （以兆字节为单位显示）。 查看 CPU 使用情况：iostat -c （只显示 CPU 统计数据）。 I/O 监控 iotop 命令\n：\niotop 用于实时监控 I/O 使用情况。 需要 root 权限，可以使用 sudo iotop 来执行该命令。 CPU 统计信息 mpstat 命令\n：\n使用 mpstat 报告 CPU 统计信息。 显示 CPU 中断数：mpstat -I SUM。 虚拟内存统计 vmstat 命令\n：\n查看所有虚拟内存的统计信息：vmstat -a。 输出磁盘统计数据：vmstat -d。 报告虚拟内存统计的详细信息：vmstat -s。 shell 编程基础 shell入门编程实例 Linux C++引用 Linux C++智能指针 unique_ptr shared_ptr weak_ptr 为什么要使用 weak_ptr指针: 为了解决 shared ptr 循环引用问题。\nLinux客户端与服务器 Linux IO 多路复用 ","permalink":"//localhost:1313/posts/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/","summary":"\u003ch1 id=\"常用指令\"\u003e常用指令\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003evim    访问文本\u003c/li\u003e\n\u003cli\u003e退出文本并保存       :wq\u003c/li\u003e\n\u003cli\u003e返回到上一个文件夹    cd . .\u003c/li\u003e\n\u003cli\u003e解压指令         tar  -zxvf   xxxx.tar.gz\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"vi----vim-操作\"\u003evi    vim 操作\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003ei o a r  进入vim\u003c/li\u003e\n\u003cli\u003e按下esc , 输入**:**   然后输入wq  保存并退出            :q退出      :q!  不保存退出\u003c/li\u003e\n\u003cli\u003eyy 拷贝    5yy\u003c/li\u003e\n\u003cli\u003edd 删除   5dd\u003c/li\u003e\n\u003cli\u003e撤销  u\u003c/li\u003e\n\u003cli\u003e行号打开 :set nu\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"关机\"\u003e关机\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003eshutdown -h  关机\u003c/li\u003e\n\u003cli\u003eshutdown -r  重启\u003c/li\u003e\n\u003cli\u003ereboot  重启\u003c/li\u003e\n\u003cli\u003esync  把内存数据存入磁盘\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"注销用户和登录\"\u003e注销用户和登录\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003elogout\u003c/p\u003e","title":"Linux常用指令"},{"content":"信号与槽机制 PyQt的.ui文件转成.py文件 进入 .ui 文件所在的目录，然后在命令行中输入下面的代码示例。\npyuic5 -x xxxx.ui -o yyyyyy.py\nxxxx.ui 目标文件 \u0026mdash;\u0026gt; yyyyy.py 结果\n设置ui禁止编辑 例如\nui -\u0026gt; tableView -\u0026gt; setEditTriggers(QAbstractItemView::NoEditTriggers); ","permalink":"//localhost:1313/posts/qt_study/","summary":"\u003ch1 id=\"信号与槽机制\"\u003e信号与槽机制\u003c/h1\u003e\n\u003ch2 id=\"heading\"\u003e\u003c/h2\u003e\n\u003ch1 id=\"pyqt的ui文件转成py文件\"\u003ePyQt的\u003ccode\u003e.ui\u003c/code\u003e文件转成\u003ccode\u003e.py\u003c/code\u003e文件\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e进入 \u003ccode\u003e.ui\u003c/code\u003e 文件所在的目录，然后在命令行中输入下面的代码示例。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003epyuic5   -x    xxxx.ui   -o   yyyyyy.py\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003exxxx.ui  目标文件  \u0026mdash;\u0026gt;   yyyyy.py 结果\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"设置ui禁止编辑\"\u003e设置ui禁止编辑\u003c/h1\u003e\n\u003cp\u003e例如\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eui\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etableView\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nf\"\u003esetEditTriggers\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eQAbstractItemView\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eNoEditTriggers\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"Qt开发的学习记录"},{"content":"这是用于测试的文档 This is second post of site.\n$$ a^2 + b^2 = c^2 $$\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;unordered_map\u0026gt; // 使用哈希表 #include \u0026lt;unordered_set\u0026gt; #include \u0026lt;stack\u0026gt; // 使用栈 #include \u0026lt;string\u0026gt; // 使用字符串 #include \u0026lt;utility\u0026gt; #include \u0026lt;cstring\u0026gt; // 有memset将一块内存区域设置为特定的值。 strcpy：复制一个字符串。strcat：连接两个字符串。strlen：获取字符串的长度。strcmp：比较两个字符串。 #include \u0026lt;functional\u0026gt; #include \u0026lt;numeric\u0026gt; using namespace std; typedef long long ll; // 定义long long类型的简写为ll typedef long double ld; // 定义long double类型的简写为ld typedef pair\u0026lt;int, int\u0026gt; pii; // 定义pair\u0026lt;int, int\u0026gt;类型的简写为pii typedef pair\u0026lt;ll, ll\u0026gt; pll; // 定义pair\u0026lt;ll, ll\u0026gt;类型的简写为pll typedef vector\u0026lt;int\u0026gt; vi; // 定义vector\u0026lt;int\u0026gt;类型的简写为vi //--------------------------------模板--------------------------------// class Solution { public: }; int main() { std::vector\u0026lt;int\u0026gt; arr = {5, 3, 8, 1, 2}; std::sort(arr.begin(), arr.end(), std::greater\u0026lt;int\u0026gt;()); for (int num : arr) { std::cout \u0026lt;\u0026lt; num \u0026lt;\u0026lt; \u0026#34; \u0026#34;\u0026lt;\u0026lt;endl; } return 0; } // imgs 11111\n22222\n3333\n","permalink":"//localhost:1313/posts/second-post/","summary":"\u003ch1 id=\"这是用于测试的文档\"\u003e这是用于测试的文档\u003c/h1\u003e\n\u003cp\u003eThis is second post of site.\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003e$$\na^2 + b^2 = c^2\n$$\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;algorithm\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unordered_map\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 使用哈希表\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unordered_set\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stack\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e  \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 使用栈\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 使用字符串\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;utility\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstring\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 有memset将一块内存区域设置为特定的值。 strcpy：复制一个字符串。strcat：连接两个字符串。strlen：获取字符串的长度。strcmp：比较两个字符串。\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;functional\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;numeric\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e       \u003cspan class=\"c1\"\u003e// 定义long long类型的简写为ll\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eld\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// 定义long double类型的简写为ld\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epii\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 定义pair\u0026lt;int, int\u0026gt;类型的简写为pii\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epll\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 定义pair\u0026lt;ll, ll\u0026gt;类型的简写为pll\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003evi\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// 定义vector\u0026lt;int\u0026gt;类型的简写为vi\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//--------------------------------模板--------------------------------//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSolution\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003egreater\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nl\"\u003enum\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"imgs\"\u003eimgs\u003c/h1\u003e\n\u003cp\u003e11111\u003c/p\u003e","title":"Second Post"},{"content":"第一篇博客 感谢 B 站 UP 主 SonnyCalcr 的大力支持，让我得以学习并成功搭建这个个人博客网站。非常感谢他的支持与指导！\n这是这位up主的网站（支持up）：bilibili: SonnyCalcr\n","permalink":"//localhost:1313/posts/firstpost/","summary":"\u003ch1 id=\"第一篇博客\"\u003e第一篇博客\u003c/h1\u003e\n\u003cp\u003e感谢 B 站 UP 主 SonnyCalcr 的大力支持，让我得以学习并成功搭建这个个人博客网站。非常感谢他的支持与指导！\u003c/p\u003e\n\u003cp\u003e这是这位up主的网站（支持up）：\u003ca href=\"https://space.bilibili.com/3493138859559908\"\u003ebilibili: SonnyCalcr\u003c/a\u003e\u003c/p\u003e","title":"FirstPost"},{"content":"","permalink":"//localhost:1313/categories/","summary":"","title":"分类"},{"content":"Love and share !🗽\nNever say never !!!\n","permalink":"//localhost:1313/about/","summary":"about","title":"关于"},{"content":"Blog Free Discussion Area Welcome everyone to share your thoughts and opinions in the comments section of the blog!\nThis website is equipped with giscus, a comment system based on GitHub Discussions. Visitors can leave comments and feedback on the site using GitHub! 📋🖋️\nI will respond to all comments and feedback as soon as possible. 🥰\nIf needed, you can also contact me directly via email: authoritysharing@gmail.com 博客的自由交流区 欢迎大家在博客的评论区分享自己的想法和意见！\n本网站配置了 giscus，这是一个基于 GitHub Discussions 实现的评论系统。访客能够通过 GitHub 在网站上留下评论和反馈！ 📋🖋️\n所有的评论和意见，我会尽快回复所有评论和反馈。🥰\n如有需要，也可以直接通过邮件与我联系：authoritysharing@gmail.com ","permalink":"//localhost:1313/posts/%E7%95%99%E8%A8%80%E6%9D%BF/","summary":"\u003ch1 id=\"blog-free-discussion-area\"\u003eBlog Free Discussion Area\u003c/h1\u003e\n\u003cp\u003eWelcome everyone to share your thoughts and opinions in the comments section of the blog!\u003c/p\u003e\n\u003cp\u003eThis website is equipped with \u003ca href=\"https://giscus.app/zh-CN\"\u003egiscus\u003c/a\u003e, a comment system based on \u003ca href=\"https://docs.github.com/en/discussions\"\u003eGitHub Discussions\u003c/a\u003e. Visitors can leave comments and feedback on the site using GitHub! 📋🖋️\u003c/p\u003e\n\u003cp\u003eI will respond to all comments and feedback as soon as possible. 🥰\u003c/p\u003e\n\u003cp\u003eIf needed, you can also contact me directly via email: \u003ca href=\"mailto:authoritysharing@gmail.com\"\u003eauthoritysharing@gmail.com \u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"博客的自由交流区\"\u003e博客的自由交流区\u003c/h1\u003e\n\u003cp\u003e欢迎大家在博客的评论区分享自己的想法和意见！\u003c/p\u003e","title":"留言板📑Message Board ➡️ 在此留言"},{"content":"Draft cwgo server \u0026ndash;type RPC \u0026ndash;module github.com/cloudwego/biz-demo/gomall/demo/demo_thrift \u0026ndash;service demo_thrift \u0026ndash;idl ../../idl/echo.thrift\n不要心急, 每个人都有自己的时区\n社会 8 - 自然 8 - 生命 5 - 文化 3\n对话 - 图书馆 - 课程询问 - 生活 - 师生\n想法 存放仓库, 存放物品 , 订阅 , 存放100年 , 放入海底 托福计划 托福死莽 100分必须上分 cpp 进度学习 坚持 字节训练营学习 身材管理 健身 托福 100 101\n听力是重点\n加油加油加油 🗽🗽🗽🗽🗽🗽🗽🌎 一定要定点突破 一个一个 上午 阅读 1 篇(词汇题积累) 背作文 背单词 早上背书 听力1篇 下午 口语 (克服听力) 2 tasks 晚上 听力 + 阅读1篇 周末 写作文 , 写完背范文 6:30 起床 出门 阅读 20 \u0026mdash;\u0026gt; 28 加多 8 分 8分\n听力 20 \u0026mdash;\u0026gt; 28 加多 8 分 8分\n口语 15 \u0026mdash;\u0026gt; 23 上分 8 分 8分\n写作 18 \u0026mdash;\u0026gt; 23 上分 5 分 5分\n","permalink":"//localhost:1313/posts/000aaadraft/","summary":"\u003ch1 id=\"draft\"\u003eDraft\u003c/h1\u003e\n\u003chr\u003e\n\u003cp\u003ecwgo server \u0026ndash;type RPC \u0026ndash;module github.com/cloudwego/biz-demo/gomall/demo/demo_thrift  \u0026ndash;service demo_thrift  \u0026ndash;idl ../../idl/echo.thrift\u003c/p\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003e不要心急, 每个人都有自己的时区\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e社会 8 - 自然 8  - 生命 5 - 文化 3\u003c/p\u003e\n\u003cp\u003e对话 - 图书馆 - 课程询问 - 生活 - 师生\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"想法\"\u003e想法\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e存放仓库, 存放物品 , 订阅 , 存放100年 , 放入海底\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch1 id=\"托福计划\"\u003e托福计划\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e托福死莽  \u003cstrong\u003e100分\u003c/strong\u003e必须上分\u003c/li\u003e\n\u003cli\u003ecpp 进度学习 坚持\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e字节训练营学习\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e身材管理 健身\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"托福-100\"\u003e托福 100\u003c/h1\u003e\n\u003cp\u003e101\u003c/p\u003e","title":"草稿"},{"content":"问题 我的网站在复制代码时，会把行号也一起复制下来。我尝试了很多办法，但最终决定：\n既然解决不了问题，那就干脆消灭问题吧！😆\n解决办法 在hugo.yaml文件直接增加以下代码, 这段代码的作用是禁用代码块中的行号显示。\nmarkup: highlight: lineNumbers: false ","permalink":"//localhost:1313/posts/%E8%A7%A3%E5%86%B3hugo%E5%A4%8D%E5%88%B6%E8%A1%8C%E5%8F%B7%E9%97%AE%E9%A2%98%E7%9A%84%E5%8A%9E%E6%B3%95/","summary":"\u003ch1 id=\"问题\"\u003e问题\u003c/h1\u003e\n\u003cp\u003e我的网站在复制代码时，会把行号也一起复制下来。我尝试了很多办法，但最终决定：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e既然解决不了问题，那就干脆消灭问题吧！😆\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"解决办法\"\u003e解决办法\u003c/h1\u003e\n\u003cp\u003e在\u003ccode\u003ehugo.yaml\u003c/code\u003e文件直接增加以下代码, 这段代码的作用是禁用代码块中的行号显示。\u003c/p\u003e","title":"解决hugo复制行号问题的办法"},{"content":"Cpp各类模板设置 插入代码模板 \u0026#34;nameXXX\u0026#34;: { \u0026#34;prefix\u0026#34;: \u0026#34;XXX操作码\u0026#34;, \u0026#34;body\u0026#34;: [ \u0026#34;xxxxxx\u0026#34;, \u0026#34;xxxxxx\u0026#34;, \u0026#34;yyyyyy\u0026#34;, \u0026#34;yyyyyy\u0026#34;, \u0026#34;$0\u0026#34; ] }, 头文件 #pragma GCC optimize(\u0026#34;O2\u0026#34;) #include\u0026lt;bits/stdc++.h\u0026gt; #include \u0026lt;iostream\u0026gt; // cin/cout #include \u0026lt;cstdio\u0026gt; // printf/scanf #include \u0026lt;algorithm\u0026gt; #include \u0026lt;vector\u0026gt; // 容器 #include \u0026lt;string\u0026gt; // 字符串 #include \u0026lt;stack\u0026gt; // 栈 #include \u0026lt;queue\u0026gt; // 队列 #include \u0026lt;unordered_map\u0026gt; // 哈希表 #include \u0026lt;unordered_set\u0026gt; // 哈希表 set #include \u0026lt;memory\u0026gt; // 智能指针 #include \u0026lt;functional\u0026gt; #include \u0026lt;numeric\u0026gt; #include \u0026lt;ranges\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;bitset\u0026gt; #include \u0026lt;cmath\u0026gt; using namespace std; typedef long long ll; // long long为ll typedef long double ld; // long doubleld typedef pair\u0026lt;int, int\u0026gt; pii; // pair\u0026lt;int, int\u0026gt;pii typedef pair\u0026lt;ll, ll\u0026gt; pll; // pair\u0026lt;ll, ll\u0026gt;pll typedef vector\u0026lt;int\u0026gt; vi; // vector\u0026lt;int\u0026gt;vi const long long inf = numeric_limits\u0026lt;long long\u0026gt;::max(); // 无穷大 const int N = 100100; // 100 百 , 100100 十万 , 1100100 一百万 , 100100100 一亿 void Mysolve(){ } int main(){ ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); //---------优化 Mysolve(); return 0; } cpp.json 设置\n{ \u0026#34;HEADER\u0026#34;: { \u0026#34;prefix\u0026#34;: \u0026#34;H\u0026#34;, \u0026#34;body\u0026#34;: [ \u0026#34;#pragma GCC optimize(\\\u0026#34;O2\\\u0026#34;)\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;#include\u0026lt;bits/stdc++.h\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;iostream\u0026gt; // cin/cout\u0026#34;, \u0026#34;#include \u0026lt;cstdio\u0026gt; // printf/scanf\u0026#34;, \u0026#34;#include \u0026lt;algorithm\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;vector\u0026gt; // 容器\u0026#34;, \u0026#34;#include \u0026lt;string\u0026gt; // 字符串\u0026#34;, \u0026#34;#include \u0026lt;stack\u0026gt; // 栈\u0026#34;, \u0026#34;#include \u0026lt;queue\u0026gt; // 队列\u0026#34;, \u0026#34;#include \u0026lt;unordered_map\u0026gt; // 哈希表\u0026#34;, \u0026#34;#include \u0026lt;unordered_set\u0026gt; // 哈希表 set\u0026#34;, \u0026#34;#include \u0026lt;memory\u0026gt; // 智能指针\u0026#34;, \u0026#34;#include \u0026lt;functional\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;numeric\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;ranges\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;cstring\u0026gt; \u0026#34;, \u0026#34;#include \u0026lt;bitset\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;cmath\u0026gt;\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;using namespace std;\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;typedef long long ll; // long long为ll\u0026#34;, \u0026#34;typedef long double ld; // long doubleld\u0026#34;, \u0026#34;typedef pair\u0026lt;int, int\u0026gt; pii; // pair\u0026lt;int, int\u0026gt;pii\u0026#34;, \u0026#34;typedef pair\u0026lt;ll, ll\u0026gt; pll; // pair\u0026lt;ll, ll\u0026gt;pll\u0026#34;, \u0026#34;typedef vector\u0026lt;int\u0026gt; vi; // vector\u0026lt;int\u0026gt;vi\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;const long long inf = numeric_limits\u0026lt;long long\u0026gt;::max(); // 无穷大\u0026#34;, \u0026#34;const int N = 100100; // 100100 十万 , 1100100 一百万 , 100100100 一亿\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;void Mysolve(){\u0026#34;, \u0026#34; \u0026#34;, \u0026#34;}\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;int main(){\u0026#34;, \u0026#34; ios::sync_with_stdio(false);\u0026#34;, \u0026#34; cin.tie(NULL);\u0026#34;, \u0026#34; cout.tie(NULL);\u0026#34;, \u0026#34; //---------优化\u0026#34;, \u0026#34;\u0026#34;, \u0026#34; Mysolve();\u0026#34;, \u0026#34; return 0;\u0026#34;, \u0026#34;}\u0026#34;, \u0026#34;$0\u0026#34; ] }, } leetcode模板 \u0026#34;leetcode\u0026#34;: { \u0026#34;prefix\u0026#34;: \u0026#34;lc\u0026#34;, \u0026#34;body\u0026#34;: [ \u0026#34;#pragma GCC optimize(\\\u0026#34;O2\\\u0026#34;)\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;#include\u0026lt;bits/stdc++.h\u0026gt;\u0026#34;, \u0026#34;using namespace std;\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;const long long inf = numeric_limits\u0026lt;long long\u0026gt;::max();\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;$0\u0026#34; ] }, 算法模板\n高精度算法 ","permalink":"//localhost:1313/posts/cppvscode%E6%A8%A1%E6%9D%BF/","summary":"\u003ch1 id=\"cpp各类模板设置\"\u003eCpp各类模板设置\u003c/h1\u003e\n\u003ch2 id=\"插入代码模板\"\u003e插入代码模板\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e\u0026#34;nameXXX\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026#34;prefix\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;XXX操作码\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026#34;body\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;xxxxxx\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;xxxxxx\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;yyyyyy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;yyyyyy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;$0\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"头文件\"\u003e头文件\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#pragma GCC optimize(\u0026#34;O2\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u0026lt;bits/stdc++.h\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e      \u003c/span\u003e\u003cspan class=\"c1\"\u003e// cin/cout\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// printf/scanf\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;algorithm\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 容器\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 字符串\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stack\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e         \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 栈\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;queue\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e         \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 队列\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unordered_map\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 哈希表\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unordered_set\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 哈希表 set\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;memory\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 智能指针\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;functional\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;numeric\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;ranges\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstring\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;bitset\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cmath\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e       \u003cspan class=\"c1\"\u003e// long long为ll\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eld\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// long doubleld\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epii\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// pair\u0026lt;int, int\u0026gt;pii\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epll\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// pair\u0026lt;ll, ll\u0026gt;pll\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003evi\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// vector\u0026lt;int\u0026gt;vi\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003einf\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 无穷大\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e100100\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 100 百 , 100100 十万 , 1100100 一百万 , 100100100 一亿\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eMysolve\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eios\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esync_with_stdio\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ecin\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etie\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etie\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//---------优化\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eMysolve\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003ecpp.json 设置\u003c/p\u003e","title":"CppVsCode代码快捷模板"},{"content":"灵神题单 分享｜如何科学刷题？ - 力扣（LeetCode）\n前言 怎么刷算法题？按照什么顺序刷题？如何科学地刷题训练？\n如果你刚接触力扣，还不熟悉基本编程语法和常用库函数，推荐刷力扣官方的入门题单：\n「新」动计划 · 编程入门 编程基础 0 到 1 有了一些简单题的积累，就可以开始刷我的题单啦~\n分享｜如何科学刷题？ - 力扣（LeetCode） 打开链接 找灵神\n滑动窗口与双指针（定长/不定长/单序列/双序列/三指针） 二分算法（二分答案/最小化最大值/最大化最小值/第K小） 单调栈（基础/矩形面积/贡献法/最小字典序） 网格图（DFS/BFS/综合应用） 位运算（基础/性质/拆位/试填/恒等式/思维） 图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径） 动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望） 常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树） 数学算法（数论/组合/概率期望/博弈/计算几何/随机算法） 贪心与思维（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造） 链表、二叉树与一般树（前后指针/快慢指针/DFS/BFS/直径/LCA） 字符串（KMP/Z函数/Manacher/字符串哈希/AC自动机/后缀数组/子序列自动机） 对于动态规划，至少要做 100 100 道才算入门。\n优点：突击训练特定知识点，可以掌握常用算法套路。按照题单专题刷，一个套路可以解决多个题目，刷题效率高。此外，做同一个专题下的题目，相当于在从不同的角度去观察、思考同一个算法，这能让你更加深刻地理解算法的本质。\n缺点：提前知道题目类型，跳过了一些思考步骤。但比赛/笔试是不会告诉你这题是什么类型的，把 DP 想成贪心的大有人在。可以结合下面的训练方法，锻炼自己判断题目类型的能力。\n训练方法 A 要点：\n按照专题刷题。同一个专题下的题目，套路是一样的，刷题效率杠杠滴~ 从易到难，量力而行。题目已经按照难度分整理好了，按照顺序刷就行~ 推荐先刷【滑动窗口】和【二分】题单，这是两个最基础的算法，套路也较为固定，刷题过程中还可以学到一些做题技巧。其他题单可以按照自己的兴趣选择。\n请结合【基础算法精讲】学习。\n推荐安装 这个插件，可以在题单中自动标记做过的题目。\n训练方法 B 随机刷题，注意控制难度范围，太简单和太难的题目都不能让你进入「心流通道」。\n打开 难度练习。 在设置中关闭算法标签。 选择适合自己的难度范围，开刷！ 优点：做题时不知道题目类型，可以训练实战能力。\n缺点：知识点有些零散，适合已经掌握常用算法的同学查漏补缺，检验自己的学习成果。\n训练方法 C 如果时间很少，可以突击训练 HOT 100。\n最好能默写下来程度\nLeetCode 热题 100 - 学习计划 - 力扣（LeetCode）全球极客挚爱的技术成长平台\n作者：灵茶山艾府 链接：https://leetcode.cn/circle/discuss/RvFUtj/ 来源：力扣（LeetCode） 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n","permalink":"//localhost:1313/posts/leetcode%E5%88%B7%E9%A2%98%E9%A2%98%E5%8D%95/","summary":"\u003ch1 id=\"灵神题单\"\u003e灵神题单\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://leetcode.cn/circle/discuss/RvFUtj/\"\u003e分享｜如何科学刷题？ - 力扣（LeetCode）\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e前言\n怎么刷算法题？按照什么顺序刷题？如何科学地刷题训练？\u003c/p\u003e\n\u003cp\u003e如果你刚接触力扣，还不熟悉基本编程语法和常用库函数，推荐刷力扣官方的入门题单：\u003c/p\u003e","title":"Leetcode刷题题单"},{"content":"Xshell突出显示配置 将命名为 XshellColor.hls 的文件准备好。\n将该文件放置到以下目录： C:\\Users\\Your_name\\Documents\\NetSarang Computer\\7\\Xshell\\HighlightSet Files\n（请将 Your_name 替换为您的实际用户名）\n打开 Xshell 后，即可在颜色设置中选择该高亮配置文件。\n我这是黑暗版风格, 偏护眼\n[Keyword_0] TermBackColor=1 Underline=1 Bold=0 Strikeout=0 Keyword=[_a-z0-9-]+(.[_a-z0-9-]+)*@[a-z0-9-]+(.[a-z0-9-]+)* Description=Email address BackColorIndex=286 UseRegex=1 Italic=0 Enable=0 TextColorIndex=286 CaseSens=0 [Keyword_1] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(?=(\\b|\\D))(((\\d{1,2})|(1\\d{1,2})|(2[0-4]\\d)|(25[0-5]))\\.){3}((\\d{1,2})|(1\\d{1,2})|(2[0-4]\\d)|(25[0-5]))(?=(\\b|\\D))\\s* Description=IPv4 BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=295 CaseSens=0 [Keyword_2] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=[\\[ ]?\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*\\]? Description=IPv6 BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=294 CaseSens=0 [Keyword_3] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(\\berror\\b)|(\\bfail(ed)?\\b)|(\\bfalse\\b)|(\\bdown\\b)|(\\blocked\\b) Description=error, fail, false, down BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=290 CaseSens=0 [Keyword_4] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(\\bactive(d)?\\b)|(\\bsuccess(ful(ly)?)?\\b)|(\\btrue\\b)|(\\bok\\b)|(\\bup\\b)|(\\brunning\\b)|(\\bdeployed\\b)|(\\bunlocked\\b) Description=active, success, true, ok, up BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=291 CaseSens=0 [Keyword_5] TermBackColor=1 Underline=1 Bold=1 Strikeout=0 Keyword=(\\bstart(ed|ing)?\\b)|(\\bbegin(ning)?\\b)|(\\benable(d)?\\b)|(\\bcreate(d)?\\b)|(\\bopen\\b) Description=start, begin, enable, create, open BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=291 CaseSens=0 [Keyword_6] TermBackColor=1 Underline=1 Bold=1 Strikeout=0 Keyword=(\\bstop(ped)?\\b)|(\\bend\\b)|(\\bfinish(ed)?\\b)|(\\bdisable(d)?\\b)|(\\bdelete(d)?\\b)|(\\bclose(d)?\\b) Description=stop, end, finish, disable, delete BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=293 CaseSens=0 [Keyword_7] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(\\bwarn(ing)?\\b)|(\\binactive\\b)|(\\bunknown\\b) Description=warn, inactive, unknown BackColorIndex=292 UseRegex=1 Italic=1 Enable=1 TextColorIndex=282 CaseSens=0 [Colors] Colors=000000,00E4FF,000040,0080FF,400000,C08080,8080FF,C0C0C0,555555,5555FF,55FF55,55FFFF,FF5555,FF55FF,FFFF55,FFFFFF [Keyword_8] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(\\binfo\\b) Description=info BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=291 CaseSens=0 [Keyword_9] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=\\bDEBUG\\b Description=debug BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=293 CaseSens=0 [info] Version=1.1 Count=12 [Keyword_10] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=\\/\\b(\\d|([1-9]\\d)|(1[01]\\d)|(12[0-8]))\\b Description=CIDR BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=284 CaseSens=0 [Keyword_11] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=([a-zA-Z0-9._-]+@([a-zA-Z0-9_-]+\\.)+[a-zA-Z0-9_-]+) Description=Email Regex BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=286 CaseSens=0 ","permalink":"//localhost:1313/posts/xshell%E4%B8%BB%E9%A2%98%E9%85%8D%E8%89%B2%E6%96%87%E4%BB%B6/","summary":"\u003ch1 id=\"xshell突出显示配置\"\u003e\u003ccode\u003eXshell\u003c/code\u003e突出显示配置\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e将命名为 \u003cstrong\u003e\u003ccode\u003eXshellColor.hls\u003c/code\u003e\u003c/strong\u003e 的文件准备好。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e将该文件放置到以下目录：\n\u003cstrong\u003e\u003ccode\u003eC:\\Users\\Your_name\\Documents\\NetSarang Computer\\7\\Xshell\\HighlightSet Files\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e（请将 \u003ccode\u003eYour_name\u003c/code\u003e 替换为您的实际用户名）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e打开 Xshell 后，即可在颜色设置中选择该高亮配置文件。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e我这是黑暗版风格, 偏护眼\u003c/p\u003e","title":"Xshell主题配色文件"},{"content":"加上具体的例子 Add specific examples 帮我理顺并润色以上内容 help me organize and refine the content above. 科学写作专家 - 学术写作 want you to act as an expert in scientific writing, l will provide you with some paragraphs in English and your task is to improve the spelling, grammar clarity, conciseness and overalreadability of the text providedwhile breaking down longsentences, reducing repetitionand providing improvementsuggestions. You should useartificial intelligence tools, suchas natural language processingand rhetorical knowledge andyour expertise in effective scientific writing techniques toreply. Provide the output as a markdown table with the head in Chinese. The first column is the originasentence, and the secondcolumn is the sentence afterediting and the third columnprovides explanation in Chinese Please edit the following text in a scientific tone: ","permalink":"//localhost:1313/posts/ai%E6%8F%90%E7%A4%BA%E8%AF%8D%E6%B1%87%E6%80%BB/","summary":"\u003ch1 id=\"加上具体的例子\"\u003e加上具体的例子\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eAdd\u003c/span\u003e \u003cspan class=\"nx\"\u003especific\u003c/span\u003e \u003cspan class=\"nx\"\u003eexamples\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"帮我理顺并润色以上内容\"\u003e帮我理顺并润色以上内容\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ehelp\u003c/span\u003e \u003cspan class=\"n\"\u003eme\u003c/span\u003e \u003cspan class=\"n\"\u003eorganize\u003c/span\u003e \u003cspan class=\"n\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003erefine\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003econtent\u003c/span\u003e \u003cspan class=\"n\"\u003eabove\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"科学写作专家---学术写作\"\u003e科学写作专家 - 学术写作\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ewant\u003c/span\u003e \u003cspan class=\"n\"\u003eyou\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e \u003cspan class=\"n\"\u003eact\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003ean\u003c/span\u003e \u003cspan class=\"n\"\u003eexpert\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003escientific\u003c/span\u003e \u003cspan class=\"n\"\u003ewriting\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"n\"\u003ewill\u003c/span\u003e \u003cspan class=\"n\"\u003eprovide\u003c/span\u003e \u003cspan class=\"n\"\u003eyou\u003c/span\u003e \u003cspan class=\"k\"\u003ewith\u003c/span\u003e \u003cspan class=\"n\"\u003esome\u003c/span\u003e \u003cspan class=\"n\"\u003eparagraphs\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eEnglish\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003eyour\u003c/span\u003e \u003cspan class=\"n\"\u003etask\u003c/span\u003e \u003cspan class=\"ow\"\u003eis\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e \u003cspan class=\"n\"\u003eimprove\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003espelling\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003egrammar\u003c/span\u003e \u003cspan class=\"n\"\u003eclarity\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003econciseness\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003eoveralreadability\u003c/span\u003e \u003cspan class=\"n\"\u003eof\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"n\"\u003eprovidedwhile\u003c/span\u003e \u003cspan class=\"n\"\u003ebreaking\u003c/span\u003e \u003cspan class=\"n\"\u003edown\u003c/span\u003e \u003cspan class=\"n\"\u003elongsentences\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ereducing\u003c/span\u003e \u003cspan class=\"n\"\u003erepetitionand\u003c/span\u003e \u003cspan class=\"n\"\u003eproviding\u003c/span\u003e \u003cspan class=\"n\"\u003eimprovementsuggestions\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"n\"\u003eYou\u003c/span\u003e \u003cspan class=\"n\"\u003eshould\u003c/span\u003e \u003cspan class=\"n\"\u003euseartificial\u003c/span\u003e \u003cspan class=\"n\"\u003eintelligence\u003c/span\u003e \u003cspan class=\"n\"\u003etools\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esuchas\u003c/span\u003e \u003cspan class=\"n\"\u003enatural\u003c/span\u003e \u003cspan class=\"n\"\u003elanguage\u003c/span\u003e \u003cspan class=\"n\"\u003eprocessingand\u003c/span\u003e \u003cspan class=\"n\"\u003erhetorical\u003c/span\u003e \u003cspan class=\"n\"\u003eknowledge\u003c/span\u003e \u003cspan class=\"n\"\u003eandyour\u003c/span\u003e \u003cspan class=\"n\"\u003eexpertise\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eeffective\u003c/span\u003e \u003cspan class=\"n\"\u003escientific\u003c/span\u003e \u003cspan class=\"n\"\u003ewriting\u003c/span\u003e \u003cspan class=\"n\"\u003etechniques\u003c/span\u003e \u003cspan class=\"n\"\u003etoreply\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"n\"\u003eProvide\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003eoutput\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003emarkdown\u003c/span\u003e \u003cspan class=\"n\"\u003etable\u003c/span\u003e \u003cspan class=\"k\"\u003ewith\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003ehead\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eChinese\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"n\"\u003eThe\u003c/span\u003e \u003cspan class=\"n\"\u003efirst\u003c/span\u003e \u003cspan class=\"n\"\u003ecolumn\u003c/span\u003e \u003cspan class=\"ow\"\u003eis\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003eoriginasentence\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003esecondcolumn\u003c/span\u003e \u003cspan class=\"ow\"\u003eis\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003esentence\u003c/span\u003e \u003cspan class=\"n\"\u003eafterediting\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003ethird\u003c/span\u003e \u003cspan class=\"n\"\u003ecolumnprovides\u003c/span\u003e \u003cspan class=\"n\"\u003eexplanation\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eChinese\u003c/span\u003e \u003cspan class=\"n\"\u003ePlease\u003c/span\u003e \u003cspan class=\"n\"\u003eedit\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003efollowing\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003escientific\u003c/span\u003e \u003cspan class=\"n\"\u003etone\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"heading\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-1\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-2\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-3\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-4\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-5\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-6\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-7\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-8\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-9\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-10\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-11\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-12\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-13\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-14\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-15\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-16\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-17\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-18\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-19\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-20\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-21\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-22\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-23\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-24\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-25\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-26\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-27\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-28\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-29\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-30\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-31\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-32\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-33\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-34\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-35\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-36\"\u003e\u003c/h1\u003e","title":"AI提示词汇总"},{"content":"什么是加密 ","permalink":"//localhost:1313/posts/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E5%92%8C%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%9A%84%E6%80%9D%E8%80%83/","summary":"\u003ch1 id=\"什么是加密\"\u003e什么是加密\u003c/h1\u003e","title":"对称加密和非对称加密的思考"},{"content":" 我的 vscode 的设置.json文件\n2024.11.12 设置 { \u0026#34;editor.fontSize\u0026#34;: 16, \u0026#34;cph.general.autoShowJudge\u0026#34;: false, \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;editor.formatOnType\u0026#34;: true, \u0026#34;files.autoSave\u0026#34;: \u0026#34;afterDelay\u0026#34;, \u0026#34;git.confirmSync\u0026#34;: false, \u0026#34;chat.editor.fontSize\u0026#34;: 18, \u0026#34;window.zoomLevel\u0026#34;: 1, \u0026#34;editor.mouseWheelZoom\u0026#34;: true, \u0026#34;editor.wordWrap\u0026#34;: \u0026#34;on\u0026#34;, \u0026#34;debug.onTaskErrors\u0026#34;: \u0026#34;debugAnyway\u0026#34;, \u0026#34;explorer.confirmDelete\u0026#34;: false, \u0026#34;extensions.experimental.affinity\u0026#34;: { \u0026#34;asvetliakov.vscode-neovim\u0026#34;: 1 }, \u0026#34;workbench.settings.applyToAllProfiles\u0026#34;: [ \u0026#34;editor.fontSize\u0026#34; ], \u0026#34;go.delveConfig\u0026#34;: {}, \u0026#34;[javascript]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;esbenp.prettier-vscode\u0026#34; }, \u0026#34;[markdown]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;esbenp.prettier-vscode\u0026#34; }, \u0026#34;[prisma]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;Prisma.prisma\u0026#34; }, \u0026#34;[typescript]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;esbenp.prettier-vscode\u0026#34; }, \u0026#34;[typescriptreact]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;esbenp.prettier-vscode\u0026#34; }, \u0026#34;editor.codeActionsOnSave\u0026#34;: { \u0026#34;source.addMissingImports\u0026#34;: \u0026#34;explicit\u0026#34;, \u0026#34;source.organizeImports\u0026#34;: \u0026#34;explicit\u0026#34; }, \u0026#34;editor.cursorSmoothCaretAnimation\u0026#34;: \u0026#34;on\u0026#34;, \u0026#34;editor.cursorSurroundingLines\u0026#34;: 5, \u0026#34;editor.fontFamily\u0026#34;: \u0026#34;CaskaydiaCove Nerd Font\u0026#34;, \u0026#34;editor.fontLigatures\u0026#34;: true, \u0026#34;python.analysis.completeFunctionParens\u0026#34;: true, \u0026#34;editor.fontSize\u0026#34;: 18, \u0026#34;editor.fontWeight\u0026#34;: \u0026#34;300\u0026#34;, \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;editor.inlineSuggest.enabled\u0026#34;: true, \u0026#34;editor.lineNumbers\u0026#34;: \u0026#34;relative\u0026#34;, \u0026#34;editor.linkedEditing\u0026#34;: true, \u0026#34;editor.smoothScrolling\u0026#34;: true, \u0026#34;editor.stickyScroll.enabled\u0026#34;: true, \u0026#34;editor.suggest.insertMode\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;editor.suggestFontSize\u0026#34;: 14, \u0026#34;editor.wordWrap\u0026#34;: \u0026#34;on\u0026#34;, \u0026#34;errorLens.fontStyleItalic\u0026#34;: true, \u0026#34;everforest.italicKeywords\u0026#34;: true, \u0026#34;explorer.confirmDelete\u0026#34;: false, \u0026#34;explorer.confirmDragAndDrop\u0026#34;: false, \u0026#34;extensions.autoUpdate\u0026#34;: \u0026#34;onlyEnabledExtensions\u0026#34;, \u0026#34;extensions.ignoreRecommendations\u0026#34;: false, \u0026#34;files.exclude\u0026#34;: { \u0026#34;**/node_modules\u0026#34;: true }, \u0026#34;prettier.semi\u0026#34;: false, \u0026#34;prettier.singleAttributePerLine\u0026#34;: true, \u0026#34;prettier.singleQuote\u0026#34;: true, \u0026#34;prettier.trailingComma\u0026#34;: \u0026#34;all\u0026#34;, \u0026#34;projectManager.git.baseFolders\u0026#34;: [ \u0026#34;$home/workspace\u0026#34; ], \u0026#34;projectManager.sortList\u0026#34;: \u0026#34;Recent\u0026#34;, \u0026#34;sortJSON.orderOverride\u0026#34;: [ \u0026#34;name\u0026#34;, \u0026#34;version\u0026#34;, \u0026#34;main\u0026#34;, \u0026#34;module\u0026#34;, \u0026#34;types\u0026#34;, \u0026#34;typings\u0026#34;, \u0026#34;files\u0026#34;, \u0026#34;publishConfig\u0026#34;, \u0026#34;repository\u0026#34;, \u0026#34;scripts\u0026#34;, \u0026#34;prefix\u0026#34;, \u0026#34;description\u0026#34;, \u0026#34;body\u0026#34; ], \u0026#34;sortJSON.orderUnderride\u0026#34;: [ \u0026#34;resolutions\u0026#34;, \u0026#34;dependencies\u0026#34;, \u0026#34;devDependencies\u0026#34;, \u0026#34;peerDependencies\u0026#34;, \u0026#34;cSpell.userWords\u0026#34; ], \u0026#34;typescript.preferences.importModuleSpecifier\u0026#34;: \u0026#34;relative\u0026#34;, \u0026#34;typescript.updateImportsOnFileMove.enabled\u0026#34;: \u0026#34;always\u0026#34;, \u0026#34;update.showReleaseNotes\u0026#34;: false, \u0026#34;vim.foldfix\u0026#34;: true, \u0026#34;vim.highlightedyank.color\u0026#34;: \u0026#34;rgba(230, 97, 89, 0.7)\u0026#34;, \u0026#34;vim.highlightedyank.enable\u0026#34;: true, \u0026#34;vim.highlightedyank.textColor\u0026#34;: \u0026#34;white\u0026#34;, \u0026#34;vim.hlsearch\u0026#34;: true, \u0026#34;vim.leader\u0026#34;: \u0026#34;\u0026lt;space\u0026gt;\u0026#34;, \u0026#34;vim.normalModeKeyBindingsNonRecursive\u0026#34;: [ { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;r\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.rename\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;w\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;:w!\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;q\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;:q!\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;x\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;:x!\u0026#34; ] }, { \u0026#34;after\u0026#34;: [ \u0026#34;g\u0026#34;, \u0026#34;g\u0026#34;, \u0026#34;V\u0026#34;, \u0026#34;G\u0026#34; ], \u0026#34;before\u0026#34;: [ \u0026#34;\u0026lt;c-a\u0026gt;\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;\u0026lt;leader\u0026gt;\u0026#34;, \u0026#34;k\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.showHover\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;[\u0026#34;, \u0026#34;d\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.marker.prev\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;]\u0026#34;, \u0026#34;d\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.marker.next\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;\u0026lt;leader\u0026gt;\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;a\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.quickFix\u0026#34; ] }, { \u0026#34;after\u0026#34;: [ \u0026#34;^\u0026#34; ], \u0026#34;before\u0026#34;: [ \u0026#34;H\u0026#34; ] }, { \u0026#34;after\u0026#34;: [ \u0026#34;$\u0026#34; ], \u0026#34;before\u0026#34;: [ \u0026#34;L\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;i\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;extension.toggleBool\u0026#34; ] } ], \u0026#34;vim.useSystemClipboard\u0026#34;: true, \u0026#34;window.zoomLevel\u0026#34;: 1, \u0026#34;workbench.iconTheme\u0026#34;: \u0026#34;Monokai Pro Icons\u0026#34;, \u0026#34;workbench.settings.editor\u0026#34;: \u0026#34;json\u0026#34;, \u0026#34;workbench.startupEditor\u0026#34;: \u0026#34;readme\u0026#34;, \u0026#34;zenMode.hideLineNumbers\u0026#34;: false, \u0026#34;vsicons.dontShowNewVersionMessage\u0026#34;: true, \u0026#34;[jsonc]\u0026#34;: { \u0026#34;editor.quickSuggestions\u0026#34;: { \u0026#34;strings\u0026#34;: true }, \u0026#34;editor.suggest.insertMode\u0026#34;: \u0026#34;replace\u0026#34; }, \u0026#34;terminal.integrated.defaultProfile.windows\u0026#34;: \u0026#34;Command Prompt\u0026#34;, \u0026#34;terminal.explorerKind\u0026#34;: \u0026#34;external\u0026#34;, \u0026#34;security.workspace.trust.enabled\u0026#34;: false, \u0026#34;typescript.disableAutomaticTypeAcquisition\u0026#34;: true, \u0026#34;git.enableSmartCommit\u0026#34;: true, \u0026#34;git.openRepositoryInParentFolders\u0026#34;: \u0026#34;always\u0026#34;, \u0026#34;files.autoGuessEncoding\u0026#34;: true, \u0026#34;code-runner.languageIdToFileExtensionMap\u0026#34;: { \u0026#34;bat\u0026#34;: \u0026#34;.bat\u0026#34;, \u0026#34;powershell\u0026#34;: \u0026#34;.ps1\u0026#34;, \u0026#34;typescript\u0026#34;: \u0026#34;.ts\u0026#34; }, \u0026#34;vim.easymotion\u0026#34;: true, // \u0026#34;editor.formatOnType\u0026#34;: true, // \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;go.formatTool\u0026#34;: \u0026#34;gofmt\u0026#34;, \u0026#34;[go]\u0026#34;: { \u0026#34;editor.insertSpaces\u0026#34;: true, \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;editor.codeActionsOnSave\u0026#34;: { \u0026#34;source.organizeImports\u0026#34;: \u0026#34;explicit\u0026#34; }, \u0026#34;editor.suggest.snippetsPreventQuickSuggestions\u0026#34;: false }, \u0026#34;animations.Install-Method\u0026#34;: \u0026#34;Custom CSS and JS\u0026#34;, \u0026#34;apc.imports\u0026#34;: [ \u0026#34;file:///c:/Users/zhang/.vscode/extensions/brandonkirbyson.vscode-animations-2.0.3/dist/updateHandler.js\u0026#34; ], \u0026#34;animations.CursorAnimation\u0026#34;: true, \u0026#34;animations.CursorAnimationOptions\u0026#34;: { \u0026#34;Color\u0026#34;: \u0026#34;#ffb6c1\u0026#34;, \u0026#34;TrailLength\u0026#34;: 8 }, \u0026#34;animations.Smooth-Mode\u0026#34;: false, \u0026#34;marscode.codeCompletionPro\u0026#34;: { \u0026#34;enableCodeCompletionPro\u0026#34;: true }, \u0026#34;marscode.enableCodelens\u0026#34;: { \u0026#34;enableInlineUnitTest\u0026#34;: false, \u0026#34;enableInlineDocumentation\u0026#34;: false }, \u0026#34;vscode_custom_css.imports\u0026#34;: [ \u0026#34;file:///c:/Users/zhang/.vscode/extensions/brandonkirbyson.vscode-animations-2.0.4/dist/updateHandler.js\u0026#34; ] } ","permalink":"//localhost:1313/posts/vscodesetting%E9%85%8D%E7%BD%AE/","summary":"\u003cblockquote\u003e\n\u003cp\u003e我的 \u003ccode\u003evscode\u003c/code\u003e 的设置\u003ccode\u003e.json\u003c/code\u003e文件\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"20241112-设置\"\u003e2024.11.12 设置\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontSize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;cph.general.autoShowJudge\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.formatOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.formatOnType\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;files.autoSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;afterDelay\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;git.confirmSync\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;chat.editor.fontSize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;window.zoomLevel\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.mouseWheelZoom\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.wordWrap\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;on\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;debug.onTaskErrors\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;debugAnyway\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;explorer.confirmDelete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;extensions.experimental.affinity\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;asvetliakov.vscode-neovim\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;workbench.settings.applyToAllProfiles\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;editor.fontSize\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;go.delveConfig\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[javascript]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;esbenp.prettier-vscode\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[markdown]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;esbenp.prettier-vscode\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[prisma]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Prisma.prisma\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[typescript]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;esbenp.prettier-vscode\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[typescriptreact]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;esbenp.prettier-vscode\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.codeActionsOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;source.addMissingImports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;explicit\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;source.organizeImports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;explicit\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.cursorSmoothCaretAnimation\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;on\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.cursorSurroundingLines\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontFamily\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;CaskaydiaCove Nerd Font\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontLigatures\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;python.analysis.completeFunctionParens\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontSize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontWeight\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;300\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.formatOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.inlineSuggest.enabled\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.lineNumbers\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;relative\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.linkedEditing\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.smoothScrolling\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.stickyScroll.enabled\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.suggest.insertMode\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;replace\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.suggestFontSize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e14\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.wordWrap\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;on\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;errorLens.fontStyleItalic\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;everforest.italicKeywords\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;explorer.confirmDelete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;explorer.confirmDragAndDrop\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;extensions.autoUpdate\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;onlyEnabledExtensions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;extensions.ignoreRecommendations\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;files.exclude\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;**/node_modules\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;prettier.semi\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;prettier.singleAttributePerLine\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;prettier.singleQuote\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;prettier.trailingComma\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;all\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;projectManager.git.baseFolders\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;$home/workspace\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;projectManager.sortList\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Recent\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;sortJSON.orderOverride\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;main\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;module\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;types\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;typings\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;files\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;publishConfig\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;repository\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;scripts\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;prefix\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;body\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;sortJSON.orderUnderride\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;resolutions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;dependencies\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;devDependencies\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;peerDependencies\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;cSpell.userWords\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;typescript.preferences.importModuleSpecifier\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;relative\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;typescript.updateImportsOnFileMove.enabled\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;always\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;update.showReleaseNotes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.foldfix\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.highlightedyank.color\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;rgba(230, 97, 89, 0.7)\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.highlightedyank.enable\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.highlightedyank.textColor\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;white\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.hlsearch\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;space\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.normalModeKeyBindingsNonRecursive\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;r\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.rename\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;w\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;:w!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;q\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;:q!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;x\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;:x!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;after\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;g\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;g\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;V\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;G\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;c-a\u0026gt;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;leader\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;k\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.showHover\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;[\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;d\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.marker.prev\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;d\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.marker.next\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;leader\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;c\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.quickFix\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;after\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;^\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;H\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;after\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;$\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;L\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;i\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;extension.toggleBool\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.useSystemClipboard\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;window.zoomLevel\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;workbench.iconTheme\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Monokai Pro Icons\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;workbench.settings.editor\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;json\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;workbench.startupEditor\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;readme\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;zenMode.hideLineNumbers\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vsicons.dontShowNewVersionMessage\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[jsonc]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.quickSuggestions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;strings\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.suggest.insertMode\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;replace\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;terminal.integrated.defaultProfile.windows\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Command Prompt\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;terminal.explorerKind\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;external\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;security.workspace.trust.enabled\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;typescript.disableAutomaticTypeAcquisition\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;git.enableSmartCommit\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;git.openRepositoryInParentFolders\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;always\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;files.autoGuessEncoding\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;code-runner.languageIdToFileExtensionMap\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;bat\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.bat\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;powershell\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.ps1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;typescript\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.ts\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.easymotion\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"c1\"\u003e// \u0026#34;editor.formatOnType\u0026#34;: true,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// \u0026#34;editor.formatOnSave\u0026#34;: true,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;go.formatTool\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;gofmt\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[go]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.insertSpaces\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.formatOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.codeActionsOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;source.organizeImports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;explicit\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.suggest.snippetsPreventQuickSuggestions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;animations.Install-Method\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Custom CSS and JS\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;apc.imports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;file:///c:/Users/zhang/.vscode/extensions/brandonkirbyson.vscode-animations-2.0.3/dist/updateHandler.js\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;animations.CursorAnimation\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;animations.CursorAnimationOptions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;Color\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;#ffb6c1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;TrailLength\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;animations.Smooth-Mode\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;marscode.codeCompletionPro\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;enableCodeCompletionPro\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;marscode.enableCodelens\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;enableInlineUnitTest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;enableInlineDocumentation\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vscode_custom_css.imports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;file:///c:/Users/zhang/.vscode/extensions/brandonkirbyson.vscode-animations-2.0.4/dist/updateHandler.js\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"VsCodeSetting配置"},{"content":"通过hugo创建md文件 打开power shell , 输入 cd E:\\HugoSite\\Hugo\\CooperZhang (目标文件夹) 进入目标位置后 , 输入 hugo new content content\\posts\\要创建的md文件名称.md 回车 , 完成创建 ","permalink":"//localhost:1313/posts/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87hugo%E5%88%9B%E5%BB%BAmarkdown%E6%96%87%E4%BB%B6/","summary":"\u003ch1 id=\"通过hugo创建md文件\"\u003e通过hugo创建md文件\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e打开power shell , 输入 \u003ccode\u003e cd E:\\HugoSite\\Hugo\\CooperZhang\u003c/code\u003e (目标文件夹)\u003c/li\u003e\n\u003cli\u003e进入目标位置后 , 输入\u003ccode\u003e hugo new content content\\posts\\要创建的md文件名称.md\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e回车 , 完成创建\u003c/li\u003e\n\u003c/ol\u003e","title":"如何通过hugo创建markdown文件"},{"content":"goMall电商项目 搭建环境 选择 goland 脚手架 IDL\ncwgo : 自动生成客服端和服务端的代码 thriftgo : protobuf : 服务注册 与 服务发现 分布式部署\n计算机科学的问题都可以通过增加一层来解决 注册中心 配置管理 数据操作 前端 ","permalink":"//localhost:1313/posts/gomall%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE/","summary":"\u003ch1 id=\"gomall电商项目\"\u003egoMall电商项目\u003c/h1\u003e\n\u003ch2 id=\"搭建环境\"\u003e搭建环境\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e选择 goland\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"脚手架\"\u003e脚手架\u003c/h2\u003e\n\u003cp\u003eIDL\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003ecwgo\u003c/strong\u003e : 自动生成客服端和服务端的代码\u003c/li\u003e\n\u003cli\u003ethriftgo :\u003c/li\u003e\n\u003cli\u003eprotobuf :\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"服务注册-与-服务发现\"\u003e服务注册 与 服务发现\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e分布式部署\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003col\u003e\n\u003cli\u003e计算机科学的问题都可以通过增加一层来解决\u003c/li\u003e\n\u003cli\u003e注册中心\u003c/li\u003e\n\u003cli\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"配置管理\"\u003e配置管理\u003c/h2\u003e\n\u003ch2 id=\"数据操作\"\u003e数据操作\u003c/h2\u003e\n\u003ch2 id=\"前端\"\u003e前端\u003c/h2\u003e","title":"GoMall电商项目"},{"content":" 正常: 买入 加粗: 卖出 名称 时间 成交额 💵 发仔 2024.1016 1535 发仔 2024.1104 1651 +116 ","permalink":"//localhost:1313/posts/economyz/","summary":"\u003cul\u003e\n\u003cli\u003e正常: 买入\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e加粗: 卖出\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: center\"\u003e名称\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e时间\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e成交额\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e💵\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e发仔\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e2024.1016\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e1535\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003cstrong\u003e发仔\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003cstrong\u003e2024.1104\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003cstrong\u003e1651\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003cstrong\u003e+116\u003c/strong\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"EconomyZ"},{"content":"字节训练营 结营要求 刷题打卡 \u0026gt; 50\n每天3题\n博客要写至少6篇\n课程 第一门课程 Go 语言上手-基础语言，也就是说现在你们听的这门课程。 主要讲述语言基础语法、入门实战 第二门课程 Go 语言上手-工程实践 主要讲述 并发编程、依赖管理、单元测试、项目实战 第三门课程 高质量编程与性能调优实战。主要讲述 编码规范、性能优化建议、性能分析工具使用、性能优化流程 第四门课程 高性能 Go 语言发行版优化与落地实践。主要讲述 自动内存管理、Go 内存管理及优化、编译器和静态分析、Go 编译器优化 并发编程 协程 通道 sync 测试 HTTP协议 超文本传输协议包含\n请求行 请求头 请求体 传输的包大部分是4k以下\n“Benchmark” “Benchmark” 是一个评估性能或效率的标准或测试。\n在计算机科学和程序开发中，它通常指以下几个方面：\n性能测试： 用于衡量程序、算法或系统在特定条件下的运行效率。常见的基准测试包括处理速度、内存使用、响应时间等。 基准工具： 一些工具和框架专门用于执行基准测试，帮助开发者比较不同实现或版本的性能表现。例如，Go 语言内置的 testing 包支持基准测试，通过 Benchmark 函数来评估代码执行的速度。 行业标准： 行业内的基准参考，用于对比不同产品或服务的性能。例如，计算机硬件的性能基准，可以帮助用户选择合适的设备。 基准测试示例（Go 语言） 在 Go 语言中，你可以使用以下方式进行基准测试：\npackage main import ( \u0026#34;testing\u0026#34; ) // 被测试的函数 func add(a, b int) int { return a + b } // 基准测试 func BenchmarkAdd(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { add(1, 2) } } 刷题笔记 打开抖音互联网发生什么 熟悉TCP/IP , 计算机网络\n协议 打开抖音发生了什么过程 连入互联网 路由 , 交换机 , 网络虚拟化 跨网段 路由不是对称的: 多路 图 路由协议 工作在ip层 但也没这么简单 路由不改IP地址 , 路由是改Mac 找到发包口 ARP协议 广播 , 免费ARP协议 ARP代理 IPV6 , ip冲突情况 解决方案 IP协议 , mac 地址不能代替ip地址 , 向下兼容 协议 ipv4 不够用 , 解决 , NAT , 网路打通后 , 视频下载\n网络传输 , 数据包 DNS请求 UDP协议 , 分片 , 丢包 , 传输效率 和质量 TCP 协议 3次握手 , timewait , HTTP / HTTP 1.1 HTTPS 加密 SSL/TLS 握手 , 对称和非对称加密 网络架构给抖音提质 网络提速\n网络提速 HTTP2.0 , 多路复用 , stream , TCP丢包怎么办 , 对头阻塞 如何解决 , QUIC / HTTP3.0 , UDP 还是TCP , kernel 还是usersapce , 0 RRT , 弱网优势 路径优化\n数据中心分布 同运营商访问 , 通过解析 分析IP 静态资源 路径优化 CDN , 静态缓存 , 边缘机房 \u0026mdash;\u0026gt; 汇聚机房 \u0026mdash;\u0026gt; 核心机房 访问 动态API 播放 评论接口 , 路径优化 DSA 网络稳定\n容灾概念 , 故障发生 - 故障感知- 自动切换 - 服务恢复 故障排除: 故障明确 - 故障止损 - 分段排查 (客户端 , 服务端 , 中间链路) 故障预防 : 监控报警 - 故障演练 - 故障降级 / 止损 网络接入的问题 域名系统\nhost管理 , 面临很多问题 域名系统 替换 host 域名购买 , 配置迁移 开放外部用户访问 , 建设外部网站 自建DNS服务器\nDNS查询过程 DNS 记录类型 权威DNS系统架构 接入HTTPS\n对称加密 和 非对称加密 SSL的 通信过程 证书链 使用 HTTPS 接入全站加速\n全站加速 = 静态加速 + 动态加速\n静态加速 CDN , 缓存 动态加速 DCDN , 原理 , 全站加速应用场景 : 用户登录 : 动态加速 , 短视频加载观看 : 静态加速 , 网页浏览 : 静态加速 + 动态加速 ","permalink":"//localhost:1313/posts/%E5%AD%97%E8%8A%82%E8%AE%AD%E7%BB%83%E8%90%A5%E8%AE%B0%E5%BD%95/","summary":"\u003ch1 id=\"字节训练营\"\u003e字节训练营\u003c/h1\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241101193517595\" loading=\"lazy\" src=\"../img/image-20241101193517595.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241101193517595\" loading=\"lazy\" src=\"./img/image-20241101193517595.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"结营要求\"\u003e结营要求\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e刷题打卡 \u0026gt; 50\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e每天3题\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e博客要写至少6篇\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"课程\"\u003e课程\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e第一门课程 Go 语言上手-基础语言，也就是说现在你们听的这门课程。 主要讲述语言基础语法、入门实战\u003c/li\u003e\n\u003cli\u003e第二门课程 Go 语言上手-工程实践 主要讲述 并发编程、依赖管理、单元测试、项目实战\u003c/li\u003e\n\u003cli\u003e第三门课程 高质量编程与性能调优实战。主要讲述 编码规范、性能优化建议、性能分析工具使用、性能优化流程\u003c/li\u003e\n\u003cli\u003e第四门课程 高性能 Go 语言发行版优化与落地实践。主要讲述 自动内存管理、Go 内存管理及优化、编译器和静态分析、Go 编译器优化\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241101230232086\" loading=\"lazy\" src=\"../img/image-20241101230232086.png\"\u003e\u003c/p\u003e","title":"字节训练营记录"},{"content":"二分 整数二分算法模板 —— 模板题 AcWing 789. 数的范围\ncpp除法默认是向下取整: 如 5 / 2 = 2 上取整 ==\u0026gt; 5 / 2 = 3 ==\u0026gt; 5+1 \u0026gt;\u0026gt; 1\n下取整 ==\u0026gt; 5 / 2 = 2\n\u0026gt;\u0026gt; 右移运算符（Bitwise Right Shift）\n用于将一个整数的二进制位向右移动指定的位数。每右移一位，相当于将数值除以 2。\nint x = 8; // 二进制 1000 int y = x \u0026gt;\u0026gt; 2; // 结果是 2，二进制 0010 模板 整数数组必须是升序排列\nL和R 都是下标\n确定 mid(坐标) , 然后套模板\n**L L L mid mid+1 r r r\t//mid 在左边 , mid = L + r \u0026raquo; 1 , 自动取左 **\n(尽量选 mid 在左边)\nL L L mid-1 mid r r r //mid 在右边 , mid = L + r + 1 \u0026raquo; 1\nbool check(int x) { /* ... */ } // 检查x是否满足某种性质 // 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用： l l l mid mid+1 r r r\t//mid 在左边 , l + r \u0026gt;\u0026gt; 1 , 自动取左 int bsearch_1(int l, int r) { while (l \u0026lt; r) { int mid = l + r \u0026gt;\u0026gt; 1; if (check(mid)) r = mid; // check()判断mid是否满足性质 else l = mid + 1; } return l; } // 向上取整 // ------------------------------------------------------------------------ // 向下取整 // 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用： l l l mid-1 mid r r r //mid 在右边 , l + r + 1 \u0026gt;\u0026gt; 1 int bsearch_2(int l, int r) { while (l \u0026lt; r) { int mid = l + r + 1 \u0026gt;\u0026gt; 1; if (check(mid)) l = mid; else r = mid - 1; } return l; } 如果数据单调, 意味着可以二分\n二分就是找两段不同性质数据的分界点\n浮点数二分算法模板 —— 模板题 AcWing 790. 数的三次方根\nbool check(double x) {/* ... */} // 检查x是否满足某种性质 double bsearch_3(double l, double r) { const double eps = 1e-6; // eps 表示精度，取决于题目对精度的要求 while (r - l \u0026gt; eps) { double mid = (l + r) / 2; if (check(mid)) r = mid; else l = mid; } return l; } 前缀和 作用 : 快速求出一个区间的和 , O(1) S[i] 为前缀和\nS[i] = a[1]+ a[2] + .... + a[i] , S[0] = 0 (默认) S[i] = S[i-1] + a[i] 求a数组中任意区间[l,r]的和 : S[r] - S[l-1] , 注意是求的是第 L 个 到 第 R 个数的和 (不是下标) s[R] = a[1] + ... + a[L-1] + a[L] + ... + a[R] s[L - 1] = a[1] + ... + a[L-1] //结论 s[R] - s[L - 1] = a[L] + ... + a[R] 差分 yxc: 差分是前缀和的逆运算 a1 a2 ... an //数组前缀和 构造 b1 b2 ... bn 使得 ai = b1 + b2 + ... + bi b1 = a1 b2 = a2 - a1 b3 = a3 - a2 ... bn = a_n - a_n-1 可以实现 O(1) 时间把某一个数组区间的每一个值加上一个值 X\nexample: // a 是原数组 , b 是差分数组 b_l + x b_r+1 - x 一开始可以把a看成 0 0 0 \u0026hellip; 0 通过插入insert操作得到a数组 void insert(int l, int r, int c) { b[l] += c; b[r + 1] -= c; } 林小鹿: 类似于数学中的求导和积分，差分可以看成前缀和的逆运算。 差分数组：\n首先给定一个原数组a：a[1], a[2], a[3],,,,,, a[n];\n然后我们构造一个数组b ： b[1] ,b[2] , b[3],,,,,, b[i];\n使得 a[i] = b[1] + b[2 ]+ b[3] +,,,,,, + b[i]\n也就是说，a数组是b数组的前缀和数组，反过来我们把b数组叫做a数组的差分数组。换句话说，每一个a[i]都是b数组中从头开始的一段区间和。\n考虑如何构造差分b数组？\n最为直接的方法\n如下：\na[0 ]= 0; b[1] = a[1] - a[0]; b[2] = a[2] - a[1]; b[3] =a [3] - a[2]; ........ b[n] = a[n] - a[n-1]; 我们只要有b数组，通过前缀和运算，就可以在O(n) 的时间内得到a数组 。\n知道了差分数组有什么用呢？ 别着急，慢慢往下看。\n话说有这么一个问题：\n给定区间[l ,r ]，让我们把a数组中的[ l, r]区间中的每一个数都加上c,即 a[l] + c , a[l+1] + c , a[l+2] + c ,,,,,, a[r] + c;\n暴力做法是for循环l到r区间，时间复杂度O(n)，如果我们需要对原数组执行m次这样的操作，时间复杂度就会变成O(n*m)。有没有更高效的做法吗? 考虑差分做法。\n始终要记得，a数组是b数组的前缀和数组，比如对b数组的b[i]的修改，会影响到a数组中从a[i]及往后的每一个数。\n首先让差分b数组中的 b[l] + c ,a数组变成 a[l] + c ,a[l+1] + c,,,,,, a[n] + c;\n然后我们打个补丁，b[r+1] - c, a数组变成 a[r+1] - c,a[r+2] - c,,,,,,,a[n] - c;\n为啥还要打个补丁？\nb[l] + c，效果使得a数组中 a[l]及以后的数都加上了c(红色部分)，但我们只要求l到r区间加上c, 因此还需要执行 b[r+1] - c,让a数组中a[r+1]及往后的区间再减去c(绿色部分)，这样对于a[r] 以后区间的数相当于没有发生改变。\n因此我们得出一维差分结论：给a数组中的[ l, r]区间中的每一个数都加上c,只需对差分数组b做 b[l] + = c, b[r+1] - = c。时间复杂度为O(1), 大大提高了效率。\n//差分 时间复杂度 o(m) #include\u0026lt;iostream\u0026gt; using namespace std; const int N = 1e5 + 10; int a[N], b[N]; int main() { int n, m; scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;n, \u0026amp;m); for (int i = 1; i \u0026lt;= n; i++) { scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i]); b[i] = a[i] - a[i - 1]; //构建差分数组 } int l, r, c; while (m--) { scanf(\u0026#34;%d%d%d\u0026#34;, \u0026amp;l, \u0026amp;r, \u0026amp;c); b[l] += c; //将序列中[l, r]之间的每个数都加上c b[r + 1] -= c; } for (int i = 1; i \u0026lt;= n; i++) { a[i] = b[i] + a[i - 1]; //前缀和运算 printf(\u0026#34;%d \u0026#34;, a[i]); } return 0; } 双指针 (双指针) O(n) 必要条件 先考虑暴力方式 确定目标数组的单调性 i从 0开始 从前往后遍历 j从 m - 1开始 从后向前遍历 #include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; const int N = 10001; int a[N], b[N]; int main() { int n, m, x; cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m \u0026gt;\u0026gt; x; for (int i = 0; i \u0026lt; n; i++) cin \u0026gt;\u0026gt; a[i]; for (int i = 0; i \u0026lt; m; i++) cin \u0026gt;\u0026gt; b[i]; // sort(a,a+n); // sort(b,b+m); //必须保证两个数组都是单调的 for (int i = 0, j = m - 1; i \u0026lt; n; i++) { while( j \u0026gt;= 0 \u0026amp;\u0026amp; a[i] + b[j] \u0026gt; x) { j--; } if(a[i] + b[j] == x) { cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; j; break; } } return 0; } #include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; const int N = 100100; int a[N], b[N]; int main() { int n; cin \u0026gt;\u0026gt; n; for (int i = 0; i \u0026lt; n; i++) { cin \u0026gt;\u0026gt; a[i]; } int ans = 0; for (int i = 0, j = 0; i \u0026lt; n; i++) { b[a[i]]++; while (b[a[i]] \u0026gt; 1) { b[a[j]]--; j++; } ans = max(ans, i - j + 1); } cout \u0026lt;\u0026lt; ans; return 0; } 归并排序 分治 模板 void merge_sort(int q[], int l, int r) { if (l \u0026gt;= r) return; int mid = l + r \u0026gt;\u0026gt; 1; merge_sort(q, l, mid); merge_sort(q, mid + 1, r); int k = 0, i = l, j = mid + 1; while (i \u0026lt;= mid \u0026amp;\u0026amp; j \u0026lt;= r) if (q[i] \u0026lt;= q[j]) tmp[k ++ ] = q[i ++ ]; else tmp[k ++ ] = q[j ++ ]; while (i \u0026lt;= mid) tmp[k ++ ] = q[i ++ ]; while (j \u0026lt;= r) tmp[k ++ ] = q[j ++ ]; for (i = l, j = 0; i \u0026lt;= r; i ++, j ++ ) q[i] = tmp[j]; } L L L r r r\n确定分界点 递归排序 left right 归并 \u0026ndash; 合二为一 多路归并 重点是 merge() 函数\n贡献法 是一种数学思想 原本是对矩阵的行进行操作, 换一种方式, 变成对矩阵的列进行操作 孤独的区间 , 只有1个 n➡️ 0 1 2 \u0026hellip; n 所有区间⬇️ 子串是连续的\n日期问题 求闰年模板 const int months[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; // 一三五七八十蜡，三十一天永不差 // 一、1、3、5、7、8、10、12 每月31天，4、6、9、11为30天。 二、2月正常为28天，如果为闰年，则多一天为29天。 int is_leap(int year) //判断闰年 { if (year % 4 == 0 \u0026amp;\u0026amp; year % 100 || year % 400 == 0) return 1; return 0; } int get_days(int y, int m) { if ( m == 2) return 28 + is_leap(y); } int months[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; bool check(int date) // 判断日期是否合法 { int year = date / 10000; int month = date % 10000 / 100; int day = date % 100; if (!day || month \u0026lt; 0 || month \u0026gt; 12) return false; if (month != 2 \u0026amp;\u0026amp; day \u0026gt; months[month]) return false; if (month == 2) { if ((year % 4 == 0 \u0026amp;\u0026amp; year % 100 != 0) || (year % 400 == 0)) // 闰年特判 { if (day \u0026gt; 29) return false; } else { if (day \u0026gt; 28) return false; } } return true; } 求区间天数 思想是计算各个日期到公元1.1.1的天数, 再将计算结果相减+1 , 得到结果\n模板\nint months[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; //\t一 三 五 七 八 十 蜡，三十一天永不差 //或 const int months[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;string\u0026gt; using namespace std; int months[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; int day(int n) { int y = n / 10000; // 年 int m = n % 10000 / 100; // 月 int d = n % 10000 % 100; // 日 // 首先更新一下计算年份的二月天数有多少 // 闰年包括普通闰年和世纪闰年 // 普通闰年年分是4倍数不是100倍数（），世纪闰年是400的倍数， // 即100的倍数不是4的倍数不是闰年，如1900 // 判断闰年 if (y % 4 == 0 \u0026amp;\u0026amp; y % 100 != 0 || y % 400 == 0) months[2] = 29; else // 不加这个会错 months[2] = 28; //统计当前年份的总天数 (今年的天数) while (m--) d += months[m]; //计算从公元1年开始开始，一直到\u0026lt;去年\u0026gt;最后一天,不是到0000年 while (y--) d += (y % 4 == 0 \u0026amp;\u0026amp; y % 100 != 0 || y % 400 == 0 ? 366 : 365); // 闰年366天，平年365天 return d; } int main() { int a, b; while (cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b) cout \u0026lt;\u0026lt; abs(day(a) - day(b)) + 1 \u0026lt;\u0026lt; endl; // 由题所示“如果两个日期是连续的我们规定他们之间的天数为两天”，因此我们加一 return 0; } 区间合并 任意多个区间的范围有交集, 快速把这几个区间合并\n贪心思想\n模板ycx\n// 将所有存在交集的区间合并 void merge(vector\u0026lt;PII\u0026gt; \u0026amp;segs) { vector\u0026lt;PII\u0026gt; res; sort(segs.begin(), segs.end()); int st = -2e9, ed = -2e9; for (auto seg : segs) if (ed \u0026lt; seg.first) { if (st != -2e9) res.push_back({st, ed}); st = seg.first, ed = seg.second; } else ed = max(ed, seg.second); if (st != -2e9) res.push_back({st, ed}); segs = res; } 按区间左端点排序\nstart_________________________end 三种情况⬇️\n​ f\u0026mdash;\u0026ndash;s 在区间内 这情况等于不用操作 ​ f\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-s 右端点超出 ​ f\u0026mdash;\u0026mdash;\u0026mdash;-s 全部超出 void merge(vector\u0026lt;Pii\u0026gt; \u0026amp;segment) { vector\u0026lt;Pii\u0026gt; ans; sort(segment.begin(), segment.end()); // 默认排序左端点 int start = -2e9, end = -2e9; for (auto seg : segment) { if (end \u0026lt; seg.first) { if (start != -2e9) // 没有交集 ans.push_back({start, end}); start = seg.first, end = seg.second; } else { end = max(end, seg.second); //合并情况不添加ans } } if (start != -2e9) // 防止vector是空集 , 空集就是也是一个区间 ans.push_back({start, end}); segment = ans; } 递归 ","permalink":"//localhost:1313/posts/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%A4%87%E6%88%98/","summary":"\u003ch1 id=\"二分\"\u003e二分\u003c/h1\u003e\n\u003ch2 id=\"整数二分算法模板\"\u003e\u003cem\u003e整数\u003c/em\u003e二分算法模板\u003c/h2\u003e\n\u003cp\u003e—— 模板题 AcWing 789. 数的范围\u003c/p\u003e\n\u003cp\u003ecpp除法默认是向下取整: 如 \u003ccode\u003e5 / 2 = 2 \u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e上取整 ==\u0026gt; \u003ccode\u003e5 / 2 = 3\u003c/code\u003e  ==\u0026gt;  \u003ccode\u003e5+1 \u0026gt;\u0026gt; 1\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e下取整 ==\u0026gt; \u003ccode\u003e5 / 2 = 2\u003c/code\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003e\u0026gt;\u0026gt; \u003c/code\u003e \u003cstrong\u003e右移运算符（Bitwise Right Shift）\u003c/strong\u003e\u003c/p\u003e","title":"蓝桥杯备战"},{"content":"参考链接: CSDN Qt Creator打造VScode one dark pro主题配色\n代码部分\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;style-scheme version=\u0026#34;1.0\u0026#34; name=\u0026#34;One Dark\u0026#34;\u0026gt; \u0026lt;style name=\u0026#34;Text\u0026#34; foreground=\u0026#34;#abb2bf\u0026#34; background=\u0026#34;#282c34\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Link\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Selection\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LineNumber\u0026#34; foreground=\u0026#34;#4b5363\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;SearchResult\u0026#34; background=\u0026#34;#324365\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;SearchScope\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Parentheses\u0026#34; underlineColor=\u0026#34;#61afef\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;ParenthesesMismatch\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;AutoComplete\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;CurrentLine\u0026#34; background=\u0026#34;#3a3f4b\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;CurrentLineNumber\u0026#34; foreground=\u0026#34;#777c87\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Occurrences\u0026#34; background=\u0026#34;#324365\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Occurrences.Unused\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;DashUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Occurrences.Rename\u0026#34; background=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Number\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;String\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Type\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Local\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Global\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Field\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Static\u0026#34; foreground=\u0026#34;#61afef\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;VirtualMethod\u0026#34; foreground=\u0026#34;#61afef\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Function\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Keyword\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;PrimitiveType\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Operator\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Overloaded Operator\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Punctuation\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Preprocessor\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Label\u0026#34; foreground=\u0026#34;#e06c75\u0026#34; bold=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Comment\u0026#34; foreground=\u0026#34;#5c6370\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Doxygen.Comment\u0026#34; foreground=\u0026#34;#5c6370\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Doxygen.Tag\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;VisualWhitespace\u0026#34; foreground=\u0026#34;#3c4049\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlLocalId\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlExternalId\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlTypeId\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlRootObjectProperty\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlScopeObjectProperty\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlExternalObjectProperty\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;JsScopeVar\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;JsImportVar\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;JsGlobalVar\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlStateName\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Binding\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DisabledCode\u0026#34; foreground=\u0026#34;#5c6370\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;AddedLine\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;RemovedLine\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffFile\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffLocation\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffFileLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#e5c07b\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffContextLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#56b6c2\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffSourceLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#be5046\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffSourceChar\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffDestLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#789353\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffDestChar\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#98c379\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogChangeLine\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogAuthorName\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogCommitDate\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogCommitHash\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogCommitSubject\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogDecoration\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Warning\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;WarningContext\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;DotLine\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Error\u0026#34; underlineColor=\u0026#34;#e06c75\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;ErrorContext\u0026#34; underlineColor=\u0026#34;#e06c75\u0026#34; underlineStyle=\u0026#34;DotLine\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Declaration\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;FunctionDefinition\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;OutputArgument\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LastStyleSentinel\u0026#34;/\u0026gt; \u0026lt;/style-scheme\u0026gt; 主题设置\n[General] ThemeName=One Dark PreferredStyles=Fusion DefaultTextEditorColorScheme=onedark.xml [Palette] shadowBackground=ff21252b text=ffabb2bf textDisabled=99abb2bf textHighlighted=ffd7dae0 toolBarItem=ffabb2bf toolBarItemDisabled=99abb2bf fancyBarsNormalTextColor=ffabb2bf fancyBarsBoldTextColor=ffabb2bf hoverBackground=ff31363f selectedBackground=ff3a3f4b selectedBackgroundText=ffd7dae0 normalBackground=ff282c34 alternateBackground=ff31363f error=ffe06c75 warning=ffe5c07b success=ff98c379 message=ff61afef splitter=ff181a1f textColorLink=61afef textColorLinkVisited=c678dd backgroundColorDisabled=ff21252b [Colors] ;DS controls theme START DScontrolBackground=normalBackground DScontrolOutline=splitter DStextColor=text DSdisabledTextColor=textDisabled DSpanelBackground=ff454444 DShoverHighlight=hoverBackground DScolumnBackground=ff363636 DSfocusEdit=normalBackground DSfocusDrag=ff565656 DScontrolBackgroundPressed=selectedBackground DScontrolBackgroundChecked=selectedBackground DSinteraction=selectedBackground DSsliderActiveTrack=ff7a7a7a DSsliderInactiveTrack=ff4d4d4d DSsliderHandle=ff4b5362 DSsliderActiveTrackHover=ff7f7f7f DSsliderInactiveTrackHover=ff505050 DSsliderHandleHover=ff7a7a7a DSsliderActiveTrackFocus=ffaaaaaa DSsliderInactiveTrackFocus=ff7a7a7a DSsliderHandleFocus=ff1d545c DSerrorColor=error DScontrolBackgroundDisabled=backgroundColorDisabled DScontrolOutlineDisabled=ff4d4d4d DStextColorDisabled=textDisabled DStextSelectionColor=selectedBackground DStextSelectedTextColor=selectedBackgroundText DSscrollBarTrack=ff4d4d4d DSscrollBarHandle=ff4b5362 DScontrolBackgroundInteraction=ff4d4d4d DStranslationIndicatorBorder=splitter DSsectionHeadBackground=alternateBackground DSchangedStateText=message DS3DAxisXColor=error DS3DAxisYColor=success DS3DAxisZColor=message ;DS controls theme END BackgroundColorAlternate=alternateBackground BackgroundColorDark=shadowBackground BackgroundColorHover=hoverBackground BackgroundColorNormal=normalBackground BackgroundColorDisabled=backgroundColorDisabled BackgroundColorSelected=selectedBackground BadgeLabelBackgroundColorChecked=text BadgeLabelBackgroundColorUnchecked=text BadgeLabelTextColorChecked=normalBackground BadgeLabelTextColorUnchecked=normalBackground CanceledSearchTextColor=error ComboBoxArrowColor=toolBarItem ComboBoxArrowColorDisabled=toolBarItemDisabled ComboBoxTextColor=fancyBarsNormalTextColor DetailsButtonBackgroundColorHover=hoverBackground DetailsWidgetBackgroundColor=shadowBackground DockWidgetResizeHandleColor=splitter DoubleTabWidget1stSeparatorColor=splitter DoubleTabWidget1stTabActiveTextColor=text DoubleTabWidget1stTabBackgroundColor=normalBackground DoubleTabWidget1stTabInactiveTextColor=text DoubleTabWidget2ndSeparatorColor=toolBarItemDisabled DoubleTabWidget2ndTabActiveTextColor=text DoubleTabWidget2ndTabBackgroundColor=selectedBackground DoubleTabWidget2ndTabInactiveTextColor=text EditorPlaceholderColor=shadowBackground FancyToolBarSeparatorColor=toolBarItemDisabled FancyTabBarBackgroundColor=shadowBackground FancyTabBarSelectedBackgroundColor=selectedBackground FancyTabWidgetDisabledSelectedTextColor=toolBarItemDisabled FancyTabWidgetDisabledUnselectedTextColor=toolBarItemDisabled FancyTabWidgetEnabledSelectedTextColor=fancyBarsBoldTextColor FancyTabWidgetEnabledUnselectedTextColor=fancyBarsBoldTextColor FancyToolButtonHoverColor=hoverBackground FancyToolButtonSelectedColor=selectedBackground FutureProgressBackgroundColor=shadowBackground IconsBaseColor=toolBarItem IconsDisabledColor=toolBarItemDisabled IconsInfoColor=message IconsInfoToolBarColor=message IconsWarningColor=warning IconsWarningToolBarColor=warning IconsErrorColor=error IconsErrorToolBarColor=error IconsRunColor=success IconsRunToolBarColor=success IconsStopColor=error IconsStopToolBarColor=error IconsInterruptColor=message IconsInterruptToolBarColor=message IconsDebugColor=toolBarItem IconsNavigationArrowsColor=warning IconsBuildHammerHandleColor=b06112 IconsBuildHammerHeadColor=toolBarItem IconsModeWelcomeActiveColor=success IconsModeEditActiveColor=message IconsModeDesignActiveColor=warning IconsModeDebugActiveColor=message IconsModeProjectActiveColor=success IconsModeAnalyzeActiveColor=message IconsModeHelpActiveColor=warning IconsCodeModelKeywordColor=ff777777 IconsCodeModelClassColor=ffc0b550 IconsCodeModelStructColor=ff53b053 IconsCodeModelFunctionColor=ffd34373 IconsCodeModelVariableColor=ff2bbbcc IconsCodeModelEnumColor=ffc0b550 IconsCodeModelMacroColor=ff476ba0 IconsCodeModelAttributeColor=ff316511 IconsCodeModelUniformColor=ff994899 IconsCodeModelVaryingColor=ffa08833 IconsCodeModelOverlayBackgroundColor=normalBackground IconsCodeModelOverlayForegroundColor=text InfoBarBackground=shadowBackground InfoBarText=text MenuBarEmptyAreaBackgroundColor=shadowBackground MenuBarItemBackgroundColor=shadowBackground MenuBarItemTextColorDisabled=textDisabled MenuBarItemTextColorNormal=text MenuItemTextColorDisabled=textDisabled MenuItemTextColorNormal=text MiniProjectTargetSelectorBackgroundColor=shadowBackground MiniProjectTargetSelectorBorderColor=shadowBackground MiniProjectTargetSelectorSummaryBackgroundColor=normalBackground MiniProjectTargetSelectorTextColor=fancyBarsNormalTextColor PanelStatusBarBackgroundColor=shadowBackground PanelsWidgetSeparatorLineColor=splitter PanelTextColorDark=text PanelTextColorMid=text PanelTextColorLight=textHighlighted ProgressBarColorError=error ProgressBarColorFinished=success ProgressBarColorNormal=message ProgressBarTitleColor=text ProgressBarBackgroundColor=alternateBackground SplitterColor=splitter TextColorDisabled=textDisabled TextColorError=error TextColorHighlight=textHighlighted TextColorHighlightBackground=hoverBackground TextColorLink=textColorLink TextColorLinkVisited=textColorLinkVisited TextColorNormal=text ToggleButtonBackgroundColor=shadowBackground ToolBarBackgroundColor=shadowBackground TreeViewArrowColorNormal=hoverBackground TreeViewArrowColorSelected=text OutputPanes_DebugTextColor=text OutputPanes_ErrorMessageTextColor=error OutputPanes_MessageOutput=message OutputPanes_NormalMessageTextColor=text OutputPanes_StdErrTextColor=error OutputPanes_StdOutTextColor=text OutputPanes_WarningMessageTextColor=warning OutputPanes_TestPassTextColor=success OutputPanes_TestFailTextColor=error OutputPanes_TestXFailTextColor=error OutputPanes_TestXPassTextColor=message OutputPanes_TestSkipTextColor=message OutputPanes_TestWarnTextColor=warning OutputPanes_TestFatalTextColor=error OutputPanes_TestDebugTextColor=text OutputPaneButtonFlashColor=error OutputPaneToggleButtonTextColorChecked=fancyBarsNormalTextColor OutputPaneToggleButtonTextColorUnchecked=fancyBarsNormalTextColor Debugger_LogWindow_LogInput=ff56b6c2 Debugger_LogWindow_LogStatus=message Debugger_LogWindow_LogTime=error Debugger_WatchItem_ValueNormal=text Debugger_WatchItem_ValueInvalid=textDisabled Debugger_WatchItem_ValueChanged=error Debugger_Breakpoint_TextMarkColor=message Welcome_TextColor=text Welcome_ForegroundPrimaryColor=text Welcome_ForegroundSecondaryColor=text Welcome_BackgroundColor=normalBackground Welcome_ButtonBackgroundColor=normalBackground Welcome_DividerColor=splitter Welcome_HoverColor=hoverBackground Welcome_LinkColor=textColorLink Welcome_DisabledLinkColor=textDisabled Timeline_TextColor=text Timeline_BackgroundColor1=normalBackground Timeline_BackgroundColor2=shadowBackground Timeline_DividerColor=splitter Timeline_HighlightColor=selectedBackground Timeline_PanelBackgroundColor=alternateBackground Timeline_PanelHeaderColor=normalBackground Timeline_HandleColor=ff4b5362 Timeline_RangeColor=selectedBackground VcsBase_FileStatusUnknown_TextColor=text VcsBase_FileAdded_TextColor=success VcsBase_FileModified_TextColor=warning VcsBase_FileDeleted_TextColor=error VcsBase_FileRenamed_TextColor=message VcsBase_FileUnmerged_TextColor=error Bookmarks_TextMarkColor=message TextEditor_SearchResult_ScrollBarColor=success TextEditor_CurrentLine_ScrollBarColor=message ProjectExplorer_TaskError_TextMarkColor=error ProjectExplorer_TaskWarn_TextMarkColor=warning CodeModel_Error_TextMarkColor=error CodeModel_Warning_TextMarkColor=warning QmlDesigner_BackgroundColor=normalBackground QmlDesigner_HighlightColor=selectedBackground QmlDesigner_FormEditorSelectionColor=message QmlDesigner_FormEditorForegroundColor=normalBackground QmlDesigner_BackgroundColorDarkAlternate=shadowBackground QmlDesigner_BackgroundColorDarker=splitter QmlDesigner_BorderColor=splitter QmlDesigner_ButtonColor=normalBackground QmlDesigner_TabDark=shadowBackground QmlDesigner_TabLight=text QmlDesigner_FormeditorBackgroundColor=normalBackground QmlDesigner_AlternateBackgroundColor=alternateBackground QmlDesigner_ScrollBarHandleColor=ff4b5362 PaletteWindow=shadowBackground PaletteWindowText=text PaletteBase=normalBackground PaletteAlternateBase=alternateBackground PaletteButton=shadowBackground PaletteBrightText=error PaletteText=text PaletteButtonText=text PaletteButtonTextDisabled=textDisabled PaletteToolTipBase=hoverBackground PaletteHighlight=selectedBackground PaletteDark=shadowBackground PaletteHighlightedText=selectedBackgroundText PaletteToolTipText=text PaletteLink=textColorLink PaletteLinkVisited=textColorLinkVisited PaletteWindowDisabled=backgroundColorDisabled PaletteWindowTextDisabled=textDisabled PaletteBaseDisabled=backgroundColorDisabled PaletteTextDisabled=textDisabled [Flags] ComboBoxDrawTextShadow=false DerivePaletteFromTheme=true DrawIndicatorBranch=true DrawSearchResultWidgetFrame=false DrawTargetSelectorBottom=false DrawToolBarHighlights=false DrawToolBarBorders=false ApplyThemePaletteGlobally=true FlatToolBars=true FlatSideBarIcons=true FlatProjectsMode=true FlatMenuBar=true ToolBarIconShadow=true WindowColorAsBase=true DarkUserInterface=true [Gradients] DetailsWidgetHeaderGradient\\1\\color=normalBackground DetailsWidgetHeaderGradient\\1\\pos=1 DetailsWidgetHeaderGradient\\size=1 ","permalink":"//localhost:1313/posts/qt%E4%B8%BB%E9%A2%98onedark%E8%AE%BE%E7%BD%AE/","summary":"\u003cp\u003e参考链接:  CSDN  \u003ca href=\"https://blog.csdn.net/qq_41980754/article/details/119861293\"\u003eQt Creator打造VScode one dark pro主题配色\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e代码部分\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\n\u0026lt;style-scheme version=\u0026#34;1.0\u0026#34; name=\u0026#34;One Dark\u0026#34;\u0026gt;\n  \u0026lt;style name=\u0026#34;Text\u0026#34; foreground=\u0026#34;#abb2bf\u0026#34; background=\u0026#34;#282c34\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Link\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Selection\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LineNumber\u0026#34; foreground=\u0026#34;#4b5363\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;SearchResult\u0026#34; background=\u0026#34;#324365\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;SearchScope\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Parentheses\u0026#34; underlineColor=\u0026#34;#61afef\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;ParenthesesMismatch\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;AutoComplete\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;CurrentLine\u0026#34; background=\u0026#34;#3a3f4b\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;CurrentLineNumber\u0026#34; foreground=\u0026#34;#777c87\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Occurrences\u0026#34; background=\u0026#34;#324365\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Occurrences.Unused\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;DashUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Occurrences.Rename\u0026#34; background=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Number\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;String\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Type\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Local\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Global\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Field\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Static\u0026#34; foreground=\u0026#34;#61afef\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;VirtualMethod\u0026#34; foreground=\u0026#34;#61afef\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Function\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Keyword\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;PrimitiveType\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Operator\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Overloaded Operator\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Punctuation\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Preprocessor\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Label\u0026#34; foreground=\u0026#34;#e06c75\u0026#34; bold=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Comment\u0026#34; foreground=\u0026#34;#5c6370\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Doxygen.Comment\u0026#34; foreground=\u0026#34;#5c6370\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Doxygen.Tag\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;VisualWhitespace\u0026#34; foreground=\u0026#34;#3c4049\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlLocalId\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlExternalId\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlTypeId\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlRootObjectProperty\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlScopeObjectProperty\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlExternalObjectProperty\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;JsScopeVar\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;JsImportVar\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;JsGlobalVar\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlStateName\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Binding\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DisabledCode\u0026#34; foreground=\u0026#34;#5c6370\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;AddedLine\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;RemovedLine\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffFile\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffLocation\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffFileLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#e5c07b\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffContextLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#56b6c2\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffSourceLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#be5046\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffSourceChar\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffDestLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#789353\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffDestChar\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#98c379\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogChangeLine\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogAuthorName\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogCommitDate\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogCommitHash\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogCommitSubject\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogDecoration\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Warning\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;WarningContext\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;DotLine\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Error\u0026#34; underlineColor=\u0026#34;#e06c75\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;ErrorContext\u0026#34; underlineColor=\u0026#34;#e06c75\u0026#34; underlineStyle=\u0026#34;DotLine\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Declaration\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;FunctionDefinition\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;OutputArgument\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LastStyleSentinel\u0026#34;/\u0026gt;\n\u0026lt;/style-scheme\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e主题设置\u003c/p\u003e","title":"Qt主题oneDark设置"},{"content":"在 Go 语言中，cnt := [2]int{} cnt 是一个变量，使用短变量声明 (:=) 定义。 [2]int 表示这是一个长度为 2 的 数组，数组的元素类型是 int。 {} 表示这个数组被初始化为零值，也就是所有的元素都被初始化为整型的零值 0。 示例代码 package main import \u0026#34;fmt\u0026#34; func main() { cnt := [2]int{} fmt.Println(cnt) // 输出: [0 0] } 细节 数组是固定长度的，[2]int 表示它的长度为 2，如果需要动态长度的集合，可以使用切片 ([]int)。\n如果你想明确初始化数组的值，可以写成这样：\ncnt := [2]int{1, 2} fmt.Println(cnt) // 输出: [1 2] 如果只部分初始化，未赋值的部分会使用零值：\ncnt := [2]int{1} fmt.Println(cnt) // 输出: [1 0] range循环时需要注意点 错误的代码：\nbanSet := make(map[string]struct{}) for word := range bannedWords { banSet[word] = struct{}{} } 是不正确的，因为 range 关键字在 Go 语言中用于遍历集合（如数组、切片、映射、字符串等）时，会同时返回索引和值。\n在你的写法中，for word := range bannedWords 只返回了 bannedWords 的索引（即数组或切片的索引），而不是你实际想要的单词。\n正确的写法应该是：\nbanSet := make(map[string]struct{}) for _, word := range bannedWords { banSet[word] = struct{}{} } 解释： for _, word := range bannedWords： range bannedWords 会返回两个值：第一个是索引，第二个是 bannedWords 中的每个元素（即单词）。 你用 _ 来忽略索引，因为你只关心单词 word。 为什么不能直接使用 for word := range bannedWords？ range bannedWords 实际上返回的是索引和值，for word := range bannedWords 只取了第一个值，也就是索引，而不是你期望的单词。 你需要第二个值（单词）来填充 banSet，因此你必须使用 for _, word := range bannedWords。 总结： 你需要在遍历 bannedWords 时获取每个单词的值，因此必须用 for _, word := range bannedWords。\n","permalink":"//localhost:1313/posts/go%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/","summary":"\u003ch1 id=\"在-go-语言中cnt--2int\"\u003e在 Go 语言中，\u003ccode\u003ecnt := [2]int{}\u003c/code\u003e\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecnt\u003c/code\u003e 是一个变量，使用短变量声明 (\u003ccode\u003e:=\u003c/code\u003e) 定义。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e[2]int\u003c/code\u003e 表示这是一个长度为 \u003ccode\u003e2\u003c/code\u003e 的 \u003cstrong\u003e数组\u003c/strong\u003e，数组的元素类型是 \u003ccode\u003eint\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e{}\u003c/code\u003e 表示这个数组被初始化为零值，也就是所有的元素都被初始化为整型的零值 \u003ccode\u003e0\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"示例代码\"\u003e示例代码\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003ecnt\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecnt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 输出: [0 0]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"细节\"\u003e细节\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e数组是固定长度的，\u003ccode\u003e[2]int\u003c/code\u003e 表示它的长度为 \u003ccode\u003e2\u003c/code\u003e，如果需要动态长度的集合，可以使用切片 (\u003ccode\u003e[]int\u003c/code\u003e)。\u003c/p\u003e","title":"Go的使用记录"},{"content":"Interstellar 星际穿越 My favorite movie, without a doubt.\n我最爱的电影。\n","permalink":"//localhost:1313/posts/interstellar/","summary":"\u003ch1 id=\"interstellar-星际穿越\"\u003eInterstellar 星际穿越\u003c/h1\u003e\n\u003cp\u003eMy favorite movie, \u003cstrong\u003ewithout a doubt\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e我最爱的电影。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20241009_233455.207.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20241009_233455.207.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20240917_220015.066.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20240917_220015.066.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20241019_170922.638.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20241019_170922.638.png\"\u003e\u003c/p\u003e","title":"Interstellar"},{"content":" 自我介绍 python有过深入了解吗？ 面向过程和面向对象哪一块用的比较多？那你用面向对象做了哪些工作 说一下C++的编译过程，编译过程中宏定义和const的区别是什么？在大型工程中用const好一些还是宏定义好一些？ 内联函数有了解过吗？讲一下。 虚函数 内联函数和虚函数谁的执行效率更快？为什么？那静态函数呢 静态函数和普通函数运行效率有什么差距吗？ 进程和线程？进程内存分布讲一下 堆和栈的区别 堆里面申请内存有哪些方式？new和malloc的区别 在构造函数里面能调用虚函数吗？为什么？如果子类在构造函数中调用了父类的虚函数会发生什么？ 在析构函数里面能不能抛出异常？如果抛出会发生什么 C++内存泄漏有哪些？一个类既不继承也不是子类，内部也没有虚函数，那他的析构函数需要声明为虚函数吗 C++发生内存泄漏有什么好的办法来解决这个问题？ 智能指针的实现原理是什么？循环引用如何解决 TCP和UDP的区别？ 平时玩游戏吗？LOL。你觉得LOL的战斗逻辑是如何发送到客户端上的？TCP还是UDP 平时有了解过帧同步和状态同步吗？ 设计模式有了解过吗？单例模式主要用于什么情况 比较大型的MVCC了解过吗 如果让你来设计一个LOL商城系统，有一些商城的数据，你会如何用代码来建这个商城？ 有1W个数字，找出最大的10个数字 O(N)的排序有哪些？讲一下基数排序和桶排序 20G的字符串，只有4G的内存，找到出现最多的前10个的字符串？ GPU的渲染(管线)了解过吗？图形学有学过吗？ 你为什么会选择来做游戏？更倾向于做客户端还是服务器的？ dota了解吗 给我简单介绍了一下帧同步和状态同步，然后有一个moba的游戏，使用帧同步还是状态同步？ 玩游戏时掉帧后恢复是使用的帧同步还是状态同步？ 提问环节：比较关注实习生的哪些技能和知识？核心的还是学习和反应能力，反应快的，有面向对象的大工程的经验。 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0421%E7%BD%91%E6%98%93%E4%BA%92%E5%A8%B1/","summary":"\u003col\u003e\n\u003cli\u003e自我介绍\u003c/li\u003e\n\u003cli\u003epython有过深入了解吗？\u003c/li\u003e\n\u003cli\u003e面向过程和面向对象哪一块用的比较多？那你用面向对象做了哪些工作\u003c/li\u003e\n\u003cli\u003e说一下C++的编译过程，编译过程中宏定义和const的区别是什么？在大型工程中用const好一些还是宏定义好一些？\u003c/li\u003e\n\u003cli\u003e内联函数有了解过吗？讲一下。\u003c/li\u003e\n\u003cli\u003e虚函数\u003c/li\u003e\n\u003cli\u003e内联函数和虚函数谁的执行效率更快？为什么？那静态函数呢\u003c/li\u003e\n\u003cli\u003e静态函数和普通函数运行效率有什么差距吗？\u003c/li\u003e\n\u003cli\u003e进程和线程？进程内存分布讲一下\u003c/li\u003e\n\u003cli\u003e堆和栈的区别\u003c/li\u003e\n\u003cli\u003e堆里面申请内存有哪些方式？new和malloc的区别\u003c/li\u003e\n\u003cli\u003e在构造函数里面能调用虚函数吗？为什么？如果子类在构造函数中调用了父类的虚函数会发生什么？\u003c/li\u003e\n\u003cli\u003e在析构函数里面能不能抛出异常？如果抛出会发生什么\u003c/li\u003e\n\u003cli\u003eC++内存泄漏有哪些？一个类既不继承也不是子类，内部也没有虚函数，那他的析构函数需要声明为虚函数吗\u003c/li\u003e\n\u003cli\u003eC++发生内存泄漏有什么好的办法来解决这个问题？\u003c/li\u003e\n\u003cli\u003e智能指针的实现原理是什么？循环引用如何解决\u003c/li\u003e\n\u003cli\u003eTCP和UDP的区别？\u003c/li\u003e\n\u003cli\u003e平时玩游戏吗？LOL。你觉得LOL的战斗逻辑是如何发送到客户端上的？TCP还是UDP\u003c/li\u003e\n\u003cli\u003e平时有了解过帧同步和状态同步吗？\u003c/li\u003e\n\u003cli\u003e设计模式有了解过吗？单例模式主要用于什么情况\u003c/li\u003e\n\u003cli\u003e比较大型的MVCC了解过吗\u003c/li\u003e\n\u003cli\u003e如果让你来设计一个LOL商城系统，有一些商城的数据，你会如何用代码来建这个商城？\u003c/li\u003e\n\u003cli\u003e有1W个数字，找出最大的10个数字\u003c/li\u003e\n\u003cli\u003eO(N)的排序有哪些？讲一下基数排序和桶排序\u003c/li\u003e\n\u003cli\u003e20G的字符串，只有4G的内存，找到出现最多的前10个的字符串？\u003c/li\u003e\n\u003cli\u003eGPU的渲染(管线)了解过吗？图形学有学过吗？\u003c/li\u003e\n\u003cli\u003e你为什么会选择来做游戏？更倾向于做客户端还是服务器的？\u003c/li\u003e\n\u003cli\u003edota了解吗\u003c/li\u003e\n\u003cli\u003e给我简单介绍了一下帧同步和状态同步，然后有一个moba的游戏，使用帧同步还是状态同步？\u003c/li\u003e\n\u003cli\u003e玩游戏时掉帧后恢复是使用的帧同步还是状态同步？\u003c/li\u003e\n\u003cli\u003e提问环节：比较关注实习生的哪些技能和知识？核心的还是学习和反应能力，反应快的，有面向对象的大工程的经验。\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0421网易互娱"},{"content":"2020.4.18\n一面 50min 在C++里面我们什么时候会把析构函数写为虚函数呢 C++中引用和指针有什么样的区别 右值引用，移动语义和完美转发在C++11中起到的作用 简单介绍一下RAII这个机制 简单介绍一下http请求和响应的结构 状态码分为几个类别 301和302这两个状态码有什么样的区别呢 断点续传的功能206 服务器什么时候返回304这个状态码，需要带上一些什么样的特征呢 能简单的介绍一下chunk transfer是一种什么样的传输方式呢 简单介绍一下linux下常用的IO多路复用模型 用epoll实现一个server时浏览器主动关闭了一个连接那么epoll收到的是什么事件呢 简单介绍一下惊群的现象是一个什么样的现象，有什么的办法解决这个现象呢 linux下单进程最大连接数受到哪些因素的限制呢 time_wait起到的作用，有什么办法降低这种状态的数量 编程题：编辑距离 二面 60min 讲一下进程和线程的区别 分页和分段的区别是什么 死锁和如何避免死锁 介绍一下TCP协议和UDP协议的区别 客户端发起连接以后，突然断电了，客户端断开了连接，会产生什么影响 TCP半连接状态解释一下 https密钥交互过程 close_wait的状态 499状态码 myisam和innoDB的区别 B+的调整过程 联合索引和最左原则 我们有哪些分表原则，在什么情况下使用这些分表原则 深浅拷贝解释一下，深浅拷贝的效率上有什么区别呢 栈溢出的原因 讲一下堆和栈的区别 编程题：判环和leetcode原题简化路径 三面 30min 输入网址后发生了什么 我经常会用一些CDN进行静态和动态的加速这个了解吗 DNS解析的时候DNS污染是怎么回事 mysql在分表时是怎么做的 mysql出现慢查询都有哪些原因 什么样的sql会产生IO瓶颈，什么样的sql会产生CPU瓶颈 TCP改成两次握手会产生什么现象，会有问题吗 http和https的区别是什么 编程题：矩阵中最长递增路径 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0418%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/","summary":"\u003cp\u003e2020.4.18\u003c/p\u003e\n\u003ch2 id=\"一面-50min\"\u003e一面 50min\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e在C++里面我们什么时候会把析构函数写为虚函数呢\u003c/li\u003e\n\u003cli\u003eC++中引用和指针有什么样的区别\u003c/li\u003e\n\u003cli\u003e右值引用，移动语义和完美转发在C++11中起到的作用\u003c/li\u003e\n\u003cli\u003e简单介绍一下RAII这个机制\u003c/li\u003e\n\u003cli\u003e简单介绍一下http请求和响应的结构\u003c/li\u003e\n\u003cli\u003e状态码分为几个类别\u003c/li\u003e\n\u003cli\u003e301和302这两个状态码有什么样的区别呢\u003c/li\u003e\n\u003cli\u003e断点续传的功能206\u003c/li\u003e\n\u003cli\u003e服务器什么时候返回304这个状态码，需要带上一些什么样的特征呢\u003c/li\u003e\n\u003cli\u003e能简单的介绍一下chunk transfer是一种什么样的传输方式呢\u003c/li\u003e\n\u003cli\u003e简单介绍一下linux下常用的IO多路复用模型\u003c/li\u003e\n\u003cli\u003e用epoll实现一个server时浏览器主动关闭了一个连接那么epoll收到的是什么事件呢\u003c/li\u003e\n\u003cli\u003e简单介绍一下惊群的现象是一个什么样的现象，有什么的办法解决这个现象呢\u003c/li\u003e\n\u003cli\u003elinux下单进程最大连接数受到哪些因素的限制呢\u003c/li\u003e\n\u003cli\u003etime_wait起到的作用，有什么办法降低这种状态的数量\u003c/li\u003e\n\u003cli\u003e编程题：编辑距离\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"二面-60min\"\u003e二面 60min\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e讲一下进程和线程的区别\u003c/li\u003e\n\u003cli\u003e分页和分段的区别是什么\u003c/li\u003e\n\u003cli\u003e死锁和如何避免死锁\u003c/li\u003e\n\u003cli\u003e介绍一下TCP协议和UDP协议的区别\u003c/li\u003e\n\u003cli\u003e客户端发起连接以后，突然断电了，客户端断开了连接，会产生什么影响\u003c/li\u003e\n\u003cli\u003eTCP半连接状态解释一下\u003c/li\u003e\n\u003cli\u003ehttps密钥交互过程\u003c/li\u003e\n\u003cli\u003eclose_wait的状态\u003c/li\u003e\n\u003cli\u003e499状态码\u003c/li\u003e\n\u003cli\u003emyisam和innoDB的区别\u003c/li\u003e\n\u003cli\u003eB+的调整过程\u003c/li\u003e\n\u003cli\u003e联合索引和最左原则\u003c/li\u003e\n\u003cli\u003e我们有哪些分表原则，在什么情况下使用这些分表原则\u003c/li\u003e\n\u003cli\u003e深浅拷贝解释一下，深浅拷贝的效率上有什么区别呢\u003c/li\u003e\n\u003cli\u003e栈溢出的原因\u003c/li\u003e\n\u003cli\u003e讲一下堆和栈的区别\u003c/li\u003e\n\u003cli\u003e编程题：判环和leetcode原题简化路径\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"三面-30min\"\u003e三面 30min\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e输入网址后发生了什么\u003c/li\u003e\n\u003cli\u003e我经常会用一些CDN进行静态和动态的加速这个了解吗\u003c/li\u003e\n\u003cli\u003eDNS解析的时候DNS污染是怎么回事\u003c/li\u003e\n\u003cli\u003emysql在分表时是怎么做的\u003c/li\u003e\n\u003cli\u003emysql出现慢查询都有哪些原因\u003c/li\u003e\n\u003cli\u003e什么样的sql会产生IO瓶颈，什么样的sql会产生CPU瓶颈\u003c/li\u003e\n\u003cli\u003eTCP改成两次握手会产生什么现象，会有问题吗\u003c/li\u003e\n\u003cli\u003ehttp和https的区别是什么\u003c/li\u003e\n\u003cli\u003e编程题：矩阵中最长递增路径\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0418字节跳动"},{"content":"腾讯深圳4月8号 在你看来epoll是个什么样的东西，边沿触发和水平触发的模式 epoll的通知机制 线程和进程的区别 多线程和多进程的选择上以什么作为考量 堆的数据结构（可能应该写一个类，然后封装一些函数） C++内存模型 static会被放在导出符号表里吗 网络层和传输层最大的区别是什么 TCP头部有哪些 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0408%E8%85%BE%E8%AE%AF%E6%B7%B1%E5%9C%B3/","summary":"\u003ch2 id=\"腾讯深圳4月8号\"\u003e腾讯深圳4月8号\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e在你看来epoll是个什么样的东西，边沿触发和水平触发的模式\u003c/li\u003e\n\u003cli\u003eepoll的通知机制\u003c/li\u003e\n\u003cli\u003e线程和进程的区别\u003c/li\u003e\n\u003cli\u003e多线程和多进程的选择上以什么作为考量\u003c/li\u003e\n\u003cli\u003e堆的数据结构（可能应该写一个类，然后封装一些函数）\u003c/li\u003e\n\u003cli\u003eC++内存模型\u003c/li\u003e\n\u003cli\u003estatic会被放在导出符号表里吗\u003c/li\u003e\n\u003cli\u003e网络层和传输层最大的区别是什么\u003c/li\u003e\n\u003cli\u003eTCP头部有哪些\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0408腾讯深圳"},{"content":"腾讯成都 自我介绍 详细讲一下你的项目 并发量和数据传输效率 TCP拥塞机制 进程有几种状态 事务要满足几个特性 B+树特征是什么样的 B+树查询过程 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0402%E8%85%BE%E8%AE%AF%E6%88%90%E9%83%BD/","summary":"\u003ch2 id=\"腾讯成都\"\u003e腾讯成都\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e自我介绍\u003c/li\u003e\n\u003cli\u003e详细讲一下你的项目\u003c/li\u003e\n\u003cli\u003e并发量和数据传输效率\u003c/li\u003e\n\u003cli\u003eTCP拥塞机制\u003c/li\u003e\n\u003cli\u003e进程有几种状态\u003c/li\u003e\n\u003cli\u003e事务要满足几个特性\u003c/li\u003e\n\u003cli\u003eB+树特征是什么样的\u003c/li\u003e\n\u003cli\u003eB+树查询过程\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0402腾讯成都"},{"content":" 自我介绍 项目web服务器提问(跟socket相关的事件有哪些？epoll监听了socket哪些事件？用的什么模式水平触发还是边沿触发模式？你用的是阻塞IO还是非阻塞IO，为什么用非阻塞?) C++多态是怎么实现的？答到虚函数表指针就就结束了 构造函数可以是虚函数吗？不可以，为什么？ 析构函数可以是虚函数吗？可以。根据我回答扩展的一个问题：父类析构不是虚函数，他的子类有一个父类指针指向子类的对象，然后我释放这个父类指针的时候会调用子类的虚构函数吗？不会。我觉得应该应该回答继承时的虚构顺序，当时没想起。如果不会调用析构函数，子类会被释放吗？不会。面试官主动放弃该话题。 简单说一下new/delete和malloc和free C++11用过哪些？auto, unordered_map, 智能指针 TCP黏包问题如何解决？ TCP的拥塞控制？我答了拥塞窗口。他想听慢重传和快恢复 TIME_WAIT状态解释一下，如何解决这个问题？端口复用 A和B建立连接以后，A拔掉网线,那这个时候B和A的连接还在吗？哪一方会发现呢？不要答心跳包。面试官主动放弃该话题。 说一下多进程和多线程的区别。线程共享哪些内容。 又TM扯到项目中的线程数了。线程的模型是什么样的。 还有什么想问我的？问了他这个岗位做啥的。面向企业的视频会议。 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0306cvte/","summary":"\u003col\u003e\n\u003cli\u003e自我介绍\u003c/li\u003e\n\u003cli\u003e项目web服务器提问(跟socket相关的事件有哪些？epoll监听了socket哪些事件？用的什么模式水平触发还是边沿触发模式？你用的是阻塞IO还是非阻塞IO，为什么用非阻塞?)\u003c/li\u003e\n\u003cli\u003eC++多态是怎么实现的？答到虚函数表指针就就结束了\u003c/li\u003e\n\u003cli\u003e构造函数可以是虚函数吗？不可以，为什么？\u003c/li\u003e\n\u003cli\u003e析构函数可以是虚函数吗？可以。根据我回答扩展的一个问题：父类析构不是虚函数，他的子类有一个父类指针指向子类的对象，然后我释放这个父类指针的时候会调用子类的虚构函数吗？不会。我觉得应该应该回答继承时的虚构顺序，当时没想起。如果不会调用析构函数，子类会被释放吗？不会。面试官主动放弃该话题。\u003c/li\u003e\n\u003cli\u003e简单说一下new/delete和malloc和free\u003c/li\u003e\n\u003cli\u003eC++11用过哪些？auto, unordered_map, 智能指针\u003c/li\u003e\n\u003cli\u003eTCP黏包问题如何解决？\u003c/li\u003e\n\u003cli\u003eTCP的拥塞控制？我答了拥塞窗口。他想听慢重传和快恢复\u003c/li\u003e\n\u003cli\u003eTIME_WAIT状态解释一下，如何解决这个问题？端口复用\u003c/li\u003e\n\u003cli\u003eA和B建立连接以后，A拔掉网线,那这个时候B和A的连接还在吗？哪一方会发现呢？不要答心跳包。面试官主动放弃该话题。\u003c/li\u003e\n\u003cli\u003e说一下多进程和多线程的区别。线程共享哪些内容。\u003c/li\u003e\n\u003cli\u003e又TM扯到项目中的线程数了。线程的模型是什么样的。\u003c/li\u003e\n\u003cli\u003e还有什么想问我的？问了他这个岗位做啥的。面向企业的视频会议。\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0306CVTE"},{"content":"webbench 测压软件 最高并发3W\nwebbench做测试时自身也会消耗CPU和内存资源，为了测试准确，需要将webbench安装在别的服务器上。\ntar -xzvf webbench-1.5.tar.gz cd webbench-1.5 apt-get install ctags make \u0026amp;\u0026amp; make install 测试\nwebbench -c 1000 -t 5 http://127.0.0.1:9999/index.html //1000个客户端 5秒钟时间 github git clone https://github.com/SYaoJun/WebServer.git //把仓库中的内容拷贝到linux系统中 回调函数 函数指针本身是指针变量，指向某个函数的入口地址。\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; int run(void(*step)(void)){ //回调函数的传参是声明的格式 int cnt = 0; while(1){ if(step != NULL) step(); cnt++; sleep(1); } return 0; } void cb(void){ //回调函数 puts(\u0026#34;记秒到时\u0026#34;); } int main(){ run(cb); return 0; } gcc cb.c main.c 信号函数 raise(SIGSEGV) //自己给自己进程发送信号 11 abort() //终止当前进程 测试1s打印多少个数\nalarm函数\n#include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main(){ alarm(1); //计时1s 到时后内核发送一个sigalarm信号终止 for(int i = 0;;i++) printf(\u0026#34;%d\\n\u0026#34;, i); return 0; } setitimer函数\n#include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;sys/time.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int my_alarm(int sec){ struct itimerval it, oldit; it.it_value.tv_sec = sec; //定时长度 it.it_value.tv_usec = 0; //微秒 it.it_interval.tv_sec = 0; //周期定时 it.it_interval.tv_usec = 0; int ret = setitimer(ITIMER_REAL, \u0026amp;it, \u0026amp;oldit); if(ret == -1){ perror(\u0026#34;setitimer error\u0026#34;); exit(1); } return oldit.it_value.tv_sec; } int main(){ my_alarm(1); //计时1s 到时后内核发送一个sigalarm信号终止 for(int i = 0;;i++) printf(\u0026#34;%d\\n\u0026#34;, i); return 0; } 创建线程 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; void* func(void* arg){ //必须为这种类型 printf(\u0026#34;in thread : thread id: %lu, process id: %u\\n\u0026#34;, pthread_self(), getpid()); } int main(void){ //创建线程 pthread_t tid; //重命名的unsigned long 类型 //创建线程API pthread_create(arg1, agr2, arg3, arg4) //arg1: 传入的线程tid地址 //arg2: 线程属性 通常设置为NULL //arg3: 线程执行的任务 函数指针 //arg4: 参数3传递的参数 printf(\u0026#34;in main 1 : thread id: %lu, process id: %u\\n\u0026#34;, pthread_self(), getpid()); int ret = pthread_create(\u0026amp;tid, NULL, func, NULL); if(ret != 0){ perror(\u0026#34;pthread_create error\u0026#34;); exit(1); } sleep(1); //主线程 等待子线程执行完毕 printf(\u0026#34;in main 2 : thread id: %lu, process id: %u\\n\u0026#34;, pthread_self(), getpid()); return 0; } 创建多个子线程 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; void* func(void* arg){ //必须为这种类型 int i = (int)arg; printf(\u0026#34;%dth thread id: %lu, process id: %u\\n\u0026#34;, i, pthread_self(), getpid()); } int main(void){ //创建线程 pthread_t tid; //重命名的unsigned long 类型 //创建线程API pthread_create(arg1, agr2, arg3, arg4) //arg1: 传入的线程tid地址 //arg2: 线程属性 通常设置为NULL //arg3: 线程执行的任务 函数指针 //arg4: 参数3传递的参数 int n = 5, ret; for(int i = 0; i \u0026lt; n; i++){ ret = pthread_create(\u0026amp;tid, NULL, func, (void*)i); if(ret != 0){ fprintf(stderr, \u0026#34;%s pthread_create error\u0026#34;, strerror(ret)); exit(1); } pthread_detach(tid); } sleep(n); //主线程 等待子线程执行完毕 return 0; } mysql使用 mysql在linux环境下结合C语言的使用\nsudo apt-get install mysql-client mysql-server //先安装mysql sudo apt-get install libmysql++-dev //安装库 先启动mysql库 设置好密码 然后使用c程序连接\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;mysql/mysql.h\u0026gt; int main(){ MYSQL mysql; MYSQL_RES *res; MYSQL_ROW row; int i, j; char *query = \u0026#34;select * from people;\u0026#34;; mysql_init(\u0026amp;mysql); //初始化 if(!mysql_real_connect(\u0026amp;mysql,\u0026#34;localhost\u0026#34;,\u0026#34;root\u0026#34;,\u0026#34;password\u0026#34;,\u0026#34;yaojun\u0026#34;,3306,NULL,0)){ //连接数据库 printf(\u0026#34;Error in connecting\u0026#34;); } if(mysql_query(\u0026amp;mysql,query)){ //查询数据库 printf(\u0026#34;Error in querying\u0026#34;); } res = mysql_store_result(\u0026amp;mysql); while(row = mysql_fetch_row(res)){ //读取数据库中的一行 for(i=0;i\u0026lt;mysql_num_fields(res);i++){ fprintf(stdout,\u0026#34;%s \u0026#34;,row[i]); } printf(\u0026#34;\\n\u0026#34;); } mysql_free_result(res); //释放 mysql_close(\u0026amp;mysql); //关闭 return 0; } 编译的命令\ngcc sql.c -lmysqlclient //生成a.out文件 执行 指针和数组 char str[]=\u0026#34;hello\u0026#34;; //字符串含\\0 6字节 char *url =\u0026#34;hello\u0026#34;; //指针64位机 8字节 cout\u0026lt;\u0026lt;sizeof(str)\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;sizeof(url)\u0026lt;\u0026lt;endl; CGI服务器 原理：输出到某个文件描述符上的内容直接发送到客户端连接对应的socket上，此处我们模拟了把服务器端输出到标准输出的内容，直接发送给客户端。\n测试\ntelnet 127.0.0.1 6666 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;netinet/in.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; //命令行参数指定IP和端口 int main(int argc, char *argv[]){ if(argc \u0026lt;= 2){ printf(\u0026#34;at least 3 arguments: file ip port, but you give %d\\n\u0026#34;, argc); return 1; } const char* ip = argv[1]; int port = atoi(argv[2]); int lfd, cfd, ret; struct sockaddr_in serv_addr, clie_addr; lfd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 assert(lfd \u0026gt;= 0); serv_addr.sin_family = AF_INET; serv_addr.sin_port = htons(port); inet_pton(AF_INET, ip, \u0026amp;serv_addr.sin_addr); //端口复用 此处没有卵用 int opt = 1; setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); ret = bind(lfd, (struct sockaddr *)\u0026amp;serv_addr, sizeof(serv_addr) ); assert(ret != -1); ret = listen(lfd, 128); //最大同时连接数 assert(ret != -1); socklen_t clie_addr_len; //套接字长度 clie_addr_len = sizeof(clie_addr); cfd = accept(lfd, (struct sockaddr*)\u0026amp;clie_addr, \u0026amp;clie_addr_len ); if(cfd \u0026lt; 0){ printf(\u0026#34;accept error: %d\u0026#34;, errno); }else{ close(STDOUT_FILENO); dup(cfd); //创建一个新的文件描述符 该文件描述符和原文件描述符指向相同的文件 管道和网络连接 printf(\u0026#34;good night! daisy!\\n\u0026#34;); close(cfd); } close(lfd); return 0; } EPOLLONESHOT事件 一个socket上的某个事件被触发多次，可能产生2个不同的线程处理同一个socket。我们期望的是一个socket在任一时刻都只被一个线程处理。对于注册了EPOLLONESHOT事件的文件描述符，操做系统最多触发其上注册的一个可读可写或者异常事件一次。注册了EPOLLONESHOT事件的socket一旦被某个线程处理完毕，应立即重置这个socket上的EPOLLONESHOT事件。\n监听socket不应设置为EPOLLONESHOT。\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;netinet/in.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;sys/epoll.h\u0026gt; #define MAX_SIZE 1024 //自定义的结构体 struct fds{ int epollfd; int sockfd; }; //设置文件描述符为非阻塞 void setnonblocking(int fd){ int old_option = fcntl(fd, F_GETFL); int new_option = old_option | O_NONBLOCK; fcntl(fd, F_SETFL, new_option); } //添加到epoll内核事件表中 void addfd(int epollfd, int fd, bool oneshot){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET; if(oneshot){ event.events |= EPOLLONESHOT; } epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, \u0026amp;event); //挂到红黑树上 setnonblocking(fd); //设置非阻塞 主要用在读写上 } //重置EPOLLONESHOT事件 void reset_oneshot(int epollfd, int fd){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET | EPOLLONESHOT; epoll_ctl(epollfd, EPOLL_CTL_MOD, fd, \u0026amp;event); //修改注册事件 } //工作线程 void* worker(void* arg){ int sockfd = ((fds*)arg)-\u0026gt;sockfd; int epollfd = ((fds*)arg)-\u0026gt;epollfd; printf(\u0026#34;start new thread to receive data on fd: %d\\n\u0026#34;, sockfd); char buf[MAX_SIZE]; memset(buf, \u0026#39;\\0\u0026#39;, MAX_SIZE); //循环读取sockfd上的数据 直到收到EAGAIN while(1){ int ret = recv(sockfd, buf, MAX_SIZE-1, 0); if(ret == 0){ close(sockfd); printf(\u0026#34;foreiner closed the connection\\n\u0026#34;); break; }else if(ret \u0026lt; 0){ if(errno == EAGAIN){ reset_oneshot(epollfd ,sockfd); printf(\u0026#34;read later\\n\u0026#34;); break; } }else{ printf(\u0026#34;get connection: %s\\n\u0026#34;, buf); //休眠5s模拟数据处理过程 sleep(5); } } printf(\u0026#34;end thread receiving data on fd: %d\\n\u0026#34;, sockfd); } //命令行参数指定IP和端口 int main(int argc, char *argv[]){ if(argc \u0026lt;= 2){ printf(\u0026#34;at least 3 arguments: file ip port, but you give %d\\n\u0026#34;, argc); return 1; } const char* ip = argv[1]; int port = atoi(argv[2]); int lfd, cfd, ret; struct sockaddr_in serv_addr, clie_addr; lfd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 assert(lfd \u0026gt;= 0); serv_addr.sin_family = AF_INET; serv_addr.sin_port = htons(port); inet_pton(AF_INET, ip, \u0026amp;serv_addr.sin_addr); //端口复用 此处没有卵用 int opt = 1; setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); ret = bind(lfd, (struct sockaddr *)\u0026amp;serv_addr, sizeof(serv_addr) ); assert(ret != -1); ret = listen(lfd, 128); //最大同时连接数 assert(ret != -1); epoll_event events[MAX_SIZE]; //返回的数组上限 int epollfd = epoll_create(10); assert(epollfd != -1); //注意监听的套接字不能设置为oneshot addfd(epollfd, lfd, false); //挂上红黑树监听 printf(\u0026#34;addfd\\n\u0026#34;); while(1){ ret = epoll_wait(epollfd, events, MAX_SIZE, -1); //永远不超时 if(ret \u0026lt; 0){ printf(\u0026#34;epoll failure\\n\u0026#34;); break; } for(int i = 0; i \u0026lt; ret; i++){ //循环处理有响应的事件 int sockfd = events[i].data.fd; if(sockfd == lfd){ //如果是监听事件则建立新的连接 printf(\u0026#34;lfd\\n\u0026#34;); socklen_t clie_addr_len; //套接字长度 clie_addr_len = sizeof(clie_addr); cfd = accept(lfd, (struct sockaddr*)\u0026amp;clie_addr, \u0026amp;clie_addr_len ); assert(cfd \u0026gt;= 0); //注册为oneshot事件 addfd(epollfd, cfd, true); //刚刚这里加入的事件加错了 }else if(events[i].events \u0026amp; EPOLLIN){ pthread_t tid; fds fds_for_new_worker; fds_for_new_worker.epollfd = epollfd; fds_for_new_worker.sockfd = sockfd; //新启动一个线程为sockfd服务 pthread_create(\u0026amp;tid, NULL, worker, (void*)\u0026amp;fds_for_new_worker); // pthread_detach(tid); //线程分离 } } } close(lfd); return 0; } 信号屏蔽字 主要函数\nsigaddset() sigprocmask() sigpending() 使用kill发送信号\nkill -6 PID 测试程序\n#include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;signal.h\u0026gt; void print(sigset_t* ped){ for(int i = 0; i \u0026lt; 32; i++){ if(sigismember(ped, i)==1){ putchar(\u0026#39;1\u0026#39;); }else putchar(\u0026#39;0\u0026#39;); } printf(\u0026#34;\\n\u0026#34;); } int main(void){ sigset_t myset, oldset, ped; sigemptyset(\u0026amp;myset); //设置自定义信号集 sigaddset(\u0026amp;myset, SIGINT); sigaddset(\u0026amp;myset, SIGSEGV); sigaddset(\u0026amp;myset, SIGQUIT); sigaddset(\u0026amp;myset, SIGABRT); //设置信号屏蔽字 sigprocmask(SIG_BLOCK, \u0026amp;myset, \u0026amp;oldset); while(1){ sigpending(\u0026amp;ped); print(\u0026amp;ped); sleep(2); } return 0; } sigaction信号捕捉函数 #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;signal.h\u0026gt; void docatch(int signo){ printf(\u0026#34;%d signal has been catched!\\n\u0026#34;, signo); } int main(void){ struct sigaction act; act.sa_handler = docatch; sigemptyset(\u0026amp;act.sa_mask); sigaddset(\u0026amp;act.sa_mask, SIGINT); sigaddset(\u0026amp;act.sa_mask, SIGSEGV); sigaddset(\u0026amp;act.sa_mask, SIGQUIT); act.sa_flags = 0; //默认属性 在信号函数处理期间 本信号再次到达默认屏蔽 sigaction(SIGINT, \u0026amp;act, NULL); while(1); return 0; } 统一事件源 把信号事件的处理放到epoll监听事件中去处理，统一了事件源。当调用信号处理函数时，信号处理函数通过管道将信息传达给epoll上的读端监听事件，再在主循环中处理事件。\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;netinet/in.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;sys/epoll.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #define MAX_SIZE 1024 //自定义的结构体 static int pipefd[2]; struct fds{ int epollfd; int sockfd; }; //设置文件描述符为非阻塞 void setnonblocking(int fd){ int old_option = fcntl(fd, F_GETFL); int new_option = old_option | O_NONBLOCK; fcntl(fd, F_SETFL, new_option); } //添加到epoll内核事件表中 void addfd(int epollfd, int fd, bool oneshot){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET; if(oneshot){ event.events |= EPOLLONESHOT; } epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, \u0026amp;event); //挂到红黑树上 setnonblocking(fd); //设置非阻塞 主要用在读写上 } //信号处理函数 void sig_handler(int sig){ int save_errno = errno; int msg = sig; //我猜想这里重新定义变量的原因在于传的是指针 同时为了保证可重入 send(pipefd[1], (char*)\u0026amp;msg, 1, 0); //pipefd[1]是非阻塞的如果发不出去直接返回 errno = save_errno; } //设置信号处理 void addsig(int sig){ struct sigaction sa; memset(\u0026amp;sa, \u0026#39;\\0\u0026#39;, sizeof(sa)); sa.sa_handler = sig_handler; sa.sa_flags |= SA_RESTART; sigfillset(\u0026amp;sa.sa_mask); // sigaddset(\u0026amp;sa.sa_mask, SIGSEGV); assert(sigaction(sig, \u0026amp;sa, NULL) != -1); //注册监听的信号 } //命令行参数指定IP和端口 int main(int argc, char *argv[]){ if(argc \u0026lt;= 2){ printf(\u0026#34;at least 3 arguments: file ip port, but you give %d\\n\u0026#34;, argc); return 1; } const char* ip = argv[1]; int port = atoi(argv[2]); int lfd, cfd, ret; struct sockaddr_in serv_addr, clie_addr; lfd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 assert(lfd \u0026gt;= 0); serv_addr.sin_family = AF_INET; serv_addr.sin_port = htons(port); inet_pton(AF_INET, ip, \u0026amp;serv_addr.sin_addr); //端口复用 此处没有卵用 int opt = 1; setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); //忽略SIGPIPE信号 signal(SIGPIPE, SIG_IGN); ret = bind(lfd, (struct sockaddr *)\u0026amp;serv_addr, sizeof(serv_addr) ); assert(ret != -1); ret = listen(lfd, 128); //最大同时连接数 assert(ret != -1); epoll_event events[MAX_SIZE]; //返回的数组上限 int epollfd = epoll_create(10); assert(epollfd != -1); //注意监听的套接字不能设置为oneshot addfd(epollfd, lfd, false); //挂上红黑树监听 /*使用socketpair创建全双工的管道*/ ret = socketpair(PF_UNIX, SOCK_STREAM, 0, pipefd); assert(ret != -1); setnonblocking(pipefd[1]); //把写入的管道端置为非阻塞 addfd( epollfd, pipefd[0], false); //设置为oneshot /*设置一些信号的处理函数*/ addsig(SIGHUP); addsig(SIGCHLD); addsig(SIGTERM); addsig(SIGINT); addsig(SIGSEGV); bool stop_server = false; while(!stop_server){ printf(\u0026#34;epoll_wait...\\n\u0026#34;); ret = epoll_wait(epollfd, events, MAX_SIZE, -1); //永远不超时 if((ret \u0026lt; 0) \u0026amp;\u0026amp; (errno != EINTR)){ //这里要设置 被系统调用打断的不算失败 errno不是ret perror(\u0026#34;epoll failure\u0026#34;); exit(1); } for(int i = 0; i \u0026lt; ret; i++){ //循环处理有响应的事件 int sockfd = events[i].data.fd; if(sockfd == lfd){ //如果是监听事件则建立新的连接 socklen_t clie_addr_len; //套接字长度 clie_addr_len = sizeof(clie_addr); cfd = accept(lfd, (struct sockaddr*)\u0026amp;clie_addr, \u0026amp;clie_addr_len ); assert(cfd \u0026gt;= 0); //注册为oneshot事件 addfd(epollfd, cfd, true); /*如果就绪的文件描述符是pipefd[0],就处理信号*/ }else if((sockfd == pipefd[0]) \u0026amp;\u0026amp;(events[i].events \u0026amp; EPOLLIN)){ char buf[MAX_SIZE]; int num = recv(pipefd[0], buf, sizeof(buf), 0); if(num == -1) continue; else if(num == 0) continue; else{ //可能管道有多个信号满足 每次读出一个字符进行处理 for(int j = 0; j \u0026lt; num; j++){ switch(buf[j]){ case SIGSEGV: puts(\u0026#34;段错误信号已处理，收到请回答！\u0026#34;); break; case SIGCHLD: case SIGHUP: continue; case SIGTERM: case SIGINT: stop_server = true;break; } } } }else{} } } printf(\u0026#34;close fds\\n\u0026#34;); close(lfd); close(pipefd[0]); close(pipefd[1]); return 0; } 单例模式 #include \u0026lt;iostream\u0026gt; #include \u0026lt;atomic\u0026gt; #include \u0026lt;mutex\u0026gt; using namespace std; class Singleton{ private: //无法调用构造函数 Singleton(); Singleton(const Singleton\u0026amp; other); public: static Singleton* getInstance(); static Singleton* m_instance; } Singleton* Singleton::m_instance = nullptr; //懒汉式 单线程版 Singleton* Singleton::getInstance(){ if(m_instance == nullptr){ m_instance = new Singleton(); } return m_instance; } //多线程版 Singleton* Singleton::getInstance(){ LOCK lock; if(m_instance == nullptr){ m_instance = new Singleton(); } return m_instance; } 当前时间 #include \u0026lt;time.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main(void){ time_t tm; time(\u0026amp;tm); char time_string[128]; ctime_r(\u0026amp;tm, time_string); printf(\u0026#34;%s\u0026#34;, time_string); return 0; } 初阶日志系统 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;mutex\u0026gt; #include \u0026lt;atomic\u0026gt; using namespace std; class Logger{ public: static Logger* get_instance(); static Logger* log; static mutex log_mutex; static void write_log(int level, char* s); static void create_file(); static int fd; private: Logger(); Logger(const Logger\u0026amp; other); ~Logger(); }; Logger* Logger::log = NULL; mutex Logger::log_mutex; int Logger::fd = 0; Logger::Logger(){}; Logger::~Logger(){ if(log != NULL){ delete log; log = NULL; } close(fd); } Logger* Logger::get_instance(){ if(log == NULL){ log_mutex.lock(); if(log == NULL){ log = new Logger(); } log_mutex.unlock(); } return log; } void Logger::create_file(){ fd = open(\u0026#34;logger.txt\u0026#34;, O_RDWR|O_CREAT|O_TRUNC, 777); assert(fd \u0026gt; 0); } void Logger::write_log(int level, char* s){ int n = strlen(s); log_mutex.lock(); write(fd, s, n); log_mutex.unlock(); } 单例模式 //C++11 atomic std::atomic\u0026lt;Logger*\u0026gt; Logger::log; std::mutex Logger::log_mutex; Logger* Logger::get_instance(){ Logger* tmp = log.load(std::memory_order_relaxed); std::atomic_thread_fence(std::memory_order_acquire); //获取内存fence if(tmp == NULL){ std::lock_guard\u0026lt;std::mutex\u0026gt; lock(log_mutex); tmp = log.load(std::memory_order_relaxed); if(tmp == NUll){ tmp = new Logger; std::atomic_thread_fence(std::memory_order_release); //释放内存fence log.store(tmp, std::memory_order_relaxed); } } return tmp; } 主线程测试 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026#34;logger.h\u0026#34; void* func(void* arg){ char buf[1024]; sprintf(buf, \u0026#34;thread id: %lu, process id: %u\\n\u0026#34;, pthread_self(), getpid()); Logger::log-\u0026gt;write_log(2, buf); } int main(void){ pthread_t tid; //重命名的unsigned long 类型 Logger::log-\u0026gt;create_file(); int n = 5, ret; for(int i = 0; i \u0026lt; n; i++){ // int t = i; ret = pthread_create(\u0026amp;tid, NULL, func, NULL); if(ret != 0){ fprintf(stderr, \u0026#34;%s pthread_create error\u0026#34;, strerror(ret)); exit(1); } pthread_detach(tid); } sleep(n-4); //主线程 等待子线程执行完毕 return 0; } 时间堆 把监听文件描述符加入后，就启动定时器。\nexec函数族 在一个程序中运行另一个程序。当进程调用exec函数时，该进程的用户空间代码和数据完全被新程序替换。调用exec并不创建新进程，所以调用exec前后进程的ID并不改变。\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; int main(){ pid_t pid = fork(); if(pid == -1){ perror(\u0026#34;fork error!\u0026#34;); exit(-1); }else if(pid == 0){ execlp(\u0026#34;ls\u0026#34;, \u0026#34;anythingok\u0026#34;, \u0026#34;-l\u0026#34;, \u0026#34;-a\u0026#34;, NULL); }else if(pid \u0026gt; 0){ sleep(1); puts(\u0026#34;parent over!\u0026#34;); } return 0; } 管道 #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(){ pid_t fd[2]; pipe(fd); //创建管道 int ret = fork(); if(ret \u0026gt; 0){ //父进程 父写 fd[0]读 fd[1]写 close(fd[0]); char *str =\u0026#34;hello world\\n\u0026#34;; write(fd[1], str, strlen(str)); sleep(1); }else if(ret == 0){ //子进程 子读 fd[1]关闭 close(fd[1]); char buf[1024]; int n = read(fd[0], buf, sizeof(buf)); //写到显示器上 write(1, buf, n); } return 0; } CGI使用管道和exec实现 hello里面的输入和输出都被重定向了\n#include\u0026lt;stdio.h\u0026gt; #include\u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; int main(int agrc, char* argv[]){ char bf[100]; read(STDIN_FILENO, bf, sizeof(bf)); sprintf(bf, \u0026#34;Content-Type:text/html;\\r\\n\\r\\nhello world, 你好!\u0026#34;); printf(\u0026#34;%s\u0026#34;, bf); return 0; } 主进程调用已经编译完毕的hello可执行文件\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; int main(){ pid_t pid; int status; int cgi_input[2]; int cgi_output[2]; char buf[1024]; /*创建输入管道*/ if(pipe(cgi_input) \u0026lt; 0){ perror(\u0026#34;pipe error\u0026#34;); exit(1); } /*创建输出管道*/ if(pipe(cgi_output) \u0026lt; 0){ perror(\u0026#34;pipe error\u0026#34;); exit(1); } /*创建子进程*/ if((pid = fork()) \u0026lt; 0){ perror(\u0026#34;fork error!\u0026#34;); exit(-1); } if(pid == 0){ dup2(cgi_input[0], 0); /*将子进程的STDIN重定向到cgi_input[0]*/ dup2(cgi_output[1], 1); /*将子进程的STDOUT重定向到cgi_output[1]*/ /*关闭剩余的两端*/ close(cgi_input[1]); close(cgi_output[0]); /*执行exec文件 即cgi*/ execl(\u0026#34;hello\u0026#34;, \u0026#34;anythingok\u0026#34;, NULL); exit(0); }else if(pid \u0026gt; 0){ /*父进程先给子进程发送数据 然后等待子进程执行完 再读数据*/ /*关闭不用的两个端口*/ close(cgi_input[0]); close(cgi_output[1]); char tmp[100]=\u0026#34;hello child process\u0026#34;; int len = strlen(tmp); /*父进程先写数据*/ write(cgi_input[1], tmp, len); /*父进程阻塞等待读入*/ int n = read(cgi_output[0], buf, sizeof(buf)); int ret = write(STDOUT_FILENO, buf, n); /*关闭管道*/ close(cgi_input[1]); close(cgi_output[0]); waitpid(pid, \u0026amp;status, 0); } return 0; } 多线程服务器 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;sys/epoll.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #include \u0026lt;dirent.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; #define SERV_PORT 9999 #define MAXSIZE 2048 void wait_child(int signo){ while(waitpid(0, NULL, WNOHANG) \u0026gt; 0); return; } int createlistenfd(){ struct sockaddr_in servaddr; int ret; int fd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 if(fd == -1){ perror(\u0026#34;socket error\u0026#34;); exit(1); } //初始化servaddr结构体 bzero(\u0026amp;servaddr, sizeof(servaddr)); servaddr.sin_family = AF_INET; servaddr.sin_port = htons(SERV_PORT); servaddr.sin_addr.s_addr = htonl(INADDR_ANY); //端口复用 int opt = 1; setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); //绑定端口 ret = bind(fd, (struct sockaddr *)\u0026amp;servaddr, sizeof(servaddr)); if (ret == -1){ perror(\u0026#34;bind error\u0026#34;); exit(1); } //设置监听上限 ret = listen(fd, 128); if(ret==-1){ perror(\u0026#34;listen error\u0026#34;); exit(1); } return fd; } void work(int cfd, char* s){ char filename[100]={0}; sscanf(s, \u0026#34;GET /%s\u0026#34;, filename); char *mime; if(strstr(s, \u0026#34;.html\u0026#34;)) mime = \u0026#34;text/html\u0026#34;; else if(strstr(s, \u0026#34;.jpg\u0026#34;)) mime=\u0026#34;image/jpeg\u0026#34;; //构建响应头 发给客户端 // printf(\u0026#34;%s\\n\u0026#34;, filename); char response[MAXSIZE]; sprintf(response, \u0026#34;HTTP/1.1 200 OK\\r\\nContent-Type: %s\\r\\n\\r\\n\u0026#34;, mime); //读取具体的文件内容 int filefd = open(filename, O_RDONLY); if(filefd == -1){ perror(\u0026#34;open error\u0026#34;); sleep(0.5); filefd = open(filename, O_RDONLY); //很奇怪 为什么睡几秒钟之后再打开就不会出错了 if(filefd == -1) exit(1); } int len = strlen(response); int n = read(filefd, response+len, sizeof(response)-len); write(cfd, response, len+n); close(filefd); } int main(void){ int lfd = createlistenfd(); struct sockaddr_in clientaddr; socklen_t clientaddrlen = sizeof(clientaddr); //这是一个传出参数 //accept接受连接请求 pid_t pid; int cfd; while(1){ cfd = accept(lfd, (struct sockaddr *)\u0026amp;clientaddr, \u0026amp;clientaddrlen); if (cfd == -1){ perror(\u0026#34;accept error\u0026#34;); exit(1); } //创建子线程 主线程负责监听和回收子进程 pid = fork(); if(pid \u0026lt; 0){ perror(\u0026#34;fork error\u0026#34;); exit(1); } else if(pid == 0) break; else{ close(cfd); //关闭接收文件描述符 signal(SIGCHLD, wait_child); } } if(pid == 0){ close(lfd); //关闭监听文件描述符 //打印客户端IP和port char buf[MAXSIZE] = {0}; printf(\u0026#34;client IP: %s, client port: %d\\n\u0026#34;, inet_ntop(AF_INET, \u0026amp;clientaddr.sin_addr, buf, sizeof(buf)), ntohs(clientaddr.sin_port)); int n = read(cfd, buf, sizeof(buf)); if(n==0){ close(cfd); } // write(1, buf, n); else work(cfd, buf); } return 0; } 处理客户端注册信息的cgi 存在一些问题，每个网页好像没有传输完成，浏览器总是转圈。 需要结合上面hello程序查询数据库，hello程序的注册还没完善，只能做到查询。等以后有空再做吧。 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;netinet/in.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;sys/epoll.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; #define MAX_SIZE 1024 //自定义的结构体 struct fds{ int epollfd; int sockfd; }; //设置文件描述符为非阻塞 void setnonblocking(int fd){ int old_option = fcntl(fd, F_GETFL); int new_option = old_option | O_NONBLOCK; fcntl(fd, F_SETFL, new_option); } //添加到epoll内核事件表中 void addfd(int epollfd, int fd, bool oneshot){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET; if(oneshot){ event.events |= EPOLLONESHOT; } epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, \u0026amp;event); //挂到红黑树上 setnonblocking(fd); //设置非阻塞 主要用在读写上 } //移除epoll事件 void removefd(int epollfd, int fd){ epoll_ctl(epollfd, EPOLL_CTL_DEL, fd, NULL); close(fd); } //重置EPOLLONESHOT事件 void reset_oneshot(int epollfd, int fd){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET | EPOLLONESHOT; epoll_ctl(epollfd, EPOLL_CTL_MOD, fd, \u0026amp;event); //修改注册事件 } void accept_request(int epollfd, int sockfd, char *s){ char method[32], filename[32], account[32], password[32], phone[32]; sscanf(s, \u0026#34;%s /%s\u0026#34;, method, filename); if(strcasecmp(method, \u0026#34;POST\u0026#34;) == 0){ int len = strlen(s); int i; for(i = 0; i \u0026lt; len; i++){ if(i+2\u0026lt;len \u0026amp;\u0026amp; s[i]==\u0026#39;\\n\u0026#39; \u0026amp;\u0026amp; s[i+1]==\u0026#39;\\r\u0026#39;) break; } int j; i=i+12; for(j = 0; s[i+j]!=\u0026#39;\u0026amp;\u0026#39;; j++) account[j] = s[j+i]; i = i+j+6; for(j = 0; s[i+j]!=\u0026#39;\u0026amp;\u0026#39;; j++) password[j] = s[j+i]; /*2020.4.7成功解析出来账号和密码*/ pid_t pid; int status; int cgi_input[2]; int cgi_output[2]; char buff[1024]; /*创建输入管道*/ if(pipe(cgi_input) \u0026lt; 0){ perror(\u0026#34;pipe error\u0026#34;); exit(1); } /*创建输出管道*/ if(pipe(cgi_output) \u0026lt; 0){ perror(\u0026#34;pipe error\u0026#34;); exit(1); } /*创建子进程*/ if((pid = fork()) \u0026lt; 0){ perror(\u0026#34;fork error!\u0026#34;); exit(-1); } if(pid == 0){ dup2(cgi_input[0], 0); /*将子进程的STDIN重定向到cgi_input[0]*/ dup2(cgi_output[1], 1); /*将子进程的STDOUT重定向到cgi_output[1]*/ /*关闭剩余的两端*/ close(cgi_input[1]); close(cgi_output[0]); /*执行exec文件 即cgi*/ execl(\u0026#34;hello\u0026#34;, \u0026#34;anythingok\u0026#34;, NULL); exit(0); }else if(pid \u0026gt; 0){ /*父进程先给子进程发送数据 然后等待子进程执行完 再读数据*/ /*关闭不用的两个端口*/ close(cgi_input[0]); close(cgi_output[1]); /*父进程先写数据*/ int len = strlen(account); write(cgi_input[1], account, len); /*父进程阻塞等待读入*/ int n = read(cgi_output[0], buff, sizeof(buff)); if(strcmp(buff, password)==0\u0026amp;\u0026amp;strlen(password) != 0){ puts(\u0026#34;密码正确\u0026#34;); }else{ puts(\u0026#34;密码错误\u0026#34;); strcpy(filename, \u0026#34;register.html\u0026#34;); } // int ret = write(STDOUT_FILENO, buf, n); /*关闭管道*/ close(cgi_input[1]); close(cgi_output[0]); waitpid(pid, \u0026amp;status, 0); } } puts(filename); char mime[64]; if(strstr(s, \u0026#34;.html\u0026#34;)) strcpy(mime,\u0026#34;text/html\u0026#34;); else if(strstr(s, \u0026#34;.jpg\u0026#34;)) strcpy(mime,\u0026#34;image/jpeg\u0026#34;); char response[MAX_SIZE+MAX_SIZE]; sprintf(response, \u0026#34;HTTP/1.1 200 OK\\r\\nContent-Type: %s\\r\\n\\r\\n\u0026#34;, mime); int filefd = open(filename, O_RDONLY); if(filefd == -1){ perror(\u0026#34;open error\u0026#34;); exit(1); } int len = strlen(response); int n = read(filefd, response+len, sizeof(response)-len); write(sockfd, response, len+n); close(filefd); } //工作线程 void* worker(void* arg){ int sockfd = ((fds*)arg)-\u0026gt;sockfd; int epollfd = ((fds*)arg)-\u0026gt;epollfd; char buf[MAX_SIZE]; memset(buf, \u0026#39;\\0\u0026#39;, MAX_SIZE); //循环读取sockfd上的数据 直到收到EAGAIN while(1){ int ret = recv(sockfd, buf, MAX_SIZE-1, 0); if(ret == 0){ removefd(epollfd, sockfd); printf(\u0026#34;foreiner closed the connection\\n\u0026#34;); break; }else if(ret \u0026lt; 0){ if(errno == EAGAIN){ // reset_oneshot(epollfd ,sockfd); printf(\u0026#34;read later\\n\u0026#34;); break; } }else{ printf(\u0026#34;get connection:\\n\u0026#34;); //休眠5s模拟数据处理过程 accept_request(epollfd, sockfd, buf); sleep(5); break; } } } //命令行参数指定IP和端口 int main(int argc, char *argv[]){ if(argc \u0026lt; 2){ printf(\u0026#34;at least 2 arguments: file port, but you give %d\\n\u0026#34;, argc); return 1; } int port = atoi(argv[1]); int lfd, cfd, ret; struct sockaddr_in serv_addr, clie_addr; lfd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 assert(lfd \u0026gt;= 0); /*初始化服务器端的套接字地址*/ serv_addr.sin_family = AF_INET; serv_addr.sin_port = htons(port); serv_addr.sin_addr.s_addr = htonl(INADDR_ANY); //端口复用 此处没有卵用 int opt = 1; setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); ret = bind(lfd, (struct sockaddr *)\u0026amp;serv_addr, sizeof(serv_addr) ); assert(ret != -1); ret = listen(lfd, 128); //最大同时连接数 assert(ret != -1); epoll_event events[MAX_SIZE]; //返回的数组上限 int epollfd = epoll_create(10); assert(epollfd != -1); //注意监听的套接字不能设置为oneshot addfd(epollfd, lfd, false); //挂上红黑树监听 while(1){ ret = epoll_wait(epollfd, events, MAX_SIZE, -1); //永远不超时 if(ret \u0026lt; 0){ printf(\u0026#34;epoll failure\\n\u0026#34;); break; } for(int i = 0; i \u0026lt; ret; i++){ //循环处理有响应的事件 int sockfd = events[i].data.fd; if(sockfd == lfd){ //如果是监听事件则建立新的连接 socklen_t clie_addr_len; //套接字长度 clie_addr_len = sizeof(clie_addr); cfd = accept(lfd, (struct sockaddr*)\u0026amp;clie_addr, \u0026amp;clie_addr_len ); assert(cfd \u0026gt;= 0); //注册为oneshot事件 addfd(epollfd, cfd, false); //刚刚这里加入的事件加错了 }else if(events[i].events \u0026amp; EPOLLIN){ pthread_t tid; fds fds_for_new_worker; fds_for_new_worker.epollfd = epollfd; fds_for_new_worker.sockfd = sockfd; //新启动一个线程为sockfd服务 pthread_create(\u0026amp;tid, NULL, worker, (void*)\u0026amp;fds_for_new_worker); // pthread_detach(tid); //线程分离 } } } close(lfd); return 0; } 线程中调用fork函数 pthread_atfork函数确保fork调用后父进程和子进程都拥有一个清楚的锁状态。每个线程都可以独立的设置信号掩码。\nwaitpid回收子进程 #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; void sigchild_handler(int sig){ //在执行SIGCHLD信号期间 可能有多个SIGCHLD到达，但是未决信号集只记录一次。 //所以需要调用while循环回收再退出 while(waitpid(-1, NULL, WNOHANG) \u0026gt; 0){ puts(\u0026#34;回收成功\u0026#34;); } return; } int main(){ pid_t pid; int n = 5, i; signal(SIGCHLD, sigchild_handler); for(i = 0; i \u0026lt; n; i++){ pid = fork(); if(pid \u0026lt; 0){ perror(\u0026#34;fork error\u0026#34;); exit(1); }else if(pid == 0) break; //子进程 直接退出 } if(i \u0026lt; n){ //子进程 sleep(i); printf(\u0026#34;I am %dth child.\\n\u0026#34;, i); }else{ while(1){ //父进程不退出 sleep(1); printf(\u0026#34;I am parent %u\\n\u0026#34;, getpid()); } } return 0; } 自旋锁 线程同步的一种方式。使用自旋锁的线程会反复检查锁变量是否可用。自旋锁不会让出CPU，一种忙等待状态。死循环等待锁被释放。自旋锁避免了进程或线程上下文的开销。自旋锁不适合在单CPU中使用。\n#include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; const int N = 1e7; int num = 0; pthread_spinlock_t spin_lock; void *producer(void *){ int times = N; while(times--){ pthread_spin_lock(\u0026amp;spin_lock); ++num; pthread_spin_unlock(\u0026amp;spin_lock); } } void *comsumer(void*){ int times = N; while(times--){ pthread_spin_lock(\u0026amp;spin_lock); --num; pthread_spin_unlock(\u0026amp;spin_lock); } } int main(){ pthread_spin_init(\u0026amp;spin_lock, 0); pthread_t th1, th2; pthread_create(\u0026amp;th1, NULL, \u0026amp;producer, NULL); pthread_create(\u0026amp;th2, NULL, \u0026amp;comsumer, NULL); pthread_join(th1, NULL); pthread_join(th2, NULL); printf(\u0026#34;num = %d\\n\u0026#34;, num); return 0; } 条件变量 条件变量本身不是锁，但它可以造成线程阻塞。通常与互斥锁配合使用。给多线程提供一个汇合的场所。\npthread_cond_wait(\u0026amp;cond, \u0026amp;mutex) 1. 阻塞等待该条件变量直到满足 2.释放已经掌握的互斥锁 3.满足条件后重新拿锁 #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; const int MAX_BUF = 100; int num = 0; pthread_cond_t cond = PTHREAD_COND_INITIALIZER; pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; void *producer(void *){ while(true){ pthread_mutex_lock(\u0026amp;mutex); while(num \u0026gt;= MAX_BUF){ //由于阻塞解除时，只有一个物品可用 但是却有多个线程解除阻塞 所以需要循环检测一次 //满了 等待消费者消费 pthread_cond_wait(\u0026amp;cond, \u0026amp;mutex); printf(\u0026#34;缓冲区满了 等待消费者消费\\n\u0026#34;); } //生产一个物品 ++num; printf(\u0026#34;生产一个产品，当前产品数量为：%d\\n\u0026#34;, num); sleep(1); pthread_mutex_unlock(\u0026amp;mutex); //通知消费者可消费了 pthread_cond_signal(\u0026amp;cond); printf(\u0026#34;通知消费者...\\n\u0026#34;); sleep(1); } } void *comsumer(void*){ while(true){ pthread_mutex_lock(\u0026amp;mutex); while(num \u0026lt;= 0){ //缓冲区为空 等待生产者生产 pthread_cond_wait(\u0026amp;cond, \u0026amp;mutex); printf(\u0026#34;缓冲区空了 等待生产者生产\\n\u0026#34;); } //生产一个物品 --num; printf(\u0026#34;消费一个产品，当前产品数量为：%d\\n\u0026#34;, num); sleep(1); pthread_mutex_unlock(\u0026amp;mutex); //通知消费者可消费了 pthread_cond_signal(\u0026amp;cond); printf(\u0026#34;通知生产者...\\n\u0026#34;); } } int main(){ pthread_t th1, th2; pthread_create(\u0026amp;th1, NULL, \u0026amp;producer, NULL); pthread_create(\u0026amp;th2, NULL, \u0026amp;comsumer, NULL); pthread_join(th1, NULL); pthread_join(th2, NULL); printf(\u0026#34;num = %d\\n\u0026#34;, num); return 0; } ","permalink":"//localhost:1313/posts/006%E9%A1%B9%E7%9B%AE/","summary":"\u003ch2 id=\"webbench\"\u003ewebbench\u003c/h2\u003e\n\u003cp\u003e测压软件 最高并发3W\u003c/p\u003e\n\u003cp\u003ewebbench做测试时自身也会消耗CPU和内存资源，为了测试准确，需要将webbench安装在别的服务器上。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etar -xzvf webbench-1.5.tar.gz\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e webbench-1.5\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eapt-get install ctags\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emake \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e make install\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e测试\u003c/p\u003e","title":"006项目"},{"content":"单例模式 class A{ public: static A* getInstance(); static A* instance; private: A(); ~A(); }; A* A::instance = nullptr; //内存读写reorder不安全 导致双检查锁失效 //先分配内存 再执行构造器 最后返回给实例 //编译器的优化 A* A::getInstance(){ //读没有问题 写就有问题 //锁前检查 锁的粒度过大 锁后检查安全性 if(instance==nullptr){ mutex.lock(); if(instance==nullptr) instance = new A(); mutex.unlock(); } return instance; } 快排 归并 堆排 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; using namespace std; //快排 时间复杂度 平均nlogn 空间复杂度O(1) void quick_sort(int arr[], int l, int r){ if(l \u0026gt;= r) return; int x = arr[l+r \u0026gt;\u0026gt; 1]; int i = l-1, j = r+1; while(i \u0026lt; j){ while(arr[++i] \u0026lt; x); while(arr[--j] \u0026gt; x); if(i \u0026lt; j) swap(arr[i], arr[j]); } quick_sort(arr, l, j); quick_sort(arr, j+1, r); } //归并 //时间复杂度NlongN 空间复杂度N int tmp[105]; void merge_sort(int arr[], int l, int r){ if(l \u0026gt;= r) return; int mid = (l + r)\u0026gt;\u0026gt;1; merge_sort(arr, l, mid); merge_sort(arr, mid+1, r); //合并 int i = l, j = mid+1, k = 0; while(i \u0026lt;= mid \u0026amp;\u0026amp; j \u0026lt;= r){ //i和j注意了 if(arr[i] \u0026lt; arr[j]) tmp[k++] = arr[i++]; else tmp[k++] = arr[j++]; } while(i \u0026lt;= mid) tmp[k++] = arr[i++]; while(j \u0026lt;= r) tmp[k++] = arr[j++]; for(int i = 0; i \u0026lt; k; i++){ arr[l+i] = tmp[i]; } } //大根堆 把大交换上去 void heapify(int arr[], int r, int n){ int i = 2*r+1, j = 2*r+2; int mx = r; if(i \u0026lt; n \u0026amp;\u0026amp; arr[i] \u0026gt; arr[mx]) mx = i; if(j \u0026lt; n \u0026amp;\u0026amp; arr[j] \u0026gt; arr[mx]) mx = j; if(mx != r) { swap(arr[mx], arr[r]); heapify(arr, mx, n); } } //堆排序 堆化 堆顶取出交换到末尾去 void heap_sort(int arr[], int n){ for(int i = n; i \u0026gt;= 0; i--){ heapify(arr, i, n); //当前的点 总共的点 } //交换完成 for(int i = n-1; i \u0026gt;= 0; i--){ swap(arr[0], arr[i]); heapify(arr, 0, i); //总量减1 } } int main(){ int arr[]{1,93,6,45,2,7,8,45,2123,239,0,3}; int n = 12; // merge_sort(arr, 0, n-1); //如果从0编号 那么儿子节点为2i+1 2i+2 //最后一个节点是啥 heap_sort(arr, n); for(int i = 0; i \u0026lt; n; i++) printf(\u0026#34;%d \u0026#34;, arr[i]); puts(\u0026#34;\u0026#34;); return 0; } kmp算法 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;string\u0026gt; using namespace std; int Next[105]; void getNext(string p){ //按照左神讲的 考查的是当前位置的前一个字符串的最长前后缀 Next[0] = -1; Next[1] = 0; int cn = 0, i = 2; int n = p.size(); while(i \u0026lt; n){ if(p[cn] == p[i-1]) Next[i++] = ++cn; else if(cn) cn = Next[cn]; else Next[i++] = 0; //前后缀为0 } } void kmp(string p, string s){ //首先求next数组 getNext(p); int i = 0, j = 0; int m = s.size(); int n = p.size(); while(i \u0026lt; m \u0026amp;\u0026amp; j \u0026lt; n){ if(s[i] == p[j]) i++, j++; else if(Next[j] == -1) i++; //开头不匹配 else j = Next[j]; if(j==n){ cout\u0026lt;\u0026lt;i-n\u0026lt;\u0026lt;endl; //起始位置 j = Next[j-1]; i--; } } } int main(){ string text = \u0026#34;helloworldllo\u0026#34;; string pattern = \u0026#34;llo\u0026#34;; kmp(pattern, text); return 0; } LRU算法 strcpy和memcpy #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;string\u0026gt; #include \u0026lt;cstring\u0026gt; using namespace std; //内存拷贝函数 按字节拷贝 void* my_memcpy(void* dest, void* src, size_t count){ if(dest == NULL || src == NULL) return NULL; char* pdest = (char*) dest; char* psrc = (char*) src; while(count--){ *pdest++ = *psrc++; } return dest; } //字符串拷贝函数 仅用来拷贝字符串 char* my_strcpy(char* dest, const char* src){ if(dest == NULL || src ==NULL) return NULL; char* pdest = dest; while((*dest++ = *src++) != \u0026#39;\\0\u0026#39;); return pdest; } int main(){ char src[] =\u0026#34;hello\u0026#34;; char dest[100]; //my_memcpy(dest, src, strlen(src)); my_strcpy(dest, src); printf(\u0026#34;%s\\n\u0026#34;, src); return 0; } string类 class String{ public: String(const char* str = NULL); //通用构造函数 String(const String\u0026amp; str); //拷贝构造函数 ~String(); String\u0026amp; operator+(const String \u0026amp;str); String\u0026amp; operator+=(const String \u0026amp;str); char\u0026amp; operator[](const int n) const; String operator=(const String \u0026amp;str) const; bool operator==(const String \u0026amp;str)const; bool operator\u0026lt;(const String \u0026amp;str) const; bool operator\u0026lt;(const String \u0026amp;str) const; size_t size const; //获取长度 //流运算符\u0026gt;\u0026gt; \u0026lt;\u0026lt; private: char* data; //字符串 size_t length; //长度 } String::String(const char* str){ //通用构造函数 if(!str){ length = 0; data = new char[1]; *data=\u0026#39;\\0\u0026#39;; }else{ length = strlen(str); //对空指针调用strlen会导致内存错误 data = new char[length+1]; strcpy(data, str); } } String::String(const String\u0026amp; str){ //拷贝构造 length = str.length; data = new char[length+1]; strcpy(data, str.data); } //析构 String::~String(){ delete []data; length = 0; } //赋值重载 String\u0026amp; String::operator=(const String \u0026amp;str){ delete []data; length = str.length; data = new char[length+1]; strcpy(data, str.data); return *this; } 智能指针shared_ptr #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; using namespace std; template \u0026lt;typename T\u0026gt; class SmartPtr{ private: T * ptr; int* use_count(); SmartPtr(T* p); SmartPtr(const SmartPtr\u0026lt;T\u0026gt; \u0026amp; orig);//拷贝 SmartPtr\u0026lt;T\u0026gt;\u0026amp; operator=(const SmartPtr\u0026lt;T\u0026gt;\u0026amp; orig); ~SmartPtr(); } SmartPtr::SmartPtr(T* p){ ptr = p; *use_count = 1; } SmartPtr::~SmartPtr(){ //析构 delete ptr; ptr = nullptr; delete use_count; use_count = nullptr; } int main(){ return 0; } 写一个函数在main函数执行前先运行 #include \u0026lt;iostream\u0026gt; using namespace std; class Hello{ public: Hello(){ cout\u0026lt;\u0026lt;\u0026#34;before main!\u0026#34;\u0026lt;\u0026lt;endl; } }; Hello w; //全局变量在main之前执行 int main(){ cout\u0026lt;\u0026lt;\u0026#34;I am main\u0026#34;\u0026lt;\u0026lt;endl; return 0; } 匿名管道pipe #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(){ pid_t fd[2]; pipe(fd); //创建管道 int ret = fork(); if(ret \u0026gt; 0){ //父进程 父写 fd[0]读 fd[1]写 close(fd[0]); char *str =\u0026#34;hello world\\n\u0026#34;; write(fd[1], str, strlen(str)); sleep(1); }else if(ret == 0){ //子进程 子读 fd[1]关闭 close(fd[1]); char buf[1024]; int n = read(fd[0], buf, sizeof(buf)); //写到显示器上 write(1, buf, n); } return 0; } rand7产生rand10 leetcode470\nclass Solution { public: int rand10() { int t; while(true){ t = rand7() + (rand7()-1) * 7; if(t \u0026lt;= 40) return t%10 +1; }; return 0; } }; 反转二叉树 class Solution { public: TreeNode* invertTree(TreeNode* root) { //遍历所有点 然后交换左右孩子 dfs(root); return root; } void dfs(TreeNode* root){ if(!root) return; dfs(root-\u0026gt;left); dfs(root-\u0026gt;right); swap(root-\u0026gt;left, root-\u0026gt;right); } }; ","permalink":"//localhost:1313/posts/005%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","summary":"\u003ch2 id=\"单例模式\"\u003e单例模式\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eclass\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nl\"\u003epublic\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nf\"\u003egetInstance\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nl\"\u003eprivate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nf\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t    \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"nf\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//内存读写reorder不安全 导致双检查锁失效\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//先分配内存 再执行构造器 最后返回给实例\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//编译器的优化 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"nf\"\u003egetInstance\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e//读没有问题 写就有问题 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\u003cspan class=\"c1\"\u003e//锁前检查 锁的粒度过大 锁后检查安全性 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003emutex\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003einstance\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"nf\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003emutex\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eunlock\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"快排-归并-堆排\"\u003e快排 归并 堆排\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//快排 时间复杂度 平均nlogn 空间复杂度O(1) \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003equick_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eswap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003equick_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003equick_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//归并\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//时间复杂度NlongN  空间复杂度N\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e105\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003emerge_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003emerge_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"nf\"\u003emerge_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e//合并\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//i和j注意了\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//大根堆 把大交换上去\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eheapify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003emx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003emx\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003emx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003emx\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003emx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emx\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eswap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003emx\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eheapify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emx\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//堆排序 堆化 堆顶取出交换到末尾去\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eheap_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eheapify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//当前的点 总共的点\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//交换完成\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eswap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eheapify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//总量减1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[]{\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e93\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2123\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e239\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// merge_sort(arr, 0, n-1);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e//如果从0编号 那么儿子节点为2i+1 2i+2\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e//最后一个节点是啥\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nf\"\u003eheap_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%d \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003eputs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"kmp算法\"\u003ekmp算法\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e105\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003egetNext\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//按照左神讲的 考查的是当前位置的前一个字符串的最长前后缀\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecn\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ecn\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ecn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecn\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ecn\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ecn\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//前后缀为0\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003ekmp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//首先求next数组\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nf\"\u003egetNext\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//开头不匹配\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//起始位置\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;helloworldllo\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003epattern\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;llo\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003ekmp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epattern\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"lru算法\"\u003eLRU算法\u003c/h2\u003e\n\u003ch2 id=\"strcpy和memcpy\"\u003estrcpy和memcpy\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstring\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//内存拷贝函数 按字节拷贝\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nf\"\u003emy_memcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edest\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epdest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epsrc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epdest\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epsrc\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//字符串拷贝函数 仅用来拷贝字符串\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nf\"\u003emy_strcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edest\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epdest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"sc\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003epdest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//my_memcpy(dest, src, strlen(src));\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nf\"\u003emy_strcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%s\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"string类\"\u003estring类\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eclass\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nl\"\u003epublic\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//通用构造函数\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//拷贝构造函数\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e+=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//获取长度\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e//流运算符\u0026gt;\u0026gt; \u0026lt;\u0026lt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"nl\"\u003eprivate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//字符串\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//长度\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//通用构造函数\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sc\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003estrlen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//对空指针调用strlen会导致内存错误\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003estrcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//拷贝构造\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003estrcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//析构\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e::~\u003c/span\u003e\u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edelete\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//赋值重载\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edelete\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003estrcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"智能指针shared_ptr\"\u003e智能指针shared_ptr\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstring\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003etemplate\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kr\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eclass\u003c/span\u003e \u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nl\"\u003eprivate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nf\"\u003euse_count\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eorig\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//拷贝\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eorig\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eptr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003euse_count\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e::~\u003c/span\u003e\u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e  \u003cspan class=\"c1\"\u003e//析构\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003edelete\u003c/span\u003e \u003cspan class=\"n\"\u003eptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eptr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edelete\u003c/span\u003e \u003cspan class=\"n\"\u003euse_count\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003euse_count\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"写一个函数在main函数执行前先运行\"\u003e写一个函数在main函数执行前先运行\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eHello\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003eHello\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;before main!\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eHello\u003c/span\u003e \u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//全局变量在main之前执行 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;I am main\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"匿名管道pipe\"\u003e匿名管道pipe\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unistd.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003epid_t\u003c/span\u003e \u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003epipe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//创建管道\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003efork\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//父进程 父写 fd[0]读 fd[1]写\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"nf\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;hello world\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nf\"\u003estrlen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003esleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//子进程 子读 fd[1]关闭\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"nf\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1024\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e//写到显示器上\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"nf\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"rand7产生rand10\"\u003erand7产生rand10\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://leetcode-cn.com/problems/implement-rand10-using-rand7/\"\u003eleetcode470\u003c/a\u003e\u003c/p\u003e","title":"005数据结构"},{"content":"B+树 具有n个关键字的节点含有n个分支。而在B树中，具有n个关键字的节点含有n+1个节点。 B+树的叶子节点包含了所有关键字，并且包含信息。 B+树非叶子节点只起索引作用，不存数据。 B+数在叶子节点使用指针将前后磁盘块中的索引连接起来，形成一个线性链表，方便范围查询。 什么是索引 索引是数据表中对字段进行排序的一种数据结构。常用的索引有\nB树 哈希索引 全文索引 Rtree索引\nAVL树，B树，B+树，红黑树，哈希表。\n哈希表和B树不利于范围查找。红黑树在数据量大的时候性能会下降。\n**聚集索引：**数据和索引在一起的。\n**非聚集索引：**索引文件和数据文件是分离的。\n联合索引：对多个字段同时建立的索引。Mysql从左到右的使用索引中的字段，一个查询可以只使用索引中的一部份，但只能是最左侧部分，跳跃索引查询就会导致索引失效。\nB树和B+树的区别 B树：叶节点具有相同的深度，所有索引元素不重复，节点中的数据索引从左到右递增排列。 B+树：非叶子节点不存储数据，只存储索引，叶子节点包含了全部的关键字且存储数据。叶子节点用指针连接从左往右递增排序，提高区间访问的性能。 mysql存储引擎myISAM和InnoDB 存储引擎是基于表的，而不是数据库。\nInnoDB引擎：支持事务，行锁（适合高并发），支持外键。mysql5.5版本后的默认存储引擎 myISAM引擎：不支持事务，不支持外键，支持表锁。优势是访问的速度快。mysql5.5版本前的默认存储引擎。myISAM索引文件和数据文件是分离的。查询较多的更新较少的情况下使用myisam存储引擎。 数据库三大范式 数据库中的所有字段都是不可分割的原子值 满足第一范式的前提下，除主键外的每一列都必须完全依赖于主键。如果不完全依赖，只能发生在联合主键下。 满足第二范式的前提下，除开主键列的其他列之间不能有传递依赖关系。 事务的四个特性ACID 事务是作为单个逻辑工作单元执行的一系列操作。要么完全执行，要么完全不执行。\n**原子性 ：**同一事务中多个操作不能分割，必须是一个整体。 **一致性 ：**事务操作前后的总量保持一致。 **隔离性 ：**多个事务之间的操作互不干扰。 **持久性：**事务提交以后，对数据库中数据的改变是永久的。 事务隔离级别 事务分为四个隔离级别：分别是读未提交，读提交，可重复读，串行化。从前往后隔离级别依次递增，同时执行效率依次下降。mysql的默认隔离级别是可重复读。\n读未提交：会产生脏读，即一个事务读取了另一个事务未提交的内容。 读提交：可以解决脏读问题，但是会产生不可重复读，即一个事务在执行的过程中得到的结果不一致。 可重复读：可以解决不可重复读的问题，但会产生幻读，即一个事务无法看到另一个事务已经提交的内容。 **串行化：**可以解决幻读问题。当同一张表被另一个事务操作时，其他事务的写操作是不可以进行的，进入串行化排队，直到另一个结束，同时还为超时的情况下才可以继续执行。 set global transaction isolation level read committed # 修改隔离级别\u0026#39; select @@x_isolation # 查看隔离级别 主键和外键约束 主键：**唯一且非空。**一个表有且只能由一个主键约束。创建主键会自动创建对应的索引，同样删除主键，对应的索引也会被删除。\n外键约束：如果定义了外键约束，主表中没有的数据在子表中是不可以被使用的。主表中的记录被子表引用，是不可以被删除的。\ninner join 和 left join 等值联接：inner join返回两个表中联接字段相等的行 左联接：left join 返回左表所有记录和右表中联接字段相等的记录，如果左表中的记录在右边不存在，则对应字段设为null。 redis 是C语言编写的基于内存可持久化的key-value内存数据库，使用的是epoll单线程模型。常用的数据结构有set， list，string, hash, sorted set。\n查询 分组查询：count() sum() max() min() avg()\n聚合查询：7种 A B A∪B A∩B A - A∩B B - A∩B A∪B - A∩B\n左连接： A - A∩B 右连接：B - A∩B 内连接：A∩B\n悲观锁和乐观锁 悲观锁： 每次去拿数据时都认为别人会修改，所以每次在拿数据的时候都会上锁。悲观锁由数据库自己实现，共享锁和排他锁是悲观锁的不同实现。悲观锁的缺点：效率低，并行差，增加死锁的概率。 乐观锁：每次去拿数据都认为别人不会修改，所以不会上锁。乐观锁适用于读多，写少的场景。乐观锁常见的实现方式：版本号机制和CAS自旋算法。乐观锁的缺点：ABA问题，循环时间长开销大，只能保证一个共享变量的原子操作。 explain 查看执行计划 使用explain关键字可以模拟优化器执行sql查询语句，从而知道mysql是如何处理sql语句的。分析查询语句或表结构的性能瓶颈。\nexplain + sql语句 show profile 用来分析当前会话中语句执行的资源消耗情况。\n什么时候应该创建索引 频繁查询字段 什么时候不应该创建索引 where条件里用不到的字段 频繁更新的字段 表记录太少\u0026lt;300W 重复且平均的表字段 B+树 B+树是B树的变形，B+树非叶子节点只存索引，不存数据，叶子节点存储所有的索引和数据。B+树三层可以存储上百万条数据，磁盘IO最多三次，每次读取磁盘块到内存后，使用二分查找找到索引的位置。\nB+树是聚集索引，数据和索引在一起。B+树使用指针将叶子节点的连接起来。\nB树 是一种多路平衡二叉树，m阶B树，每个节点最多可以有m-1关键字。所有叶子节点在同一层。每个节点保存索引和数据。\n索引 索引是按照某个字段排序的数据结构。\nACID 事务时单个逻辑工作单元的一系列操作。\n原子性：事务的操作是不可分割的，要么完全成功，要么完全失败。\n一致性：事务操作前后的总量保持不变。\n隔离性：事务之间的操作应该相互隔离。\n持久性：事务一旦提交后，数据库中的值不可更改。\n事务的隔离级别 读未提交：产生脏读，即一个事务可以读取另一个事务未提交的内容。 读提交：解决脏读，产生不可重复读，即事务的两次读取结果不一致。 可重复读：解决不可重复读，但是会产生幻读，即一个事务明明提交了，但是在另一个事务中没有更新。 串行化：当两个事务都在写入内容时，必须排队，当两个事务提交后，才可以执行后续事务。 数据库三大范式 数据库中的所有字段都是不可分割的原子值 在满足第一范式的前提下，除开主键外的其他列都必须完全依赖于主键。 在满足第二范式的前提下，除开主键外的其他列之间不能有传递依赖关系。 myisam和innoDB myisam不支持事务，不支持外键，支持表锁。查询速度较快。适合读多更新少的表。\ninnoDB支持事务，支持外键，支持行锁，因为锁的粒度比较小，所以适合高并发。\n持久化 利用永久性存储介质将数据进行保存，在特定的时间将保存的数据进行恢复的机制叫做持久化。确保数据安全。\n将当前数据状态进行保存，快照形式。RDB 将数据的操作过程进行保存，日志形式。AOF ","permalink":"//localhost:1313/posts/004%E6%95%B0%E6%8D%AE%E5%BA%93/","summary":"\u003ch2 id=\"b树\"\u003eB+树\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e具有n个关键字的节点含有n个分支。而在B树中，具有n个关键字的节点含有n+1个节点。\u003c/li\u003e\n\u003cli\u003eB+树的叶子节点包含了所有关键字，并且包含信息。\u003c/li\u003e\n\u003cli\u003eB+树非叶子节点只起索引作用，不存数据。\u003c/li\u003e\n\u003cli\u003eB+数在叶子节点使用指针将前后磁盘块中的索引连接起来，形成一个线性链表，方便范围查询。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"什么是索引\"\u003e什么是索引\u003c/h2\u003e\n\u003cp\u003e索引是数据表中对\u003cstrong\u003e字段\u003c/strong\u003e进行排序的一种\u003cstrong\u003e数据结构\u003c/strong\u003e。常用的索引有\u003c/p\u003e","title":"004数据库"},{"content":"volatile 用来告诉编译器不要对该变量做任何优化，编译器每次操作该变量时，一定要从内存中取出，而不是使用寄存器中与存在的值，因为值可能已经发生了改变。\n应用场景：\n并行设备的硬件寄存器（如状态寄存器）。 多线程中共享变量。 const 用于限定变量，函数和指针不可改变。\nconst限定全局变量时，变量放在静态区。const限定局部变量时，变量放在栈区。 const修饰类中的成员函数时，表示不可对类的对象更改，如果需要更改类中的成员变量，可以使用mutable关键字。 内联函数和宏定义 宏定义在预编译时展开，内联函数在编译时展开。 宏定义只是简单的文本替换，不进行参数的有效性检查。内联函数会进行类型检查，然后将函数体嵌入到目标代码中。 宏定义不加括号容易出错。内联函数没有普通函数的栈操作，效率很高，但是不正确的时候内联函数会导致代码体积过大。 static 静态全局变量，静态局部变量，静态成员变量，静态成员函数\n静态全局变量和静态局部变量都放在静态区，只在声明时初始化一次，仅在本文件中可见，变量在程序运行期间一直存在。静态局部变量的作用域范围仅在局部，下次调用紧接着上次调用的结果值改变。 静态成员函数和静态成员变量没有this指针，必须通过类名才能访问。 malloc 和 new malloc和free是库函数，new和delete是运算符，可以重载。 malloc申请内存时需要指定内存大小，返回一个void*类型，通常需要强转。new申请内存时无需指定内存大小，返回一个对应类型的指针。 malloc不进行初始化。new在创建非内部类型的对象时，调用构造函数初始化，消亡时会调用析构函数。 malloc申请失败时返回null指针，new申请失败时抛出异常。 指针和引用 引用创建时必须初始化，初始化后不可以改变。指针创建时可以不初始化，初始化时需要分配内存，初始化后也可以改变。引用比指针安全。 引用不存在空值引用，指针可以指向空值 引用的本质是指针常量，由编译器完成转换。 extern 可以被其他源文件调用。 告诉编译器，extern限定的代码使用C语言的编译和连接方式。因为C++支持重载，而C不支持，所以可能导致函数编译后的名称不一致，从而找不到对应的函数。 多态的原理 多态分为静态多态和动态多态。静态多态是通过重载和模板实现的，动态多态是通过继承和虚函数实现的。\n动态多态是让基类的指针或引用指向派生类的对象实现的。定义为虚函数的基类，编译器会自动创建一个虚函数表，派生类在继承时会继承这个虚函数表，每个创建的对象拥有一个虚函数表指针，这个指针指向虚函数表，如果派生类重写了基类的虚函数，则对应的虚函数表入口地址发生了更新。虚函数表为所有对象所共享，通常放在代码段。\n什么是进程 进程是分配资源的基本单位，是程序运行的实例。进程通常分为数据段，代码段和进程控制块。进程的地址空间相互独立，一个进程不可访问另一个进程的数据。进程切换时的开销相对于线程来说比较大，需要保存寄存器的值和刷新块表，切换地址空间等。\n进程间的通信方式 有名管道pipe 无名管道fifo 消息队列 共享内存 信号量 信号 套接字 线程是什么 线程是CPU调度的基本单位。线程是进程的一个执行流程。一个进程中可以由多个线程。线程共享进程的地址空间。线程自身几乎不拥有系统资源，除了栈和寄存器。线程间的通信较为容易。但是需要同步。常用的同步机制有互斥锁，读写锁，信号量，条件变量。\n线程共享 进程打开的文件描述符表 进程ID和组ID 信号的处理方式 打开的工作目录 进程的地址空间(堆区，栈区，共享区) 线程独享 线程ID 线程的寄存器 线程的栈 信号屏蔽字 线程优先级 错误返回码errno 信号 信号是一种不精确的通信方式。常用的信号有15号信号，杀死进程 29号进程 11号段错误\nhttp和https的区别 https是安全版的http协议。\nget和post的区别 get用来获取资源，post用来创建资源。\nget将数据放在url地址栏中，使用问号与url分割，数据间用取地址符分割。post将数据放在请求体中。\n安全性上get放在url容易暴露隐私信息，而post放在请求体中可以适当的避免。\nget在传输的数据受url地址栏的限制，post不受这种限制\nget的操作是幂等的，多次操作产生的影响相同，而post是非幂等的\nB树和B+树的区别 B树是多叉平衡树，**M阶的B树，每个节点最多有M-1个关键字，**每个节点的关键字都按照从小到大的顺序排列，因此查询时可以使用二分查找法。\nB树中所有叶子节点都位于同一层，每个节点都存有索引和数据。\nB树的优点在于查询单个数据时，由于每个key都存有对应的date，查询到后可以直接取回。\nB+树非叶子节点只存索引不存数据，每个叶子节点增加一个指向相邻接叶子节点的指针，所有的节点都存在叶子节点。B+树的优点在于范围查询时，可以利用相邻的指针获得指定范围内的数据。\n网络拥塞 慢启动 拥塞避免 快速重传 快恢复 TCP和udp的区别 tcp面向连接的可靠的流式协议，具有超时重传和确认等机制。\nudp面向无连接的报文协议，发出去就不管了，收则全收，丢则全丢。\n智能指针 unique_ptr\nshared_ptr\nweak_ptr\n四种强制类型转换 const_cast去掉const属性的转换，包括const指针和引用\nstatic_cast用于低风险的转换，比如字符型转整形\ndynamic_cast 用于具有继承关系的派生类和子类的转换，当基类转为子类时，如果转换失败会返回NULL\nreinterpret_cast 任何类型都能转，风险较高\npost和put的区别 post用来创建资源，put用来更新资源\npost是非幂等的，put是幂等的。\n8中请求方法：\nhttp 1.0: get post head\nhttp 1.1: put delete options connect trace\nmmu内存管理器 主要作用：虚拟内存到物理内存的地址映射。 设置修改内存访问级别。\n虚拟内存的作用 解决主存容量有限 分隔进程，保证进程空间彼此独立不受干扰 基于局部性原理进行页面替换 虚拟内存的大小由计算机的地址总线决定\ncache名字和TLB命中没有必然联系，是两种独立的机制。\nCPU和Cache之间交换的单位是字节，Cache和内存之间交换的单位是块。\ncoredump文件 gdb可以用于分析coredump文件。coredump文件含有进程被终止时内存/CPU寄存器和各种函数调用栈的信息。\n产生coredump文件的原因：\n内存访问越界 多线程使用了线程不安全的函数 多线程读写的数据未加锁保护 栈溢出 core文件没有符号表信息，必须结合可执行文件才可调试\n模板特化 全特化：模板参数被指定未确定的类型\n偏特化：模板参数没有被全部确定，需要编译器在编译时进行确定。只能偏特化类模板，不能偏特化函数模板。\n别名模板和变量模板属于语法糖\n元编程 在编译时计算出运行时需要的常数，类型和代码的方法。\n右值引用 右值引用指向要被销毁的对象。右值要么是字面常量，要么是在表达式求值过程中创建的临时对象。\nmove函数将左值转换为右值，调用move函数后源对象只能赋值或销毁。\noverride override在子类中标记某个函数，表示想要覆盖已有的虚函数，如果没有覆盖，编译器会报错。\n加作用域运算符调用特定类的虚函数\n内联函数的优劣 优点：减少函数调用的开销，包括寄存器值的保存和实参的拷贝等。 缺点：增加函数体积，可能导致cache装不下，从而减少了cache的命中率。 inline只是一个请求，编译器有权拒绝。\n拷贝构造函数 调用场景：\n一个对象以值传递传参 一个对象以值传递的方式从函数返回 一个对象通过另一个对象初始化 空类 占有一个字节\n有构造，析构，拷贝，赋值运算符，取地址运算符。\n构造函数可以被重载，析构函数不可以被重载且不能带参数。\nexplicit explicit取消隐式转换，类中构造函数默认是implicit\nexplicit关键字的作用是防止类构造哈桑农户的隐式自动转换，只对有一个参数的构造函数有效。\n堆和栈的区别 申请方式不同。栈由操作系统自动分配，堆需要程序员自己申请。 生长方向不同。栈由高地址向地址生长，是一块连续的内存区域。堆由地址向高地址生长，是不连续的内存区域。在一个链表中记录空间内存地址。 分配速度。栈由系统分配，速度较快。堆使用new分配，速度较慢，且容易产生内部碎片。 C++ 和python的区别 python是解析性语言，无需编译，方便快捷，跨平台性很好。\nC++是编译型语言，先编译后执行，编译后通常不能跨平台。\npython使用严格的缩进来表示不同级别的代码块，在C++中使用花括号。\n索引 select语句调用函数后就不会用到索引\nstatic的作用 static可以用来修饰函数和变量。修饰全局变量和局部变量时都是放在静态区，static变量只初始化一次，在程序结束时销毁，全局和局部的区别在于作用域不同。static可以修饰普通成员函数，表明这个函数只在本文件中有效。static修饰类成员变量是，这些变量为这个类所共享，static修饰类成员函数时，也是所有对象共享这个函数，该函数中没有this指针。同时static类成员函数中只能调用static修饰的函数。\n静态存储区 存放的static修饰的全局变量和局部变量，const修饰的变量以及字符串。 数据段和静态区的区别 数据段存放的是代码的二进制指令。静态区是变量。\n虚函数的实现机制 每个含有虚函数的类都有一个虚函数表，类创建的对象都由编译器自动生成一个虚函数表指针来指向虚函数表。子类继承时会继承这个虚函数表，在子类中如果重写了父类定义的虚函数，这个虚函数中的对应内容会替换为重写的内容。当父类指针或引用指向子类对象时，调用对用对应的虚函数时会根据虚函数表指针找到虚函数表，然后从表中找到重写的虚函数入口地址，然后实现对应的行为。虚函数使代码更具有扩展性。\npython的多态 子类继承父类，子类重写父类的函数，调用时就自动调用了子类的函数。\nC++和python的区别 C++是编译型语言，需要先编译再执行，编译后通常不可以跨平台。 python是解释型语言，直接运行，跨平台好。上手快，容易浮于表面不够深入。 python带来的收益 快速上手机器学习和深度学习，直接调用大量的库函数。\nSTL底层容器和实现原理 vector是动态数组，分配连续的内存，2倍扩容。 list双向表，插入删除效率高。 map和set红黑树，有序的容器。 stack和queue底层可能都是数组实现 unordered_map和unordered_set哈希表。 array栈上分配的数组执行效率快。 tuple元组多数据类型的集合。 快排 基于交换和分治的算法， 平均nlogn 最坏n平方\n四次挥手 主动关闭方发送FIN标志位，自身状态进入FIN_WAIT_1被动关闭方收到FIN后，发送ACK确认，自身进入CLOSE_WAIT状态，当主动关闭方收到ACK后，进入FIN_WAIT_2状态，此时主动关闭方只能接收数据，不能发送数据，因为TCP是全双工的，所以要等待被动关闭方关闭后才结束。此时进行了两次挥手，双方进入半关闭状态。当被动关闭方需要关闭时，发送FIN标志位，发出后自身状态进入LAST_ACK状态，如果对方收到FIN标志位后，发送ACK应答，自身进入TIME_WAIT状态，等待2MSL后关闭连接。等待的2MSL是报文在网络传输中一个来回的长度。确保最后一个ACK能被对方收到。\nstatic关键字 static可以修饰普通函数变量和类成员函数和变量。\nstatic修饰普通变量时，分为全局变量和局部变量，两者都保存在静态区，并且只初始化一次，在整个程序运行期间一直存在。全局变量和局部变量的区别是作用域不同。 static修饰普通函数时，说明此函数只在本文件中可见，防止多个文件的同名冲突。 static修饰类中的成员变量时，必须在类中声明，在类外初始化，初始化的时候分配内存，所有的static成员变量为所有对象共享。 static修饰类中的成员函数时，只能调用static的变量和函数，没有this指针，所有对象共享这个函数，可以使用类名直接调用。 变量分为全局变量和局部变量，static修饰全局变量时，表示这个变量只在本文件中可见\nconst关键字 const用于限定变量指针和函数不可改变，方便编译器做类型检查。\ncons修饰变量时必须初始化。const全局变量通常放在静态区，const局部变量放在栈区。 cosnt修饰成员函数时，函数中的成员变量不可更改，如果要修改成员变量需要声明为mutable const修饰指针有两种，常量指针和指针常量，常量指针是指针的指向的值不可改变，而指针的指向可以改变。指针常量是指向不可变，而值可变。 const和define的区别 const明确指定类型，编译器对类型做检查，而define没有类型也不 检查。 const分配内存，而define不分配。 const在编译期处理，而define在预编译期进行宏替换。define的宏替换不加括号会产生严重的影响。 指针和引用的区别 指针保存的是所指对象的地址，而引用是所指对象的别名。指针通过解引用间接访问所指的对象，而引用直接访问。 指针可以有多级，而引用最多两级。当有两个取地址符时，是右值引用，右值引用可以减少深拷贝的次数。 指针定义时可以不初始化，即使初始化后也可以改变。而引用定义时必须初始化，初始化后不可以改变。 引用的本质是指针常量，编译器帮助转换。指针常量的指向不可以改变，值可以变。 define与内联函数的区别 内联函数是一个函数，在编译期插入到调用的地方，而define在预处理期进行替换。 内联函数避免了函数调用时的压栈和参数拷贝等操作，提高了性能。 内联函数对参数有类型检查。define不加括号容易出错。 new和malloc的区别 malloc是库函数，new是运算符 malloc只分配内存不初始化，而new不仅分配内存也初始化。new分配内存以后自动调用构造函数。 malloc分配内存时必须指定内存大小，而new可以自动计算。malloc分配完成后返回的是void*类型，需要强转，而new返回的是对应类型的指针。 malloc分配内存失败时返回NULL，而new分配内存失败时抛出bad_alloc异常。 http和https的区别 两者都是用于客户端和服务器端通信。\nhttps是http的安全版。\n主要区别在于：\nhttp是明文传输，https是密文传输。 http默认端口是80， https的默认443 https需要验证服务器端的身份，如果CA证书不正确则会中断通信。 CA证书需要成本，加密解密的过程增加CPU和内存的开销。 https增加了ssl层，用于确保传输的安全性。\n通信前先进行ssl层的握手，首先客户端ssl版本号和加密组件发送给服务器端。\n服务器端筛选出可用的ssl版本号和加密算法同时加上CA证书发送给客户端。\n客户端验证CA证书的有效性，如果无效则中断通信。\n若有效客户端发送加密的pre-master secret随机密码串，这一步使用的是非对称加密，用于协商后面对称加密的密钥，所以这一步不能被篡改和截获。客户端得到服务器端的响应后，且验证通过后，后续就使用对称加密加密算法进行加密。然后进行TCP三次握手。\nhttp1.0和http1.1的区别 http1.0只支持短连接，即一次通信完成后就立即断开\nhttp1.1支持长连接，一次TCP建立以后，可以进行多次请求。\nhttp1.0只提供了三种请求方法：get post head\nhttp1.1增加了五种请求方法：put delete connect trace options\nhttp1.1增加了许多状态码，比如100 continue 表示已经收到，等待后续的资源。206 partial content 部分资源\nhttp1.1支持一个物理主机上可以有多个虚拟主机共用一个IP\n","permalink":"//localhost:1313/posts/%E5%85%AB%E8%82%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","summary":"\u003ch2 id=\"volatile\"\u003evolatile\u003c/h2\u003e\n\u003cp\u003e用来告诉编译器不要对该变量做任何优化，编译器每次操作该变量时，一定要从内存中取出，而不是使用寄存器中与存在的值，因为值可能已经发生了改变。\u003c/p\u003e\n\u003cp\u003e应用场景：\u003c/p\u003e","title":"八股基础"},{"content":"逻辑用语千万条，第一首先往里套。 首先，其次，然后，最后。 第一，第二，第三，第四。 书籍 《C++ primer》 第五版 《后台开发》 徐晓鑫 《linux高性能服务器编程》 游双 《redis设计与实现》黄健宏 《muduo库》陈硕 static static的使用可以分为两类，一类是用在普通变量和函数上，另一类是用在类中。\n普通变量分为全局变量和局部变量。声明为静态全局变量是在全局区分配内存，并且只在当前文件可见，在文件之外是不可见的。其他文件定义同名变量不会发生冲突。变量的值只在第一次执行时进行初始化。声明为静态局部变量时与全局变量类似，只是作用域为局部作用域。 静态普通函数，只在当前文件中可见，其他文件中定义同名函数不会发生冲突。 static用在类中，首先是静态成员变量，**在类中声明，类外初始化。**所有对象共享一份数据。 然后是静态成员函数：所有对象共享同一个函数，静态成员函数只能访问静态成员变量。 多态 多态分类两大类：静态多态和动态多态。静态多态是重载和模板。动态多态：也叫运行时多态，是通过继承和虚函数实现的。在具有继承关系的子类中，子类重写父类的虚函数，通过父类引用或指针指向子类对象时，产生不同的行为叫做多态。\n多态的核心在于虚函数表指针，每个对象都有一个虚函数表指针，虚函数表指针指向一张虚函数表，表中记录了虚函数的入口地址，如果子类重写虚函数后，这个地址就会替换掉。多态的好处在于更方便程序的扩展，坏处在于每个对象多了一个4字节的指针，同时每次查询虚函数表需要耗时。\n智能指针 C++11有3个智能指针，分别是unique_ptr, shared_ptr和weak_ptr\nunique_ptr独享指针的所有权，无法进行拷贝构造赋值的操作，只能通过move函数进行所有权的转换。 shared_ptr共享对象，它使用引用计数来保存当前有多少个智能指针在引用这个对象，当引用计数降为0时，对象会被销毁。 weak_ptr称为弱引用，用于辅助shared_ptr正常工作，主要解决shared_ptr可能会产生的环形引用问题。weak_ptr不会增加对象的引用计数，共享指针可以直接赋值给弱指针，同时弱指针可以使用lock函数来获取shared_ptr对象 malloc和new malloc和new都是在堆上开辟内存，进行动态的管理。\nnew是操作符，malloc是库函数 malloc只负责开辟内存，没有初始化功能。new不但能开辟内存，还可以初始化。 malloc必须指定开辟内存的大小，并且返回类型为void*，因此malloc的返回值一般都需要进行类型转换。new可以自动计算出所需内存的大小，并且返回指定类型的指针。 malloc和new如果操作是内置数据类型两者基本类似，不同在于申请失败时。malloc申请失败时返回**NULL。**new申请失败抛出异常。 自定义类型时，new先调用operator new函数申请空间，然后在申请的空间上执行构造函数。 C++内存模型 从高地址到低地址\n环境变量和命令行参数 栈区 共享区 堆区 未初始化数据段.bss 初始化数据段.data 代码段.text 指针和引用的区别 指针保存的是所指对象的地址，而引用是所指对象的别名。指针需要通过解引用间接访问对象的值，引用可以直接访问。 指针可以有多级指针，而引用最多两级。并且两个取地址符是右值引用。右值引用是为了减少深拷贝的次数。 指针可以不初始化，即使初始化以后也可以改变。而引用必须初始化，同时初始化以后不许改变。 引用的本质是指针常量。指针常量不可以修改指向，但是可以修改指向的值。常量指针刚好与之相反。 vector底层原理 首先，vector的基类是三根指针，分别是start/finish/end_of_storage用来指示当前分配到的空间所用的起始位置，终止位置和容量尾部。然后，当finish指针到达end_of_storage的位置时，操作系统会寻找当前容量大小2倍的连续内存空间，并且将旧内存中的数据拷贝到新内存，然后释放旧内存。其次，如果重新分配了内存，原来的迭代器就会失效。频繁的开辟新内存比较耗时。如果可以预知使用的大小，可以使用reserve函数，预先开辟足够大的空间。或者使用swap函数收缩内存空间。\n代码生成可执行文件的过程 主要分为四个步骤\n预编译阶段：对g++编译器指定-E参数，生成.i文件。这个阶段的主要工作是将所有的宏展开，去掉所有的条件预编译指令，将所有的头文件包含进来，删除注释等。 编译阶段：对g++编译器指定-S参数，生成.s汇编文件。这个阶段的主要工作是对代码的语法，语义和词法等进行分析。 汇编阶段: 对g++编译器指定-c参数，生成.o二进制文件。 链接阶段：将各个模块之间的相互引用处理好。把所有的静态库用到的目标文件装入程序中，并进行统一编址，然后进行重定位，即逻辑地址到物理地址的转换。 静态库与动态库 静态库：命名方式为lib开头加上自定义的静态库名，然后以.a结尾。静态库实际上是一组目标文件的集合，再链接阶段与调用的程序生成可执行文件。静态库的优点在于：**代码加载速度快，发布程序时，不需要提供对应的库；**缺点时：可执行文件体积大，**同时如果静态库有修改，调用的程序需要重新编译，**而编译的耗时比较久。 动态库：命名方式为lib开头加上自定义的动态库名，然后以.so结尾。动态库首先生成与位置无关的目标文件，然后再运行时加载到内存。优点是：动态库可以共享，节省了系统资源，动态库进行修改后，无需重新编译。缺点是加载速度比静态链接慢，发布程序时，需要提供动态库。 符号表 每个目标文件除了拥有自己的数据和二进制代码外，还提供了3个表：\n**未解决符号表：**提供了所有在该编译单元里引用但是定义并不是在本编译单元的符号及其出现的地址。【引用无定义】将extern声明的变量置入未解决符号表。【外部链接】 **导出符号表：**提供了本编译单元具有定义，并且愿意提供给其他单元使用的符号及地址。【有定义肯让外用】普通变量及其函数被置入导出符号表。 **地址重定向表：**提供了本编译单元所有对自身地址的引用的记录。static声明的全局变量放入地址重定位表中。【内部链接】 指针常量 int* const p = \u0026amp;a 指针常量必须初始化，一旦初始化完成，就不能再修改它的值，即指针的指向不可变。\n引用的本质是指针常量\n声明和定义的区别 声明是告诉编译器有这个变量和函数的存在，但是需要到其它地方去寻找。 定义包含了声明，但是声明不包含定义。 定义时才分配存储空间。 C和C++的区别 设计思想上： C是面向过程的结构化语言，CPP是面向对象的语言 语法上： CPP具有三大特性，封装继承多态 CPP相对于C增加了许多类型安全的功能，比如四种强制类型转换 CPP支持范式编程，如模板类，函数模板等 struct和class的区别 共同点：C++中，可以用struct和class定义类，都可以继承。\n不同点：struct默认继承权限和默认访问权限时public class类的默认继承权限和访问权限时private。\nvolatile关键字 对类型额外修饰的作用，类似于const。告诉编译器不要对这样的对象进行优化，因为该对象的值可能在程序的控制或检测之外被改变。\nconst关键字 const 可以用于限定变量，指针和函数不可改变，同时明确制定了类型，可以方便编译器做类型检查，也增加了代码的可读性。\nconst修饰变量必须初始化。如果是全局的const变量，通常放在静态区。在局部声明的const变量放在栈区。\nconst修饰成员函数时，函数中的成员变量不可改变，除非该变量特别声明为mutable\nconst可以用来修饰指针，称为常量指针const int *p 指针的指向可以改变，但是不能改变指针指向的值。\nconst修饰常量的指针叫做指针常量，int* const p 指针的指向不可以修改，指针指向的值可以修改。指针常量必须初始化。\nconst可以明确指定类型，而宏定义没有数据类型。\ndefine宏是在预处理阶段展开。const常量是编译运行阶段使用。\n宏定义不分配内存，变量定义分配内存。\nextern关键字 引入同一模块在其他文件中定义的全局变量和函数。 如果在C++里调用了C库定义函数，那么需要使用extern \u0026quot;C\u0026quot; 标识这个函数，告诉编译器使用C的方式进行编译，防止C++的编译方式导致命名重整，无法找到对应的C函数。命名重整的原因在于**C++支持函数重载，而C不支持。**所以C++编译时增加了函数参数的标识符。 extern通常放在为解决符号表中，表示定义不在本文件而引用的变量。 this关键字 解决同名冲突 返回对象本身 this指针的本质是指针常量，指针的指向不可以修改。\nmove函数 将左值强制转换为右值引用，右值引用可以减少一次对象的析构和对象的构造。\n右值引用可以减少深拷贝的次数。\n段错误 段错误通常发生在**访问非法内存地址的时候。**系统会发送一个SIGSEGV11号信号告诉当前进程，进程采取默认的捕获方式，即终止进程。\n野指针 试图修改字符串常量的内容 auto关键字 让编译器能够根据初始值的类型推断变量的类型。当处理复杂类型，比如STL中的类型时，优势最明显。auto p = vt.begin()\n四种强制类型转换 static_cast 低风险的转换，比如整数转浮点数，字符型转整形 const_cast 去掉const关键字的转换，可以去掉带const的指针和引用 dynamic_cast 使具有继承关系的基类转换为派生类，如果不可以转换则返回NULL reinterpret_cast 指针或引用的转换，风险较高 RTTI run time type identification 运行时类型识别。**常常结合typeid()和dynamic_cast实现。**可以根据当前调用的指针是何种类型，经过dynamic_cast转换后，调用非虚函数。**dynamic_cast只能用于指针和引用的转换，要转换的类型中必须包含虚函数，转换成功返回子类的地址，失败返回NULL。**typeid返回一个type_info对象的引用。\n构造函数不能是虚函数 虚函数是通过虚函数表指针来调用的，而虚函数表指针存在对象内存空间。当一个对象调用构造函数时，该对象还没有实例化，即没有分配内存空间，所以虚函数表指针无法找到。\n析构函数尽量是虚函数 析构函数不是虚函数容易引起内存泄漏。\n为了实现多态的动态绑定，通常将基类指针指向派生类对象，当指针销毁时，如果析构函数不是虚函数，根据析构函数在继承中的调用顺序，则派生类对象将不会被析构，造成内存泄漏。\n析构函数不能抛出异常 析构函数抛异常，则异常点之后的的程序不会执行，如果异常点之后有释放资源的操作，则这部分资源无法释放，导致内存泄漏。noexcept\n内存泄漏 不再需要使用的内存单元，没有及时释放。memcheck和valgrind检测内存泄漏的工具。使用RAII资源获取就是初始化和智能指针。\n野指针 一些内存的单元已被释放，之前指向它的指针还在被使用。\nvector和list的区别 vector是动态数组，在内存中分配一块连续的内存空间，因此可以使用下标进行快速的随机访问。但是删除和插入需要移动大量的元素。 list是双向链表，在内存中是不连续的空间，由指针将不同的地址连接在一起。list的插入和删除操作都是O(1)的。 数组必须事先设定固定的长度，不能动态的增减，可能会造成资源浪费。链表可以动态的增减。 浅拷贝 由于编译器默认的拷贝构造函数只是简单的位拷贝，可能会导致内存的重复释放。解决浅拷贝的办法通常使用深拷贝，即自己实现拷贝构造函数，在堆上重新分配内存。\n内存对齐 union最大成员所占的整数倍，同时能容纳其他的成员。union中变量共用内存，应以最长的为准。\nstruct按照成员的声明顺序，依次安排内存，偏移量为成员大小的整数倍，最后结构体的大小为最大成员所占大小的整数倍。在C++中，空结构体和空类的内存所占大小为1个字节。C中空结构体所占大小为0。\n为什么要有内存对齐：1. 硬件原因：**加速CPU的访问速度。**因为CPU和内存数据交换的基本单位是块，块的大小为2的n次方字节。内存未对齐可能需要多次访问内存。2. 平台原因：不是所有的平台都支持任意地址的数据访问。\n#include \u0026lt;iostream\u0026gt; using namespace std; typedef union{ long long i; //8 bytes int k[5]; //4 bytes 最长的成员不是20 char c; // 1 byte }UDATE; //联合体共用内存 最长成员为8字节 结果要为8的倍数 同时要能容纳其他成员，即大于等于20字节 所以为24字节 struct data{ int cat; // 4 bytes UDATE cow; //24 bytes 但是需要先拆开来 最长成员为8字节 double dog; //8 bytes }too; //结构体顺序考虑，结果为最大成员的整数倍，如果后一个成员的长度的开始位置不是整数倍需要填充字节 //cat占4个字节 填充4个字节 //起始位置为8 满足整数倍 cow占用24字节 //起始位置为32 满足整数倍 doule占用4字节 //所以结构体总共占用40字节，同时40也是8的倍数。 UDATE temp; int main(){ cout\u0026lt;\u0026lt;sizeof(temp)\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt; sizeof(struct data)\u0026lt;\u0026lt;endl; //24 40 return 0; } gdb调试 gdb可以用于分析coredump文件，coredump文件中含有当进程被终止时内存，cpu寄存器和各种函数堆栈信息等。\n设置断点 b 120 运行 r 打印遍历p number 查看堆栈bt 查看循环中的变量 i 单步运行n ","permalink":"//localhost:1313/posts/003c++%E8%AF%AD%E8%A8%80/","summary":"\u003ch2 id=\"逻辑用语千万条第一首先往里套\"\u003e逻辑用语千万条，第一首先往里套。\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e首先，其次，然后，最后。\u003c/li\u003e\n\u003cli\u003e第一，第二，第三，第四。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"书籍\"\u003e书籍\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e《C++ primer》 第五版\u003c/li\u003e\n\u003cli\u003e《后台开发》 徐晓鑫\u003c/li\u003e\n\u003cli\u003e《linux高性能服务器编程》 游双\u003c/li\u003e\n\u003cli\u003e《redis设计与实现》黄健宏\u003c/li\u003e\n\u003cli\u003e《muduo库》陈硕\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"static\"\u003estatic\u003c/h2\u003e\n\u003cp\u003estatic的使用可以分为两类，一类是用在\u003cstrong\u003e普通变量和函数\u003c/strong\u003e上，另一类是\u003cstrong\u003e用在类中\u003c/strong\u003e。\u003c/p\u003e","title":"003C++语言"},{"content":"TCP头部 16位源端口 16位目的端口 32位序号 32位确认序号 4位TCP头部长度 单位为4字节 6位标志位 16位滑动窗口 16位校验和 16位紧急指针 注意：TCP的包没有IP地址，只有源端口和目的端口。一个TCP连接需要4个元组来表示一个连接。（源端口，目的端口，源IP，目的IP）\n为什么建立连接需要3次握手 主要是初始化序列号和协商最大报文段长度。\n粘包问题 udp不存在粘包的问题，因为udp是个数据包协议，也就是两段数据间有界限的。要么收不到，要么全收。\n产生粘包的原因：nagle算法为了改善网络传输效率，延迟发送数据。应用层由于某些原因不能及时取出TCP的数据，导致TCP缓冲区存放了多段数据。\n解决方式：封包和拆包。包头存放一个变量记录包体的长度。在所发送的内容前，加上发送内容的长度。\nHTTP原理 http协议是应用层协议，通过请求响应的方式在客户端和服务器端进行通信。\nhttp协议是以明文的方式进行传输，并且是无状态的通信协议。\nhttp与https的区别 传输方式：http是**明文传输，极易被监听和篡改。**而https加入了ssl层，数据经过了加密，从而保护了传输数据的隐私和完整性。 身份认证： http没有身份认证，而https经过证书颁发机构的多重认证。 连接端口：http为80 https为443 实现成本：http基本没有成本，https需要申请证书，同时在加密解密上需要消耗更多的CPU资源，访问速度有可能降低。 加锁的图标显示 谷歌和百度搜索的排名会对非https的排名有影响 私钥能解密，但是不能确认是哪个客户端发送的消息，任何人都可以抵赖。为了防止抵赖，可以使用数字签名。\nhttps是http的安全版，在http的基础上增加了SSL安全层。\n基于性能的考虑，https一般使用非对称加密算法获得密钥，再用对称加密算法对消息内容进行加密。\nhttps发送请求的过程：\n第一步，客户端和服务器端交换SSL版本和加密组件列表，同时服务器端将密钥和签名证书发给客户端。 第二步：客户端根据证书和密钥进行验证，通过以后协商传输的密钥。这一步使用非对称加密算法。 第三步：当双方都获得密钥，且校验码没有问题。则进行TCP三次握手，此时采用对称加密算法，提高效率。 http1.0 与 http1.1的区别 **长连接：**HTTP 1.1支持长连接和请求的流水线处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟。 带宽优化： HTTP/1.1中在请求消息中引入了range头域，它允许只请求资源的某个部分。 **新增响应状态码：**100 continue 已经收到第一部分，正等待剩余部分。 101 switch protocols 服务器已确认切换协议。 **host头域：**允许物理主机上多个虚拟主机共享一个IP 缓存机制更灵活，新增control-cache头域 增加了5个请求方法：put delete connect options trace get和post的区别 都是http的请求方式。\n区别在于：\n**用途上：**get一般用于获取资源，post一般用于创建资源。 位置上：get请求的的数据会在地址栏上显示出来，以问号分割url与传输数据，多个参数用取地址符连接。而post的数据放在请求体中。 **安全性上：**优于get将信息显示在地址栏，所以对于用户密码等个人隐私信息很不安全，而post放在请求体中，在安全性上要稍微好点。 **长度限制：**get使用地址栏发送数据，而地址栏的长度是有限的。 **幂等性上：**get操作没有副作用，多次操作产生的副作用相同，所以get是幂等的，而post用于创建资源是会又副作用的，所以post不是幂等的。 cookie和session cookie和session都是跟踪会话的机制。\n**存储位置：**cookie保存在客户端用来记录信息和确定用户身份，session保存在服务端同样用来记录和确定身份。 **安全性：**cookie放在客户端很容易被查看或者破解，没有session安全。 关联性：session的运行依赖于session id 而session id 存在cookie中。如果浏览器禁止了cookie，可以使用url地址重写来传递session id **性能上：**session会在有效期内存在于服务器的数据库或者文件，当请求过多时，服务器性能会下降。 **大小上：**单个cookie保存的大小不能超过4k 使用cookie来管理session以弥补http中无状态特性。通过对set-cookie头域写入session ID可以免登录，提高访问的效率。\n握手优化：session缓存， session key 放在内存，有内存消耗， 负载均衡后找不session key。session ticket 集群可以共享。\nTCP和UDP的区别 TCP: 面向连接的安全的流式协议，连接的时候进行三次握手，数据发送的时候会进行数据确认，数据丢失之后，会进行数据重传。 确认和重传机制。 UDP: 面向无连接的不安全的报文传输，发出去就不管了，收则全收，丢则全丢。 3次握手和4次挥手 TCP三次握手：客户端向服务器端：发送SYN=1和序号seq 服务器端向客户端：回应确定信号同意连接ACK=1以及自己的连接请求SYN=1还有序号seq 客户端回应服务器端：ACK=1告诉对方它已经知道了服务器端同意，连接成功。\nTCP四次挥手：主动关闭方发送关闭信号，被动关闭方收到信号。然后进入半关闭状态，关闭的一方能接收数据但是不能发送数据。 等到另一个未关闭的一方，发起关闭信号以后，进入TIME_WAIT状态，等待对方2MSL之后，彻底关闭。\n3次握手55555555 客户端发起连接，也就是C语言中的connect函数，发送一个SYN=1的标志位，同时携带一个序号。\n服务器端有一个accept函数，用于响应连接。服务器端响应连接后回复一个ACK=1的标志位，并且也发送一个SYN=1的标志位建立连接。\n客户端收到服务器端的ACK应答以后，说明建立成功。两者都同时进入established状态。同时accept和connect函数调用成功，并返回1。\n4次挥手55555555 主动关闭方向被动关闭放发送FIN标志位，表示要断开连接。被动关闭方同意关闭，并回发ACK标志位。此时主动关闭放进入FIN_WAIT_2状态。以后主动关闭方仍然可以接收数据，但是不可以再发送数据。\n当另一方也决定关闭时，会发送FIN标志位，接收方回复ACK同意关闭，并且自身进入Time_wait状态，等待2MSL时长后关闭。发送方如果收到ACK应答后，就直接关闭，如果没有收到会一直发FIN标志位。\n滑动窗口 流量控制：防止发送方发的太快，耗尽接收方的资源。\n控制机制：滑动窗口\n在TCP报文的头部有一个16位的窗口大小，用于告诉发送方接收方可用的缓冲区大小。\n拥塞窗口 拥塞控制：防止发送方发的太快，使网络来不及处理，从而导致网络拥塞。\n控制机制：拥塞窗口\n慢启动 拥塞避免 快重传 快恢复 **慢启动：**为了防止大量数据瞬间注入网络，引起网络阻塞。慢启动算法设定，最开始窗口为1个最大报文长度。一个传输轮次增加一倍的窗口大小。当达到慢开始门限后，执行拥塞避免算法。 拥塞避免： 每个传输轮次将窗口增加一个单位，即加法增长。 快重传： 当收到3个重复确认以后，执行快恢复算法。慢开始门限和发送窗口减半，然后发缺失的数据，进行加法增长，重新进入拥塞避免阶段。 **快恢复：**慢开始门限减半，发送拥塞窗口设定为门限加3。如果后面依旧收到重复的ACK则进行加法增长窗口，如果收到新的ACK，则拥塞窗口设定为慢开始门限的值，并重新进入拥塞避免阶段。 超时进入的是慢启动，重复确认才进入快恢复。\n选择性重传在options中left edge和right edge告诉发送方已经收到的报文序号\nTCP粘包问题 **udp不会出现粘包。**发送方发送的若干包数据到接收方接收时，包粘在了一起。\n造成粘包的原因时因为发送端延迟发送或者接收方没有及时接收缓冲区中的数据。\n通常可以使用以下三种方式来解决\n编程时设定立即发送的操作指令 把数据长度与消息一起发送。 使用特殊标记来区分消息的间隔 HTTP和HTTPS有什么不同 HTTP协议是一种使用明文数据传输的网络协议。HTTPS协议可以理解为HTTP协议的升级，就是在HTTP的基础上增加了**数据加密。**在数据进行传输之前，对数据进行加密，然后再发送到服务器。这样，就算数据被第三者所截获，但是由于数据是加密的，所以你的个人信息让然是安全的。这就是HTTP和HTTPS的最大区别。\n在浏览器地址栏键入URL，按下回车之后会经历以下流程 浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;（递归式和迭代式） 解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接; 浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器; 服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器; 释放 TCP连接; 浏览器将该 html 文本并显示内容; UDP如何做到可靠 想要做到可靠，必须要做到**无重复，无丢失，无错误，无失序。**借鉴TCP的可靠机制\n发送时进行编号 接收方收到数据发出应答信号（超时重传，3次确认重传） 增加校验位 NAT DNS ARP NAT用于实现从内部IP地址到外部IP地址的映射 DNS提供域名到IP地址的映射或者反过来 ARP提供IP到MAC地址的映射 DNS 基于UDP的协议\n递归查询：父域名代替当前服务器递归查询，最后依次返回 迭代查询：父域名服务器告诉当前服务器下一次查询的位置 http状态码 100 continue 等待继续发送 200 ok 请求成功 206 patial content 部分资源 301 永久重定向 302 临时重定向 307 400 客户端请求报文语法错误 403 禁止访问 404 资源不存在 408 请求超时 500 服务器内部错误 503 服务器不可用 http 2.0 SPDY 二进制分帧 多路复用 首部压缩 服务器推送 http 3.0 QUIC+UDP 0 RTT 没有队头阻塞的多路复用 前向纠错 网络安全 **sql注入：**用户提交一段数据库查询代码，根据程序返回的结果获得它想得知的数据。 dos攻击： 让运行的服务器呈停止状态。集中请求造成资源过载，攻击安全漏洞使服务停止。 TCP原理 面向连接，可靠的，基于字节流的传输层协议\n七层模型 物数网传会表应\nping是从应用层直接使用网络层的ICMP协议的，不经过传输层。原始套接字直接使用网络层的IP。\n两台电脑通信：网线+不同的IP地址和子网掩码，即处于同一网段。\nTCP和UDP可以同时使用相同的端口。\n应用程序可以同时使用TCP和UDP两个协议。\nhub集线器 可以实现多个IP主机通信，但是hub的实现方式是广播，容易产生拥堵。\nswitch交换机 是集线器的升级版，可以广播可单播。ARP不知道对方MAC地址时，先广播6个ff的MAC地址，所有网卡都会接收，但是只有目的IP会单播回应，其他的都会丢弃。然后发送方收到正确的MAC后再单播传输数据。\nARP攻击 给两个MAC地址响应ARP广播的目的IP，经由中间人，窃取信息后再转发到正确的地址。\n默认网关 在同一个交换机连接的网络中，属于同一网段，用不到默认网关。网关用来传递两个不同网段的通信，默认网关通常是路由器。当通信的数据不在当前网段时，即发给默认网关。路由器就是用来连接不同网段的，用来构建一个更大的网络。在传输不同的网段信息时，源IP和目的IP是不变的，源MAC和目的MAC是改变的，每经过一个路由器修改一次，记录的是下一次的目的，和这一次的发送MAC。\n延迟确认 ack会随着响应数据发送给对方，如果没有响应的数据就会等待200ms左右，在这期间如果有对方确认到达则立即发送。如果200ms后仍然没有数据需要发送则单独发送ACK。目的是节省带宽。\nNagle算法 没有已发送未确认报文段时，立即发送数据。 存在未确认报文段时，达到mss时再发。 同时有nagle算法和延迟确认存在时会导致网络效率下降，通常会关闭延迟确认和nagle算法。\nsetsockopt(s,IPPROTO_TCP,TCP_QUICKACK,(int*){1}, sizeof(int)); //关闭延迟确认 setsockopt(client_fd, SOL_TCP, TCP_NODELAY,(int[]){1}, sizeof(int)); //关闭nagle算法 忽略SIGPIPE信号 客户端和服务器端连接建立后，若某一端关闭连接，而另一端仍然向它写数据，第一次写数据后会收到RST响应，第二次写数据时，内核会向进程发送一个SIGPIPE信号，通知进程此连接已断开，而这个信号的默认处理方式是终止进程，服务器直接关闭。\nsignal(SIGPIPE, SIG_IGN) SIGSEGV 11 访问地址无效 SIGIO 29异步通知信号 SIGKILL 9 无条件终止\n传输层与网络层的区别 传输层位于网络层之上，为不同主机上的应用进程提供逻辑通信。端到端传输。 网络层负责ip数据报的产生以及ip数据包在网络中的路由转发。 状态码499 服务器端处理的时间过长，客户端主动关闭了连接。\n分块编码 transfer-encoding:chunked 响应头域 它允许服务器发送给客户端的数据分成多个部分，并且不需要预先直到发送数据的总大小。\nclose_wait 基本的思想就是要检测出对方已经关闭的socket，然后关闭它。维持一个心跳包或者设置一个超时时间。\n","permalink":"//localhost:1313/posts/002%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","summary":"\u003ch2 id=\"tcp头部\"\u003eTCP头部\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e16位源端口\u003c/li\u003e\n\u003cli\u003e16位目的端口\u003c/li\u003e\n\u003cli\u003e32位序号\u003c/li\u003e\n\u003cli\u003e32位确认序号\u003c/li\u003e\n\u003cli\u003e4位TCP头部长度  单位为4字节\u003c/li\u003e\n\u003cli\u003e6位标志位\u003c/li\u003e\n\u003cli\u003e16位滑动窗口\u003c/li\u003e\n\u003cli\u003e16位校验和\u003c/li\u003e\n\u003cli\u003e16位紧急指针\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e注意：\u003cstrong\u003eTCP的包没有IP地址\u003c/strong\u003e，只有源端口和目的端口。一个TCP连接需要4个元组来表示一个连接。（源端口，目的端口，源IP，目的IP）\u003c/p\u003e","title":"002计算机网络"},{"content":"阻塞IO和非阻塞IO 阻塞的文件描述符为阻塞IO 非阻塞的文件描述符为非阻塞IO 同步IO和异步IO 同步IO向应用程序通知的是IO就绪事件。要求用户代码自行执行读写操作，将数据从内核缓冲区读入用户缓冲区。 异步IO向应用程序通知的是IO完成事件 。由内核来执行IO读写操作。在linux环境下，aio.h头文件定义的函数提供了对异步IO的支持。 事件处理模式 reactor 同步IO模型通常用于实现reactor模式。要求主线程只负责监听文件描述符是否有事件发生，有的话就立即将该事件通知工作线程。 proactor 异步IO模型通常用于实现proactor模式。也可以用同步IO模拟出proactor模式。proactor将所有IO操作都交给主线程和内核来处理，工作线程仅仅负责业务逻辑。 Reactor模式的工作流程 主线程往epoll内核事件表中注册socket上的就绪事件。 主线程调用epoll_wait等待socket上有数据可读。 当socket上有数据可读时，epoll_wait通知主线程。主线程将socket可读事件放入请求队列。 睡眠在请求队列上的某个工作线程被唤醒，它从socket读取数据，并处理客户请求，然后往epoll内核事件表中注册该socket上的写就绪事件。 主线程调用epoll_wait等待socket可写。 当socket可写时，epoll_wait通知主线程。主线程将socket可写事件放入请求队列。 睡眠在请求队列上的某个工作线程被唤醒，它往socket上写入服务器处理客户请求的结果。 并发模式 半同步半异步模式：同步线程用于处理客户逻辑，异步线程用于处理IO事件。异步线程监听到客户请求后，就将其封装成请求对象并插入到请求队列中，请求队列将通知某个工作在同步模式下的工作线程来读取并处理该请求对象。半同步半反应堆模式采用的事件处理模式是reactor模式：它要求工作线程自己从socket上读取客户请求和往socket写入服务器应答。半同步半反应堆也可以模拟proactor模式，即由主线程来完成数据的读写。在这种情况下，主线程会将应用程序数据，任务类型等信息封装为一个任务对象，然后将其插入请求队列。工作线程从请求对象取得任务对象以后，可直接处理无需执行读写操作。\n问题：主线程和工作线程共享请求队列需要加锁。工作线程较少时可能产生请求任务堆积。\n领导者追随者模式\n在IO模型中，同步和异步区分的是内核向应用程序通知的是何种事件，是就绪事件还是完成事件，以及该由谁来完成IO读写，是应用程序还是内核。\n在并发模式中，同步指的是程序完全按照代码序列的顺序执行。异步指的是程序的执行需要由系统事件来驱动。常见的系统事件包括中断和信号。\n虚拟地址空间 **虚拟地址是操作系统管理内存的一种方式。**方便不同进程使用的虚拟地址彼此隔离。方便物理内存中不相邻的内存在虚拟地址上视为连续的来使用。虚拟地址和物理地址的映射是通过MMU页表进行的。虚拟内存对实际内存有保护作用。\n什么是进程 进程是系统进行资源分配的基本单位，是程序加载到内存后的执行过程。进程一般由数据段，代码段和进程控制块三部分组成。系统通过进程控制块感知进程的存在并对进程进行控制。由于进程之间空间相互独立，多进程比多线程更安全，一个进程基本上不会影响另外一个进程。\n进程三种状态 创建：创建PCB 就绪 运行 阻塞 终止: 归还PCB 什么是线程 线程是CPU调度的基本单位。一个进程可以包含多个线程，线程自己基本不拥有系统资源，但是它可以和同属于一个进程的其他线程共享进程所拥有的全部资源。多线程之间对内存共享，线程间通信可以直接基于共享内存来实现，比多进程之间通信更轻量。多线程之间切换不需要切换虚拟内存空间、文件描述符等，所以线程的上下文切换也比多进程轻量。\n进程fork以后，遵循读时共享写时复制的机制。\n父子进程长期共享：文件描述符和mmap建立的映射区。\n子进程的进程ID，定时器，未决信号集和父进程不同。\n多进程和多线程的应用场景 一般不同任务间需要大量的通信，使用多线程的场景比多进程多。IO密集型。\n但是多进程有更高的容错性，一个进程的崩溃不会导致整个系统的崩溃，在任务安全性较高的情况下，采用多进程。CPU密集型。\n进程线程的本质区别 进程更安全，一个进程完全不会影响另外的进程。 进程间通信比线程间通信的性能差很多。 线程切换开销更低。 IPC进程间通信55555555555 无名管道pipe（血缘关系的进程） 有名管道fifo （无血缘关系的进程） 共享内存 信号(开销小) 消息队列 信号量 套接字 进程间同步 文件锁 信号量 线程间同步 互斥锁 读写锁(读时共享，写时互斥) 条件变量 信号量(互斥锁的升级版) 自旋锁(可以避免进程或线程上下文的开销) 线程共享资源 文件描述符表（打开的文件） 进程用户ID和进程组ID 进程的**内存地址空间.**text代码段 .data数据段 .bss heap堆区 全局变量 静态变量 每种信号的处理方式 进程的当前目录 线程独享资源 线程栈 寄存器组的值 线程ID 错误返回码errno变量 线程信号屏蔽字 线程优先级 进程调度方式 抢占式：立马停止。 非抢占式：时间片用完或者等待资源时，再调用另一个进程。 进程调度算法 先来先服务 短作业优先 优先级调度 时间片轮转 高响应比优先 管道 管道是一种伪文件，实质为内核缓冲区 大小为4K 内核借用环形队列实现\n管道是半双工的，数据只能单向流动，不可重复读取，只能用于有血缘关系的进程\nLinux命令 find命令，用来查找文件。常用的按照名字查找-name，按照文件类型查找-type，linux常用的文件类型有七种，普通文件，目录文件，管道，套接字，软链接，块设备，字符设备。还可以按照文件大小查询-size。 grep命令，按照文件内容来查找。使用规则是grep option pattern file ps aux curl命令 访问一个网页 df查看磁盘大小 du查看目录大小 free -h 查看内存大小和使用情况 top查看系统的实时负载 netstat -ta 查看监听的TCP stat 获取文件属性 file 查看文件类型 sudo iptables -L 查看防火墙状态 sudo vim etc/sysctl.conf 查看TCP属性 大端字节序和小端字节序 大端字节序：网络字节序（高位存低位） 小端字节序：主机字节序，现代PC机采用小端字节序（低位存低位，高位存高位） 比如0x1f3f5f7f 地址0x1000 0x1001 0x1002 0x1003\n大端法：7f存在0x1003 5f存0x1002 3f存0x1001 1f存0x1000 低存高\n小端法：7f存在0x1000 5f存0x1001 3f存0x1002 1f存0x1003 低存低\nsocket服务器端所用函数 socket 创建socket文件描述符 bind 绑定IP和端口号 listen 监听 accept 接受连接 处理客户端的业务\nsocket客户端所用函数 socket 创建套接字文件描述符 bind 绑定IP和端口号（也可以隐式绑定） connect 尝试连接服务器 处理服务器端的业务\n五种网络IO模型 同步阻塞IO\n同步非阻塞IO\nIO多路复用\n信号驱动IO\n异步IO\nselect与poll、epoll的各自的优缺点和区别 select是跨平台的，windows、linux、unix系统下都有 poll在linux和unix下有 epoll是linux特有，epoll的要义就是高效的监视多个socket 多路IO监听时没有动静，监听会休眠监听。 讲讲epoll的边沿触发和水平触发 水平触发：如果epoll_wait缓冲区有数据则直接返回。 边沿触发：如果一次没有读完epoll_wait缓冲区中的数据，则只有当另外有数据再写入时，才返回。 使用边沿触发和非阻塞IO来达到水平触发的效果，减少了epoll_wait的调用次数，提高了效率。 边沿触发可以只读取缓存区中前面的部分信息，进而分析后面的信息是否有用，如果无用则直接丢弃。 Libevent库 是一个开源的库，封装了socket和IO多路转接，用于高并发服务器的开发。跨平台可移植性好。跨平台，线程安全，基于reactor模式实现的高效网络库。\n协程 协程是一种用户态的轻量级线程。协程的开销远远小于线程的开销。\n协程是一种比线程更加轻量级的存在，一个线程可以拥有多个协程。 无论是进程还是线程，都是由操作系统所管理的。而协程不是被OS所管理，而完全是由程序所控制(也就是在用户态执行)。\n信号 信号是一种不精确通信。\n常用的信号有SIGKILL 9 无条件终止信号，SIGSEGV 11 无效存储访问 SIGPOLL 8 轮询事件信号。\n信号有三种处理方式：忽略，捕获，默认。\nkill命令向进程发送信号\n什么是死锁 因为资源调度的方式不合理或者资源的稀缺性，导致进程间的相互等待。\n死锁的四个必要条件：互斥条件，请求和保持条件，环路等待条件，不可剥夺条件。\n死锁的预防只要破坏死锁产生的四个必要条件。通常采用预先静态分配方法，可以破坏请求和保持条件。\n死锁的避免：采用银行家算法，只要系统处于安全状态，系统便可避免死锁。\n死锁的解决：撤销进程，剥夺资源。\n僵尸进程和孤儿进程 僵尸进程：子进程死亡，而父进程没有进行回收 waitpid回收指定进程 孤儿进程：父进程死亡，而子进程仍然存活，但是系统会让init进程领养孤儿进程。 fork函数 fork函数用来创建子进程 一次调用，两次返回。在父进程中返回子进程的PID，在子进程中返回0\nexec族 在程序中调用另一个可执行程序，但是进程ID不改变。\n网络编程IO 服务器通常需要处理三类事件：IO事件，信号及定时事件。\n事件处理模式：reactor和proactor\n同步IO模型通常用于实现reactor模式\n异步IO则用于实现proactor模式\n什么是reactor模式 它要求主线程只负责监听文件描述符上是否有事件发生，有的话立即将该事件通知工作线程。读写数据，接受新的连接以及处理客户请求均在工作线程中完成。\n什么是proactor模式 它将所有IO操作都交给主线程和内核来处理，工作线程仅仅负责业务逻辑。\nmmap存储映射 将磁盘空间映射到进程空间，**使进程可以采用指针的方式操作这段内存，**而不用调用read和write函数。提高了读写的效率，同时也可以实现进程间的通信。\n异步IO原理 底层将数据准备好后，内核会给进程发送一个异步通知信号SIGIO29通知进程，然后进程调用信号处理函数去读数据，没准备好，数据就忙自己的事情。\nselect poll epoll select单个进程打开的文件描述符有上限，为1024或者2048。select对于有响应的事件需要轮询来查找满足要求的事件。每次调用select都需要把文件描述符集合从用户态拷贝到内核态。 poll描述fd的集合是链式的，解决了打开文件描述符数量的限制。同样需要轮询满足事件的文件描述符。也需要进行用户态和内核态的文件描述符拷贝。poll是水平触发。 epoll使用了mmap内存映射技术和红黑树的数据结构。通过三个函数来监听多个文件描述符，同时不随数量的上升效率呈线性的下降。mmap内存读写快于IO读写，及时共享映射内存的改变。 ","permalink":"//localhost:1313/posts/001%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","summary":"\u003ch2 id=\"阻塞io和非阻塞io\"\u003e阻塞IO和非阻塞IO\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e阻塞的文件描述符\u003c/strong\u003e为阻塞IO\u003c/li\u003e\n\u003cli\u003e非阻塞的文件描述符为非阻塞IO\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"同步io和异步io\"\u003e同步IO和异步IO\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e同步IO向应用程序通知的是\u003cstrong\u003eIO就绪事件\u003c/strong\u003e。要求用户代码自行执行读写操作，将数据从内核缓冲区读入用户缓冲区。\u003c/li\u003e\n\u003cli\u003e异步IO向应用程序通知的是\u003cstrong\u003eIO完成事件\u003c/strong\u003e 。由内核来执行IO读写操作。在linux环境下，aio.h头文件定义的函数提供了对异步IO的支持。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"事件处理模式\"\u003e事件处理模式\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003ereactor 同步IO模型通常用于实现reactor模式。要求主线程只负责监听文件描述符是否有事件发生，有的话就立即将该事件通知工作线程。\u003c/li\u003e\n\u003cli\u003eproactor 异步IO模型通常用于实现proactor模式。也可以用同步IO模拟出proactor模式。proactor将所有IO操作都交给主线程和内核来处理，工作线程仅仅负责业务逻辑。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"reactor模式的工作流程\"\u003eReactor模式的工作流程\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e主线程往epoll内核事件表中注册socket上的就绪事件。\u003c/li\u003e\n\u003cli\u003e主线程调用epoll_wait等待socket上有数据可读。\u003c/li\u003e\n\u003cli\u003e当socket上有数据可读时，epoll_wait通知主线程。主线程将socket可读事件放入请求队列。\u003c/li\u003e\n\u003cli\u003e睡眠在请求队列上的某个工作线程被唤醒，它从socket读取数据，并处理客户请求，然后往epoll内核事件表中注册该socket上的写就绪事件。\u003c/li\u003e\n\u003cli\u003e主线程调用epoll_wait等待socket可写。\u003c/li\u003e\n\u003cli\u003e当socket可写时，epoll_wait通知主线程。主线程将socket可写事件放入请求队列。\u003c/li\u003e\n\u003cli\u003e睡眠在请求队列上的某个工作线程被唤醒，它往socket上写入服务器处理客户请求的结果。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"并发模式\"\u003e并发模式\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e半同步半异步模式：同步线程用于处理客户逻辑，异步线程用于处理IO事件。异步线程监听到客户请求后，就将其封装成请求对象并插入到请求队列中，请求队列将通知某个工作在同步模式下的工作线程来读取并处理该请求对象。半同步半反应堆模式采用的事件处理模式是reactor模式：它要求工作线程自己从socket上读取客户请求和往socket写入服务器应答。半同步半反应堆也可以模拟proactor模式，即\u003cstrong\u003e由主线程来完成数据的读写\u003c/strong\u003e。在这种情况下，主线程会将应用程序数据，\u003cstrong\u003e任务类型等信息封装为一个任务对象\u003c/strong\u003e，\u003cstrong\u003e然后将其插入请求队列\u003c/strong\u003e。\u003cstrong\u003e工作线程从请求对象取得任务对象以后，可直接处理无需执行读写操作。\u003c/strong\u003e\u003c/p\u003e","title":"001操作系统"},{"content":"综合writing 模板 Both the passage and the lecture explore the topic about \u0026hellip;. The reading passage proclaims that \u0026hellip;. While in the lecture , the professor uses three specific perspectives to contradict what the reading states .\nFirst and foremost , the reading part holds the belief that \u0026hellip;. because \u0026hellip;. However , the lecturer doubts the view by stating that \u0026hellip; In order to strength his own point , the professor further explains that \u0026hellip;\nMoreover , the reading maintains that \u0026hellip;.. since \u0026hellip;.. The professor in the lecture , on the contrary , points out that \u0026hellip;. The professor defends his own point with the example of \u0026hellip;.\nLast but not least , the reading material believes/states that \u0026hellip; because \u0026hellip; Nevertheless , the professor argues that \u0026hellip;. For instance , \u0026hellip;.\nBoth the passage and the lecture explore the topic about .... The reading passage proclaims that .... While inthe lecture , the professor uses three specific perspectives to contradict what the reading states . First and foremost , the reading part holds the belief that .... because .... However , the lecturer doubts the view by stating that ... In order to strength his own point , the professor further explains that ... Moreover , the reading maintains that ..... since ..... The professor in the lecture , on the contrary , points out that .... The professor defends his own point with the example of .... Last but not least , the reading material believes/states that ... because ... Nevertheless , the professor argues that .... For instance , .... 讨论writing 模板 As far as I\u0026rsquo;m concerned , I tend to be in favor of the argument that \u0026hellip;. My view is going to be illustrated by following reasons and examples.\nTo start with , just as XXX has said , \u0026hellip;\nIn addition , \u0026hellip;\n150 - 160\nAs far as I\u0026#39;m concerned , I tend to be in favor of the argument that .... To start with , just as XXX has said , ... In addition , ... 科技 产品 消费 效率 心理需求 心理满足 As far as I am concerned buying the newest technological devices would be a wise choice . My view is going to be illustrated by the following reasons and examples.\nTo start with , the newest technological devices help users to improve their efficiency , no matter in work or study . It should be emphasized that along with the accelerating development of the whole society , a higher efficiency becomes more and more important . It allows individuals to accomplish more tasks within relatively certain time limits , which in turn strengthens one\u0026rsquo;s competitiveness and offers them a higher chance to succeed. In that case , buying new technological devices serves better in assisting the person to get high efficiency . To be specific , there is no doubt that new technological devices generally have advantages compared with existing ones . For example, they may offer some new functions or improve existing ones , and all these factors play an essential role in helping people achieve their aims more effectively , removing the barriers as well as difficulties. As a result , people who use new technological devices are capable of finishing tasks more quickly . In other words , new technological devices guarantee high efficiency.\nIn addition , using the newest technological devices also brings individuals the benefit of realizing their higher needs. Thanks to the development of the economy and technology, people in current society have almost fulfilled their basic needs related to survival and safety . Under such circumstances , they have begun to realize those need that are at a higher level . Those needs are usually more psychological and social , which makes the choice of buying the newest technological devices reasonable . To give more details , people using the newest technological devices are able to enjoy the feeling of happiness and satisfaction after they buy it immediately since this behavior continuously implies to them that they have the right and the ability to enjoy the best things. Besides , people who possess the newest devices usually can grab the attention of people surrounding them , which enables them to enclose relationship with others and even harvest other people\u0026rsquo;s respect or envy . All factors listed above , psychological feelings and connections with others , are just what nowadays people mainly are pursuing , and it supports my standpoint that buying the newest devices , rather than adopting them when they are well-adopted , is worth the effort .\nAs far as I am concerned , I tend to be in favor of the argument that people should like to pursue the devices of the newest version. My view is going to illustrated by following reasons and example.\nTo start with, just as Mike has said, the newest technological devices help users to improve their efficiency, no matter in work or study. It should be emphasized that along with the accelerating development of the whole society , a higher efficiency becomes more and more important. It allows individuals to accomplish more tasks within relatively certain time limits , which in turn strengthens one\u0026rsquo;s competitiveness and offers them a higher chance to succeed.\nIn addition , using the newest technological devices also brings individuals the benefit of realizing their higher needs. To be more specific , people using the newest technological devices are able to enjoy the feeling of happiness and satisfaction after they buy it immediately .\nsince this behavior continuously implies to them that they have the right and the ability to enjoy the best things.\n创造力 As far as I am concerned , I tend to be in favor of the argument that the power of creativity far outweighs that basic knowledge in terms of successful inventions. My view is going to illustrated by following reasons and example. To start with , just as Mike has said , the power of creativity far exceeds the power of basic knowledge. For instance , Bell is commonly credited with inventing the first practical telephone by taking advantage of his creativity and numerous endeavors. It is precisely due to his creativity that such scientific breakthroughs have been made. In addition , in the modern world , similar evidence could be also be traced . Steve Jobs , co-founders and former CEO of Apple , shocked the world with his creative electronic products whose superior functions and qualities can never be matched. 压力 健康 生活压力\nAs far as I am concerned , I tend to be in favor of the argument that government should arouse people\u0026rsquo;s awareness of importance of physical soundness. My view is going to be illustrated by following reasons and example. To start with , just as Mike has said , with the acceleration of social development , people , especially young people , are confronted with unprecedentedly fierce competition . For instance , they need to work very hard to guarantee a decent life , which causes them much(way) heavier pressure than before. Under such circumstances , most of them are prone to in a sub-health state . In summary , government should increase access to public exercise equipment in neighborhood , raising people\u0026rsquo;s awareness of the importance of doing exercise regularly through the mass media , which is the government\u0026rsquo;s responsibility. 因特网 科技 社会发展 生活方式\nAs far as I am concerned , I tend to be in favor of the argument that Internet is a treasure trove of information , which offers knowledge on any given topic under the sun. My view is going to be illustrated by following reasons and examples. To start with , just as Mike has said , search engines make information accessible on various subject matters such as government law and services , trade and conferences , market information , new innovations , and technical support , and even dispense advise on love and relationship matters. In addition , it has become common practice to seek assistance from the web in order to research and gather resources for homework , office presentations , and supplement one\u0026rsquo;s own research . The web also updates news about the latest breakthroughs in the field of medicine , technology , and other domains of science . 兴趣 爱好\nAs far as I am concerned , I tend to be in favor of the argument that young students should not decrease an abundance of time that teaching students about music and art . My view is going to be illustrated by following reasons and examples .\nTo start with , just as Mike has said , we should emphasize what is conveyed in the famous saying: \u0026lsquo;Interest is the best teacher.\u0026rsquo; Evidently , the primary step toward a person\u0026rsquo;s success is to have an emotional preference . In fact , interest constitutes the biggest impetus in learning , keeping one refreshed and preventing feelings of boredom and tiredness .\nIn addition , numerous epoch-making accomplishments in the scientific world owe much to the initial interest of the scientists. Therefore , students shouldn\u0026rsquo;t be compelled to increase the time spent on any knowledge field , but rather to keep a balance among all knowledge fields.\n学生是否要 gap \u0026mdash; 兴趣 As far as I am concerned , I tend to be in favor of the argument that students should take at least a year off to work or travel before they begin studying at a university when students finish their high school , which can be beneficial for students to discover their interests. My view is going to be illustrated by the following reasons and examples.\nTo start with , just as Mike has said , the famous saying goes , \u0026quot; Interest is the best teacher.\u0026quot; Evidently , the primary step toward a person\u0026rsquo;s success is to have an emotional preference. In fact , interest constitutes the biggest impetus in learning , keeping one refreshed and preventing feelings of boredom and tiredness. Therefore , it is helpful that spending at least a year work or travel before getting the university education , which is one of the best ways to figure out personal passion if students want to be successful in their future careers.\n以 成绩 评分 As far as I am concerned , I tend to be in favor of the argument that performance should be the only criterion when teachers give grades. My view is going to be illustrated by following reasons and examples . To start with , just as Mike has said , such a strategy would show fairness , which is an important factor to motivate students. The lack of motivation would undoubtedly pose negative effects on student\u0026rsquo;s studies . Consequently , it would even have a lasting effect on their future life. In addition , giving grades based on performance , instead of effort , also means a clear standard . It would be hard for teachers to tell whether a student is working hard or not during the process. It is totally subjective . In contrast , the performance , in other words , the results , cannot tell lies , making the performance-based criteria a wiser one . Do you agree or disagree with the following statement? It is often not a good thing for people to move to a new town or country because they lose their old friends. Use specific reasons and examples to support your answer.\n搬家 好不好 As far as I am concerned , I tend to be in favor of the argument that people wouldn\u0026rsquo;t lose their friends because they move to a new town or country. My view is going to be illustrated by following reasons and example. To start with , just as Mike has said , with the development of society , the infrastructure make it convenient as well as time-saving to travel another town or country, which means people can still meet up with friends easily . Going to a new town or country can also push individuals to broaden their perspectives and see the world in a distinctive way. In addition , the opportunities of being successful in future career are enhanced by settling in a big city . Simultaneously , I believe that the greatest predictor of being successful in the future career is how many hours are devoted to goal , rather than spending too much time with friends . 参考\nTo start with, as Mike mentioned, the development of society has made travel between towns and countries more convenient and time-saving. This means that people can still meet up with friends easily. Moving to a new place can also encourage individuals to broaden their perspectives and see the world in new ways.\nIn addition, settling in a big city can enhance opportunities for future career success. However, I believe that the greatest predictor of success is how many hours one devotes to their goals, rather than spending too much time with friends.\n帮助他人 with the development of \u0026hellip;\u0026hellip;.. = due to the refinement of \u0026hellip;\u0026hellip;\u0026hellip; = As advances in = through the improvement of \u0026hellip;\u0026hellip;\u0026hellip; = due to the advancement of\nAs far as I am concerned , I tend to be in favor of the argument that currently, many people are accepted assistance from others people more readily than before . My view is going to be illustrated by following reason and example. To start with , just as Mike has said , due to the advancement of society , people are wealthier than before , individuals are more likely to spend more time to care about other , someone needs help , since the social responsibility would be powerful enough to push them to help other. In addition , take me for example , every time I see the homeless or someone needs help , I will lend them a hand , holding up social responsibility as much as possible. In this action , it is social harmony that is strongly promoted. ","permalink":"//localhost:1313/posts/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/","summary":"\u003ch1 id=\"综合writing\"\u003e综合writing\u003c/h1\u003e\n\u003ch2 id=\"模板\"\u003e模板\u003c/h2\u003e\n\u003cp\u003eBoth the passage and the lecture explore the topic about  \u0026hellip;.  The reading passage proclaims that \u0026hellip;. While in the lecture , the professor uses three specific \u003cstrong\u003eperspectives\u003c/strong\u003e to contradict what the reading states .\u003c/p\u003e\n\u003cp\u003eFirst and foremost , the reading part holds the belief that \u0026hellip;. because \u0026hellip;. However , the lecturer doubts the view by stating that \u0026hellip; In order to strength his own point , the professor further explains that \u0026hellip;\u003c/p\u003e","title":"英语学习"},{"content":"测试数据范围 时间复杂度 对应数据量 O(n) 1,000,000 O(log N) 100,000 O(n^2) 1,000 O(n^3) 100 特殊情况 10 滑动窗口 动态规划 DP dp分析, 两个角度\n状态表示 集合: 前i个数, 总和为j的所有方案 属性: 状态计算 01背包 n = 4 // 4件物品 m = 5 // 背包最大容量为 5 测试样例 4 5 1 2 2 4 3 4 4 5 j i 状态f[i][j]定义：前 i 个物品，背包容量 j 下的最优解（最大价值）\n前i个物品的价值 1 2 3 4 5 0 0 0 0 0 0 1 2 2 2 2 2 2 2 4 6 6 6 3 2 4 6 6 8 4 2 4 6 6 8 第i个物品的数据 1 2 3 4 volume 1 2 3 4 weight 2 4 4 5 单调栈 合并区间 模板\n排序数组 更新合并左右端点 vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; merge(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; \u0026amp;intervals) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; ans; if (intervals.empty()) return ans; sort(intervals.begin(), intervals.end()); // 先排序 int l = intervals[0][0], r = intervals[0][1]; // 左右端点 for (int i = 1; i \u0026lt; intervals.size(); i++) // 第二数组开始遍历 { if (intervals[i][0] \u0026gt; r) // 第二数组的左端点大于上一数组的右端点, 则保存上一数组 { ans.push_back({l, r}); l = intervals[i][0], r = intervals[i][1]; // 更新左右端点 } else { r = max(r, intervals[i][1]); // 否则更新右端点 } } ans.push_back({l, r}); return ans; } 迪杰斯特拉算法 快速幂 模板\n快速幂 —— 模板题 AcWing 875. 快速幂 求 m^k mod p，时间复杂度 O(logk)。\nint qmi(int m, int k, int p) { int res = 1 % p, t = m; while (k) { if (k\u0026amp;1) res = res * t % p; t = t * t % p; k \u0026gt;\u0026gt;= 1; } return res; } 并查集 ","permalink":"//localhost:1313/posts/algorithm_study/","summary":"\u003ch1 id=\"测试数据范围\"\u003e测试数据范围\u003c/h1\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: center\"\u003e时间复杂度\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e对应数据量\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eO(n)\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e1,000,000\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eO(log N)\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e100,000\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eO(n^2)\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e1,000\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eO(n^3)\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e100\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e特殊情况\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e10\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch1 id=\"滑动窗口\"\u003e滑动窗口\u003c/h1\u003e\n\u003ch1 id=\"动态规划-dp\"\u003e动态规划 DP\u003c/h1\u003e\n\u003cp\u003edp分析, 两个角度\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e状态表示\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003e集合: 前\u003ccode\u003ei\u003c/code\u003e个数, 总和为\u003ccode\u003ej\u003c/code\u003e的所有方案\u003c/li\u003e\n\u003cli\u003e属性:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e状态计算\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"01背包\"\u003e01背包\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 4件物品\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 背包最大容量为 5 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e测试样例\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: center\"\u003e\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003ej\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003ei\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e状态\u003ccode\u003ef[i][j]\u003c/code\u003e定义：\u003cstrong\u003e前 i 个物品\u003c/strong\u003e，\u003cstrong\u003e背包容量 j\u003c/strong\u003e 下的最优解（\u003cstrong\u003e最大价值\u003c/strong\u003e）\u003c/p\u003e","title":"算法学习记录"},{"content":"emplace用法 emplace 是 C++ 中用于容器（如 std::vector, std::map, std::unordered_map 等）的一种方法，允许你在容器中直接构造元素，而不需要先构造再复制或移动。这通常可以提高性能，减少不必要的对象拷贝。\n与 insert 类似\n使用 emplace 的主要特点： 直接在容器中构造：emplace 会接受构造元素所需的所有参数，并在容器的内部直接创建该对象。 避免多次拷贝：与 push_back 或 insert 不同，emplace 不会执行隐式拷贝构造，这样可以避免额外的开销。 示例： 以下是一个使用 std::vector 和 std::unordered_map 的例子，说明 emplace 的使用：\n使用 std::vector #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; class Point { public: int x, y; Point(int x, int y) : x(x), y(y) {} }; int main() { std::vector\u0026lt;Point\u0026gt; points; // 使用 emplace 方法直接构造 Point 对象 points.emplace_back(1, 2); points.emplace_back(3, 4); for (const auto\u0026amp; point : points) { std::cout \u0026lt;\u0026lt; \u0026#34;Point(\u0026#34; \u0026lt;\u0026lt; point.x \u0026lt;\u0026lt; \u0026#34;, \u0026#34; \u0026lt;\u0026lt; point.y \u0026lt;\u0026lt; \u0026#34;)\u0026#34; \u0026lt;\u0026lt; std::endl; } return 0; } 使用 std::unordered_map #include \u0026lt;iostream\u0026gt; #include \u0026lt;unordered_map\u0026gt; #include \u0026lt;string\u0026gt; int main() { std::unordered_map\u0026lt;std::string, int\u0026gt; map; // 使用 emplace 插入键值对 map.emplace(\u0026#34;apple\u0026#34;, 10); map.emplace(\u0026#34;banana\u0026#34;, 20); for (const auto\u0026amp; pair : map) { std::cout \u0026lt;\u0026lt; pair.first \u0026lt;\u0026lt; \u0026#34;: \u0026#34; \u0026lt;\u0026lt; pair.second \u0026lt;\u0026lt; std::endl; } return 0; } 总结： emplace 方法是通过 完美转发 构造元素，可以显著提升性能。 它适用于任何需要插入或添加元素的 STL 容器。 min_element 查找最小元素函数 std::min_element 是 C++ 标准库 \u0026lt;algorithm\u0026gt; 中的一个非常有用的算法函数，它用于在指定范围内查找最小元素。下面我会详细解释 min_element 的用法，以及使用解引用操作符 * 的相关内容。\n1. std::min_element 函数原型 template\u0026lt;class ForwardIt\u0026gt; ForwardIt min_element(ForwardIt first, ForwardIt last); 参数： first: 指向范围开始的迭代器（包含）。 last: 指向范围结束的迭代器（不包含）。 返回值：返回指向容器内最小元素的迭代器。如果范围为空，则返回 last。 用法步骤 包含必要的头文件： 使用 min_element 之前，确保包含 \u0026lt;algorithm\u0026gt; 头文件。 指定范围： 使用容器的 begin() 和 end() 方法来指定需要查找最小元素的范围。 获取最小值： 使用解引用操作符 * 获取迭代器指向的值。 2. 示例代码 以下是一个简单的示例，使用 std::min_element 查找 std::vector 中的最小值：\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;algorithm\u0026gt; int main() { std::vector\u0026lt;int\u0026gt; numbers = {3, 1, 4, 1, 5, 9, 2, 6}; // 使用 min_element 查找最小元素 auto minIt = std::min_element(numbers.begin(), numbers.end()); if (minIt != numbers.end()) { // 使用解引用获取最小值 int minValue = *minIt; std::cout \u0026lt;\u0026lt; \u0026#34;Minimum value: \u0026#34; \u0026lt;\u0026lt; minValue \u0026lt;\u0026lt; std::endl; } else { std::cout \u0026lt;\u0026lt; \u0026#34;The range is empty.\u0026#34; \u0026lt;\u0026lt; std::endl; } return 0; } 3. 代码解析 导入库：导入了 iostream, vector, 和 algorithm。\n定义容器：创建了一个 std::vector 并初始化了一些整数。\n调用 min_element\n：\n使用 std::min_element 来查找最小元素，范围是从 numbers.begin() 到 numbers.end()。 返回的 minIt 是指向最小元素的迭代器。 解引用\n：\n通过 *minIt 获取指向的最小值，并存储到 minValue 中。 输出结果：如果容器非空，则输出最小值。\n4. 注意事项 空范围：如果传递空范围给 min_element（即 first 和 last 相等），则返回 last。 元素类型：min_element 可以处理不同的类型，包括自定义类型，只要提供相应的比较运算符。 性能：min_element 的时间复杂度是 O(n)，适合较小的数据集。 单引号和双引号的区别 在 C++ 中，单引号 ' ' 用于表示字符字面值（character literals），而双引号 \u0026quot; \u0026quot; 用于表示字符串字面值（string literals）。字符字面值只能包含一个字符，例如 'a' 或 '0'，而字符串字面值可以包含多个字符，例如 \u0026quot;Hello\u0026quot;。\n字符字面值只能包含一个字符，例如： char singleChar = \u0026#39;a\u0026#39;; // 单个字符 char digit = \u0026#39;0\u0026#39;; // 数字字符 字符串字面值可以包含多个字符，例如： const char* greeting = \u0026#34;Hello\u0026#34;; // 一个字符串 const char* message = \u0026#34;12345\u0026#34;; // 字符串中的数字 指针就是数组 把指针想象成数组\nint yy = 1; int * xx = \u0026amp; yy; // yy地址: 123 xx ---\u0026gt; 两个内容 | |---\u0026gt;下标 xx 存的值为 0x123 |---\u0026gt;数值 *xx 取值为 1 即 yy的值 xx: val | 1 | ==\u0026gt; *xx index |0x123| ==\u0026gt; xx string进行模拟栈的用法 在 C++ 中，std::string 本身不是一个栈（stack），但可以像栈一样使用，特别是利用其尾部（末尾）操作。你可以使用 push_back 和 pop_back 方法来模拟栈的行为。以下是如何用 std::string 模拟栈的简单示例：\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; using namespace std; int main() { string stack; // 入栈 stack.push_back(\u0026#39;A\u0026#39;); stack.push_back(\u0026#39;B\u0026#39;); stack.push_back(\u0026#39;C\u0026#39;); // 出栈 while (!stack.empty()) { char top = stack.back(); // 获取栈顶元素 stack.pop_back(); // 出栈 cout \u0026lt;\u0026lt; top \u0026lt;\u0026lt; endl; // 打印栈顶元素 } return 0; } 代码解释： 入栈：使用 push_back 方法将元素添加到字符串末尾。 出栈：使用 pop_back 方法移除末尾元素，并使用 back 方法获取栈顶元素（末尾元素）。 检查是否为空：使用 empty 方法来检查栈是否为空。 注意事项： 尽管你可以用 std::string 来模拟栈，但对于更复杂的数据结构，建议使用标准库中的 std::stack，它提供了更明确的接口和更好的语义清晰性。 std::stack 是一个适配器，通常与其他容器（如 std::deque 或 std::vector）一起使用，可以更好地满足栈的需求。 queue容器 在 C++ 中，queue 是一种容器适配器，表示一个先进先出（FIFO，First In First Out）的数据结构。下面是关于 queue 的详细解释，包括其特点、基本操作及使用场景。\n1. 基本概念 先进先出（FIFO）：在队列中，第一个加入的元素是第一个被移除的元素。可以想象成排队买东西，先到的人先服务。 应用：队列广泛用于任务调度、事件驱动编程、宽度优先搜索（BFS）等场景。 2. 引入和定义 要使用 queue，需要引入 C++ STL 的 \u0026lt;queue\u0026gt; 头文件：\n#include \u0026lt;queue\u0026gt; 一个基本的队列定义如下：\nstd::queue\u0026lt;int\u0026gt; myQueue; // 定义一个存储整数的队列 3. 常用操作 a. 入队（Push） 使用 push() 方法将元素添加到队列的尾部。\nmyQueue.push(10); myQueue.push(20); myQueue.push(30); b. 出队（Pop） 使用 pop() 方法移除队列的头部元素（最早入队的元素）。\nmyQueue.pop(); // 移除队头元素（10） c. 访问队头元素 使用 front() 方法获取队头元素，但不会移除它。\nint frontElement = myQueue.front(); // 返回 20 d. 访问队尾元素 使用 back() 方法获取队尾元素，但不会移除它。\nint backElement = myQueue.back(); // 返回 30 e. 检查空状态 使用 empty() 方法检查队列是否为空。\nif (myQueue.empty()) { std::cout \u0026lt;\u0026lt; \u0026#34;队列为空\u0026#34; \u0026lt;\u0026lt; std::endl; } f. 获取队列大小 使用 size() 方法获取队列中元素的数量。\nstd::cout \u0026lt;\u0026lt; \u0026#34;队列大小: \u0026#34; \u0026lt;\u0026lt; myQueue.size() \u0026lt;\u0026lt; std::endl; 4. 示例代码 下面是一个完整的示例，演示如何使用 queue：\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;queue\u0026gt; int main() { std::queue\u0026lt;int\u0026gt; myQueue; // 入队 myQueue.push(10); myQueue.push(20); myQueue.push(30); // 输出队头和队尾元素 std::cout \u0026lt;\u0026lt; \u0026#34;队头元素: \u0026#34; \u0026lt;\u0026lt; myQueue.front() \u0026lt;\u0026lt; std::endl; // 输出 10 std::cout \u0026lt;\u0026lt; \u0026#34;队尾元素: \u0026#34; \u0026lt;\u0026lt; myQueue.back() \u0026lt;\u0026lt; std::endl; // 输出 30 // 移除队头元素 myQueue.pop(); std::cout \u0026lt;\u0026lt; \u0026#34;新的队头元素: \u0026#34; \u0026lt;\u0026lt; myQueue.front() \u0026lt;\u0026lt; std::endl; // 输出 20 // 检查队列大小 std::cout \u0026lt;\u0026lt; \u0026#34;队列大小: \u0026#34; \u0026lt;\u0026lt; myQueue.size() \u0026lt;\u0026lt; std::endl; // 输出 2 return 0; } 5. 特点 动态大小：队列的大小是动态的，根据元素的添加和移除而变化。 基于其他容器：queue 通常是基于 deque（双端队列）或 list 实现的，因此它支持快速插入和删除操作。 类型安全：由于使用模板，queue 可以存储任何类型的数据，确保类型安全。 6. 应用场景 任务调度：在操作系统中，任务调度可以利用队列来管理待处理的任务。 广度优先搜索（BFS）：在图形算法中，queue 是实现 BFS 的重要工具。 事件处理：在图形用户界面（GUI）或游戏开发中，事件通常通过队列进行处理。 7. 总结 C++ 的 queue 提供了一种简单而高效的方法来管理数据。在需要处理顺序、维持元素顺序的场景中，queue 是一个非常有用的工具。它的基本操作简单明了，使得程序员能够快速实现和使用这一数据结构。\n**C++**基础 编译 内联函数 内联函数（inline function）是 C++ 中的一种特殊函数，通过在函数调用处直接插入其代码来提高程序的执行效率。内联函数的主要优点是减少函数调用的开销。\n特点： 定义方式： 使用 inline 关键字定义内联函数：\ninline int add(int a, int b) { return a + b; } 调用开销减少： 由于编译器在每个调用点替换函数体，避免了栈操作和跳转，增强了性能。\n适合小函数： 内联函数通常适用于简单、短小的函数，过大的函数可能导致代码膨胀。\n编译期决策： 编译器可以选择是否将某个函数作为内联函数处理，并不总是强制内联。\n示例： #include \u0026lt;iostream\u0026gt; inline int square(int x) { return x * x; } int main() { std::cout \u0026lt;\u0026lt; \u0026#34;Square of 5: \u0026#34; \u0026lt;\u0026lt; square(5) \u0026lt;\u0026lt; std::endl; return 0; } 在上述示例中，调用 square(5) 时，编译器会在调用处替换为 5 * 5，从而减少函数调用的开销。\n指针 类与对象 类（Class） 类是一个用户定义的数据类型，用于封装数据和函数。类可以包含属性（成员变量）和行为（成员函数）。\n定义示例：\nclass Dog { public: // 属性 std::string name; int age; // 构造函数 Dog(std::string n, int a) : name(n), age(a) {} // 方法 void bark() { std::cout \u0026lt;\u0026lt; name \u0026lt;\u0026lt; \u0026#34; says woof!\u0026#34; \u0026lt;\u0026lt; std::endl; } }; 对象（Object） 对象是类的实例，通过类的构造函数创建。每个对象都有自己的属性值。\n使用示例：\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; class Dog { public: std::string name; int age; Dog(std::string n, int a) : name(n), age(a) {} void bark() { std::cout \u0026lt;\u0026lt; name \u0026lt;\u0026lt; \u0026#34; says woof!\u0026#34; \u0026lt;\u0026lt; std::endl; } }; int main() { // 创建对象 Dog myDog(\u0026#34;Buddy\u0026#34;, 3); // 调用对象的方法 myDog.bark(); // 输出: Buddy says woof! return 0; } 总结 类是模板，用于定义对象的属性和行为。 对象是类的实例，具有具体的状态和行为。类和对象的结合使得 C++ 支持面向对象编程，便于代码的组织、复用和维护。 注意 构造函数 ![](../img/屏幕截图 (2).png)\n析构函数特点 拷贝构造函数 拷贝构造函数，又称复制构造函数，是一种特殊的构造函数，它由编译器调用来完成一些基于同一类的其他对象的构建及初始化。\n其形参必须是引用，但并不限制为const，一般普遍的会加上const限制。此函数经常用在函数调用时用户定义类型的值传递及返回。\n拷贝构造函数要调用基类的拷贝构造函数和成员函数。如果可以的话，它将用常量方式调用，另外，也可以用非常量方式调用。\n友元函数 定义:\n友元是一种定义在类外部的普通函数或类，但它需要在类体内进行说明，为了与该类的成员函数加以区别，在说明时前面加以关键字friend。 友元不是成员函数，但是它可以访问类中的私有成员。 类具有封装和信息隐藏的特性。只有类的成员函数才能访问类的私有成员，程序中的其他函数是无法访问私有成员的。非成员函数可以访问类中的公有成员，但是如果将数据成员都定义为公有的，这又破坏了隐藏的特性。另外，应该看到在某些情况下，特别是在对某些成员函数多次调用时，由于参数传递，类型检查和安全性检查等都需要时间开销，而影响程序的运行效率。 友元函数与一般函数的不同点在于：\n友元函数必须在类的定义中说明，其函数体可在类内定义，也可在类外定义；\n它可以访问该类中的所有成员（公有的、私有的和保护的），而一般函数只能访问类中的公有成员。\n注意事项\n友元关系不能被继承。 友元关系是单向的，不具有交换性。若类B是类A的友元，类A不一定是类B的友元，要看在类中是否有相应的声明。 友元关系不具有传递性。若类B是类A的友元，类C是B的友元，类C不一定是类A的友元，同样要看类中是否有相应的申明。 动态内存 函数重载 函数重载是一种特殊情况，C++允许在同一作用域中声明几个类似的同名函数，这些同名函数的形参列表（参数个数，类型，顺序）必须不同，常用来处理实现功能类似数据类型不同的问题。 所谓函数的重载是指完成不同功能的函数可以具有相同的函数名。 C++的编译器是根据函数的实参来确定应该调用哪一个函数的。 void Swap1(int* a, int* b); void Swap2(float* a, float* b); void Swap3(char* a, char* b); void Swap4(double* a, double* b); 运算符重载 可以重定义或重载大部分 C++ 内置的运算符。这样，您就能使用自定义类型的运算符。\n重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个返回类型和一个参数列表。\nBox operator+(const Box\u0026amp;); 声明加法运算符用于把两个 Box 对象相加，返回最终的 Box 对象。大多数的重载运算符可被定义为普通的非成员函数或者被定义为类成员函数。如果我们定义上面的函数为类的非成员函数，那么我们需要为每次操作传递两个参数，如下所示：\nBox operator+(const Box\u0026amp;, const Box\u0026amp;); 单继承 在C++中所谓“继承”就是在一个已存在的类的基础上建立一个新的类。已存在的类称为“基类(base class)”或“父类(father class)”。新建立的类称为“派生类(derived class)”或“子类(son class)”。\n通过继承机制，可以利用已有的数据类型来定义新的数据类型。所定义的新的数据类型不仅拥有新定义的成员，而且还同时拥有旧的成员。我们称已存在的用来派生新类的类为基类，又称为父类。由已存在的类派生出的新类称为派生类，又称为子类。\n在建立派生类的过程中，基类不会做任何改变，派生类则除了继承基类的所有可引用的成员变量和成员函数外，还可另外定义本身的成员变量和处理这些变量的函数，由于派生类可继承基类的成员变量和成员函数，因此在基类中定义好的数据和函数等的程序代码可重复使用，这样可以提高程序的可靠性。\n当从已有的类中派生出新的类时，可以对派生类做以下几种变化：\n可以继承基类的成员数据或成员函数。 可以增加新的成员变量。 可以增加新的成员函数。 可以重新定义已有的成员函数。 可以改变现有的成员属性。 在C++中有二种继承：单一继承和多重继承。当一个派生类仅由一个基类派生时，称为单一继承；而当一个派生类由二个或更多个基类所派生时，称为多重继承。\n但派生并不是简单的扩充，有可能改变基类的性质。有三种派生方式：公有派生、保护派生、私有派生。默认的是私有派生。\n公有派生（Public Inheritance） 在 C++ 中，公有派生（Public Inheritance）是最常见的类继承方式。通过公有派生，派生类可以继承基类的成员，其访问权限如下：\n公有成员（public）： 在派生类和类外均可访问。 保护成员（protected）： 在派生类内可访问，但在类外不能直接访问。 私有成员（private）： 不能在派生类中访问，只能通过基类的公有或保护成员函数访问。 示例代码 class Base { public: int pubVar; // 可在派生类和类外访问 protected: int protVar; // 可在派生类访问，但类外无法访问 private: int privVar; // 仅能在基类中访问 }; class Derived : public Base { public: void accessMembers() { pubVar = 1; // 可访问 protVar = 2; // 可访问 // privVar = 3; // 错误：无法访问 } }; // 使用示例 int main() { Derived d; d.pubVar = 10; // 可以访问 // d.protVar = 20; // 错误：无法访问 // d.privVar = 30; // 错误：无法访问 return 0; } 使用公有派生时，基类的公有和保护成员在派生类中依然保持其访问权限，而私有成员不可访问。 私有派生（Private Inheritance） 在 C++ 中，私有派生是一种继承方式，其中基类的公有成员和保护成员在派生类中都变为私有成员。这意味着：\n公有成员（public）： 在基类中为公有，但在派生类中变为私有。可以在派生类内部直接使用，但在派生类外部无法访问。 保护成员（protected）： 在基类中为保护，但在派生类中同样变为私有。可以在派生类内部使用，但在外部无法访问。 私有成员（private）： 私有成员在基类中始终不可访问，派生类也无法直接使用。 示例代码 class Base { public: int pubVar; // 公有成员 protected: int protVar; // 保护成员 private: int privVar; // 私有成员 }; class Derived : private Base { public: void accessMembers() { pubVar = 1; // 可以访问（变为私有） protVar = 2; // 可以访问（变为私有） // privVar = 3; // 错误：无法访问 } }; // 使用示例 int main() { Derived d; d.pubVar = 10; // 错误：无法访问 // d.protVar = 20; // 错误：无法访问 // d.privVar = 30; // 错误：无法访问 return 0; } 私有派生通过将基类的公有和保护成员转为私有，增强了基类的封装性，确保只有派生类内部可以使用这些成员，外部无法直接访问。这种方式适用于希望隐藏基类实现细节，同时允许派生类使用基类功能的场景。 3**、【保护派生】**\nclass ClassName: protected BaseClassName\n保护派生时，基类中公有成员和保护成员在派生类中均变为保护的和私有的，在派生类中仍可直接使用这些成员，基类中的私有成员，在派生类中不可直接使用。\n基类：public: (变为保护)在派生类中使用，类外不可使用\nprotected: (变为私有）在派生类中使用，类外不可使用\nprivate: 不能在派生类中和类外使用\n保护派生（Protected Inheritance） 在 C++ 中，保护派生是一种继承方式。通过这种方式，基类的公有成员和保护成员在派生类中被视为保护成员，这意味着它们的访问权限发生了变化：\n公有成员（public）： 在基类中是公有的，但在保护派生中变为保护的。派生类可以内部访问，但类外部无法访问。 保护成员（protected）： 在基类中是保护的，经过保护派生后仍然是保护的，派生类可以内部访问，类外部无法访问。 私有成员（private）： 无论是公有、保护还是私有继承，基类的私有成员始终不可在派生类中访问。 示例代码 class Base { public: int pubVar; // 公有成员 protected: int protVar; // 保护成员 private: int privVar; // 私有成员 }; class Derived : protected Base { public: void accessMembers() { pubVar = 1; // 可以访问（变为保护） protVar = 2; // 可以访问（仍为保护） // privVar = 3; // 错误：无法访问 } }; // 使用示例 int main() { Derived d; // d.pubVar = 10; // 错误：无法访问 // d.protVar = 20; // 错误：无法访问 // d.privVar = 30; // 错误：无法访问 return 0; } 通过保护派生，基类的公有和保护成员变为保护，派生类内部可以直接使用这些成员，但在派生类外部无法访问。这种方式适用于需要隐藏基类实现细节，仅允许派生类使用基类功能的场合。保护派生的访问控制增大了封装性，确保了基类的内聚性。 抽象类与保护的成员函数 在面向对象编程中，一个类如果只能用作基类，不能创建对象，那么这个类被称为抽象类。抽象类的主要目的是用来定义其他类的通用接口或协议，通常包含至少一个抽象方法，这些方法在抽象类中声明但不实现，派生类必须实现这些方法。\n抽象类的定义示例 class AbstractClass { public: virtual void abstractMethod() = 0; // 抽象方法 }; 保护的构造函数和析构函数 在 C++ 中，可以将类的构造函数和析构函数定义为保护的（protected）。这样，外部代码无法直接创建该类的对象，但派生类可以访问和调用这些构造函数和析构函数。这种设计通常用于控制对象的创建和销毁过程，以确保只有派生类能够实例化该类。\n例如：\nclass AbstractBase { protected: AbstractBase() {} // 保护构造函数 virtual ~AbstractBase() {} // 保护析构函数 }; // 派生类可以使用 class ConcreteDerived : public AbstractBase { public: ConcreteDerived() {} }; 私有构造函数和析构函数 如果将一个类的构造函数或析构函数定义为私有的（private），这个类将无法被实例化，也无法被用作基类来派生出新的类。这种设计通常用于工具类等场景，表明该类不应该直接创建对象，而是提供静态功能或数据。\n当把类中的构造函数或析构函数说明为私有的时，所定义的类通常是没有任何实用意义的，一般情况下，不能用它来产生对象，也不能用它来产生派生类。\n例如：\nclass Utility { private: Utility() {} // 私有构造函数 ~Utility() {} // 私有析构函数 public: static void usefulMethod() { // 提供静态方法 } }; 抽象类用于定义子类的接口，不能被实例化。 保护构造函数和析构函数允许派生类访问，控制对象创建。 私有构造函数和析构函数禁止实例化，通常用于工具类。 多继承 //格式为： class 类名:\u0026lt;Access\u0026gt;类名1,..., \u0026lt;Access\u0026gt;类名n { private: ...... ； //私有成员说明; public: ...... ； //公有成员说明; protected: ...... ； //保护的成员说明; }; class D: public A, protected B, private C { ....//派生类中新增加成员 }; 初始化基类成员\n构造函数不能被继承, 派生类的构造函数必须调用基类的构造函数来初始化基类成员基类子对象。\n派生类构造函数的调用顺序如下：\n基类的构造函数 子对象类的构造函数 派生类的构造函数 虚继承 //通过指定类名来解决指定不明确问题 A::v.x = 5; 虚基类 在同一个公共的基类在派生类中产生多个拷贝，不仅多占用了存储空间，而且可能会造成多个拷贝中的数据不一致和模糊的引用。\nD d; d.x=10; //模糊引用 在多重派生的过程中，若使公共基类在派生类中只有一个拷贝，则可将这种基类说明为虚基类。在派生类的定义中，只要在基类的类名前加上关键字virtual，就可以将基类说明为虚基类。\nclass B:public virtual A{ public: int y; B(int a=0, int b=0 ):A(b) { y=a;} }; 这样就不会造成模糊引用。\n由虚基类派生出的对象初始化时，直接调用虚基类的构造函数。因此，若将一个类定义为虚基类，则一定有正确的构造函数可供所有派生类调用。 再次强调，用虚基类进行多重派生时，若虚基类没有缺省的构造函数，则在每一个派生类的构造函数中都必须有对虚基类构造函数的调用 （且首先调用）。 虚函数 虚函数是 C++ 中实现多态性的重要机制。它允许在基类中声明一个函数，并在派生类中重新定义（重写）这个函数。通过虚函数，可以在运行时根据对象的实际类型调用相应的函数，实现动态绑定。\n定义和用法 虚函数通过在基类中使用关键字 virtual 声明。当基类指针或引用指向派生类对象时，虚函数确保调用的是派生类中重写的版本。\n示例代码 #include \u0026lt;iostream\u0026gt; class Base { public: virtual void show() { // 虚函数 std::cout \u0026lt;\u0026lt; \u0026#34;Base class show function called.\u0026#34; \u0026lt;\u0026lt; std::endl; } virtual ~Base() {} // 虚析构函数 }; class Derived : public Base { public: void show() override { // 重写基类的虚函数 std::cout \u0026lt;\u0026lt; \u0026#34;Derived class show function called.\u0026#34; \u0026lt;\u0026lt; std::endl; } }; int main() { Base* ptr; // 基类指针 Derived derivedObj; // 派生类对象 ptr = \u0026amp;derivedObj; // 指向派生类对象 ptr-\u0026gt;show(); // 调用派生类的 show 函数 return 0; } 输出结果 Derived class show function called. 关键点 动态绑定：虚函数的调用决定是在运行时而非编译时，允许实现多态。 基类指针或引用：通过基类指针或引用调用虚函数时，实际调用的是对象的动态类型的相应函数。 虚析构函数：如果类有虚函数，通常应该有虚析构函数，以确保在对象销毁时正确调用派生类的析构函数。 性能开销：虚函数通过虚表（vtable）实现，可能会引入少许性能开销。 抽象类 抽象类是面向对象编程中的一种特殊类型的类，它主要用于定义子类的接口或协议。抽象类不能被实例化，也就是说，无法创建抽象类的对象。它通常包含至少一个抽象方法，即在抽象类中声明但不实现的方法。\n特点 不能实例化：抽象类不能创建对象，只能作为基类使用。 包含抽象方法：至少包含一个纯虚函数（抽象方法），用 = 0 的语法声明。 可包含具体方法：抽象类可以包含具体方法（已经实现的方法）和成员变量。 派生类实现：派生类必须实现所有抽象方法，才能被实例化。 示例代码 #include \u0026lt;iostream\u0026gt; class AbstractClass { public: // 抽象方法 virtual void doSomething() = 0; // 具体方法 void commonFunction() { std::cout \u0026lt;\u0026lt; \u0026#34;This is a common function.\u0026#34; \u0026lt;\u0026lt; std::endl; } }; class ConcreteClass : public AbstractClass { public: // 实现抽象方法 void doSomething() override { std::cout \u0026lt;\u0026lt; \u0026#34;Doing something in ConcreteClass.\u0026#34; \u0026lt;\u0026lt; std::endl; } }; int main() { // AbstractClass obj; // 错误：无法实例化抽象类 ConcreteClass myObject; myObject.commonFunction(); // 调用具体方法 myObject.doSomething(); // 调用实现的抽象方法 return 0; } 输出结果 This is a common function. Doing something in ConcreteClass. 关键点 接口定义：抽象类通过定义接口，规定了派生类应当实现的功能。 增强灵活性：通过使用抽象类，可以轻松实现多态，提高代码的可维护性和扩展性。 防止实例化：使用抽象类可以防止意外创建基类的对象，确保只能使用具体的实现类。 命名空间 **使用命名空间的目的是对标识符的名称进行本地化，以避免命名冲突。在C++中，变量、函数和类都是大量存在的。如果没有命名空间，这些变量、函数、类的名称将都存在于全局命名空间中，会导致很多冲突。 **\nnamespace 关键字使得我们可以通过创建作用范围来对全局命名空间进行分隔。本质上来讲，一个命名空间就定义了一个范围。定义命名空间的基本形式如下：\nnamespace 名称{ 声明 } 在命名空间中定义的任何东西都局限于该命名空间内。\n命名空间可以嵌套，在一个命名空间中定义另一个命名空间。\nnamespace 命名空间名称1{ // 代码声明 namespace命名空间名称2{ // 代码声明 } } 通过使用 :: 运算符来访问嵌套的命名空间中的成员。\n函数模板 模板是泛型编程的基础，泛型编程即以一种独立于任何特定类型的方式编写代码。模板是创建泛型类或函数的蓝图或公式。 模板函数定义的一般形式如下所示：\ntemplate \u0026lt;typename type类型\u0026gt; 返回类型 函数名(参数列表) { // 函数的主体 } type 是函数所使用的数据类型的占位符名称。这个名称可以在函数定义中使用。\n正如我们定义函数模板一样，我们也可以定义类模板。泛型类声明的一般形式如下所示： template \u0026lt;class type\u0026gt; class class-name { } type 是占位符类型名称，可以在类被实例化的时候进行指定。使用一个逗号分隔的列表来定义多个泛型数据类型。\n输入输出流 IO IO流 在C++中允许用户重载运算符\u0026lt;\u0026lt;和\u0026gt;\u0026gt;，实现对象的输入和输出。重载这二个运算符时，在对象所在的类中，将重载这二个运算符的函数说明该类的友元函数。\n文件流 C++标准库专门提供了3个类用于实现文件操作，它们统称为文件流类，这3个类分别为：\nifstream：专用于从文件中读取数据； ofstream：专用于向文件中写入数据； fstream：既可用于从文件中读取数据，又可用于向文件中写入数据。 打开文件可以通过以下两种方式进行：\n调用流对象的 open 成员函数打开文件。 定义文件流对象时，通过构造函数打开文件。 【使用 open 函数打开文件】\n先看第一种文件打开方式。以 ifstream 类为例，该类有一个 open 成员函数，其他两个文件流类也有同样的 open 成员函数：\nvoid open(const char* szFileName, int mode) 第一个参数是指向文件名的指针，第二个参数是文件的打开模式标记。\nios::binary 可以和其他模式标记组合使用，例如：\nios::in | ios::binary表示用二进制模式，以读取的方式打开文件； ios::out | ios::binary表示用二进制模式，以写入的方式打开文件。 在流对象上执行 open 成员函数，给出文件名和打开模式，就可以打开文件。判断文件打开是否成功，可以看“对象名”这个表达式的值是否为 true，如果为 true，则表示文件打开成功。\n**close()方法的用法很简单，其语法格式如下： **\nvoid close(); 调用open()方法打开文件，是文件流对象和文件之间建立关联的过程。那么，调用 close()方法关闭已打开的文件，就可以理解为是切断文件流对象和文件之间的关联。注意，close()方法的功能仅是切断文件流与文件之间的关联，该文件流并会被销毁，其后续还可用于关联其它的文件。\n可以看到，该方法既不需要传递任何参数，也没有返回值。\nSTL标准模板库 STL是Standard Template Library的简称，中文名标准模板库，惠普实验室开发的一系列软件的统称。它是由Alexander Stepanov、Meng Lee和David R Musser在惠普实验室工作时所开发出来的。从根本上说，STL是一些“容器”的集合，这些“容器”有list,vector,set,map等，STL也是算法和其他一些组件的集合。这里的“容器”和算法的集合指的是世界上很多聪明人很多年的杰作。STL的目的是标准化组件，这样就不用重新开发，可以使用现成的组件。STL是C++的一部分，因此不用安装额外的库文件。\nSTL的版本很多，常见的有HP STL、PJ STL、 SGI STL等。\nvector 序列式容器 vector 容器是 STL 中最常用的容器之一，它和 array 容器非常类似，都可以看做是对 C++ 普通数组的“升级版”。不同之处在于，array 实现的是静态数组（容量固定的数组），而 vector 实现的是一个动态数组，即可以进行元素的插入和删除，在此过程中，vector 会动态调整所占用的内存空间，整个过程无需人工干预。\nvector 常被称为向量容器，因为该容器擅长在尾部插入或删除元素，在常量时间内就可以完成，时间复杂度为O(1)；而对于在容器头部或者中部插入或删除元素，则花费时间要长一些（移动元素需要耗费时间），时间复杂度为线性阶O(n)。\ndeque双端队列容器 前面已接触过vector 容器，值得一提的是，deque 容器和 vecotr 容器有很多相似之处，比如：deque 容器也擅长在序列尾部添加或删除元素（时间复杂度为O(1)），而不擅长在序列中间添加或删除元素。deque 容器也可以根据需要修改自身的容量和大小。\n和 vector 不同的是，deque 还擅长在序列头部添加或删除元素，所耗费的时间复杂度也为常数阶O(1)。并且更重要的一点是，deque 容器中存储元素并不能保证所有元素都存储到连续的内存空间中。\n当需要向序列两端频繁的添加或删除元素时，应首选 deque 容器。\nstack 栈容器 stack\u0026lt; T \u0026gt;容器适配器中的数据是以 LIFO (先进后出) 的方式组织的，这和自助餐馆中堆叠的盘子、箱子中的一堆书类似。理论上的 stack 容器及其一些基本操作。只能访问 stack 顶部的元素；只有在移除 stack 顶部的元素后，才能访问下方的元素。\nqueue队列 队列也是一种逻辑数据结构，其具有先进先出的特性，只能在队的前端进行删除， 在队的后端进行插入。针对这种特性，可以实现一些较为复杂的逻辑。在实际应用中，部分程序也正需要这样一种顺序进出的数据处理方式。\nqueue：只允许从一端插入元素（入队），从另一端删除元素（出队）。遵循先进先出（FIFO）的原则。 deque：可以在两端插入和删除元素。支持在前端和后端进行操作。 set容器 STL 对这个序列可以进行查找、插入、删除序列中的任意一个元素，而完成这些操作的时间同这个序列中元素个数的对数成比例关系，并且当游标指向一个已删除的元素时，删除操作无效。\n而一个经过更正的和更加实际的定义应该是：一个集合(set)是一个容器，它其中所包含的元素的值是唯一的。这在收集一个数据的具体值的时候是有用的。集合中的元素按一定的顺序排列，并被作为集合中的实例。一个集合通过一个链表来组织，在插入操作和删除操作上比向量(vector)快，但查找或添加末尾的元素时会有些慢。具体实现采用了红黑树的平衡二叉树的数据结构。\nmap容器 映射和多重映射基于某一类型Key的键集的存在，提供对T类型的数据进行快速和高效的检索。\n对map而言，键只是指存储在容器中的某一成员。Map不支持副本键，multimap支持副本键。Map和multimap对象包涵了键和各个键有关的值，键和值的数据类型是不相同的，这与set不同。set中的key和value是Key类型的，而map中的key和value是一个pair结构中的两个分量。\nC++异常处理 程序中常见的错误有两大类：语法错误和运行错误。在编译时，编译系统能发现程序中的语法错误。\n异常(exception)是运行时(run-time)的错误，通常是非正常条件下引起的，例如，下标(index)越界、new操作不能正常分配所需内存。C语言中，异常通常是通过被调用函数返回一个数值作为标记的。\nC++中，函数可以识别标记为异常的条件，然后通告发生了异常。这种通告异常的机制称为抛出异常(throwing an exception)。\n异常提供了一种转移程序控制权的方式。C++ 异常处理涉及到三个关键字：try、catch、throw。\n**throw：**当问题出现时，程序会抛出一个异常。这是通过使用 throw 关键字来完成的。 **catch：**在您想要处理问题的地方，通过异常处理程序捕获异常。catch 关键字用于捕获异常。 **try：**try 块中的代码标识将被激活的特定异常。它后面通常跟着一个或多个 catch 块。 如果有一个块抛出一个异常，捕获异常的方法会使用 try 和 catch 关键字。try 块中放置可能抛出异常的代码，try 块中的代码被称为保护代码。\n例如\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { double x, y; cout \u0026lt;\u0026lt; \u0026#34;请输入x,y的值:\u0026#34;; cin \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y; try { if (y == 0) throw - 1; // 抛出-1类型异常 else if(x==0) throw - 1.0; // 抛出-1类型异常 else cout \u0026lt;\u0026lt; \u0026#34;x/y=\u0026#34; \u0026lt;\u0026lt; x / y \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; endl; } catch (int e) { cout \u0026lt;\u0026lt; \u0026#34;catch(int) :\u0026#34; \u0026lt;\u0026lt; e \u0026lt;\u0026lt; endl; } catch (double d) { cout \u0026lt;\u0026lt; \u0026#34;catch(double) :\u0026#34; \u0026lt;\u0026lt; d \u0026lt;\u0026lt; endl; } return 0; } ","permalink":"//localhost:1313/posts/c++%E8%AF%AD%E8%A8%80/","summary":"\u003ch1 id=\"emplace用法\"\u003eemplace用法\u003c/h1\u003e\n\u003cp\u003e\u003ccode\u003eemplace\u003c/code\u003e 是 C++ 中用于容器（如 \u003ccode\u003estd::vector\u003c/code\u003e, \u003ccode\u003estd::map\u003c/code\u003e, \u003ccode\u003estd::unordered_map\u003c/code\u003e 等）的一种方法，允许你在容器中直接构造元素，而不需要先构造再复制或移动。这通常可以提高性能，减少不必要的对象拷贝。\u003c/p\u003e","title":"C++基础"},{"content":"go的变量声明 第一种，指定变量类型，如果没有初始化，则变量默认为零值。 例如：\nvar a int // 声明一个整型变量 a，默认为 0 var b float64 // 声明一个浮点型变量 b，默认为 0.0 第二种，根据值自行判定变量类型。 例如：\nvar c = \u0026#34;Hello\u0026#34; // 声明变量 c，类型为 string var d = 42 // 声明变量 d，类型为 int 第三种，如果变量已经使用 var 声明过了，再使用 := 声明变量，就产生编译错误 例如：\nvar e int = 10 // 使用 var 声明 // e := 20 // 编译错误：e 已经被声明过 go的语言常量 常量是一个简单值的标识符，在程序运行时，不会被修改的量。\n常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。\n常量的定义格式：\nconst identifier [type] = value 你可以省略类型说明符 [type]，因为编译器可以根据变量的值来推断其类型。\n显式类型定义： const b string = \u0026quot;abc\u0026quot; 隐式类型定义： const b = \u0026quot;abc\u0026quot; 多个相同类型的声明可以简写为：\nconst c_name1, c_name2 = value1, value2 iota，特殊常量，可以认为是一个可以被编译器修改的常量。\niota 在 const关键字出现时将被重置为 0(const 内部的第一行之前)，const 中每新增一行常量声明将使 iota 计数一次(iota 可理解为 const 语句块中的行索引)。\niota 可以被用作枚举值：\nconst ( a = iota b = iota c = iota ) 第一个 iota 等于 0，每当 iota 在新的一行被使用时，它的值都会自动加 1；所以 a=0, b=1, c=2 可以简写为如下形式：\nconst ( a = iota b c ) iota 用法 实例 package main import \u0026#34;fmt\u0026#34; func main() { const ( a = iota //0 b //1 c //2 d = \u0026#34;ha\u0026#34; //独立值，iota += 1 e //\u0026#34;ha\u0026#34; iota += 1 f = 100 //iota +=1 g //100 iota +=1 h = iota //7,恢复计数 i //8 ) fmt.Println(a,b,c,d,e,f,g,h,i) } 以上实例运行结果为：\n0 1 2 ha ha 100 100 7 8 go的运算符 运算符用于在程序运行时执行数学或逻辑运算。\nGo 语言内置的运算符有：\n算术运算符 关系运算符 逻辑运算符 位运算符 赋值运算符 其他运算符 接下来让我们来详细看看各个运算符的介绍。\n算术运算符 下表列出了所有Go语言的算术运算符。假定 A 值为 10，B 值为 20。\n运算符 描述 实例 + 相加 A + B 输出结果 30 - 相减 A - B 输出结果 -10 * 相乘 A * B 输出结果 200 / 相除 B / A 输出结果 2 % 求余 B % A 输出结果 0 ++ 自增 A++ 输出结果 11 \u0026ndash; 自减 A\u0026ndash; 输出结果 9 以下实例演示了各个算术运算符的用法：\n实例 package main import \u0026#34;fmt\u0026#34; func main() { var a int = 21 var b int = 10 var c int c = a + b fmt.Printf(\u0026#34;第一行 - c 的值为 %d**\\n**\u0026#34;, c ) c = a - b fmt.Printf(\u0026#34;第二行 - c 的值为 %d**\\n**\u0026#34;, c ) c = a * b fmt.Printf(\u0026#34;第三行 - c 的值为 %d**\\n**\u0026#34;, c ) c = a / b fmt.Printf(\u0026#34;第四行 - c 的值为 %d**\\n**\u0026#34;, c ) c = a % b fmt.Printf(\u0026#34;第五行 - c 的值为 %d**\\n**\u0026#34;, c ) a++ fmt.Printf(\u0026#34;第六行 - a 的值为 %d**\\n**\u0026#34;, a ) a=21 // 为了方便测试，a 这里重新赋值为 21 a-- fmt.Printf(\u0026#34;第七行 - a 的值为 %d**\\n**\u0026#34;, a ) } 以上实例运行结果：\n第一行 - c 的值为 31 第二行 - c 的值为 11 第三行 - c 的值为 210 第四行 - c 的值为 2 第五行 - c 的值为 1 第六行 - a 的值为 22 第七行 - a 的值为 20 关系运算符 下表列出了所有Go语言的关系运算符。假定 A 值为 10，B 值为 20。\n运算符 描述 实例 == 检查两个值是否相等，如果相等返回 True 否则返回 False。 (A == B) 为 False != 检查两个值是否不相等，如果不相等返回 True 否则返回 False。 (A != B) 为 True \u0026gt; 检查左边值是否大于右边值，如果是返回 True 否则返回 False。 (A \u0026gt; B) 为 False \u0026lt; 检查左边值是否小于右边值，如果是返回 True 否则返回 False。 (A \u0026lt; B) 为 True \u0026gt;= 检查左边值是否大于等于右边值，如果是返回 True 否则返回 False。 (A \u0026gt;= B) 为 False \u0026lt;= 检查左边值是否小于等于右边值，如果是返回 True 否则返回 False。 (A \u0026lt;= B) 为 True package main import \u0026#34;fmt\u0026#34; func main() { var a bool = true var b bool = false if ( a \u0026amp;\u0026amp; b ) { fmt.Printf(\u0026#34;第一行 - 条件为 true\\n\u0026#34; ) } if ( a || b ) { fmt.Printf(\u0026#34;第二行 - 条件为 true\\n\u0026#34; ) } /* 修改 a 和 b 的值 */ a = false b = true if ( a \u0026amp;\u0026amp; b ) { fmt.Printf(\u0026#34;第三行 - 条件为 true\\n\u0026#34; ) } else { fmt.Printf(\u0026#34;第三行 - 条件为 false\\n\u0026#34; ) } if ( !(a \u0026amp;\u0026amp; b) ) { fmt.Printf(\u0026#34;第四行 - 条件为 true\\n\u0026#34; ) } } 运行结果：\n第一行 - a 不等于 b 第二行 - a 不小于 b 第三行 - a 大于 b 第四行 - a 小于等于 b 第五行 - b 大于等于 a 逻辑运算符 下表列出了所有Go语言的逻辑运算符。假定 A 值为 True，B 值为 False。\n运算符 描述 实例 \u0026amp;\u0026amp; 逻辑 AND 运算符。 如果两边的操作数都是 True，则条件 True，否则为 False。 (A \u0026amp;\u0026amp; B) 为 False || 逻辑 OR 运算符。 如果两边的操作数有一个 True，则条件 True，否则为 False。 (A || B) 为 True ! 逻辑 NOT 运算符。 如果条件为 True，则逻辑 NOT 条件 False，否则为 True。 !(A \u0026amp;\u0026amp; B) 为 True package main import \u0026#34;fmt\u0026#34; func main() { var a bool = true var b bool = false if ( a \u0026amp;\u0026amp; b ) { fmt.Printf(\u0026#34;第一行 - 条件为 true\\n\u0026#34; ) } if ( a || b ) { fmt.Printf(\u0026#34;第二行 - 条件为 true\\n\u0026#34; ) } /* 修改 a 和 b 的值 */ a = false b = true if ( a \u0026amp;\u0026amp; b ) { fmt.Printf(\u0026#34;第三行 - 条件为 true\\n\u0026#34; ) } else { fmt.Printf(\u0026#34;第三行 - 条件为 false\\n\u0026#34; ) } if ( !(a \u0026amp;\u0026amp; b) ) { fmt.Printf(\u0026#34;第四行 - 条件为 true\\n\u0026#34; ) } } 运行结果：\n第二行 - 条件为 true 第三行 - 条件为 false 第四行 - 条件为 true 位运算符 位运算符对整数在内存中的二进制位进行操作。\n下表列出了位运算符 \u0026amp;, |, 和 ^ 的计算：\np q p \u0026amp; q p | q p ^ q 0 0 0 0 0 0 1 0 1 1 1 1 1 1 0 1 0 0 1 1 假定 A = 60; B = 13; 其二进制数转换为：\nA = 0011 1100 B = 0000 1101 ----------------- A\u0026amp;B = 0000 1100 A|B = 0011 1101 A^B = 0011 0001 Go 语言支持的位运算符如下表所示。假定 A 为60，B 为13：\n运算符 描述 实例 \u0026amp; 按位与运算符\u0026quot;\u0026amp;\u0026ldquo;是双目运算符。 其功能是参与运算的两数各对应的二进位相与。 (A \u0026amp; B) 结果为 12, 二进制为 0000 1100 | 按位或运算符\u0026rdquo;|\u0026ldquo;是双目运算符。 其功能是参与运算的两数各对应的二进位相或 (A | B) 结果为 61, 二进制为 0011 1101 ^ 按位异或运算符\u0026rdquo;^\u0026ldquo;是双目运算符。 其功能是参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。 (A ^ B) 结果为 49, 二进制为 0011 0001 \u0026laquo; 左移运算符\u0026rdquo;\u0026laquo;\u0026ldquo;是双目运算符。左移n位就是乘以2的n次方。 其功能把\u0026rdquo;\u0026laquo;\u0026ldquo;左边的运算数的各二进位全部左移若干位，由\u0026rdquo;\u0026laquo;\u0026ldquo;右边的数指定移动的位数，高位丢弃，低位补0。 A \u0026laquo; 2 结果为 240 ，二进制为 1111 0000 \u0026raquo; 右移运算符\u0026rdquo;\u0026raquo;\u0026ldquo;是双目运算符。右移n位就是除以2的n次方。 其功能是把\u0026rdquo;\u0026raquo;\u0026ldquo;左边的运算数的各二进位全部右移若干位，\u0026quot;\u0026raquo;\u0026ldquo;右边的数指定移动的位数。 A \u0026raquo; 2 结果为 15 ，二进制为 0000 1111 package main import \u0026#34;fmt\u0026#34; func main() { var a uint = 60 /* 60 = 0011 1100 */ var b uint = 13 /* 13 = 0000 1101 */ var c uint = 0 c = a \u0026amp; b /* 12 = 0000 1100 */ fmt.Printf(\u0026#34;第一行 - c 的值为 %d\\n\u0026#34;, c ) c = a | b /* 61 = 0011 1101 */ fmt.Printf(\u0026#34;第二行 - c 的值为 %d\\n\u0026#34;, c ) c = a ^ b /* 49 = 0011 0001 */ fmt.Printf(\u0026#34;第三行 - c 的值为 %d\\n\u0026#34;, c ) c = a \u0026lt;\u0026lt; 2 /* 240 = 1111 0000 */ fmt.Printf(\u0026#34;第四行 - c 的值为 %d\\n\u0026#34;, c ) c = a \u0026gt;\u0026gt; 2 /* 15 = 0000 1111 */ fmt.Printf(\u0026#34;第五行 - c 的值为 %d\\n\u0026#34;, c ) } 运行结果：\n第一行 - c 的值为 12 第二行 - c 的值为 61 第三行 - c 的值为 49 第四行 - c 的值为 240 第五行 - c 的值为 15 赋值运算符 下表列出了所有Go语言的赋值运算符。\n运算符 描述 实例 = 简单的赋值运算符，将一个表达式的值赋给一个左值 C = A + B 将 A + B 表达式结果赋值给 C += 相加后再赋值 C += A 等于 C = C + A -= 相减后再赋值 C -= A 等于 C = C - A *= 相乘后再赋值 C *= A 等于 C = C * A /= 相除后再赋值 C /= A 等于 C = C / A %= 求余后再赋值 C %= A 等于 C = C % A \u0026laquo;= 左移后赋值 C \u0026laquo;= 2 等于 C = C \u0026laquo; 2 \u0026raquo;= 右移后赋值 C \u0026raquo;= 2 等于 C = C \u0026raquo; 2 \u0026amp;= 按位与后赋值 C \u0026amp;= 2 等于 C = C \u0026amp; 2 ^= 按位异或后赋值 C ^= 2 等于 C = C ^ 2 |= 按位或后赋值 C |= 2 等于 C = C | 2 package main import \u0026#34;fmt\u0026#34; func main() { var a int = 21 var c int c = a fmt.Printf(\u0026#34;第 1 行 - = 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c += a fmt.Printf(\u0026#34;第 2 行 - += 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c -= a fmt.Printf(\u0026#34;第 3 行 - -= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c *= a fmt.Printf(\u0026#34;第 4 行 - *= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c /= a fmt.Printf(\u0026#34;第 5 行 - /= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c = 200; c \u0026lt;\u0026lt;= 2 fmt.Printf(\u0026#34;第 6行 - \u0026lt;\u0026lt;= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c \u0026gt;\u0026gt;= 2 fmt.Printf(\u0026#34;第 7 行 - \u0026gt;\u0026gt;= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c \u0026amp;= 2 fmt.Printf(\u0026#34;第 8 行 - \u0026amp;= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c ^= 2 fmt.Printf(\u0026#34;第 9 行 - ^= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c |= 2 fmt.Printf(\u0026#34;第 10 行 - |= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) } 运行结果：\n第 1 行 - = 运算符实例，c 值为 = 21 第 2 行 - += 运算符实例，c 值为 = 42 第 3 行 - -= 运算符实例，c 值为 = 21 第 4 行 - *= 运算符实例，c 值为 = 441 第 5 行 - /= 运算符实例，c 值为 = 21 第 6行 - \u0026lt;\u0026lt;= 运算符实例，c 值为 = 800 第 7 行 - \u0026gt;\u0026gt;= 运算符实例，c 值为 = 200 第 8 行 - \u0026amp;= 运算符实例，c 值为 = 0 第 9 行 - ^= 运算符实例，c 值为 = 2 第 10 行 - |= 运算符实例，c 值为 = 2 其他运算符 下表列出了Go语言的其他运算符。\n运算符 描述 实例 \u0026amp; 返回变量存储地址 \u0026amp;a; 将给出变量的实际地址。 * 指针变量。 *a; 是一个指针变量 package main import \u0026#34;fmt\u0026#34; func main() { var a int = 4 var b int32 var c float32 var ptr *int /* 运算符实例 */ fmt.Printf(\u0026#34;第 1 行 - a 变量类型为 = %T\\n\u0026#34;, a ); fmt.Printf(\u0026#34;第 2 行 - b 变量类型为 = %T\\n\u0026#34;, b ); fmt.Printf(\u0026#34;第 3 行 - c 变量类型为 = %T\\n\u0026#34;, c ); /* \u0026amp; 和 * 运算符实例 */ ptr = \u0026amp;a /* \u0026#39;ptr\u0026#39; 包含了 \u0026#39;a\u0026#39; 变量的地址 */ fmt.Printf(\u0026#34;a 的值为 %d\\n\u0026#34;, a); fmt.Printf(\u0026#34;*ptr 为 %d\\n\u0026#34;, *ptr); } 运行结果：\n第 1 行 - a 变量类型为 = int 第 2 行 - b 变量类型为 = int32 第 3 行 - c 变量类型为 = float32 a 的值为 4 *ptr 为 4 运算符优先级 有些运算符拥有较高的优先级，二元运算符的运算方向均是从左至右。下表列出了所有运算符以及它们的优先级，由上至下代表优先级由高到低：\n优先级 运算符 5 * / % \u0026laquo; \u0026raquo; \u0026amp; \u0026amp;^ 4 + - | ^ 3 == != \u0026lt; \u0026lt;= \u0026gt; \u0026gt;= 2 \u0026amp;\u0026amp; 1 || 当然，你可以通过使用括号来临时提升某个表达式的整体运算优先级。\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int = 20 var b int = 10 var c int = 15 var d int = 5 var e int; e = (a + b) * c / d; // ( 30 * 15 ) / 5 fmt.Printf(\u0026#34;(a + b) * c / d 的值为 : %d\\n\u0026#34;, e ); e = ((a + b) * c) / d; // (30 * 15 ) / 5 fmt.Printf(\u0026#34;((a + b) * c) / d 的值为 : %d\\n\u0026#34; , e ); e = (a + b) * (c / d); // (30) * (15/5) fmt.Printf(\u0026#34;(a + b) * (c / d) 的值为 : %d\\n\u0026#34;, e ); e = a + (b * c) / d; // 20 + (150/5) fmt.Printf(\u0026#34;a + (b * c) / d 的值为 : %d\\n\u0026#34; , e ); } 运行结果：\n(a + b) * c / d 的值为 : 90 ((a + b) * c) / d 的值为 : 90 (a + b) * (c / d) 的值为 : 90 a + (b * c) / d 的值为 : 50 补充 Go 的自增，自减只能作为表达式使用，而不能用于赋值语句。\na++ // 这是允许的，类似 a = a + 1,结果与 a++ 相同 a-- //与 a++ 相似 a = a++ // 这是不允许的，会出现编译错误 syntax error: unexpected ++ at end of statement go的条件语句 条件语句需要开发者通过指定一个或多个条件，并通过测试条件是否为 true 来决定是否执行指定语句，并在条件为 false 的情况在执行另外的语句。\nGo 语言提供了以下几种条件判断语句：\n语句 描述 if 语句 if 语句 由一个布尔表达式后紧跟一个或多个语句组成。 if\u0026hellip;else 语句 if 语句 后可以使用可选的 else 语句, else 语句中的表达式在布尔表达式为 false 时执行。 if 嵌套语句 你可以在 if 或 else if 语句中嵌入一个或多个 if 或 else if 语句。 switch 语句 switch 语句用于基于不同条件执行不同动作。 select 语句 select 语句类似于 switch 语句，但是select会随机执行一个可运行的case。如果没有case可运行，它将阻塞，直到有case可运行。 go的循环语句 Go 语言提供了以下几种类型循环处理语句：\n循环类型 描述 for 循环 重复执行语句块 循环嵌套 在 for 循环中嵌套一个或多个 for 循环 循环控制语句 循环控制语句可以控制循环体内语句的执行过程。\nGO 语言支持以下几种循环控制语句：\n控制语句 描述 break 语句 经常用于中断当前 for 循环或跳出 switch 语句 continue 语句 跳过当前循环的剩余语句，然后继续进行下一轮循环。 goto 语句 将控制转移到被标记的语句。 无限循环 如果循环中条件语句永远不为 false 则会进行无限循环，我们可以通过 for 循环语句中只设置一个条件表达式来执行无限循环：\npackage main import \u0026#34;fmt\u0026#34; func main() { for true { fmt.Printf(\u0026#34;这是无限循环。\\n\u0026#34;); } } Go 语言函数 函数是基本的代码块，用于执行一个任务。 Go 语言最少有个 main() 函数。 你可以通过函数来划分不同功能，逻辑上每个函数执行的是指定的任务。 函数声明告诉了编译器函数的名称，返回类型，和参数。 Go 语言标准库提供了多种可动用的内置的函数。例如，len() 函数可以接受不同类型参数并返回该类型的长度。如果我们传入的是字符串则返回字符串的长度，如果传入的是数组，则返回数组中包含的元素个数。 Go 语言函数定义格式如下：\nfunc function_name( [parameter list] ) [return_types] { //函数体 } 函数定义解析：\nfunc：函数由 func 开始声明 function_name：函数名称，参数列表和返回值类型构成了函数签名。 parameter list：参数列表，参数就像一个占位符，当函数被调用时，你可以将值传递给参数，这个值被称为实际参数。参数列表指定的是参数类型、顺序、及参数个数。参数是可选的，也就是说函数也可以不包含参数。 return_types：返回类型，函数返回一列值。return_types 是该列值的数据类型。有些功能不需要返回值，这种情况下 return_types 不是必须的。 函数体：函数定义的代码集合。 实例 以下实例为 max() 函数的代码，该函数传入两个整型参数 num1 和 num2，并返回这两个参数的最大值：\n/* 函数返回两个数的最大值 */ func max(num1, num2 int) int { /* 声明局部变量 */ var result int if (num1 \u0026gt; num2) { result = num1 } else { result = num2 } return result } 函数调用 当创建函数时，你定义了函数需要做什么，通过调用该函数来执行指定任务。\n调用函数，向函数传递参数，并返回值，例如：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 定义局部变量 */ var a int = 100 var b int = 200 var ret int /* 调用函数并返回最大值 */ ret = max(a, b) fmt.Printf( \u0026#34;最大值是 : %d\\n\u0026#34;, ret ) } /* 函数返回两个数的最大值 */ func max(num1, num2 int) int { /* 定义局部变量 */ var result int if (num1 \u0026gt; num2) { result = num1 } else { result = num2 } return result } 以上实例在 main() 函数中调用 max（）函数，执行结果为：\n最大值是 : 200 函数返回多个值 Go 函数可以返回多个值，例如：\n实例 package main import \u0026#34;fmt\u0026#34; func swap(x, y string) (string, string) { return y, x } func main() { a, b := swap(\u0026#34;Google\u0026#34;, \u0026#34;Runoob\u0026#34;) fmt.Println(a, b) } 以上实例执行结果为：\nRunoob Google 函数参数 函数如果使用参数，该变量可称为函数的形参。\n形参就像定义在函数体内的局部变量。\n调用函数，可以通过两种方式来传递参数：\n传递类型 描述 值传递 值传递是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。 引用传递 引用传递是指在调用函数时将实际参数的地址传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。 默认情况下，Go 语言使用的是值传递，即在调用过程中不会影响到实际参数。\n函数用法 函数用法 描述 函数作为另外一个函数的实参 函数定义后可作为另外一个函数的实参数传入 闭包 闭包是匿名函数，可在动态编程中使用 方法 方法就是一个包含了接受者的函数 Go 语言变量作用域 作用域为已声明标识符所表示的常量、类型、变量、函数或包在源代码中的作用范围。\nGo 语言中变量可以在三个地方声明：\n函数内定义的变量称为局部变量 函数外定义的变量称为全局变量 函数定义中的变量称为形式参数 局部变量 在函数体内声明的变量称之为局部变量，它们的作用域只在函数体内，参数和返回值变量也是局部变量。\n以下实例中 main() 函数使用了局部变量 a, b, c：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 声明局部变量 */ var a, b, c int /* 初始化参数 */ a = 10 b = 20 c = a + b fmt.Printf (\u0026#34;结果： a = %d, b = %d and c = %d\\n\u0026#34;, a, b, c) } 以上实例执行输出结果为：\n结果： a = 10, b = 20 and c = 30 全局变量 在函数体外声明的变量称之为全局变量，全局变量可以在整个包甚至外部包（被导出后）使用。\n全局变量可以在任何函数中使用，以下实例演示了如何使用全局变量：\npackage main import \u0026#34;fmt\u0026#34; /* 声明全局变量 */ var g int func main() { /* 声明局部变量 */ var a, b int /* 初始化参数 */ a = 10 b = 20 g = a + b fmt.Printf(\u0026#34;结果： a = %d, b = %d and g = %d\\n\u0026#34;, a, b, g) } 以上实例执行输出结果为：\n结果： a = 10, b = 20 and g = 30 Go 语言程序中全局变量与局部变量名称可以相同，但是函数内的局部变量会被优先考虑。实例如下：\npackage main import \u0026#34;fmt\u0026#34; /* 声明全局变量 */ var g int = 20 func main() { /* 声明局部变量 */ var g int = 10 fmt.Printf (\u0026#34;结果： g = %d\\n\u0026#34;, g) } 以上实例执行输出结果为：\n结果： g = 10 形式参数 形式参数会作为函数的局部变量来使用。实例如下：\npackage main import \u0026#34;fmt\u0026#34; /* 声明全局变量 */ var a int = 20; func main() { /* main 函数中声明局部变量 */ var a int = 10 var b int = 20 var c int = 0 fmt.Printf(\u0026#34;main()函数中 a = %d\\n\u0026#34;, a); c = sum( a, b); fmt.Printf(\u0026#34;main()函数中 c = %d\\n\u0026#34;, c); } /* 函数定义-两数相加 */ func sum(a, b int) int { fmt.Printf(\u0026#34;sum() 函数中 a = %d\\n\u0026#34;, a); fmt.Printf(\u0026#34;sum() 函数中 b = %d\\n\u0026#34;, b); return a + b; } 以上实例执行输出结果为：\nmain()函数中 a = 10 sum() 函数中 a = 10 sum() 函数中 b = 20 main()函数中 c = 30 初始化局部和全局变量 不同类型的局部和全局变量默认值为：\n数据类型 初始化默认值 int 0 float32 0 pointer nil Go 语言数组 Go 语言提供了数组类型的数据结构。\n数组是具有相同唯一类型的一组已编号且长度固定的数据项序列，这种类型可以是任意的原始类型例如整型、字符串或者自定义类型。\n相对于去声明 number0, number1, \u0026hellip;, number99 的变量，使用数组形式 numbers[0], numbers[1] \u0026hellip;, numbers[99] 更加方便且易于扩展。\n数组元素可以通过索引（位置）来读取（或者修改），索引从 0 开始，第一个元素索引为 0，第二个索引为 1，以此类推。\n声明数组 Go 语言数组声明需要指定元素类型及元素个数，语法格式如下：\nvar arrayName [size]dataType 其中，arrayName 是数组的名称，size 是数组的大小，dataType 是数组中元素的数据类型。\n以下定义了数组 balance 长度为 10 类型为 float32：\nvar balance [10]float32 初始化数组 以下演示了数组初始化：\n以下实例声明一个名为 numbers 的整数数组，其大小为 5，在声明时，数组中的每个元素都会根据其数据类型进行默认初始化，对于整数类型，初始值为 0。\nvar numbers [5]int 还可以使用初始化列表来初始化数组的元素：\nvar numbers = [5]int{1, 2, 3, 4, 5} 以上代码声明一个大小为 5 的整数数组，并将其中的元素分别初始化为 1、2、3、4 和 5。\n另外，还可以使用 := 简短声明语法来声明和初始化数组：\nnumbers := [5]int{1, 2, 3, 4, 5} 以上代码创建一个名为 numbers 的整数数组，并将其大小设置为 5，并初始化元素的值。\n**注意：**在 Go 语言中，数组的大小是类型的一部分，因此不同大小的数组是不兼容的，也就是说 [5]int 和 [10]int 是不同的类型。\n以下定义了数组 balance 长度为 5 类型为 float32，并初始化数组的元素：\nvar balance = [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 我们也可以通过字面量在声明数组的同时快速初始化数组：\nbalance := [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 如果数组长度不确定，可以使用 \u0026hellip; 代替数组的长度，编译器会根据元素个数自行推断数组的长度：\nvar balance = [...]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 或 balance := [...]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 如果设置了数组的长度，我们还可以通过指定下标来初始化元素：\n// 将索引为 1 和 3 的元素初始化 balance := [5]float32{1:2.0,3:7.0} 初始化数组中 {} 中的元素个数不能大于 [] 中的数字。\n如果忽略 [] 中的数字不设置数组大小，Go 语言会根据元素的个数来设置数组的大小：\nbalance[4] = 50.0 以上实例读取了第五个元素。数组元素可以通过索引（位置）来读取（或者修改），索引从 0 开始，第一个元素索引为 0，第二个索引为 1，以此类推。\n访问数组元素 数组元素可以通过索引（位置）来读取。格式为数组名后加中括号，中括号中为索引的值。例如：\nvar salary float32 = balance[9] 以上实例读取了数组 balance 第 10 个元素的值。\n以下演示了数组完整操作（声明、赋值、访问）的实例：\npackage main import \u0026#34;fmt\u0026#34; func main() { var n [10]int /* n 是一个长度为 10 的数组 */ var i,j int /* 为数组 n 初始化元素 */ for i = 0; i \u0026lt; 10; i++ { n[i] = i + 100 /* 设置元素为 i + 100 */ } /* 输出每个数组元素的值 */ for j = 0; j \u0026lt; 10; j++ { fmt.Printf(\u0026#34;Element[%d] = %d\\n\u0026#34;, j, n[j] ) } } 结果如下：\nElement[0] = 100 Element[1] = 101 Element[2] = 102 Element[3] = 103 Element[4] = 104 Element[5] = 105 Element[6] = 106 Element[7] = 107 Element[8] = 108 Element[9] = 109 package main import \u0026#34;fmt\u0026#34; func main() { var i,j,k int // 声明数组的同时快速初始化数组 balance := [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0} /* 输出数组元素 */ ... for i = 0; i \u0026lt; 5; i++ { fmt.Printf(\u0026#34;balance[%d] = %f\\n\u0026#34;, i, balance[i] ) } balance2 := [...]float32{1000.0, 2.0, 3.4, 7.0, 50.0} /* 输出每个数组元素的值 */ for j = 0; j \u0026lt; 5; j++ { fmt.Printf(\u0026#34;balance2[%d] = %f\\n\u0026#34;, j, balance2[j] ) } // 将索引为 1 和 3 的元素初始化 balance3 := [5]float32{1:2.0,3:7.0} for k = 0; k \u0026lt; 5; k++ { fmt.Printf(\u0026#34;balance3[%d] = %f\\n\u0026#34;, k, balance3[k] ) } } 结果如下：\nbalance[0] = 1000.000000 balance[1] = 2.000000 balance[2] = 3.400000 balance[3] = 7.000000 balance[4] = 50.000000 balance2[0] = 1000.000000 balance2[1] = 2.000000 balance2[2] = 3.400000 balance2[3] = 7.000000 balance2[4] = 50.000000 balance3[0] = 0.000000 balance3[1] = 2.000000 balance3[2] = 0.000000 balance3[3] = 7.000000 balance3[4] = 0.000000 多维数组 Go 语言支持多维数组，以下为常用的多维数组声明方式：\nvar variable_name [SIZE1][SIZE2]...[SIZEN] variable_type 以下实例声明了三维的整型数组：\nvar threedim [5][10][4]int 二维数组 二维数组是最简单的多维数组，二维数组本质上是由一维数组组成的。二维数组定义方式如下：\nvar arrayName [ x ][ y ] variable_type variable_type 为 Go 语言的数据类型，arrayName 为数组名，二维数组可认为是一个表格，x 为行，y 为列，下图演示了一个二维数组 a 为三行四列：\n二维数组中的元素可通过 a[ i ][ j ]来访问。\npackage main import \u0026#34;fmt\u0026#34; func main() { // Step 1: 创建数组 values := [][]int{} // Step 2: 使用 append() 函数向空的二维数组添加两行一维数组 row1 := []int{1, 2, 3} row2 := []int{4, 5, 6} values = append(values, row1) values = append(values, row2) // Step 3: 显示两行数据 fmt.Println(\u0026#34;Row 1\u0026#34;) fmt.Println(values[0]) fmt.Println(\u0026#34;Row 2\u0026#34;) fmt.Println(values[1]) // Step 4: 访问第一个元素 fmt.Println(\u0026#34;第一个元素为：\u0026#34;) fmt.Println(values[0][0]) } 结果为：\nRow 1 [1 2 3] Row 2 [4 5 6] 第一个元素为： 1 初始化二维数组 多维数组可通过大括号来初始值。以下实例为一个 3 行 4 列的二维数组：\na := [3][4]int{ {0, 1, 2, 3} , /* 第一行索引为 0 */ {4, 5, 6, 7} , /* 第二行索引为 1 */ {8, 9, 10, 11}, /* 第三行索引为 2 */ } **注意：**以上代码中倒数第二行的}必须要有逗号，因为最后一行的} 不能单独一行，也可以写成这样：\na := [3][4]int{ {0, 1, 2, 3} , /* 第一行索引为 0 */ {4, 5, 6, 7} , /* 第二行索引为 1 */ {8, 9, 10, 11}} /* 第三行索引为 2 */ 以下实例初始化一个 2 行 2 列 的二维数组：\npackage main import \u0026#34;fmt\u0026#34; func main() { // 创建二维数组 sites := [2][2]string{} // 向二维数组添加元素 sites[0][0] = \u0026#34;Google\u0026#34; sites[0][1] = \u0026#34;Runoob\u0026#34; sites[1][0] = \u0026#34;Taobao\u0026#34; sites[1][1] = \u0026#34;Weibo\u0026#34; // 显示结果 fmt.Println(sites) } 输出结果为：\n[[Google Runoob] [Taobao Weibo]] 访问二维数组 二维数组通过指定坐标来访问。如数组中的行索引与列索引，例如：\nval := a[2][3] 或 var value int = a[2][3] 以上实例访问了二维数组 val 第三行的第四个元素。\n二维数组可以使用循环嵌套来输出元素：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 数组 - 5 行 2 列*/ var a = [5][2]int{ {0,0}, {1,2}, {2,4}, {3,6},{4,8}} var i, j int /* 输出数组元素 */ for i = 0; i \u0026lt; 5; i++ { for j = 0; j \u0026lt; 2; j++ { fmt.Printf(\u0026#34;a[%d][%d] = %d\\n\u0026#34;, i,j, a[i][j] ) } } } 输出结果为：\na[0][0] = 0 a[0][1] = 0 a[1][0] = 1 a[1][1] = 2 a[2][0] = 2 a[2][1] = 4 a[3][0] = 3 a[3][1] = 6 a[4][0] = 4 a[4][1] = 8 以下实例创建各个维度元素数量不一致的多维数组：\npackage main import \u0026#34;fmt\u0026#34; func main() { // 创建空的二维数组 animals := [][]string{} // 创建三一维数组，各数组长度不同 row1 := []string{\u0026#34;fish\u0026#34;, \u0026#34;shark\u0026#34;, \u0026#34;eel\u0026#34;} row2 := []string{\u0026#34;bird\u0026#34;} row3 := []string{\u0026#34;lizard\u0026#34;, \u0026#34;salamander\u0026#34;} // 使用 append() 函数将一维数组添加到二维数组中 animals = append(animals, row1) animals = append(animals, row2) animals = append(animals, row3) // 循环输出 for i := range animals { fmt.Printf(\u0026#34;Row: %v\\n\u0026#34;, i) fmt.Println(animals[i]) } } 输出结果为：\nRow: 0 [fish shark eel] Row: 1 [bird] Row: 2 [lizard salamander] Go 语言向函数传递数组 Go 语言中的数组是值类型，因此在将数组传递给函数时，实际上是传递数组的副本。\n如果你想向函数传递数组参数，你需要在函数定义时，声明形参为数组，我们可以通过以下两种方式来声明：\n方式一 形参设定数组大小：\nfunc myFunction(param [10]int) { .... } 方式二 形参未设定数组大小：\nfunc myFunction(param []int) { .... } 如果你想要在函数内修改原始数组，可以通过传递数组的指针来实现。\n实例 让我们看下以下实例，实例中函数接收整型数组参数，另一个参数指定了数组元素的个数，并返回平均值：\nfunc getAverage(arr []int, size int) float32 { var i int var avg, sum float32 for i = 0; i \u0026lt; size; ++i { sum += arr[i] } avg = sum / size return avg; } 接下来我们来调用这个函数：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 数组长度为 5 */ var balance = [5]int {1000, 2, 3, 17, 50} var avg float32 /* 数组作为参数传递给函数 */ avg = getAverage( balance, 5 ) ; /* 输出返回的平均值 */ fmt.Printf( \u0026#34;平均值为: %f \u0026#34;, avg ); } func getAverage(arr [5]int, size int) float32 { var i,sum int var avg float32 for i = 0; i \u0026lt; size;i++ { sum += arr[i] } avg = float32(sum) / float32(size) return avg; } 输出结果为：\n平均值为: 214.399994 以上实例中我们使用的形参并未设定数组大小。\n浮点数计算输出有一定的偏差，你也可以转整型来设置精度。\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { a := 1.69 b := 1.7 c := a * b // 结果应该是2.873 fmt.Println(c) // 输出的是2.8729999999999998 } 设置固定精度：\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { a := 1690 // 表示1.69 b := 1700 // 表示1.70 c := a * b // 结果应该是2873000表示 2.873 fmt.Println(c) // 内部编码 fmt.Println(float64(c) / 1000000) // 显示 } 如果你想要在函数内修改原始数组，可以通过传递数组的指针来实现。\n以下实例演示如何向函数传递数组，函数接受一个数组和数组的指针作为参数：\npackage main import \u0026#34;fmt\u0026#34; // 函数接受一个数组作为参数 func modifyArray(arr [5]int) { for i := 0; i \u0026lt; len(arr); i++ { arr[i] = arr[i] * 2 } } // 函数接受一个数组的指针作为参数 func modifyArrayWithPointer(arr *[5]int) { for i := 0; i \u0026lt; len(*arr); i++ { (*arr)[i] = (*arr)[i] * 2 } } func main() { // 创建一个包含5个元素的整数数组 myArray := [5]int{1, 2, 3, 4, 5} fmt.Println(\u0026#34;Original Array:\u0026#34;, myArray) // 传递数组给函数，但不会修改原始数组的值 modifyArray(myArray) fmt.Println(\u0026#34;Array after modifyArray:\u0026#34;, myArray) // 传递数组的指针给函数，可以修改原始数组的值 modifyArrayWithPointer(\u0026amp;myArray) fmt.Println(\u0026#34;Array after modifyArrayWithPointer:\u0026#34;, myArray) } 在上面的例子中，modifyArray 函数接受一个数组，并尝试修改数组的值，但在主函数中调用后，原始数组并未被修改。相反，modifyArrayWithPointer 函数接受一个数组的指针，并通过指针修改了原始数组的值。\n以上实例执行输出结果为：\nOriginal Array: [1 2 3 4 5] Array after modifyArray: [1 2 3 4 5] Array after modifyArrayWithPointer: [2 4 6 8 10] Go 语言指针 Go 语言中指针是很容易学习的，Go 语言中使用指针可以更简单的执行一些任务。\n接下来让我们来一步步学习 Go 语言指针。\n我们都知道，变量是一种使用方便的占位符，用于引用计算机内存地址。\nGo 语言的取地址符是 \u0026amp;，放到一个变量前使用就会返回相应变量的内存地址。\n以下实例演示了变量在内存中地址：\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int = 10 fmt.Printf(\u0026#34;变量的地址: %x\\n\u0026#34;, \u0026amp;a ) } 输出结果为：\n变量的地址: 20818a220 什么是指针 一个指针变量指向了一个值的内存地址。\n类似于变量和常量，在使用指针前你需要声明指针。指针声明格式如下：\nvar var_name *var-type var-type 为指针类型，var_name 为指针变量名，* 号用于指定变量是作为一个指针。以下是有效的指针声明：\nvar ip *int /* 指向整型*/ var fp *float32 /* 指向浮点型 */ 如何使用指针 指针使用流程：\n定义指针变量。 为指针变量赋值。 访问指针变量中指向地址的值。 在指针类型前面加上 * 号（前缀）来获取指针所指向的内容。\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int= 20 /* 声明实际变量 */ var ip *int /* 声明指针变量 */ ip = \u0026amp;a /* 指针变量的存储地址 */ fmt.Printf(\u0026#34;a 变量的地址是: %x\\n\u0026#34;, \u0026amp;a ) /* 指针变量的存储地址 */ fmt.Printf(\u0026#34;ip 变量储存的指针地址: %x\\n\u0026#34;, ip ) /* 使用指针访问值 */ fmt.Printf(\u0026#34;*ip 变量的值: %d\\n\u0026#34;, *ip ) } 输出结果为：\na 变量的地址是: 20818a220 ip 变量储存的指针地址: 20818a220 *ip 变量的值: 20 Go 空指针 当一个指针被定义后没有分配到任何变量时，它的值为 nil。\nnil 指针也称为空指针。\nnil在概念上和其它语言的null、None、nil、NULL一样，都指代零值或空值。\n一个指针变量通常缩写为 ptr。\npackage main import \u0026#34;fmt\u0026#34; func main() { var ptr *int fmt.Printf(\u0026#34;ptr 的值为 : %x\\n\u0026#34;, ptr ) } 输出结果为：\nptr 的值为 : 0 空指针判断：\nif(ptr != nil) /* ptr 不是空指针 */ if(ptr == nil) /* ptr 是空指针 */ Go 语言指针数组 package main import \u0026#34;fmt\u0026#34; const MAX int = 3 func main() { a := []int{10,100,200} var i int for i = 0; i \u0026lt; MAX; i++ { fmt.Printf(\u0026#34;a[%d] = %d\\n\u0026#34;, i, a[i] ) } } 以上代码执行输出结果为：\na[0] = 10 a[1] = 100 a[2] = 200 有一种情况，我们可能需要保存数组，这样我们就需要使用到指针。\n以下声明了整型指针数组：\nvar ptr [MAX]*int; ptr 为整型指针数组。因此每个元素都指向了一个值。以下实例的三个整数将存储在指针数组中：\npackage main import \u0026#34;fmt\u0026#34; const MAX int = 3 func main() { a := []int{10,100,200} var i int var ptr [MAX]*int; for i = 0; i \u0026lt; MAX; i++ { ptr[i] = \u0026amp;a[i] /* 整数地址赋值给指针数组 */ } for i = 0; i \u0026lt; MAX; i++ { fmt.Printf(\u0026#34;a[%d] = %d\\n\u0026#34;, i,*ptr[i] ) } } 输出结果为：\na[0] = 10 a[1] = 100 a[2] = 200 Go 语言指针作为函数参数 Go 语言允许向函数传递指针，只需要在函数定义的参数上设置为指针类型即可。\n以下实例演示了如何向函数传递指针，并在函数调用后修改函数内的值，：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 定义局部变量 */ var a int = 100 var b int= 200 fmt.Printf(\u0026#34;交换前 a 的值 : %d\\n\u0026#34;, a ) fmt.Printf(\u0026#34;交换前 b 的值 : %d\\n\u0026#34;, b ) /* 调用函数用于交换值 * \u0026amp;a 指向 a 变量的地址 * \u0026amp;b 指向 b 变量的地址 */ swap(\u0026amp;a, \u0026amp;b); fmt.Printf(\u0026#34;交换后 a 的值 : %d\\n\u0026#34;, a ) fmt.Printf(\u0026#34;交换后 b 的值 : %d\\n\u0026#34;, b ) } func swap(x *int, y *int) { var temp int temp = *x /* 保存 x 地址的值 */ *x = *y /* 将 y 赋值给 x */ *y = temp /* 将 temp 赋值给 y */ } 输出结果为：\n交换前 a 的值 : 100 交换前 b 的值 : 200 交换后 a 的值 : 200 交换后 b 的值 : 100 Go 语言指向指针的指针 如果一个指针变量存放的又是另一个指针变量的地址，则称这个指针变量为指向指针的指针变量。\n当定义一个指向指针的指针变量时，第一个指针存放第二个指针的地址，第二个指针存放变量的地址：\n指向指针的指针变量声明格式如下：\nvar ptr **int; 以上指向指针的指针变量为整型。\n访问指向指针的指针变量值需要使用两个 * 号，如下所示：\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int var ptr *int var pptr **int a = 3000 /* 指针 ptr 地址 */ ptr = \u0026amp;a /* 指向指针 ptr 地址 */ pptr = \u0026amp;ptr /* 获取 pptr 的值 */ fmt.Printf(\u0026#34;变量 a = %d\\n\u0026#34;, a ) fmt.Printf(\u0026#34;指针变量 *ptr = %d\\n\u0026#34;, *ptr ) fmt.Printf(\u0026#34;指向指针的指针变量 **pptr = %d\\n\u0026#34;, **pptr) } 输出结果为：\n变量 a = 3000 指针变量 *ptr = 3000 指向指针的指针变量 **pptr = 3000 Go 语言结构体 Go 语言中数组可以存储同一类型的数据，但在结构体中我们可以为不同项定义不同的数据类型。\n结构体是由一系列具有相同类型或不同类型的数据构成的数据集合。\n结构体表示一项记录，比如保存图书馆的书籍记录，每本书有以下属性：\nTitle ：标题 Author ： 作者 Subject：学科 ID：书籍ID 定义结构体 结构体定义需要使用 type 和 struct 语句。struct 语句定义一个新的数据类型，结构体中有一个或多个成员。type 语句设定了结构体的名称。结构体的格式如下：\ntype struct_variable_type struct { member definition member definition ... member definition } 一旦定义了结构体类型，它就能用于变量的声明，语法格式如下：\nvariable_name := structure_variable_type {value1, value2...valuen} 或 variable_name := structure_variable_type { key1: value1, key2: value2..., keyn: valuen} package main import \u0026#34;fmt\u0026#34; type Books struct { title string author string subject string book_id int } func main() { // 创建一个新的结构体 fmt.Println(Books{\u0026#34;Go 语言\u0026#34;, \u0026#34;www.runoob.com\u0026#34;, \u0026#34;Go 语言教程\u0026#34;, 6495407}) // 也可以使用 key =\u0026gt; value 格式 fmt.Println(Books{title: \u0026#34;Go 语言\u0026#34;, author: \u0026#34;www.runoob.com\u0026#34;, subject: \u0026#34;Go 语言教程\u0026#34;, book_id: 6495407}) // 忽略的字段为 0 或 空 fmt.Println(Books{title: \u0026#34;Go 语言\u0026#34;, author: \u0026#34;www.runoob.com\u0026#34;}) } 输出结果为：\n{Go 语言 www.runoob.com Go 语言教程 6495407} {Go 语言 www.runoob.com Go 语言教程 6495407} {Go 语言 www.runoob.com 0} 访问结构体成员 如果要访问结构体成员，需要使用点号 . 操作符，格式为：\n结构体.成员名 结构体类型变量使用 struct 关键字定义，实例如下：\npackage main import \u0026#34;fmt\u0026#34; type Books struct { title string author string subject string book_id int } func main() { var Book1 Books /* 声明 Book1 为 Books 类型 */ var Book2 Books /* 声明 Book2 为 Books 类型 */ /* book 1 描述 */ Book1.title = \u0026#34;Go 语言\u0026#34; Book1.author = \u0026#34;www.runoob.com\u0026#34; Book1.subject = \u0026#34;Go 语言教程\u0026#34; Book1.book_id = 6495407 /* book 2 描述 */ Book2.title = \u0026#34;Python 教程\u0026#34; Book2.author = \u0026#34;www.runoob.com\u0026#34; Book2.subject = \u0026#34;Python 语言教程\u0026#34; Book2.book_id = 6495700 /* 打印 Book1 信息 */ fmt.Printf( \u0026#34;Book 1 title : %s\\n\u0026#34;, Book1.title) fmt.Printf( \u0026#34;Book 1 author : %s\\n\u0026#34;, Book1.author) fmt.Printf( \u0026#34;Book 1 subject : %s\\n\u0026#34;, Book1.subject) fmt.Printf( \u0026#34;Book 1 book_id : %d\\n\u0026#34;, Book1.book_id) /* 打印 Book2 信息 */ fmt.Printf( \u0026#34;Book 2 title : %s\\n\u0026#34;, Book2.title) fmt.Printf( \u0026#34;Book 2 author : %s\\n\u0026#34;, Book2.author) fmt.Printf( \u0026#34;Book 2 subject : %s\\n\u0026#34;, Book2.subject) fmt.Printf( \u0026#34;Book 2 book_id : %d\\n\u0026#34;, Book2.book_id) } 运行结果为：\nBook 1 title : Go 语言 Book 1 author : www.runoob.com Book 1 subject : Go 语言教程 Book 1 book_id : 6495407 Book 2 title : Python 教程 Book 2 author : www.runoob.com Book 2 subject : Python 语言教程 Book 2 book_id : 6495700 结构体作为函数参数 你可以像其他数据类型一样将结构体类型作为参数传递给函数。并以以上实例的方式访问结构体变量：\npackage main import \u0026#34;fmt\u0026#34; type Books struct { title string author string subject string book_id int } func main() { var Book1 Books /* 声明 Book1 为 Books 类型 */ var Book2 Books /* 声明 Book2 为 Books 类型 */ /* book 1 描述 */ Book1.title = \u0026#34;Go 语言\u0026#34; Book1.author = \u0026#34;www.runoob.com\u0026#34; Book1.subject = \u0026#34;Go 语言教程\u0026#34; Book1.book_id = 6495407 /* book 2 描述 */ Book2.title = \u0026#34;Python 教程\u0026#34; Book2.author = \u0026#34;www.runoob.com\u0026#34; Book2.subject = \u0026#34;Python 语言教程\u0026#34; Book2.book_id = 6495700 /* 打印 Book1 信息 */ printBook(Book1) /* 打印 Book2 信息 */ printBook(Book2) } func printBook( book Books ) { fmt.Printf( \u0026#34;Book title : %s\\n\u0026#34;, book.title) fmt.Printf( \u0026#34;Book author : %s\\n\u0026#34;, book.author) fmt.Printf( \u0026#34;Book subject : %s\\n\u0026#34;, book.subject) fmt.Printf( \u0026#34;Book book_id : %d\\n\u0026#34;, book.book_id) } 运行结果为：\nBook title : Go 语言 Book author : www.runoob.com Book subject : Go 语言教程 Book book_id : 6495407 Book title : Python 教程 Book author : www.runoob.com Book subject : Python 语言教程 Book book_id : 6495700 结构体指针 你可以定义指向结构体的指针类似于其他指针变量，格式如下：\nvar struct_pointer *Books 以上定义的指针变量可以存储结构体变量的地址。查看结构体变量地址，可以将 \u0026amp; 符号放置于结构体变量前：\nstruct_pointer = \u0026amp;Book1 使用结构体指针访问结构体成员，使用 \u0026ldquo;.\u0026rdquo; 操作符：\nstruct_pointer.title package main import \u0026#34;fmt\u0026#34; type Books struct { title string author string subject string book_id int } func main() { var Book1 Books /* 声明 Book1 为 Books 类型 */ var Book2 Books /* 声明 Book2 为 Books 类型 */ /* book 1 描述 */ Book1.title = \u0026#34;Go 语言\u0026#34; Book1.author = \u0026#34;www.runoob.com\u0026#34; Book1.subject = \u0026#34;Go 语言教程\u0026#34; Book1.book_id = 6495407 /* book 2 描述 */ Book2.title = \u0026#34;Python 教程\u0026#34; Book2.author = \u0026#34;www.runoob.com\u0026#34; Book2.subject = \u0026#34;Python 语言教程\u0026#34; Book2.book_id = 6495700 /* 打印 Book1 信息 */ printBook(\u0026amp;Book1) /* 打印 Book2 信息 */ printBook(\u0026amp;Book2) } func printBook( book *Books ) { fmt.Printf( \u0026#34;Book title : %s\\n\u0026#34;, book.title) fmt.Printf( \u0026#34;Book author : %s\\n\u0026#34;, book.author) fmt.Printf( \u0026#34;Book subject : %s\\n\u0026#34;, book.subject) fmt.Printf( \u0026#34;Book book_id : %d\\n\u0026#34;, book.book_id) } 运行结果为：\nBook title : Go 语言 Book author : www.runoob.com Book subject : Go 语言教程 Book book_id : 6495407 Book title : Python 教程 Book author : www.runoob.com Book subject : Python 语言教程 Book book_id : 6495700 Go 语言切片(Slice) Go 语言切片是对数组的抽象。\nGo 数组的长度不可改变，在特定场景中这样的集合就不太适用，Go 中提供了一种灵活，功能强悍的内置类型切片(\u0026ldquo;动态数组\u0026rdquo;)，与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大。\n定义切片 你可以声明一个未指定大小的数组来定义切片：\nvar identifier []type 切片不需要说明长度。\n或使用 make() 函数来创建切片:\nvar slice1 []type = make([]type, len) 也可以简写为 slice1 := make([]type, len) 也可以指定容量，其中 capacity 为可选参数。\nmake([]T, length, capacity) 这里 len 是数组的长度并且也是切片的初始长度。\n切片初始化 s :=[] int {1,2,3 } 直接初始化切片，[] 表示是切片类型，{1,2,3} 初始化值依次是 1,2,3，其 cap=len=3。\ns := arr[:] 初始化切片 s，是数组 arr 的引用。\ns := arr[startIndex:endIndex] 将 arr 中从下标 startIndex 到 endIndex-1 下的元素创建为一个新的切片。\ns := arr[startIndex:] 默认 endIndex 时将表示一直到arr的最后一个元素。\ns := arr[:endIndex] 默认 startIndex 时将表示从 arr 的第一个元素开始。\ns1 := s[startIndex:endIndex] 通过切片 s 初始化切片 s1。\ns :=make([]int,len,cap) 通过内置函数 make() 初始化切片s，[]int 标识为其元素类型为 int 的切片。\nlen() 和 cap() 函数 切片是可索引的，并且可以由 len() 方法获取长度。\n切片提供了计算容量的方法 cap() 可以测量切片最长可以达到多少。\n以下为具体实例：\npackage main import \u0026#34;fmt\u0026#34; func main() { var numbers = make([]int,3,5) printSlice(numbers) } func printSlice(x []int){ fmt.Printf(\u0026#34;len=%d cap=%d slice=%v\\n\u0026#34;,len(x),cap(x),x) } 输出结果为:\nlen=3 cap=5 slice=[0 0 0] 空(nil)切片 一个切片在未初始化之前默认为 nil，长度为 0，实例如下：\npackage main import \u0026#34;fmt\u0026#34; func main() { var numbers []int printSlice(numbers) if(numbers == nil){ fmt.Printf(\u0026#34;切片是空的\u0026#34;) } } func printSlice(x []int){ fmt.Printf(\u0026#34;len=%d cap=%d slice=%v\\n\u0026#34;,len(x),cap(x),x) } 输出结果为:\nlen=0 cap=0 slice=[] 切片是空的 切片截取 可以通过设置下限及上限来设置截取切片 [lower-bound:upper-bound]，实例如下：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 创建切片 */ numbers := []int{0,1,2,3,4,5,6,7,8} printSlice(numbers) /* 打印原始切片 */ fmt.Println(\u0026#34;numbers ==\u0026#34;, numbers) /* 打印子切片从索引1(包含) 到索引4(不包含)*/ fmt.Println(\u0026#34;numbers[1:4] ==\u0026#34;, numbers[1:4]) /* 默认下限为 0*/ fmt.Println(\u0026#34;numbers[:3] ==\u0026#34;, numbers[:3]) /* 默认上限为 len(s)*/ fmt.Println(\u0026#34;numbers[4:] ==\u0026#34;, numbers[4:]) numbers1 := make([]int,0,5) printSlice(numbers1) /* 打印子切片从索引 0(包含) 到索引 2(不包含) */ number2 := numbers[:2] printSlice(number2) /* 打印子切片从索引 2(包含) 到索引 5(不包含) */ number3 := numbers[2:5] printSlice(number3) } func printSlice(x []int){ fmt.Printf(\u0026#34;len=%d cap=%d slice=%v\\n\u0026#34;,len(x),cap(x),x) } 输出结果为：\nlen=9 cap=9 slice=[0 1 2 3 4 5 6 7 8] numbers == [0 1 2 3 4 5 6 7 8] numbers[1:4] == [1 2 3] numbers[:3] == [0 1 2] numbers[4:] == [4 5 6 7 8] len=0 cap=5 slice=[] len=2 cap=9 slice=[0 1] len=3 cap=7 slice=[2 3 4] append() 和 copy() 函数 如果想增加切片的容量，我们必须创建一个新的更大的切片并把原分片的内容都拷贝过来。\n下面的代码描述了从拷贝切片的 copy 方法和向切片追加新元素的 append 方法。\npackage main import \u0026#34;fmt\u0026#34; func main() { var numbers []int printSlice(numbers) /* 允许追加空切片 */ numbers = append(numbers, 0) printSlice(numbers) /* 向切片添加一个元素 */ numbers = append(numbers, 1) printSlice(numbers) /* 同时添加多个元素 */ numbers = append(numbers, 2,3,4) printSlice(numbers) /* 创建切片 numbers1 是之前切片的两倍容量*/ numbers1 := make([]int, len(numbers), (cap(numbers))*2) /* 拷贝 numbers 的内容到 numbers1 */ copy(numbers1,numbers) printSlice(numbers1) } func printSlice(x []int){ fmt.Printf(\u0026#34;len=%d cap=%d slice=%v\\n\u0026#34;,len(x),cap(x),x) } 输出结果为：\nlen=0 cap=0 slice=[] len=1 cap=1 slice=[0] len=2 cap=2 slice=[0 1] len=5 cap=6 slice=[0 1 2 3 4] len=5 cap=12 slice=[0 1 2 3 4] Go 语言范围(Range) Go 语言中 range 关键字用于 for 循环中迭代数组(array)、切片(slice)、通道(channel)或集合(map)的元素。在数组和切片中它返回元素的索引和索引对应的值，在集合中返回 key-value 对。\nfor 循环的 range 格式可以对 slice、map、数组、字符串等进行迭代循环。格式如下：\nfor key, value := range oldMap { newMap[key] = value } 以上代码中的 key 和 value 是可以省略。\n如果只想读取 key，格式如下：\nfor key := range oldMap 或者这样：\nfor key, _ := range oldMap\n如果只想读取 value，格式如下：\nfor _, value := range oldMap 数组和切片 遍历简单的切片，2**%d 的结果为 2 对应的次方数：\npackage main import \u0026#34;fmt\u0026#34; // 声明一个包含 2 的幂次方的切片 var pow = []int{1, 2, 4, 8, 16, 32, 64, 128} func main() { // 遍历 pow 切片，i 是索引，v 是值 for i, v := range pow { // 打印 2 的 i 次方等于 v fmt.Printf(\u0026#34;2**%d = %d\\n\u0026#34;, i, v) } } 遍历 pow 切片，i 是索引，v 是值\n输出结果为：\n2**0 = 1 2**1 = 2 2**2 = 4 2**3 = 8 2**4 = 16 2**5 = 32 2**6 = 64 2**7 = 128 字符串 range 迭代字符串时，返回每个字符的索引和 Unicode 代码点（rune）。\npackage main import \u0026#34;fmt\u0026#34; func main() { for i, c := range \u0026#34;hello\u0026#34; { fmt.Printf(\u0026#34;index: %d, char: %c\\n\u0026#34;, i, c) } } 输出结果为:\nindex: 0, char: h index: 1, char: e index: 2, char: l index: 3, char: l index: 4, char: o 映射（Map） for 循环的 range 格式可以省略 key 和 value，如下实例：\npackage main import \u0026#34;fmt\u0026#34; func main() { // 创建一个空的 map，key 是 int 类型，value 是 float32 类型 map1 := make(map[int]float32) // 向 map1 中添加 key-value 对 map1[1] = 1.0 map1[2] = 2.0 map1[3] = 3.0 map1[4] = 4.0 // 遍历 map1，读取 key 和 value for key, value := range map1 { // 打印 key 和 value fmt.Printf(\u0026#34;key is: %d - value is: %f\\n\u0026#34;, key, value) } // 遍历 map1，只读取 key for key := range map1 { // 打印 key fmt.Printf(\u0026#34;key is: %d\\n\u0026#34;, key) } // 遍历 map1，只读取 value for _, value := range map1 { // 打印 value fmt.Printf(\u0026#34;value is: %f\\n\u0026#34;, value) } } 输出结果为:\nkey is: 4 - value is: 4.000000 key is: 1 - value is: 1.000000 key is: 2 - value is: 2.000000 key is: 3 - value is: 3.000000 key is: 1 key is: 2 key is: 3 key is: 4 value is: 1.000000 value is: 2.000000 value is: 3.000000 value is: 4.000000 通道（Channel） range 遍历从通道接收的值，直到通道关闭。\npackage main import \u0026#34;fmt\u0026#34; func main() { ch := make(chan int, 2) ch \u0026lt;- 1 ch \u0026lt;- 2 close(ch) for v := range ch { fmt.Println(v) } } 输出结果为:\n1 2 忽略值 在遍历时可以使用 _ 来忽略索引或值。\npackage main import \u0026#34;fmt\u0026#34; func main() { nums := []int{2, 3, 4} // 忽略索引 for _, num := range nums { fmt.Println(\u0026#34;value:\u0026#34;, num) } // 忽略值 for i := range nums { fmt.Println(\u0026#34;index:\u0026#34;, i) } } 输出结果为:\nvalue: 2 value: 3 value: 4 index: 0 index: 1 index: 2 其他 range 遍历其他数据结构：\npackage main import \u0026#34;fmt\u0026#34; func main() { //这是我们使用 range 去求一个 slice 的和。使用数组跟这个很类似 nums := []int{2, 3, 4} sum := 0 for _, num := range nums { sum += num } fmt.Println(\u0026#34;sum:\u0026#34;, sum) //在数组上使用 range 将传入索引和值两个变量。上面那个例子我们不需要使用该元素的序号，所以我们使用空白符\u0026#34;_\u0026#34;省略了。有时侯我们确实需要知道它的索引。 for i, num := range nums { if num == 3 { fmt.Println(\u0026#34;index:\u0026#34;, i) } } //range 也可以用在 map 的键值对上。 kvs := map[string]string{\u0026#34;a\u0026#34;: \u0026#34;apple\u0026#34;, \u0026#34;b\u0026#34;: \u0026#34;banana\u0026#34;} for k, v := range kvs { fmt.Printf(\u0026#34;%s -\u0026gt; %s\\n\u0026#34;, k, v) } //range也可以用来枚举 Unicode 字符串。第一个参数是字符的索引，第二个是字符（Unicode的值）本身。 for i, c := range \u0026#34;go\u0026#34; { fmt.Println(i, c) } } 输出结果为：\nsum: 9 index: 1 a -\u0026gt; apple b -\u0026gt; banana 0 103 1 111 Go 语言Map(集合) Map 是一种无序的键值对的集合。\nMap 最重要的一点是通过 key 来快速检索数据，key 类似于索引，指向数据的值。\nMap 是一种集合，所以我们可以像迭代数组和切片那样迭代它。不过，Map 是无序的，遍历 Map 时返回的键值对的顺序是不确定的。\n在获取 Map 的值时，如果键不存在，返回该类型的零值，例如 int 类型的零值是 0，string 类型的零值是 \u0026ldquo;\u0026quot;。\nMap 是引用类型，如果将一个 Map 传递给一个函数或赋值给另一个变量，它们都指向同一个底层数据结构，因此对 Map 的修改会影响到所有引用它的变量。\n定义 Map 可以使用内建函数 make 或使用 map 关键字来定义 Map:\n/* 使用 make 函数 */ map_variable := make(map[KeyType]ValueType, initialCapacity) 其中 KeyType 是键的类型，ValueType 是值的类型，initialCapacity 是可选的参数，用于指定 Map 的初始容量。Map 的容量是指 Map 中可以保存的键值对的数量，当 Map 中的键值对数量达到容量时，Map 会自动扩容。如果不指定 initialCapacity，Go 语言会根据实际情况选择一个合适的值。\n// 创建一个空的 Map m := make(map[string]int) // 创建一个初始容量为 10 的 Map m := make(map[string]int, 10) 也可以使用字面量创建 Map：键\u0026lt;\u0026mdash;\u0026mdash;\u0026mdash;\u0026gt;值\n// 使用字面量创建 Map m := map[string]int{ \u0026#34;apple\u0026#34;: 1, \u0026#34;banana\u0026#34;: 2, \u0026#34;orange\u0026#34;: 3, } 获取元素：\n// 获取键值对 v1 := m[\u0026#34;apple\u0026#34;] v2, ok := m[\u0026#34;pear\u0026#34;] // 如果键不存在，ok 的值为 false，v2 的值为该类型的零值 修改元素：\n// 修改键值对 m[\u0026#34;apple\u0026#34;] = 5 获取 Map 的长度：\n// 获取 Map 的长度 len := len(m) 遍历 Map：\n// 遍历 Map for k, v := range m { fmt.Printf(\u0026#34;key=%s, value=%d\\n\u0026#34;, k, v) } 删除元素：\n// 删除键值对 delete(m, \u0026#34;banana\u0026#34;) 创建和使用map:\npackage main import \u0026#34;fmt\u0026#34; func main() { var siteMap map[string]string /*创建集合 */ siteMap = make(map[string]string) /* map 插入 key - value 对,各个国家对应的首都 */ siteMap [ \u0026#34;Google\u0026#34; ] = \u0026#34;谷歌\u0026#34; siteMap [ \u0026#34;Runoob\u0026#34; ] = \u0026#34;菜鸟教程\u0026#34; siteMap [ \u0026#34;Baidu\u0026#34; ] = \u0026#34;百度\u0026#34; siteMap [ \u0026#34;Wiki\u0026#34; ] = \u0026#34;维基百科\u0026#34; /*使用键输出地图值 */ for site := range siteMap { fmt.Println(site, \u0026#34;首都是\u0026#34;, siteMap [site]) } /*查看元素在集合中是否存在 */ name, ok := siteMap [ \u0026#34;Facebook\u0026#34; ] /*如果确定是真实的,则存在,否则不存在 */ /*fmt.Println(capital) */ /*fmt.Println(ok) */ if (ok) { fmt.Println(\u0026#34;Facebook 的 站点是\u0026#34;, name) } else { fmt.Println(\u0026#34;Facebook 站点不存在\u0026#34;) } } 运行结果为：\nWiki 首都是 维基百科 Google 首都是 谷歌 Runoob 首都是 菜鸟教程 Baidu 首都是 百度 Facebook 站点不存在 delete() 函数 delete() 函数用于删除集合的元素, 参数为 map 和其对应的 key。实例如下：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 创建map */ countryCapitalMap := map[string]string{\u0026#34;France\u0026#34;: \u0026#34;Paris\u0026#34;, \u0026#34;Italy\u0026#34;: \u0026#34;Rome\u0026#34;, \u0026#34;Japan\u0026#34;: \u0026#34;Tokyo\u0026#34;, \u0026#34;India\u0026#34;: \u0026#34;New delhi\u0026#34;} fmt.Println(\u0026#34;原始地图\u0026#34;) /* 打印地图 */ for country := range countryCapitalMap { fmt.Println(country, \u0026#34;首都是\u0026#34;, countryCapitalMap [ country ]) } /*删除元素*/ delete(countryCapitalMap, \u0026#34;France\u0026#34;) fmt.Println(\u0026#34;法国条目被删除\u0026#34;) fmt.Println(\u0026#34;删除元素后地图\u0026#34;) /*打印地图*/ for country := range countryCapitalMap { fmt.Println(country, \u0026#34;首都是\u0026#34;, countryCapitalMap [ country ]) } } 运行结果为：\n原始地图 India 首都是 New delhi France 首都是 Paris Italy 首都是 Rome Japan 首都是 Tokyo 法国条目被删除 删除元素后地图 Italy 首都是 Rome Japan 首都是 Tokyo India 首都是 New delhi Go 语言递归函数 递归，就是在运行的过程中调用自己。\n语法格式如下：\nfunc recursion() { recursion() */\\* 函数调用自身 \\*/* } func main() { recursion() } Go 语言支持递归。但我们在使用递归时，开发者需要设置退出条件，否则递归将陷入无限循环中。\n递归函数对于解决数学上的问题是非常有用的，就像计算阶乘，生成斐波那契数列等。\n阶乘 以下实例通过 Go 语言的递归函数实例阶乘：\npackage main import \u0026#34;fmt\u0026#34; func Factorial(n uint64)(result uint64) { if (n \u0026gt; 0) { result = n * Factorial(n-1) return result } return 1 } func main() { var i int = 15 fmt.Printf(\u0026#34;%d 的阶乘是 %d\\n\u0026#34;, i, Factorial(uint64(i))) } 输出结果为：\n15 的阶乘是 1307674368000 斐波那契数列 以下实例通过 Go 语言的递归函数实现斐波那契数列：\npackage main import \u0026#34;fmt\u0026#34; func fibonacci(n int) int { if n \u0026lt; 2 { return n } return fibonacci(n-2) + fibonacci(n-1) } func main() { var i int for i = 0; i \u0026lt; 10; i++ { fmt.Printf(\u0026#34;%d\\t\u0026#34;, fibonacci(i)) } } 输出结果为：\n0 1 1 2 3 5 8 13 21 34 求平方根 以下实例通过 Go 语言使用递归方法实现求平方根的代码：\npackage main import ( \u0026#34;fmt\u0026#34; ) func sqrtRecursive(x, guess, prevGuess, epsilon float64) float64 { if diff := guess*guess - x; diff \u0026lt; epsilon \u0026amp;\u0026amp; -diff \u0026lt; epsilon { return guess } newGuess := (guess + x/guess) / 2 if newGuess == prevGuess { return guess } return sqrtRecursive(x, newGuess, guess, epsilon) } func sqrt(x float64) float64 { return sqrtRecursive(x, 1.0, 0.0, 1e-9) } func main() { x := 25.0 result := sqrt(x) fmt.Printf(\u0026#34;%.2f 的平方根为 %.6f\\n\u0026#34;, x, result) } 以上实例中，sqrtRecursive 函数使用递归方式实现平方根的计算。\nsqrtRecursive 函数接受四个参数：\nx 表示待求平方根的数 guess 表示当前猜测的平方根值 prevGuess 表示上一次的猜测值 epsilon 表示精度要求（即接近平方根的程度） 递归的终止条件是当前猜测的平方根与上一次猜测的平方根非常接近，差值小于给定的精度 epsilon。\n在 sqrt 函数中，我们调用 sqrtRecursive 来计算平方根，并传入初始值和精度要求，然后在 main 函数中，我们调用 sqrt 函数来求解平方根，并将结果打印出来。\n执行以上代码输出结果为：\n25.00 的平方根为 5.000000 Go 语言类型转换 类型转换用于将一种数据类型的变量转换为另外一种类型的变量。\nGo 语言类型转换基本格式如下：\ntype_name(expression) type_name 为类型，expression 为表达式。\n数值类型转换 将整型转换为浮点型：\nvar a int = 10 var b float64 = float64(a) 以下实例中将整型转化为浮点型，并计算结果，将结果赋值给浮点型变量：\npackage main import \u0026#34;fmt\u0026#34; func main() { var sum int = 17 var count int = 5 var mean float32 mean = float32(sum)/float32(count) fmt.Printf(\u0026#34;mean 的值为: %f\\n\u0026#34;,mean) } 输出结果为：\nmean 的值为: 3.400000 字符串类型转换 将一个字符串转换成另一个类型，可以使用以下语法：\nvar str string = \u0026#34;10\u0026#34; var num int num, _ = strconv.Atoi(str) 以上代码将字符串变量 str 转换为整型变量 num。\n注意，strconv.Atoi 函数返回两个值，第一个是转换后的整型值，第二个是可能发生的错误，我们可以使用空白标识符 _ 来忽略这个错误。\n以下实例将字符串转换为整数\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { str := \u0026#34;123\u0026#34; num, err := strconv.Atoi(str) if err != nil { fmt.Println(\u0026#34;转换错误:\u0026#34;, err) } else { fmt.Printf(\u0026#34;字符串 \u0026#39;%s\u0026#39; 转换为整数为：%d\\n\u0026#34;, str, num) } } 输出结果为：\n字符串 \u0026#39;123\u0026#39; 转换为整数为：123 将整数转换为字符串：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { num := 123 str := strconv.Itoa(num) fmt.Printf(\u0026#34;整数 %d 转换为字符串为：\u0026#39;%s\u0026#39;\\n\u0026#34;, num, str) } 输出结果为：\n整数 123 转换为字符串为：\u0026#39;123\u0026#39; 将字符串转换为浮点数：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { str := \u0026#34;3.14\u0026#34; num, err := strconv.ParseFloat(str, 64) if err != nil { fmt.Println(\u0026#34;转换错误:\u0026#34;, err) } else { fmt.Printf(\u0026#34;字符串 \u0026#39;%s\u0026#39; 转为浮点型为：%f\\n\u0026#34;, str, num) } } 输出结果为：\n字符串 \u0026#39;3.14\u0026#39; 转为浮点型为：3.140000 将浮点数转换为字符串：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { num := 3.14 str := strconv.FormatFloat(num, \u0026#39;f\u0026#39;, 2, 64) fmt.Printf(\u0026#34;浮点数 %f 转为字符串为：\u0026#39;%s\u0026#39;\\n\u0026#34;, num, str) } 输出结果为：\n浮点数 3.140000 转为字符串为：\u0026#39;3.14\u0026#39; go 不支持隐式转换类型，比如 :\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int64 = 3 var b int32 b = a fmt.Printf(\u0026#34;b 为 : %d\u0026#34;, b) } 此时会报错\ncannot use a (type int64) as type int32 in assignment cannot use b (type int32) as type string in argument to fmt.Printf 但是如果改成 b = int32(a) 就不会报错了:\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int64 = 3 var b int32 b = int32(a) fmt.Printf(\u0026#34;b 为 : %d\u0026#34;, b) } 接口类型转换 接口类型转换有两种情况**：类型断言和类型转换**。\n类型断言 类型断言用于将接口类型转换为指定类型，其语法为：\nvalue.(type) 或者 value.(T) 其中 value 是接口类型的变量，type 或 T 是要转换成的类型。\n如果类型断言成功，它将返回转换后的值和一个布尔值，表示转换是否成功。\npackage main import \u0026#34;fmt\u0026#34; func main() { var i interface{} = \u0026#34;Hello, World\u0026#34; str, ok := i.(string) if ok { fmt.Printf(\u0026#34;\u0026#39;%s\u0026#39; is a string\\n\u0026#34;, str) } else { fmt.Println(\u0026#34;conversion failed\u0026#34;) } } 以上实例中，我们定义了一个接口类型变量 i，并将它赋值为字符串 \u0026ldquo;Hello, World\u0026rdquo;。然后，我们使用类型断言将 i 转换为字符串类型，并将转换后的值赋值给变量 str。最后，我们使用 ok 变量检查类型转换是否成功，如果成功，我们打印转换后的字符串；否则，我们打印转换失败的消息。\n类型转换 类型转换用于将一个接口类型的值转换为另一个接口类型，其语法为：\nT(value) T 是目标接口类型，value 是要转换的值。\n在类型转换中，我们必须保证要转换的值和目标接口类型之间是兼容的，否则编译器会报错。\npackage main import \u0026#34;fmt\u0026#34; // 定义一个接口 Writer type Writer interface { Write([]byte) (int, error) } // 实现 Writer 接口的结构体 StringWriter type StringWriter struct { str string } // 实现 Write 方法 func (sw *StringWriter) Write(data []byte) (int, error) { sw.str += string(data) return len(data), nil } func main() { // 创建一个 StringWriter 实例并赋值给 Writer 接口变量 var w Writer = \u0026amp;StringWriter{} // 将 Writer 接口类型转换为 StringWriter 类型 sw := w.(*StringWriter) // 修改 StringWriter 的字段 sw.str = \u0026#34;Hello, World\u0026#34; // 打印 StringWriter 的字段值 fmt.Println(sw.str) } 解析：\n定义接口和结构体： Writer 接口定义了 Write 方法。 StringWriter 结构体实现了 Write 方法。 类型转换： 将 StringWriter 实例赋值给 Writer 接口变量 w。 使用 w.(*StringWriter) 将 Writer 接口类型转换为 StringWriter 类型。 访问字段： 修改 StringWriter 的字段 str，并打印其值。 空接口类型 空接口 interface{} 可以持有任何类型的值。在实际应用中，空接口经常被用来处理多种类型的值。\npackage main import ( \u0026#34;fmt\u0026#34; ) func printValue(v interface{}) { switch v := v.(type) { case int: fmt.Println(\u0026#34;Integer:\u0026#34;, v) case string: fmt.Println(\u0026#34;String:\u0026#34;, v) default: fmt.Println(\u0026#34;Unknown type\u0026#34;) } } func main() { printValue(42) printValue(\u0026#34;hello\u0026#34;) printValue(3.14) } 在这个例子中，printValue 函数接受一个空接口类型的参数，并使用类型断言和类型选择来处理不同的类型。\nGo 语言接口 interface Go 语言提供了另外一种数据类型即接口，它把所有的具有共性的方法定义在一起，任何其他类型只要实现了这些方法就是实现了这个接口。\n接口可以让我们将不同的类型绑定到一组公共的方法上，从而实现多态和灵活的设计。\nGo 语言中的接口是隐式实现的，也就是说，如果一个类型实现了一个接口定义的所有方法，那么它就自动地实现了该接口。因此，我们可以通过将接口作为参数来实现对不同类型的调用，从而实现多态。\n/* 定义接口 */ type interface_name interface { method_name1 [return_type] method_name2 [return_type] method_name3 [return_type] ... method_namen [return_type] } /* 定义结构体 */ type struct_name struct { /* variables */ } /* 实现接口方法 */ func (struct_name_variable struct_name) method_name1() [return_type] { /* 方法实现 */ } ... func (struct_name_variable struct_name) method_namen() [return_type] { /* 方法实现*/ } 接口的使用：\npackage main import ( \u0026#34;fmt\u0026#34; ) type Phone interface { call() } type NokiaPhone struct { } func (nokiaPhone NokiaPhone) call() { fmt.Println(\u0026#34;I am Nokia, I can call you!\u0026#34;) } type IPhone struct { } func (iPhone IPhone) call() { fmt.Println(\u0026#34;I am iPhone, I can call you!\u0026#34;) } func main() { var phone Phone phone = new(NokiaPhone) phone.call() phone = new(IPhone) phone.call() } 在上面的例子中，我们定义了一个接口 Phone，接口里面有一个方法 call()。然后我们在 main 函数里面定义了一个 Phone 类型变量，并分别为之赋值为 NokiaPhone 和 IPhone。然后调用 call() 方法，输出结果如下：\nI am Nokia, I can call you! I am iPhone, I can call you! 第二个接口实例：\npackage main import \u0026#34;fmt\u0026#34; type Shape interface { area() float64 } type Rectangle struct { width float64 height float64 } func (r Rectangle) area() float64 { return r.width * r.height } type Circle struct { radius float64 } func (c Circle) area() float64 { return 3.14 * c.radius * c.radius } func main() { var s Shape s = Rectangle{width: 10, height: 5} fmt.Printf(\u0026#34;矩形面积: %f\\n\u0026#34;, s.area()) s = Circle{radius: 3} fmt.Printf(\u0026#34;圆形面积: %f\\n\u0026#34;, s.area()) } 以上实例中，我们定义了一个 Shape 接口，它定义了一个方法 area()，该方法返回一个 float64 类型的面积值。然后，我们定义了两个结构体 Rectangle 和 Circle，它们分别实现了 Shape 接口的 area() 方法。在 main() 函数中，我们首先定义了一个 Shape 类型的变量 s，然后分别将 Rectangle 和 Circle 类型的实例赋值给它，并通过 area() 方法计算它们的面积并打印出来，输出结果如下：\n矩形面积: 50.000000 圆形面积: 28.260000 需要注意的是，接口类型变量可以存储任何实现了该接口的类型的值。在示例中，我们将 Rectangle 和 Circle 类型的实例都赋值给了 Shape 类型的变量 s，并通过 area() 方法调用它们的面积计算方法。\nGo 错误处理 Go 语言通过内置的错误接口提供了非常简单的错误处理机制。\nerror 类型是一个接口类型，这是它的定义：\ntype error interface { Error() string } 我们可以在编码中通过实现 error 接口类型来生成错误信息。\n函数通常在最后的返回值中返回错误信息。使用 errors.New 可返回一个错误信息：\nfunc Sqrt(f float64) (float64, error) { if f \u0026lt; 0 { return 0, errors.New(\u0026#34;math: square root of negative number\u0026#34;) } // 实现 } 在下面的例子中，我们在调用 Sqrt 的时候传递的一个负数，然后就得到了 non-nil 的 error 对象，将此对象与 nil 比较，结果为 true，所以 fmt.Println(fmt 包在处理 error 时会调用 Error 方法)被调用，以输出错误，请看下面调用的示例代码：\nresult, err:= Sqrt(-1) if err != nil { fmt.Println(err) } 实例\npackage main import ( \u0026#34;fmt\u0026#34; ) // 定义一个 DivideError 结构 type DivideError struct { dividee int divider int } // 实现 `error` 接口 func (de *DivideError) Error() string { strFormat := ` Cannot proceed, the divider is zero. dividee: %d divider: 0 ` return fmt.Sprintf(strFormat, de.dividee) } // 定义 `int` 类型除法运算的函数 func Divide(varDividee int, varDivider int) (result int, errorMsg string) { if varDivider == 0 { dData := DivideError{ dividee: varDividee, divider: varDivider, } errorMsg = dData.Error() return } else { return varDividee / varDivider, \u0026#34;\u0026#34; } } func main() { // 正常情况 if result, errorMsg := Divide(100, 10); errorMsg == \u0026#34;\u0026#34; { fmt.Println(\u0026#34;100/10 = \u0026#34;, result) } // 当除数为零的时候会返回错误信息 if _, errorMsg := Divide(100, 0); errorMsg != \u0026#34;\u0026#34; { fmt.Println(\u0026#34;errorMsg is: \u0026#34;, errorMsg) } } 输出结果为：\n100/10 = 10 errorMsg is: Cannot proceed, the divider is zero. dividee: 100 divider: 0 Go 并发 并发是指程序同时执行多个任务的能力\nGo 语言支持并发，通过 goroutines 和 channels 提供了一种简洁且高效的方式来实现并发。\ngoroutine goroutine 是轻量级线程，goroutine 的调度是由 Golang 运行时进行管理的。\ngoroutine 语法格式：\ngo 函数名( 参数列表 ) 例如：\ngo f(x, y, z) 开启一个新的 goroutine:\nf(x, y, z) Go 允许使用 go 语句开启一个新的运行期线程， 即 goroutine，以一个不同的、新创建的 goroutine 来执行一个函数。 同一个程序中的所有 goroutine 共享同一个地址空间。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func say(s string) { for i := 0; i \u0026lt; 5; i++ { time.Sleep(100 * time.Millisecond) fmt.Println(s) } } func main() { go say(\u0026#34;world\u0026#34;) say(\u0026#34;hello\u0026#34;) } 执行以上代码，你会看到输出的 hello 和 world 是没有固定先后顺序。因为它们是两个 goroutine 在执行：\nworld hello hello world world hello hello world world hello 通道（channel） 通道（channel）是用来传递数据的一个数据结构。\n通道可用于两个 goroutine 之间通过传递一个指定类型的值来同步运行和通讯。\n使用 make 函数创建一个 channel，使用 \u0026lt;- 操作符发送和接收数据。如果未指定方向，则为双向通道。\nch \u0026lt;- v // 把 v 发送到通道 ch v := \u0026lt;-ch // 从 ch 接收数据 // 并把值赋给 v 声明一个通道很简单，我们使用chan关键字即可，通道在使用前必须先创建：\nch := make(chan int) 注意：默认情况下，通道是不带缓冲区的。发送端发送数据，同时必须有接收端相应的接收数据。\n以下实例通过两个 goroutine 来计算数字之和，在 goroutine 完成计算后，它会计算两个结果的和：\npackage main import \u0026#34;fmt\u0026#34; func sum(s []int, c chan int) { sum := 0 for _, v := range s { sum += v } c \u0026lt;- sum // 把 sum 发送到通道 c } func main() { s := []int{7, 2, 8, -9, 4, 0} c := make(chan int) go sum(s[:len(s)/2], c) go sum(s[len(s)/2:], c) x, y := \u0026lt;-c, \u0026lt;-c // 从通道 c 中接收 fmt.Println(x, y, x+y) } 输出结果为：\n-5 17 12 通道缓冲区 通道可以设置缓冲区，通过 make 的第二个参数指定缓冲区大小：\nch := make(chan int, 100) 带缓冲区的通道允许发送端的数据发送和接收端的数据获取处于异步状态，就是说发送端发送的数据可以放在缓冲区里面，可以等待接收端去获取数据，而不是立刻需要接收端去获取数据。\n不过由于缓冲区的大小是有限的，所以还是必须有接收端来接收数据的，否则缓冲区一满，数据发送端就无法再发送数据了。\n注意：如果通道不带缓冲，发送方会阻塞直到接收方从通道中接收了值。如果通道带缓冲，发送方则会阻塞直到发送的值被拷贝到缓冲区内；如果缓冲区已满，则意味着需要等待直到某个接收方获取到一个值。接收方在有值可以接收之前会一直阻塞。\npackage main import \u0026#34;fmt\u0026#34; func main() { // 这里我们定义了一个可以存储整数类型的带缓冲通道 // 缓冲区大小为2 ch := make(chan int, 2) // 因为 ch 是带缓冲的通道，我们可以同时发送两个数据 // 而不用立刻需要去同步读取数据 ch \u0026lt;- 1 ch \u0026lt;- 2 // 获取这两个数据 fmt.Println(\u0026lt;-ch) fmt.Println(\u0026lt;-ch) } 执行输出结果为：\n1 2 Go 遍历通道与关闭通道 Go 通过 range 关键字来实现遍历读取到的数据，类似于与数组或切片。格式如下：\nv, ok := \u0026lt;-ch 如果通道接收不到数据后 ok 就为 false，这时通道就可以使用 close() 函数来关闭。\npackage main import ( \u0026#34;fmt\u0026#34; ) func fibonacci(n int, c chan int) { x, y := 0, 1 for i := 0; i \u0026lt; n; i++ { c \u0026lt;- x x, y = y, x+y } close(c) } func main() { c := make(chan int, 10) go fibonacci(cap(c), c) // range 函数遍历每个从通道接收到的数据，因为 c 在发送完 10 个 // 数据之后就关闭了通道，所以这里我们 range 函数在接收到 10 个数据 // 之后就结束了。如果上面的 c 通道不关闭，那么 range 函数就不 // 会结束，从而在接收第 11 个数据的时候就阻塞了。 for i := range c { fmt.Println(i) } } 输出结果为：\n0 1 1 2 3 5 8 13 21 34 Select 语句 select 语句使得一个 goroutine 可以等待多个通信操作。select 会阻塞，直到其中的某个 case 可以继续执行：\npackage main import \u0026#34;fmt\u0026#34; func fibonacci(c, quit chan int) { x, y := 0, 1 for { select { case c \u0026lt;- x: x, y = y, x+y case \u0026lt;-quit: fmt.Println(\u0026#34;quit\u0026#34;) return } } } func main() { c := make(chan int) quit := make(chan int) go func() { for i := 0; i \u0026lt; 10; i++ { fmt.Println(\u0026lt;-c) } quit \u0026lt;- 0 }() fibonacci(c, quit) } 以上代码中中，fibonacci goroutine 在 channel c 上发送斐波那契数列，当接收到 quit channel 的信号时退出。\n执行输出结果为：\n0 1 1 2 3 5 8 13 21 34 quit 并发编程小结 Goroutines 是轻量级线程，使用 go 关键字启动。 Channels 用于 goroutines 之间的通信。 Select 语句 用于等待多个 channel 操作。 链接: 菜鸟教程相关笔记补充\n","permalink":"//localhost:1313/posts/go%E8%AF%AD%E8%A8%80/","summary":"\u003ch1 id=\"go的变量声明\"\u003ego的变量声明\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e第一种，指定变量类型，如果没有初始化，则变量默认为零值\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e例如：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 声明一个整型变量 a，默认为 0\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"kt\"\u003efloat64\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 声明一个浮点型变量 b，默认为 0.0\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e第二种，根据值自行判定变量类型。\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e例如：\u003c/p\u003e","title":"Go语言"},{"content":"日常技巧 CTRL + r 等于 window 下的默认 CTRL + y CTRL + f 查找 1. 关于Vim 1.1 Vim的几种模式 正常模式：可以使用快捷键命令，或按:输入命令行。 插入模式：可以输入文本，在正常模式下，按i、a、o等都可以进入插入模式。 可视模式：正常模式下按v可以进入可视模式， 在可视模式下，移动光标可以选择文本。按V进入可视行模式， 总是整行整行的选中。ctrl+v进入可视块模式。 替换模式：正常模式下，按R进入。 2. 启动Vim vim -c cmd file: 在打开文件前，先执行指定的命令； vim -r file: 恢复上次异常退出的文件； vim -R file: 以只读的方式打开文件，但可以强制保存； vim -M file: 以只读的方式打开文件，不可以强制保存； vim -y num file: 将编辑窗口的大小设为num行； vim + file: 从文件的末尾开始； vim +num file: 从第num行开始； vim +/string file: 打开file，并将光标停留在第一个找到的string上。 vim \u0026ndash;remote file: 用已有的vim进程打开指定的文件。 如果你不想启用多个vim会话，这个很有用。但要注意， 如果你用vim，会寻找名叫VIM的服务器；如果你已经有一个gvim在运行了， 你可以用gvim \u0026ndash;remote file在已有的gvim中打开文件。 3. 文档操作 :e file \u0026ndash;关闭当前编辑的文件，并开启新的文件。 如果对当前文件的修改未保存，vi会警告。 :e! file \u0026ndash;放弃对当前文件的修改，编辑新的文件。 :e+file \u0026ndash; 开始新的文件，并从文件尾开始编辑。 :e+n file \u0026ndash; 开始新的文件，并从第n行开始编辑。 :enew \u0026ndash;编译一个未命名的新文档。(CTRL-W n) :e \u0026ndash; 重新加载当前文档。 :e! \u0026ndash; 重新加载当前文档，并丢弃已做的改动。 :e#或ctrl+^ \u0026ndash; 回到刚才编辑的文件，很实用。 :f或ctrl+g \u0026ndash; 显示文档名，是否修改，和光标位置。 :f filename \u0026ndash; 改变编辑的文件名，这时再保存相当于另存为。 gf \u0026ndash; 打开以光标所在字符串为文件名的文件。 :w \u0026ndash; 保存修改。 :n1,n2w filename \u0026ndash; 选择性保存从某n1行到另n2行的内容。 :wq \u0026ndash; 保存并退出。 ZZ \u0026ndash; 保存并退出。 :x \u0026ndash; 保存并退出。 :q[uit] ——退出当前窗口。(CTRL-W q或CTRL-W CTRL-Q) :saveas newfilename \u0026ndash; 另存为 :browse e \u0026ndash; 会打开一个文件浏览器让你选择要编辑的文件。 如果是终端中，则会打开netrw的文件浏览窗口； 如果是gvim，则会打开一个图形界面的浏览窗口。 实际上:browse后可以跟任何编辑文档的命令，如sp等。 用browse打开的起始目录可以由browsedir来设置： :set browsedir=last \u0026ndash; 用上次访问过的目录（默认）； :set browsedir=buffer \u0026ndash; 用当前文件所在目录； :set browsedir=current \u0026ndash; 用当前工作目录； :Sex \u0026ndash; 水平分割一个窗口，浏览文件系统； :Vex \u0026ndash; 垂直分割一个窗口，浏览文件系统； 4. 光标的移动 4.1 基本移动 以下移动都是在normal模式下。\nh或退格: 左移一个字符； l或空格: 右移一个字符； j: 下移一行； k: 上移一行； gj: 移动到一段内的下一行； gk: 移动到一段内的上一行； +或Enter: 把光标移至下一行第一个非空白字符。 -: 把光标移至上一行第一个非空白字符。 w: 前移一个单词，光标停在下一个单词开头； W: 移动下一个单词开头，但忽略一些标点； e: 前移一个单词，光标停在下一个单词末尾； E: 移动到下一个单词末尾，如果词尾有标点，则移动到标点； b: 后移一个单词，光标停在上一个单词开头； B: 移动到上一个单词开头，忽略一些标点； ge: 后移一个单词，光标停在上一个单词末尾； gE: 同 ge ，不过‘单词’包含单词相邻的标点。 (: 前移1句。 ): 后移1句。 {: 前移1段。 }: 后移1段。 fc: 把光标移到同一行的下一个c字符处 Fc: 把光标移到同一行的上一个c字符处 tc: 把光标移到同一行的下一个c字符前 Tc: 把光标移到同一行的上一个c字符后 ;: 配合f \u0026amp; t使用，重复一次 ,: 配合f \u0026amp; t使用，反向重复一次 viw : 选中一个单词 上面的操作都可以配合n使用，比如在正常模式(下面会讲到)下输入3h， 则光标向左移动3个字符。\n0: 移动到行首。 g0: 移到光标所在屏幕行行首。 ^: 移动到本行第一个非空白字符。 g^: 同 ^ ，但是移动到当前屏幕行第一个非空字符处。 $: 移动到行尾。 g$: 移动光标所在屏幕行行尾。 n|: 把光标移到递n列上。 nG: 到文件第n行。 :n 移动到第n行。 :$ 移动到最后一行。 H: 把光标移到屏幕最顶端一行。 M: 把光标移到屏幕中间一行。 L: 把光标移到屏幕最底端一行。 gg: 到文件头部。 G: 到文件尾部。 4.2 翻屏 ctrl+f: 下翻一屏。 ctrl+b: 上翻一屏。 ctrl+d: 下翻半屏。 ctrl+u: 上翻半屏。 ctrl+e: 向下滚动一行。 ctrl+y: 向上滚动一行。 n%: 到文件n%的位置。 zz: 将当前行移动到屏幕中央。 zt: 将当前行移动到屏幕顶端。 zb: 将当前行移动到屏幕底端。 4.3 标记 使用标记可以快速移动。到达标记后，可以用Ctrl+o返回原来的位置。 Ctrl+o和Ctrl+i 很像浏览器上的 后退 和 前进 。\nm{a-z}: 标记光标所在位置，局部标记，只用于当前文件。 m{A-Z}: 标记光标所在位置，全局标记。标记之后，退出Vim， 重新启动，标记仍然有效。 `{a-z}: 移动到标记位置。 \u0026lsquo;{a-z}: 移动到标记行的行首。 `{0-9}：回到上[2-10]次关闭vim时最后离开的位置。 : 移动到上次编辑的位置。''也可以，不过精确到列，而\u0026rsquo;\u0026lsquo;精确到行 。如果想跳转到更老的位置，可以按C-o，跳转到更新的位置用C-i。 `\u0026quot;: 移动到上次离开的地方。 `.: 移动到最后改动的地方。 :marks 显示所有标记。 :delmarks a b \u0026ndash; 删除标记a和b。 :delmarks a-c \u0026ndash; 删除标记a、b和c。 :delmarks a c-f \u0026ndash; 删除标记a、c、d、e、f。 :delmarks! \u0026ndash; 删除当前缓冲区的所有标记。 :help mark-motions 查看更多关于mark的知识。 5. 插入文本 5.1 基本插入 i: 在光标前插入；一个小技巧：按8，再按i，进入插入模式，输入=， 按esc进入命令模式，就会出现8个=。 这在插入分割线时非常有用，如30i+就插入了36个+组成的分割线。 I: 在当前行第一个非空字符前插入； gI: 在当前行第一列插入； a: 在光标后插入； A: 在当前行最后插入； o: 在下面新建一行插入； O: 在上面新建一行插入； :r filename在当前位置插入另一个文件的内容。 :[n]r filename在第n行插入另一个文件的内容。 :r !date 在光标处插入当前日期与时间。同理，:r !command可以将其它shell命令的输出插入当前文档。 5.2 改写插入 c[n]w: 改写光标后1(n)个词。 c[n]l: 改写光标后n个字母。 c[n]h: 改写光标前n个字母。 [n]cc: 修改当前[n]行。 [n]s: 以输入的文本替代光标之后1(n)个字符，相当于c[n]l。 [n]S: 删除指定数目的行，并以所输入文本代替之。 注意，类似cnw,dnw,ynw的形式同样可以写为ncw,ndw,nyw。\n6. 剪切复制和寄存器 6.1 剪切和复制、粘贴 [n]x: 剪切光标右边n个字符，相当于d[n]l。 [n]X: 剪切光标左边n个字符，相当于d[n]h。 y: 复制在可视模式下选中的文本。 yy or Y: 复制整行文本。 y[n]w: 复制一(n)个词。 y[n]l: 复制光标右边1(n)个字符。 y[n]h: 复制光标左边1(n)个字符。 y$: 从光标当前位置复制到行尾。 y0: 从光标当前位置复制到行首。 :m,ny 复制m行到n行的内容。 y1G或ygg: 复制光标以上的所有行。 yG: 复制光标以下的所有行。 yaw和yas：复制一个词和复制一个句子，即使光标不在词首和句首也没关系。 d: 删除（剪切）在可视模式下选中的文本。 d$ or D: 删除（剪切）当前位置到行尾的内容。 d[n]w: 删除（剪切）1(n)个单词 d[n]l: 删除（剪切）光标右边1(n)个字符。 d[n]h: 删除（剪切）光标左边1(n)个字符。 d0: 删除（剪切）当前位置到行首的内容 [n] dd: 删除（剪切）1(n)行。 :m,nd 剪切m行到n行的内容。 d1G或dgg: 剪切光标以上的所有行。 dG: 剪切光标以下的所有行。 daw和das：剪切一个词和剪切一个句子，即使光标不在词首和句首也没关系。 d/f：这是一个比较高级的组合命令，它将删除当前位置 到下一个f之间的内容。 p: 在光标之后粘贴。 P: 在光标之前粘贴。 6.2 文本对象 aw：一个词 as：一句。 ap：一段。 ab：一块（包含在圆括号中的）。 y, d, c, v都可以跟文本对象。\n6.3 寄存器 a-z：都可以用作寄存器名。\u0026ldquo;ayy把当前行的内容放入a寄存器。 A-Z：用大写字母索引寄存器，可以在寄存器中追加内容。 如\u0026quot;Ayy把当前行的内容追加到a寄存器中。 :reg 显示所有寄存器的内容。 \u0026ldquo;\u0026quot;：不加寄存器索引时，默认使用的寄存器。 \u0026ldquo;*：当前选择缓冲区，\u0026quot;*yy把当前行的内容放入当前选择缓冲区。 \u0026ldquo;+：系统剪贴板。\u0026quot;+yy把当前行的内容放入系统剪贴板。 7. 查找与替换 7.1 查找 /something: 在后面的文本中查找something。 ?something: 在前面的文本中查找something。 /pattern/+number: 将光标停在包含pattern的行后面第number行上。 /pattern/-number: 将光标停在包含pattern的行前面第number行上。 n: 向后查找下一个。 N: 向前查找下一个。 可以用grep或vimgrep查找一个模式都在哪些地方出现过，\n其中:grep是调用外部的grep程序，而:vimgrep是vim自己的查找算法。\n用法为： :vim[grep]/pattern/[g] [j] files\ng的含义是如果一个模式在一行中多次出现，则这一行也在结果中多次出现。\nj的含义是grep结束后，结果停在第j项，默认是停在第一项。\nvimgrep前面可以加数字限定搜索结果的上限，如\n:1vim/pattern/ % 只查找那个模式在本文件中的第一个出现。\n其实vimgrep在读纯文本电子书时特别有用，可以生成导航的目录。\n比如电子书中每一节的标题形式为：n. xxxx。你就可以这样：\n:vim/^d{1,}./ %\n然后用:cw或:copen查看结果，可以用C-w H把quickfix窗口移到左侧，\n就更像个目录了。\n7.2 替换 :s/old/new - 用new替换当前行第一个old。 :s/old/new/g - 用new替换当前行所有的old。 :n1,n2s/old/new/g - 用new替换文件n1行到n2行所有的old。 :%s/old/new/g - 用new替换文件中所有的old。 :%s/^/xxx/g - 在每一行的行首插入xxx，^表示行首。 :%s/$/xxx/g - 在每一行的行尾插入xxx，$表示行尾。 所有替换命令末尾加上c，每个替换都将需要用户确认。 如：%s/old/new/gc，加上i则忽略大小写(ignore)。 还有一种比替换更灵活的方式，它是匹配到某个模式后执行某种命令，\n语法为 :[range]g/pattern/command\n例如 :%g/^ xyz/normal dd。\n表示对于以一个空格和xyz开头的行执行normal模式下的dd命令。\n关于range的规定为：\n如果不指定range，则表示当前行。 m,n: 从m行到n行。 0: 最开始一行（可能是这样）。 $: 最后一行 .: 当前行 %: 所有行 7.3 正则表达式 高级的查找替换就要用到正则表达式。\n\\d: 表示十进制数（我猜的） \\s: 表示空格 \\S: 非空字符 \\a: 英文字母 |: 表示 或 .: 表示. {m,n}: 表示m到n个字符。这要和 \\s与\\a等连用，如 \\a{m,n} 表示m 到n个英文字母。 {m,}: 表示m到无限多个字符。 **: 当前目录下的所有子目录。 :help pattern得到更多帮助。\n8. 排版 8.1 基本排版 \u0026laquo; 向左缩进一个shiftwidth \u0026gt;\u0026gt; 向右缩进一个shiftwidth :ce(nter) 本行文字居中 :le(ft) 本行文字靠左 :ri(ght) 本行文字靠右 gq 对选中的文字重排，即对过长的文字进行断行 gqq 重排当前行 gqnq 重排n行 gqap 重排当前段 gqnap 重排n段 gqnj 重排当前行和下面n行 gqQ 重排当前段对文章末尾 J 拼接当前行和下一行 gJ 同 J ，不过合并后不留空格。 8.2 拼写检查 :set spell－开启拼写检查功能 :set nospell－关闭拼写检查功能 ]s－移到下一个拼写错误的单词 [s－作用与上一命令类似，但它是从相反方向进行搜索 z=－显示一个有关拼写错误单词的列表，可从中选择 zg－告诉拼写检查器该单词是拼写正确的 zw－与上一命令相反，告诉拼写检查器该单词是拼写错误的 8.3 统计字数 g ^g可以统计文档字符数，行数。 将光标放在最后一个字符上，用字符数减去行数可以粗略统计中文文档的字数。 以上对 Mac 或 Unix 的文件格式适用。 如果是 Windows 文件格式（即换行符有两个字节），字数的统计方法为： 字符数 - 行数 * 2。\n9. 编辑多个文件 9.1 一次编辑多个文件 我们可以一次打开多个文件，如\nvi a.txt b.txt c.txt 使用:next(:n)编辑下一个文件。 :2n 编辑下2个文件。 使用:previous或:N编辑上一个文件。 使用:wnext，保存当前文件，并编辑下一个文件。 使用:wprevious，保存当前文件，并编辑上一个文件。 使用:args 显示文件列表。 :n filenames或:args filenames 指定新的文件列表。 vi -o filenames 在水平分割的多个窗口中编辑多个文件。 vi -O filenames 在垂直分割的多个窗口中编辑多个文件。 9.2 多标签编辑 vim -p files: 打开多个文件，每个文件占用一个标签页。 :tabe, tabnew \u0026ndash; 如果加文件名，就在新的标签中打开这个文件， 否则打开一个空缓冲区。 ^w gf \u0026ndash; 在新的标签页里打开光标下路径指定的文件。 :tabn \u0026ndash; 切换到下一个标签。Control + PageDown，也可以。 :tabp \u0026ndash; 切换到上一个标签。Control + PageUp，也可以。 [n] gt \u0026ndash; 切换到下一个标签。如果前面加了 n ， 就切换到第n个标签。第一个标签的序号就是1。 :tab split \u0026ndash; 将当前缓冲区的内容在新页签中打开。 :tabc[lose] \u0026ndash; 关闭当前的标签页。 :tabo[nly] \u0026ndash; 关闭其它的标签页。 :tabs \u0026ndash; 列出所有的标签页和它们包含的窗口。 :tabm[ove] [N] \u0026ndash; 移动标签页，移动到第N个标签页之后。 如 tabm 0 当前标签页，就会变成第一个标签页。 9.3 缓冲区 :buffers或:ls或:files 显示缓冲区列表。 ctrl+^：在最近两个缓冲区间切换。 :bn \u0026ndash; 下一个缓冲区。 :bp \u0026ndash; 上一个缓冲区。 :bl \u0026ndash; 最后一个缓冲区。 :b[n]或:[n]b \u0026ndash; 切换到第n个缓冲区。 :nbw(ipeout) \u0026ndash; 彻底删除第n个缓冲区。 :nbd(elete) \u0026ndash; 删除第n个缓冲区，并未真正删除，还在unlisted列表中。 :ba[ll] \u0026ndash; 把所有的缓冲区在当前页中打开，每个缓冲区占一个窗口。 10. 分屏编辑 vim -o file1 file2:水平分割窗口，同时打开file1和file2 vim -O file1 file2:垂直分割窗口，同时打开file1和file2 10.1 水平分割 :split(:sp) \u0026ndash; 把当前窗水平分割成两个窗口。(CTRL-W s 或 CTRL-W CTRL-S) 注意如果在终端下，CTRL-S可能会冻结终端，请按CTRL-Q继续。 :split filename \u0026ndash; 水平分割窗口，并在新窗口中显示另一个文件。 :nsplit(:nsp) \u0026ndash; 水平分割出一个n行高的窗口。 :[N]new \u0026ndash; 水平分割出一个N行高的窗口，并编辑一个新文件。 (CTRL-W n或 CTRL-W CTRL-N) ctrl+w f \u0026ndash;水平分割出一个窗口，并在新窗口打开名称为光标所在词的文件 。 C-w C-^ \u0026ndash; 水平分割一个窗口，打开刚才编辑的文件。 10.2 垂直分割 :vsplit(:vsp) \u0026ndash; 把当前窗口分割成水平分布的两个窗口。 (CTRL-W v或CTRL CTRL-V) :[N]vne[w] \u0026ndash; 垂直分割出一个新窗口。 :vertical 水平分割的命令： 相应的垂直分割。 10.3 关闭子窗口 :qall \u0026ndash; 关闭所有窗口，退出vim。 :wall \u0026ndash; 保存所有修改过的窗口。 :only \u0026ndash; 只保留当前窗口，关闭其它窗口。(CTRL-W o) :close \u0026ndash; 关闭当前窗口，CTRL-W c能实现同样的功能。 (象 :q :x同样工作 ) 10.4 调整窗口大小 ctrl+w + \u0026ndash;当前窗口增高一行。也可以用n增高n行。 ctrl+w - \u0026ndash;当前窗口减小一行。也可以用n减小n行。 ctrl+w _ \u0026ndash;当前窗口扩展到尽可能的大。也可以用n设定行数。 :resize n \u0026ndash; 当前窗口n行高。 ctrl+w = \u0026ndash; 所有窗口同样高度。 n ctrl+w _ \u0026ndash; 当前窗口的高度设定为n行。 ctrl+w \u0026lt; \u0026ndash;当前窗口减少一列。也可以用n减少n列。 ctrl+w \u0026gt; \u0026ndash;当前窗口增宽一列。也可以用n增宽n列。 ctrl+w | \u0026ndash;当前窗口尽可能的宽。也可以用n设定列数。 10.5 切换和移动窗口 如果支持鼠标，切换和调整子窗口的大小就简单了。\nctrl+w ctrl+w: 切换到下一个窗口。或者是ctrl+w w。 ctrl+w p: 切换到前一个窗口。 ctrl+w h(l,j,k):切换到左（右，下，上）的窗口。 ctrl+w t(b):切换到最上（下）面的窗口。 ctrl+w H(L,K,J): 将当前窗口移动到最左（右、上、下）面。 ctrl+w r：旋转窗口的位置。 ctrl+w T: 将当前的窗口移动到新的标签页上。 11. 快速编辑 11.1 改变大小写 ~: 反转光标所在字符的大小写。 可视模式下的U或u：把选中的文本变为大写或小写。 gu(U)接范围（如$，或G），可以把从光标当前位置到指定位置之间字母全部 转换成小写或大写。如ggguG，就是把开头到最后一行之间的字母全部变为小 写。再如gu5j，把当前行和下面四行全部变成小写。 11.2 替换（normal模式） r: 替换光标处的字符，同样支持汉字。 R: 进入替换模式，按esc回到正常模式。 11.3 撤消与重做（normal模式） [n] u: 取消一(n)个改动。 :undo 5 \u0026ndash; 撤销5个改变。 :undolist \u0026ndash; 你的撤销历史。 ctrl + r: 重做最后的改动。 U: 取消当前行中所有的改动。 :earlier 4m \u0026ndash; 回到4分钟前 :later 55s \u0026ndash; 前进55秒 \u0026gt; 在这篇博客中，我引用了作者详细介绍的 Vim 的使用技巧。更多内容请查看原文：Vim 笔记。\n","permalink":"//localhost:1313/posts/vim%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/","summary":"\u003ch1 id=\"日常技巧\"\u003e日常技巧\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eCTRL + r\u003c/code\u003e 等于 window 下的默认 \u003ccode\u003eCTRL + y\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eCTRL + f   查找\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"1-关于vim\"\u003e1. 关于Vim\u003c/h1\u003e\n\u003ch2 id=\"11-vim的几种模式\"\u003e1.1 Vim的几种模式\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e正常模式：可以使用快捷键命令，或按:输入命令行。\u003c/li\u003e\n\u003cli\u003e插入模式：可以输入文本，在正常模式下，按i、a、o等都可以进入插入模式。\u003c/li\u003e\n\u003cli\u003e可视模式：正常模式下按v可以进入可视模式， 在可视模式下，移动光标可以选择文本。按V进入可视行模式， 总是整行整行的选中。ctrl+v进入可视块模式。\u003c/li\u003e\n\u003cli\u003e替换模式：正常模式下，按R进入。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"2-启动vim\"\u003e2. 启动Vim\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003evim -c cmd file: 在打开文件前，先执行指定的命令；\u003c/li\u003e\n\u003cli\u003evim -r file: 恢复上次异常退出的文件；\u003c/li\u003e\n\u003cli\u003evim -R file: 以只读的方式打开文件，但可以强制保存；\u003c/li\u003e\n\u003cli\u003evim -M file: 以只读的方式打开文件，不可以强制保存；\u003c/li\u003e\n\u003cli\u003evim -y num file: 将编辑窗口的大小设为num行；\u003c/li\u003e\n\u003cli\u003evim + file: 从文件的末尾开始；\u003c/li\u003e\n\u003cli\u003evim +num file: 从第num行开始；\u003c/li\u003e\n\u003cli\u003evim +/string file: 打开file，并将光标停留在第一个找到的string上。\u003c/li\u003e\n\u003cli\u003evim \u0026ndash;remote file: 用已有的vim进程打开指定的文件。 如果你不想启用多个vim会话，这个很有用。但要注意， 如果你用vim，会寻找名叫VIM的服务器；如果你已经有一个gvim在运行了， 你可以用gvim \u0026ndash;remote file在已有的gvim中打开文件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"3-文档操作\"\u003e3. 文档操作\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e:e file \u0026ndash;关闭当前编辑的文件，并开启新的文件。 如果对当前文件的修改未保存，vi会警告。\u003c/li\u003e\n\u003cli\u003e:e! file \u0026ndash;放弃对当前文件的修改，编辑新的文件。\u003c/li\u003e\n\u003cli\u003e:e+file \u0026ndash; 开始新的文件，并从文件尾开始编辑。\u003c/li\u003e\n\u003cli\u003e:e+n file \u0026ndash; 开始新的文件，并从第n行开始编辑。\u003c/li\u003e\n\u003cli\u003e:enew \u0026ndash;编译一个未命名的新文档。(CTRL-W n)\u003c/li\u003e\n\u003cli\u003e:e \u0026ndash; 重新加载当前文档。\u003c/li\u003e\n\u003cli\u003e:e! \u0026ndash; 重新加载当前文档，并丢弃已做的改动。\u003c/li\u003e\n\u003cli\u003e:e#或ctrl+^ \u0026ndash; 回到刚才编辑的文件，很实用。\u003c/li\u003e\n\u003cli\u003e:f或ctrl+g \u0026ndash; 显示文档名，是否修改，和光标位置。\u003c/li\u003e\n\u003cli\u003e:f filename \u0026ndash; 改变编辑的文件名，这时再保存相当于另存为。\u003c/li\u003e\n\u003cli\u003egf \u0026ndash; 打开以光标所在字符串为文件名的文件。\u003c/li\u003e\n\u003cli\u003e:w \u0026ndash; 保存修改。\u003c/li\u003e\n\u003cli\u003e:n1,n2w filename \u0026ndash; 选择性保存从某n1行到另n2行的内容。\u003c/li\u003e\n\u003cli\u003e:wq \u0026ndash; 保存并退出。\u003c/li\u003e\n\u003cli\u003eZZ \u0026ndash; 保存并退出。\u003c/li\u003e\n\u003cli\u003e:x \u0026ndash; 保存并退出。\u003c/li\u003e\n\u003cli\u003e:q[uit] ——退出当前窗口。(CTRL-W q或CTRL-W CTRL-Q)\u003c/li\u003e\n\u003cli\u003e:saveas newfilename \u0026ndash; 另存为\u003c/li\u003e\n\u003cli\u003e:browse e \u0026ndash; 会打开一个文件浏览器让你选择要编辑的文件。 如果是终端中，则会打开netrw的文件浏览窗口； 如果是gvim，则会打开一个图形界面的浏览窗口。 实际上:browse后可以跟任何编辑文档的命令，如sp等。 用browse打开的起始目录可以由browsedir来设置：\n\u003cul\u003e\n\u003cli\u003e:set browsedir=last \u0026ndash; 用上次访问过的目录（默认）；\u003c/li\u003e\n\u003cli\u003e:set browsedir=buffer \u0026ndash; 用当前文件所在目录；\u003c/li\u003e\n\u003cli\u003e:set browsedir=current \u0026ndash; 用当前工作目录；\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e:Sex \u0026ndash; 水平分割一个窗口，浏览文件系统；\u003c/li\u003e\n\u003cli\u003e:Vex \u0026ndash; 垂直分割一个窗口，浏览文件系统；\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"4-光标的移动\"\u003e4. 光标的移动\u003c/h1\u003e\n\u003ch2 id=\"41-基本移动\"\u003e4.1 基本移动\u003c/h2\u003e\n\u003cp\u003e以下移动都是在normal模式下。\u003c/p\u003e","title":"Vim操作手册"},{"content":"目前我的解决办法 在 posts 目录下创建一个名为 img 的文件夹，用于存储照片。该文件夹的路径为 ..\\content\\posts\\img。 将需要使用的照片复制并放入 img 文件夹中。在 Markdown 文档中使用照片时，可以通过相对位置进行引用。例如，引用的路径为 \u0026quot;../img/photo1.jpg\u0026quot;。请注意，使用 \u0026quot;../\u0026quot; 可确保照片在博客页面上正确显示。 若想在本地上查看 Markdown 文档中展示的照片，可以使用 \u0026quot;./\u0026quot; 作为引用路径。例如，引用的路径为 \u0026quot;./img/photo1.jpg\u0026quot;。 注意图片命名，确保照片文件名中不包含空格。 有问题的话, 欢迎在评论区留言, 我会尽快回复！\n","permalink":"//localhost:1313/posts/hugo%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/","summary":"\u003ch1 id=\"目前我的解决办法\"\u003e目前我的解决办法\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e在 \u003ccode\u003eposts\u003c/code\u003e 目录下创建一个名为 \u003ccode\u003eimg\u003c/code\u003e 的文件夹，用于存储照片。该文件夹的路径为 \u003ccode\u003e..\\content\\posts\\img\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e将需要使用的照片复制并放入 \u003ccode\u003eimg\u003c/code\u003e 文件夹中。在 Markdown 文档中使用照片时，可以通过相对位置进行引用。例如，引用的路径为 \u003ccode\u003e\u0026quot;../img/photo1.jpg\u0026quot;\u003c/code\u003e。请注意，使用 \u003ccode\u003e\u0026quot;../\u0026quot;\u003c/code\u003e 可确保照片在博客页面上正确显示。\u003c/li\u003e\n\u003cli\u003e若想在\u003cstrong\u003e本地\u003c/strong\u003e上查看 Markdown 文档中展示的照片，可以使用 \u003ccode\u003e\u0026quot;./\u0026quot;\u003c/code\u003e 作为引用路径。例如，引用的路径为 \u003ccode\u003e\u0026quot;./img/photo1.jpg\u0026quot;\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e注意图片命名，确保照片文件名中\u003cstrong\u003e不包含空格\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e有问题的话, 欢迎在评论区留言, 我会尽快回复！\u003c/p\u003e","title":"Hugo博客的图片上传"},{"content":"常用指令 vim 访问文本 退出文本并保存 :wq 返回到上一个文件夹 cd . . 解压指令 tar -zxvf xxxx.tar.gz vi vim 操作 i o a r 进入vim 按下esc , 输入**:** 然后输入wq 保存并退出 :q退出 :q! 不保存退出 yy 拷贝 5yy dd 删除 5dd 撤销 u 行号打开 :set nu 关机 shutdown -h 关机 shutdown -r 重启 reboot 重启 sync 把内存数据存入磁盘 注销用户和登录 logout\n退出root logout\n压缩/解压指令 tar -zxvf xxxx.tar.gz gzip 文件 压缩 gunzip 解压文件 zip 压缩文件夹 unzip 解压文件夹 -r 递归压缩 zip -r xxxxx.zip /home/ [将home目录及其包含的的文件和子文件夹都压缩] -d \u0026lt;可指定目录\u0026gt; unzip -d /opt/tmp /home/xxxxx.zip tar 万能 tar -c 产生打包文件 -v 显示详细信息 -f 指定压缩后的文件名 -z 打包并同时压缩 -x 解压.tar文件 帮助指令 man ls 列出所有指令\nhelp + 指令\nls -la\nls -la /root\n文件目录指令 pwd 显示出地址 cd ~ 回到家目录 cd .. 上一目录 mkdir 创建目录 mkdir -p /home/\u0026hellip;/\u0026hellip;. 创建指定目录 rmdir 删除空目录 强制删除空目录 rm -rf touch 创建空文件 cp 拷贝 cp hello.txt /bbb cp -r /home/bbb /opt 把目录复制到指定目录下 \\cp -r /home/bbb /opt 强制 rm 删除文件或目录 rm -rf /home/bbb 强制删除 -f 就是强制删除不提醒 mv 移动指令 cat 查看文件 -n 行号 less 分屏查看 echo $HOSTNAME 输出环境变量 head 查看文件的前几行 -\u0026gt; 10 行 head xxxx.c tail 查看末尾文件 tail xxxx.c ln -s /root /home/myroot 快捷指令指向 在myroot创建指向/root的快捷方式, cd myroot 就会直接进入/root 文件管理 使用 mkdir 创建目录。例如，mkdir xxxx 将在当前位置创建一个名为 \u0026ldquo;xxxx\u0026rdquo; 的目录。 要创建多级目录，可以使用 mkdir -p 命令。例如，mkdir -p xxx/yyy 将在 \u0026ldquo;xxx\u0026rdquo; 目录下创建一个名为 \u0026ldquo;yyy\u0026rdquo; 的子目录。 使用 mkdir -m 777 命令创建目录时，可以直接设置权限。数字 \u0026ldquo;777\u0026rdquo; 表示所有权限（读、写和执行）。另外，\u0026ldquo;4\u0026rdquo; 代表读权限，\u0026ldquo;2\u0026rdquo; 代表写权限，\u0026ldquo;1\u0026rdquo; 代表执行权限。 mv 命令用于移动文件或重命名文件。例如，mv xxx.c /home/zzz/targetPlace 将把 \u0026ldquo;xxx.c\u0026rdquo; 文件移动到 \u0026ldquo;/home/zzz/targetPlace\u0026rdquo; 目录。 使用 cp 命令复制文件。例如，cp xxx.c /home/zzz/targetPlace 将把 \u0026ldquo;xxx.c\u0026rdquo; 文件复制到 \u0026ldquo;/home/zzz/targetPlace\u0026rdquo; 目录。 若要复制目录，应使用 cp -r 命令。例如，cp -r /home/bbb /opt 将把 \u0026ldquo;/home/bbb\u0026rdquo; 目录复制到 \u0026ldquo;/opt\u0026rdquo; 目录。 rm 用于删除文件或目录，而 rmdir 仅用于删除空目录。删除文件时，使用 rm 文件名；删除目录（及其内容）时，使用 rm -r 目录名；删除空目录时，使用 rmdir 目录名。 使用 chown 和 chgrp 命令更改文件的所有权。例如，chown -R root /home/zzz/targetPlace/xxx.c 将把 \u0026ldquo;xxx.c\u0026rdquo; 文件的所有权更改为 root 用户。同理，使用 chgrp 命令更改文件的群组所有权。 使用 chmod 命令更改文件或目录的权限。例如，chmod 777 xxxx（目录） 将为名为 \u0026ldquo;xxxx\u0026rdquo; 的目录设置所有权限（读、写和执行）。 ln 命令用于创建链接，类似于快捷方式。例如，ln 路径/xxx.c newxxx.c 将在当前位置创建一个指向 \u0026ldquo;xxx.c\u0026rdquo; 的新链接 \u0026ldquo;newxxx.c\u0026rdquo;。若要删除快捷方式，可以使用 rm -rf 命令。 输入/输出重定向是一种将命令的输出发送到文件而不是屏幕的技术。例如，date \u0026gt; xx.txt 将当前日期和时间写入 \u0026ldquo;xx.txt\u0026rdquo; 文件。而 date \u0026gt;\u0026gt; xx.txt 会将日期和时间追加到文件的末尾，常用于日志、脚本和文件中。 cat命令 使用 cat \u0026gt; xxxx.c 创建一个新文件 \u0026ldquo;xxxx.c\u0026rdquo;。此命令进入文本输入模式，可以直接输入内容，输入完成后按 Ctrl+D 保存并退出。\n合并文件可以使用 cat 命令。例如，cat tx1.c tx2.c \u0026gt; tx3.c 将分别将 \u0026ldquo;tx1.c\u0026rdquo; 和 \u0026ldquo;tx2.c\u0026rdquo; 的内容合并并输出到 \u0026ldquo;tx3.c\u0026rdquo; 文件中。\n要向文件末尾添加内容，使用 cat \u0026gt;\u0026gt; tx.c。此命令进入文本输入模式，输入完内容后，同样按 Ctrl+D 保存并退出。\nmore命令 使用 more 命令可以逐屏查看大型文件。例如，more -3 tx 将从文件 \u0026ldquo;tx\u0026rdquo; 的第三行开始显示内容。使用方向键或空格键可以向下滚动，按 q 退出查看。 grep命令 使用 grep -i \u0026quot;abc.....\u0026quot; xxxx.c 查找文件 \u0026ldquo;xxxx.c\u0026rdquo; 中的内容，-i 选项使搜索不区分大小写。 使用 grep -n -i \u0026quot;abc.....\u0026quot; xxxx.c 查找文件 \u0026ldquo;xxxx.c\u0026rdquo; 中的内容，-n 选项会显示匹配行的行号，且同样不区分大小写。 find命令 使用 find -name 'tex*' 查找当前目录及子目录中以 \u0026ldquo;tex\u0026rdquo; 开头的文件，支持模糊查找。 使用 find -name 'te??.c' 查找当前目录及子目录中以 \u0026ldquo;te\u0026rdquo; 开头，后跟任意两个字符且以 \u0026ldquo;.c\u0026rdquo; 结尾的文件。 使用 find -name '[a-z]*.c' 查找当前目录及子目录中以小写字母开头且以 \u0026ldquo;.c\u0026rdquo; 结尾的文件。 locate 命令 要快速定位文件，可以使用 locate xxxx 命令。此命令通过查询系统中的文件数据库，迅速找出包含 \u0026ldquo;xxxx\u0026rdquo; 的文件路径。请确保在使用前更新数据库，通常可以通过 updatedb 命令实现。 who 命令 使用 who 查看当前登录的用户。 使用 who -a 查看详细的用户信息，包括登录时间和终端等。 使用 whoami 查看当前用户的用户名。 使用 uname 命令查看主机信息，uname -a 则显示所有相关信息，包括主机名、内核版本、硬件架构等。常用选项包括： -n: 显示主机名 -r: 显示内核版本 -v: 显示内核版本号 -m: 显示机器硬件名称 -p: 显示处理器架构 -i: 显示硬件平台 -o: 显示操作系统名称 man命令 要查看命令手册，可以使用 man 命令。具体示例：\n使用 man ls 查看 ls 命令的说明书。这将打开 ls 命令的手册页，其中包括用法、选项和示例等详细信息。 要退出手册页，可以按 q。\n软件包管理 apt-get 命令 下载/卸载/管理 软件包\nwhich 命令查找位置\n使用 apt-get 命令下载、卸载和管理软件包。例如：\napt-get install package_name 安装软件包。 apt-get remove package_name 卸载软件包。 使用 which 命令查找可执行文件的位置。例如，which command_name 将显示该命令的完整路径。\n不同系统管理 Debian/Ubuntu 系统 下载软件包: apt-get install package_name 卸载软件包: apt-get remove package_name 更新软件包列表: apt-get update 升级软件包: apt-get upgrade Red Hat/CentOS 系统 下载软件包: yum install package_name 卸载软件包: yum remove package_name 更新软件包列表: yum check-update 升级软件包: yum update Arch Linux 系统 下载软件包: pacman -S package_name 卸载软件包: pacman -R package_name 更新软件包列表和升级: pacman -Syu macOS (使用 Homebrew) 下载软件包: brew install package_name 卸载软件包: brew uninstall package_name 更新软件包列表: brew update 升级软件包: brew upgrade Windows (使用 Chocolatey) 下载软件包: choco install package_name 卸载软件包: choco uninstall package_name 更新软件包: choco upgrade all 文件系统类型 查看swap信息并更改单位显示：free -h。 挂载文件系统：使用 sudo mount 命令挂载文件系统到指定目标点，例如 sudo mount /dev/xxx/yyy target。其中，target 是挂载点。 卸载已挂载的文件系统：使用 umount 命令卸载挂载点，例如 umount target。 查询磁盘使用情况：使用 df -h 命令查看磁盘的可用空间等信息。 检查或修改文件系统：使用 fsck 命令进行磁盘检查和修复。可以使用 -C 和 -t $type $路径 参数来指定检查的类型和路径。具体语法可查看 fsck --help 获取更多信息。 在磁盘上创建文件系统：使用 mkfs 命令。具体文件系统类型可以通过查看系统支持的选项来确定。例如，创建ext4文件系统可以使用 mkfs.ext4 命令。 查看分区表：使用 fdisk -l $路径 命令来查看指定设备的分区表信息。如果只是想列出当前系统所有设备，可以省略 $路径 参数。 使用gzip压缩工具：压缩文件使用 gzip xxxx.c，压缩目录使用 gzip -r /home，解压使用 gzip -d xxxx.c.gz。注意，gzip 会替换原始文件为 .gz 格式。 使用tar命令进行压缩和解压：查看tar的帮助信息可以使用 tar --help。压缩文件可以使用 tar -cvf xxx.tar yyy.c ...，解压可以使用 tar -xf xxx.tar -C $解压放置的位置。 使用bzip压缩和解压缩工具：压缩时使用 bzip2 filename 生成 .bz2 文件，解压缩时使用 bzip2 -d filename.bz2 或 bunzip2 filename.bz2。 使用zip命令创建和解压ZIP文件：压缩时使用 zip archive.zip file1 file2 创建ZIP文件，解压时使用 unzip archive.zip 解压ZIP文件。 用户管理 查看用户信息，可以使用 cat /etc/passwd 命令。 添加用户可以使用 useradd 命令。例如，useradd xxxx 将创建一个名为 \u0026ldquo;xxxx\u0026rdquo; 的新用户。 创建用户组使用 groupadd 命令。例如，groupadd xxxxgroup 将创建一个名为 \u0026ldquo;xxxxgroup\u0026rdquo; 的新用户组。查看所有用户组信息可以使用 cat /etc/group。 要查看用户执行过的命令记录，可以使用 history 命令。 使用 passwd 命令更改密码。执行此命令后，系统会提示输入当前用户的旧密码以及新密码。 删除用户可以使用 userdel 命令。例如，userdel xxxuser 将删除名为 \u0026ldquo;xxxuser\u0026rdquo; 的用户。 管理用户账号，包括修改用户名，可以使用 usermod 命令。例如，usermod -l new_name old_name 将把 \u0026ldquo;old_name\u0026rdquo; 的用户名更改为 \u0026ldquo;new_name\u0026rdquo;。 查看用户信息，可以使用 id xxxname 命令，这将显示名为 \u0026ldquo;xxxname\u0026rdquo; 的用户的详细信息。 用户切换可以使用 su 命令。例如，su root 将切换到 root 用户，而 su xxxname 将切换到名为 \u0026ldquo;xxxname\u0026rdquo; 的用户。 使用 sudo 命令可以以管理员权限执行命令。在执行需要特权的命令前，输入 sudo 和该命令，然后输入管理员密码即可。 进程管理 监视进程： 使用 ps 命令查看当前进程。 查看 ps 手册：man ps。 常用选项： 显示所有进程：ps -e 显示不带终端的所有进程：ps -au 显示特定用户的进程：ps -u root 或 ps -u xxxname 显示详细信息：ps -l 跟踪进程： 使用 top 命令监控进程。 自动更新 4 次后退出：top -n 4 设置刷新时间为 5 秒：top -d 5 仅监控特定进程 ID（如 1810）：top -p 1810 htop 命令： htop 是 top 的升级版，提供更友好的用户界面和交互功能。 终止进程： 使用 kill 命令终止进程。例如，kill 1201 将关闭进程 ID 为 1201 的进程。 设置进程优先级： 查看进程 nice 值并按降序排列：ps axo pid,comm,nice --sort=-nice 查看特定进程的 nice 值：ps -p 1201 -o nice 修改进程的 nice 值：renice -n 10 -p 1201 查看进程属性： 使用 pgrep 命令查找进程。 常用命令： 查询特定进程名：pgrep xxxname 模糊查询进程名：pgrep -l ^xxxname 性能监控 显示和配置网络设备 查看网络设备信息： 使用 ifconfig 命令可以查看当前网络配置。 显示所有网络设备及其状态：ifconfig 帮助文档： 查看 ifconfig 的帮助信息：ifconfig --help 常用选项： 启用网络接口：ifconfig eth0 up （将 eth0 替换为实际接口名） 禁用网络接口：ifconfig eth0 down 设置 IP 地址：ifconfig eth0 192.168.1.100 设置子网掩码：ifconfig eth0 netmask 255.255.255.0 查看特定接口信息：ifconfig eth0 现代替代工具 在许多现代 Linux 发行版中，\nifconfig 已被\nip 命令替代，建议使用：\n查看网络设备信息：ip addr 启用接口：ip link set eth0 up 禁用接口：ip link set eth0 down 设置 IP 地址：ip addr add 192.168.1.100/24 dev eth0 CPU 统计数据 iostat 命令\n：\n基本使用：iostat 显示 CPU 和 I/O 统计信息。 输出磁盘利用率：iostat -d sda1 （显示指定磁盘的利用信息）。 输出 CPU 和磁盘利用率：iostat -t （包含时间戳）。 显示 CPU 和磁盘利用率的详细信息：iostat -m （以兆字节为单位显示）。 查看 CPU 使用情况：iostat -c （只显示 CPU 统计数据）。 I/O 监控 iotop 命令\n：\niotop 用于实时监控 I/O 使用情况。 需要 root 权限，可以使用 sudo iotop 来执行该命令。 CPU 统计信息 mpstat 命令\n：\n使用 mpstat 报告 CPU 统计信息。 显示 CPU 中断数：mpstat -I SUM。 虚拟内存统计 vmstat 命令\n：\n查看所有虚拟内存的统计信息：vmstat -a。 输出磁盘统计数据：vmstat -d。 报告虚拟内存统计的详细信息：vmstat -s。 shell 编程基础 shell入门编程实例 Linux C++引用 Linux C++智能指针 unique_ptr shared_ptr weak_ptr 为什么要使用 weak_ptr指针: 为了解决 shared ptr 循环引用问题。\nLinux客户端与服务器 Linux IO 多路复用 ","permalink":"//localhost:1313/posts/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/","summary":"\u003ch1 id=\"常用指令\"\u003e常用指令\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003evim    访问文本\u003c/li\u003e\n\u003cli\u003e退出文本并保存       :wq\u003c/li\u003e\n\u003cli\u003e返回到上一个文件夹    cd . .\u003c/li\u003e\n\u003cli\u003e解压指令         tar  -zxvf   xxxx.tar.gz\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"vi----vim-操作\"\u003evi    vim 操作\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003ei o a r  进入vim\u003c/li\u003e\n\u003cli\u003e按下esc , 输入**:**   然后输入wq  保存并退出            :q退出      :q!  不保存退出\u003c/li\u003e\n\u003cli\u003eyy 拷贝    5yy\u003c/li\u003e\n\u003cli\u003edd 删除   5dd\u003c/li\u003e\n\u003cli\u003e撤销  u\u003c/li\u003e\n\u003cli\u003e行号打开 :set nu\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"关机\"\u003e关机\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003eshutdown -h  关机\u003c/li\u003e\n\u003cli\u003eshutdown -r  重启\u003c/li\u003e\n\u003cli\u003ereboot  重启\u003c/li\u003e\n\u003cli\u003esync  把内存数据存入磁盘\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"注销用户和登录\"\u003e注销用户和登录\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003elogout\u003c/p\u003e","title":"Linux常用指令"},{"content":"信号与槽机制 PyQt的.ui文件转成.py文件 进入 .ui 文件所在的目录，然后在命令行中输入下面的代码示例。\npyuic5 -x xxxx.ui -o yyyyyy.py\nxxxx.ui 目标文件 \u0026mdash;\u0026gt; yyyyy.py 结果\n设置ui禁止编辑 例如\nui -\u0026gt; tableView -\u0026gt; setEditTriggers(QAbstractItemView::NoEditTriggers); ","permalink":"//localhost:1313/posts/qt_study/","summary":"\u003ch1 id=\"信号与槽机制\"\u003e信号与槽机制\u003c/h1\u003e\n\u003ch2 id=\"heading\"\u003e\u003c/h2\u003e\n\u003ch1 id=\"pyqt的ui文件转成py文件\"\u003ePyQt的\u003ccode\u003e.ui\u003c/code\u003e文件转成\u003ccode\u003e.py\u003c/code\u003e文件\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e进入 \u003ccode\u003e.ui\u003c/code\u003e 文件所在的目录，然后在命令行中输入下面的代码示例。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003epyuic5   -x    xxxx.ui   -o   yyyyyy.py\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003exxxx.ui  目标文件  \u0026mdash;\u0026gt;   yyyyy.py 结果\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"设置ui禁止编辑\"\u003e设置ui禁止编辑\u003c/h1\u003e\n\u003cp\u003e例如\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eui\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etableView\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nf\"\u003esetEditTriggers\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eQAbstractItemView\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eNoEditTriggers\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"Qt开发的学习记录"},{"content":"这是用于测试的文档 This is second post of site.\n$$ a^2 + b^2 = c^2 $$\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;unordered_map\u0026gt; // 使用哈希表 #include \u0026lt;unordered_set\u0026gt; #include \u0026lt;stack\u0026gt; // 使用栈 #include \u0026lt;string\u0026gt; // 使用字符串 #include \u0026lt;utility\u0026gt; #include \u0026lt;cstring\u0026gt; // 有memset将一块内存区域设置为特定的值。 strcpy：复制一个字符串。strcat：连接两个字符串。strlen：获取字符串的长度。strcmp：比较两个字符串。 #include \u0026lt;functional\u0026gt; #include \u0026lt;numeric\u0026gt; using namespace std; typedef long long ll; // 定义long long类型的简写为ll typedef long double ld; // 定义long double类型的简写为ld typedef pair\u0026lt;int, int\u0026gt; pii; // 定义pair\u0026lt;int, int\u0026gt;类型的简写为pii typedef pair\u0026lt;ll, ll\u0026gt; pll; // 定义pair\u0026lt;ll, ll\u0026gt;类型的简写为pll typedef vector\u0026lt;int\u0026gt; vi; // 定义vector\u0026lt;int\u0026gt;类型的简写为vi //--------------------------------模板--------------------------------// class Solution { public: }; int main() { std::vector\u0026lt;int\u0026gt; arr = {5, 3, 8, 1, 2}; std::sort(arr.begin(), arr.end(), std::greater\u0026lt;int\u0026gt;()); for (int num : arr) { std::cout \u0026lt;\u0026lt; num \u0026lt;\u0026lt; \u0026#34; \u0026#34;\u0026lt;\u0026lt;endl; } return 0; } // imgs 11111\n22222\n3333\n","permalink":"//localhost:1313/posts/second-post/","summary":"\u003ch1 id=\"这是用于测试的文档\"\u003e这是用于测试的文档\u003c/h1\u003e\n\u003cp\u003eThis is second post of site.\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003e$$\na^2 + b^2 = c^2\n$$\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;algorithm\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unordered_map\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 使用哈希表\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unordered_set\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stack\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e  \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 使用栈\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 使用字符串\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;utility\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstring\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 有memset将一块内存区域设置为特定的值。 strcpy：复制一个字符串。strcat：连接两个字符串。strlen：获取字符串的长度。strcmp：比较两个字符串。\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;functional\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;numeric\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e       \u003cspan class=\"c1\"\u003e// 定义long long类型的简写为ll\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eld\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// 定义long double类型的简写为ld\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epii\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 定义pair\u0026lt;int, int\u0026gt;类型的简写为pii\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epll\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 定义pair\u0026lt;ll, ll\u0026gt;类型的简写为pll\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003evi\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// 定义vector\u0026lt;int\u0026gt;类型的简写为vi\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//--------------------------------模板--------------------------------//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSolution\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003egreater\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nl\"\u003enum\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"imgs\"\u003eimgs\u003c/h1\u003e\n\u003cp\u003e11111\u003c/p\u003e","title":"Second Post"},{"content":"第一篇博客 感谢 B 站 UP 主 SonnyCalcr 的大力支持，让我得以学习并成功搭建这个个人博客网站。非常感谢他的支持与指导！\n这是这位up主的网站（支持up）：bilibili: SonnyCalcr\n","permalink":"//localhost:1313/posts/firstpost/","summary":"\u003ch1 id=\"第一篇博客\"\u003e第一篇博客\u003c/h1\u003e\n\u003cp\u003e感谢 B 站 UP 主 SonnyCalcr 的大力支持，让我得以学习并成功搭建这个个人博客网站。非常感谢他的支持与指导！\u003c/p\u003e\n\u003cp\u003e这是这位up主的网站（支持up）：\u003ca href=\"https://space.bilibili.com/3493138859559908\"\u003ebilibili: SonnyCalcr\u003c/a\u003e\u003c/p\u003e","title":"FirstPost"},{"content":"","permalink":"//localhost:1313/categories/","summary":"","title":"分类"},{"content":"Love and share !🗽\nNever say never !!!\n","permalink":"//localhost:1313/about/","summary":"about","title":"关于"},{"content":"Blog Free Discussion Area Welcome everyone to share your thoughts and opinions in the comments section of the blog!\nThis website is equipped with giscus, a comment system based on GitHub Discussions. Visitors can leave comments and feedback on the site using GitHub! 📋🖋️\nI will respond to all comments and feedback as soon as possible. 🥰\nIf needed, you can also contact me directly via email: authoritysharing@gmail.com 博客的自由交流区 欢迎大家在博客的评论区分享自己的想法和意见！\n本网站配置了 giscus，这是一个基于 GitHub Discussions 实现的评论系统。访客能够通过 GitHub 在网站上留下评论和反馈！ 📋🖋️\n所有的评论和意见，我会尽快回复所有评论和反馈。🥰\n如有需要，也可以直接通过邮件与我联系：authoritysharing@gmail.com ","permalink":"//localhost:1313/posts/%E7%95%99%E8%A8%80%E6%9D%BF/","summary":"\u003ch1 id=\"blog-free-discussion-area\"\u003eBlog Free Discussion Area\u003c/h1\u003e\n\u003cp\u003eWelcome everyone to share your thoughts and opinions in the comments section of the blog!\u003c/p\u003e\n\u003cp\u003eThis website is equipped with \u003ca href=\"https://giscus.app/zh-CN\"\u003egiscus\u003c/a\u003e, a comment system based on \u003ca href=\"https://docs.github.com/en/discussions\"\u003eGitHub Discussions\u003c/a\u003e. Visitors can leave comments and feedback on the site using GitHub! 📋🖋️\u003c/p\u003e\n\u003cp\u003eI will respond to all comments and feedback as soon as possible. 🥰\u003c/p\u003e\n\u003cp\u003eIf needed, you can also contact me directly via email: \u003ca href=\"mailto:authoritysharing@gmail.com\"\u003eauthoritysharing@gmail.com \u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"博客的自由交流区\"\u003e博客的自由交流区\u003c/h1\u003e\n\u003cp\u003e欢迎大家在博客的评论区分享自己的想法和意见！\u003c/p\u003e","title":"留言板📑Message Board ➡️ 在此留言"},{"content":"Draft cwgo server \u0026ndash;type RPC \u0026ndash;module github.com/cloudwego/biz-demo/gomall/demo/demo_thrift \u0026ndash;service demo_thrift \u0026ndash;idl ../../idl/echo.thrift\n不要心急, 每个人都有自己的时区\n社会 8 - 自然 8 - 生命 5 - 文化 3\n对话 - 图书馆 - 课程询问 - 生活 - 师生\n想法 存放仓库, 存放物品 , 订阅 , 存放100年 , 放入海底 托福计划 托福死莽 100分必须上分 cpp 进度学习 坚持 字节训练营学习 身材管理 健身 托福 100 101\n听力是重点\n加油加油加油 🗽🗽🗽🗽🗽🗽🗽🌎 一定要定点突破 一个一个 上午 阅读 1 篇(词汇题积累) 背作文 背单词 早上背书 听力1篇 下午 口语 (克服听力) 2 tasks 晚上 听力 + 阅读1篇 周末 写作文 , 写完背范文 6:30 起床 出门 阅读 20 \u0026mdash;\u0026gt; 28 加多 8 分 8分\n听力 20 \u0026mdash;\u0026gt; 28 加多 8 分 8分\n口语 15 \u0026mdash;\u0026gt; 23 上分 8 分 8分\n写作 18 \u0026mdash;\u0026gt; 23 上分 5 分 5分\n","permalink":"//localhost:1313/posts/000aaadraft/","summary":"\u003ch1 id=\"draft\"\u003eDraft\u003c/h1\u003e\n\u003chr\u003e\n\u003cp\u003ecwgo server \u0026ndash;type RPC \u0026ndash;module github.com/cloudwego/biz-demo/gomall/demo/demo_thrift  \u0026ndash;service demo_thrift  \u0026ndash;idl ../../idl/echo.thrift\u003c/p\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003e不要心急, 每个人都有自己的时区\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e社会 8 - 自然 8  - 生命 5 - 文化 3\u003c/p\u003e\n\u003cp\u003e对话 - 图书馆 - 课程询问 - 生活 - 师生\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"想法\"\u003e想法\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e存放仓库, 存放物品 , 订阅 , 存放100年 , 放入海底\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch1 id=\"托福计划\"\u003e托福计划\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e托福死莽  \u003cstrong\u003e100分\u003c/strong\u003e必须上分\u003c/li\u003e\n\u003cli\u003ecpp 进度学习 坚持\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e字节训练营学习\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e身材管理 健身\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"托福-100\"\u003e托福 100\u003c/h1\u003e\n\u003cp\u003e101\u003c/p\u003e","title":"草稿"},{"content":"问题 我的网站在复制代码时，会把行号也一起复制下来。我尝试了很多办法，但最终决定：\n既然解决不了问题，那就干脆消灭问题吧！😆\n解决办法 在hugo.yaml文件直接增加以下代码, 这段代码的作用是禁用代码块中的行号显示。\nmarkup: highlight: lineNumbers: false ","permalink":"//localhost:1313/posts/%E8%A7%A3%E5%86%B3hugo%E5%A4%8D%E5%88%B6%E8%A1%8C%E5%8F%B7%E9%97%AE%E9%A2%98%E7%9A%84%E5%8A%9E%E6%B3%95/","summary":"\u003ch1 id=\"问题\"\u003e问题\u003c/h1\u003e\n\u003cp\u003e我的网站在复制代码时，会把行号也一起复制下来。我尝试了很多办法，但最终决定：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e既然解决不了问题，那就干脆消灭问题吧！😆\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"解决办法\"\u003e解决办法\u003c/h1\u003e\n\u003cp\u003e在\u003ccode\u003ehugo.yaml\u003c/code\u003e文件直接增加以下代码, 这段代码的作用是禁用代码块中的行号显示。\u003c/p\u003e","title":"解决hugo复制行号问题的办法"},{"content":"Cpp各类模板设置 插入代码模板 \u0026#34;nameXXX\u0026#34;: { \u0026#34;prefix\u0026#34;: \u0026#34;XXX操作码\u0026#34;, \u0026#34;body\u0026#34;: [ \u0026#34;xxxxxx\u0026#34;, \u0026#34;xxxxxx\u0026#34;, \u0026#34;yyyyyy\u0026#34;, \u0026#34;yyyyyy\u0026#34;, \u0026#34;$0\u0026#34; ] }, 头文件 #pragma GCC optimize(\u0026#34;O2\u0026#34;) #include\u0026lt;bits/stdc++.h\u0026gt; #include \u0026lt;iostream\u0026gt; // cin/cout #include \u0026lt;cstdio\u0026gt; // printf/scanf #include \u0026lt;algorithm\u0026gt; #include \u0026lt;vector\u0026gt; // 容器 #include \u0026lt;string\u0026gt; // 字符串 #include \u0026lt;stack\u0026gt; // 栈 #include \u0026lt;queue\u0026gt; // 队列 #include \u0026lt;unordered_map\u0026gt; // 哈希表 #include \u0026lt;unordered_set\u0026gt; // 哈希表 set #include \u0026lt;memory\u0026gt; // 智能指针 #include \u0026lt;functional\u0026gt; #include \u0026lt;numeric\u0026gt; #include \u0026lt;ranges\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;bitset\u0026gt; #include \u0026lt;cmath\u0026gt; using namespace std; typedef long long ll; // long long为ll typedef long double ld; // long doubleld typedef pair\u0026lt;int, int\u0026gt; pii; // pair\u0026lt;int, int\u0026gt;pii typedef pair\u0026lt;ll, ll\u0026gt; pll; // pair\u0026lt;ll, ll\u0026gt;pll typedef vector\u0026lt;int\u0026gt; vi; // vector\u0026lt;int\u0026gt;vi const long long inf = numeric_limits\u0026lt;long long\u0026gt;::max(); // 无穷大 const int N = 100100; // 100 百 , 100100 十万 , 1100100 一百万 , 100100100 一亿 void Mysolve(){ } int main(){ ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); //---------优化 Mysolve(); return 0; } cpp.json 设置\n{ \u0026#34;HEADER\u0026#34;: { \u0026#34;prefix\u0026#34;: \u0026#34;H\u0026#34;, \u0026#34;body\u0026#34;: [ \u0026#34;#pragma GCC optimize(\\\u0026#34;O2\\\u0026#34;)\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;#include\u0026lt;bits/stdc++.h\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;iostream\u0026gt; // cin/cout\u0026#34;, \u0026#34;#include \u0026lt;cstdio\u0026gt; // printf/scanf\u0026#34;, \u0026#34;#include \u0026lt;algorithm\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;vector\u0026gt; // 容器\u0026#34;, \u0026#34;#include \u0026lt;string\u0026gt; // 字符串\u0026#34;, \u0026#34;#include \u0026lt;stack\u0026gt; // 栈\u0026#34;, \u0026#34;#include \u0026lt;queue\u0026gt; // 队列\u0026#34;, \u0026#34;#include \u0026lt;unordered_map\u0026gt; // 哈希表\u0026#34;, \u0026#34;#include \u0026lt;unordered_set\u0026gt; // 哈希表 set\u0026#34;, \u0026#34;#include \u0026lt;memory\u0026gt; // 智能指针\u0026#34;, \u0026#34;#include \u0026lt;functional\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;numeric\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;ranges\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;cstring\u0026gt; \u0026#34;, \u0026#34;#include \u0026lt;bitset\u0026gt;\u0026#34;, \u0026#34;#include \u0026lt;cmath\u0026gt;\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;using namespace std;\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;typedef long long ll; // long long为ll\u0026#34;, \u0026#34;typedef long double ld; // long doubleld\u0026#34;, \u0026#34;typedef pair\u0026lt;int, int\u0026gt; pii; // pair\u0026lt;int, int\u0026gt;pii\u0026#34;, \u0026#34;typedef pair\u0026lt;ll, ll\u0026gt; pll; // pair\u0026lt;ll, ll\u0026gt;pll\u0026#34;, \u0026#34;typedef vector\u0026lt;int\u0026gt; vi; // vector\u0026lt;int\u0026gt;vi\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;const long long inf = numeric_limits\u0026lt;long long\u0026gt;::max(); // 无穷大\u0026#34;, \u0026#34;const int N = 100100; // 100100 十万 , 1100100 一百万 , 100100100 一亿\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;void Mysolve(){\u0026#34;, \u0026#34; \u0026#34;, \u0026#34;}\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;int main(){\u0026#34;, \u0026#34; ios::sync_with_stdio(false);\u0026#34;, \u0026#34; cin.tie(NULL);\u0026#34;, \u0026#34; cout.tie(NULL);\u0026#34;, \u0026#34; //---------优化\u0026#34;, \u0026#34;\u0026#34;, \u0026#34; Mysolve();\u0026#34;, \u0026#34; return 0;\u0026#34;, \u0026#34;}\u0026#34;, \u0026#34;$0\u0026#34; ] }, } leetcode模板 \u0026#34;leetcode\u0026#34;: { \u0026#34;prefix\u0026#34;: \u0026#34;lc\u0026#34;, \u0026#34;body\u0026#34;: [ \u0026#34;#pragma GCC optimize(\\\u0026#34;O2\\\u0026#34;)\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;#include\u0026lt;bits/stdc++.h\u0026gt;\u0026#34;, \u0026#34;using namespace std;\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;const long long inf = numeric_limits\u0026lt;long long\u0026gt;::max();\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;$0\u0026#34; ] }, 算法模板\n高精度算法 ","permalink":"//localhost:1313/posts/cppvscode%E6%A8%A1%E6%9D%BF/","summary":"\u003ch1 id=\"cpp各类模板设置\"\u003eCpp各类模板设置\u003c/h1\u003e\n\u003ch2 id=\"插入代码模板\"\u003e插入代码模板\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e\u0026#34;nameXXX\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026#34;prefix\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;XXX操作码\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026#34;body\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;xxxxxx\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;xxxxxx\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;yyyyyy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;yyyyyy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"s2\"\u003e\u0026#34;$0\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"头文件\"\u003e头文件\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#pragma GCC optimize(\u0026#34;O2\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u0026lt;bits/stdc++.h\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e      \u003c/span\u003e\u003cspan class=\"c1\"\u003e// cin/cout\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// printf/scanf\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;algorithm\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 容器\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 字符串\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stack\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e         \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 栈\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;queue\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e         \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 队列\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unordered_map\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 哈希表\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unordered_set\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 哈希表 set\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;memory\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 智能指针\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;functional\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;numeric\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;ranges\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstring\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;bitset\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cmath\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e       \u003cspan class=\"c1\"\u003e// long long为ll\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eld\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// long doubleld\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epii\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// pair\u0026lt;int, int\u0026gt;pii\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epll\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// pair\u0026lt;ll, ll\u0026gt;pll\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003evi\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// vector\u0026lt;int\u0026gt;vi\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003einf\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 无穷大\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e100100\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 100 百 , 100100 十万 , 1100100 一百万 , 100100100 一亿\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eMysolve\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eios\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esync_with_stdio\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ecin\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etie\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etie\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//---------优化\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eMysolve\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003ecpp.json 设置\u003c/p\u003e","title":"CppVsCode代码快捷模板"},{"content":"灵神题单 分享｜如何科学刷题？ - 力扣（LeetCode）\n前言 怎么刷算法题？按照什么顺序刷题？如何科学地刷题训练？\n如果你刚接触力扣，还不熟悉基本编程语法和常用库函数，推荐刷力扣官方的入门题单：\n「新」动计划 · 编程入门 编程基础 0 到 1 有了一些简单题的积累，就可以开始刷我的题单啦~\n分享｜如何科学刷题？ - 力扣（LeetCode） 打开链接 找灵神\n滑动窗口与双指针（定长/不定长/单序列/双序列/三指针） 二分算法（二分答案/最小化最大值/最大化最小值/第K小） 单调栈（基础/矩形面积/贡献法/最小字典序） 网格图（DFS/BFS/综合应用） 位运算（基础/性质/拆位/试填/恒等式/思维） 图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径） 动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望） 常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树） 数学算法（数论/组合/概率期望/博弈/计算几何/随机算法） 贪心与思维（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造） 链表、二叉树与一般树（前后指针/快慢指针/DFS/BFS/直径/LCA） 字符串（KMP/Z函数/Manacher/字符串哈希/AC自动机/后缀数组/子序列自动机） 对于动态规划，至少要做 100 100 道才算入门。\n优点：突击训练特定知识点，可以掌握常用算法套路。按照题单专题刷，一个套路可以解决多个题目，刷题效率高。此外，做同一个专题下的题目，相当于在从不同的角度去观察、思考同一个算法，这能让你更加深刻地理解算法的本质。\n缺点：提前知道题目类型，跳过了一些思考步骤。但比赛/笔试是不会告诉你这题是什么类型的，把 DP 想成贪心的大有人在。可以结合下面的训练方法，锻炼自己判断题目类型的能力。\n训练方法 A 要点：\n按照专题刷题。同一个专题下的题目，套路是一样的，刷题效率杠杠滴~ 从易到难，量力而行。题目已经按照难度分整理好了，按照顺序刷就行~ 推荐先刷【滑动窗口】和【二分】题单，这是两个最基础的算法，套路也较为固定，刷题过程中还可以学到一些做题技巧。其他题单可以按照自己的兴趣选择。\n请结合【基础算法精讲】学习。\n推荐安装 这个插件，可以在题单中自动标记做过的题目。\n训练方法 B 随机刷题，注意控制难度范围，太简单和太难的题目都不能让你进入「心流通道」。\n打开 难度练习。 在设置中关闭算法标签。 选择适合自己的难度范围，开刷！ 优点：做题时不知道题目类型，可以训练实战能力。\n缺点：知识点有些零散，适合已经掌握常用算法的同学查漏补缺，检验自己的学习成果。\n训练方法 C 如果时间很少，可以突击训练 HOT 100。\n最好能默写下来程度\nLeetCode 热题 100 - 学习计划 - 力扣（LeetCode）全球极客挚爱的技术成长平台\n作者：灵茶山艾府 链接：https://leetcode.cn/circle/discuss/RvFUtj/ 来源：力扣（LeetCode） 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n","permalink":"//localhost:1313/posts/leetcode%E5%88%B7%E9%A2%98%E9%A2%98%E5%8D%95/","summary":"\u003ch1 id=\"灵神题单\"\u003e灵神题单\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://leetcode.cn/circle/discuss/RvFUtj/\"\u003e分享｜如何科学刷题？ - 力扣（LeetCode）\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e前言\n怎么刷算法题？按照什么顺序刷题？如何科学地刷题训练？\u003c/p\u003e\n\u003cp\u003e如果你刚接触力扣，还不熟悉基本编程语法和常用库函数，推荐刷力扣官方的入门题单：\u003c/p\u003e","title":"Leetcode刷题题单"},{"content":"Xshell突出显示配置 将命名为 XshellColor.hls 的文件准备好。\n将该文件放置到以下目录： C:\\Users\\Your_name\\Documents\\NetSarang Computer\\7\\Xshell\\HighlightSet Files\n（请将 Your_name 替换为您的实际用户名）\n打开 Xshell 后，即可在颜色设置中选择该高亮配置文件。\n我这是黑暗版风格, 偏护眼\n[Keyword_0] TermBackColor=1 Underline=1 Bold=0 Strikeout=0 Keyword=[_a-z0-9-]+(.[_a-z0-9-]+)*@[a-z0-9-]+(.[a-z0-9-]+)* Description=Email address BackColorIndex=286 UseRegex=1 Italic=0 Enable=0 TextColorIndex=286 CaseSens=0 [Keyword_1] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(?=(\\b|\\D))(((\\d{1,2})|(1\\d{1,2})|(2[0-4]\\d)|(25[0-5]))\\.){3}((\\d{1,2})|(1\\d{1,2})|(2[0-4]\\d)|(25[0-5]))(?=(\\b|\\D))\\s* Description=IPv4 BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=295 CaseSens=0 [Keyword_2] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=[\\[ ]?\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*\\]? Description=IPv6 BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=294 CaseSens=0 [Keyword_3] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(\\berror\\b)|(\\bfail(ed)?\\b)|(\\bfalse\\b)|(\\bdown\\b)|(\\blocked\\b) Description=error, fail, false, down BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=290 CaseSens=0 [Keyword_4] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(\\bactive(d)?\\b)|(\\bsuccess(ful(ly)?)?\\b)|(\\btrue\\b)|(\\bok\\b)|(\\bup\\b)|(\\brunning\\b)|(\\bdeployed\\b)|(\\bunlocked\\b) Description=active, success, true, ok, up BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=291 CaseSens=0 [Keyword_5] TermBackColor=1 Underline=1 Bold=1 Strikeout=0 Keyword=(\\bstart(ed|ing)?\\b)|(\\bbegin(ning)?\\b)|(\\benable(d)?\\b)|(\\bcreate(d)?\\b)|(\\bopen\\b) Description=start, begin, enable, create, open BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=291 CaseSens=0 [Keyword_6] TermBackColor=1 Underline=1 Bold=1 Strikeout=0 Keyword=(\\bstop(ped)?\\b)|(\\bend\\b)|(\\bfinish(ed)?\\b)|(\\bdisable(d)?\\b)|(\\bdelete(d)?\\b)|(\\bclose(d)?\\b) Description=stop, end, finish, disable, delete BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=293 CaseSens=0 [Keyword_7] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(\\bwarn(ing)?\\b)|(\\binactive\\b)|(\\bunknown\\b) Description=warn, inactive, unknown BackColorIndex=292 UseRegex=1 Italic=1 Enable=1 TextColorIndex=282 CaseSens=0 [Colors] Colors=000000,00E4FF,000040,0080FF,400000,C08080,8080FF,C0C0C0,555555,5555FF,55FF55,55FFFF,FF5555,FF55FF,FFFF55,FFFFFF [Keyword_8] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=(\\binfo\\b) Description=info BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=291 CaseSens=0 [Keyword_9] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=\\bDEBUG\\b Description=debug BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=293 CaseSens=0 [info] Version=1.1 Count=12 [Keyword_10] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=\\/\\b(\\d|([1-9]\\d)|(1[01]\\d)|(12[0-8]))\\b Description=CIDR BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=284 CaseSens=0 [Keyword_11] TermBackColor=1 Underline=0 Bold=1 Strikeout=0 Keyword=([a-zA-Z0-9._-]+@([a-zA-Z0-9_-]+\\.)+[a-zA-Z0-9_-]+) Description=Email Regex BackColorIndex=292 UseRegex=1 Italic=0 Enable=1 TextColorIndex=286 CaseSens=0 ","permalink":"//localhost:1313/posts/xshell%E4%B8%BB%E9%A2%98%E9%85%8D%E8%89%B2%E6%96%87%E4%BB%B6/","summary":"\u003ch1 id=\"xshell突出显示配置\"\u003e\u003ccode\u003eXshell\u003c/code\u003e突出显示配置\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e将命名为 \u003cstrong\u003e\u003ccode\u003eXshellColor.hls\u003c/code\u003e\u003c/strong\u003e 的文件准备好。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e将该文件放置到以下目录：\n\u003cstrong\u003e\u003ccode\u003eC:\\Users\\Your_name\\Documents\\NetSarang Computer\\7\\Xshell\\HighlightSet Files\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e（请将 \u003ccode\u003eYour_name\u003c/code\u003e 替换为您的实际用户名）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e打开 Xshell 后，即可在颜色设置中选择该高亮配置文件。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e我这是黑暗版风格, 偏护眼\u003c/p\u003e","title":"Xshell主题配色文件"},{"content":"加上具体的例子 Add specific examples 帮我理顺并润色以上内容 help me organize and refine the content above. 科学写作专家 - 学术写作 want you to act as an expert in scientific writing, l will provide you with some paragraphs in English and your task is to improve the spelling, grammar clarity, conciseness and overalreadability of the text providedwhile breaking down longsentences, reducing repetitionand providing improvementsuggestions. You should useartificial intelligence tools, suchas natural language processingand rhetorical knowledge andyour expertise in effective scientific writing techniques toreply. Provide the output as a markdown table with the head in Chinese. The first column is the originasentence, and the secondcolumn is the sentence afterediting and the third columnprovides explanation in Chinese Please edit the following text in a scientific tone: ","permalink":"//localhost:1313/posts/ai%E6%8F%90%E7%A4%BA%E8%AF%8D%E6%B1%87%E6%80%BB/","summary":"\u003ch1 id=\"加上具体的例子\"\u003e加上具体的例子\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eAdd\u003c/span\u003e \u003cspan class=\"nx\"\u003especific\u003c/span\u003e \u003cspan class=\"nx\"\u003eexamples\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"帮我理顺并润色以上内容\"\u003e帮我理顺并润色以上内容\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ehelp\u003c/span\u003e \u003cspan class=\"n\"\u003eme\u003c/span\u003e \u003cspan class=\"n\"\u003eorganize\u003c/span\u003e \u003cspan class=\"n\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003erefine\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003econtent\u003c/span\u003e \u003cspan class=\"n\"\u003eabove\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"科学写作专家---学术写作\"\u003e科学写作专家 - 学术写作\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ewant\u003c/span\u003e \u003cspan class=\"n\"\u003eyou\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e \u003cspan class=\"n\"\u003eact\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003ean\u003c/span\u003e \u003cspan class=\"n\"\u003eexpert\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003escientific\u003c/span\u003e \u003cspan class=\"n\"\u003ewriting\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"n\"\u003ewill\u003c/span\u003e \u003cspan class=\"n\"\u003eprovide\u003c/span\u003e \u003cspan class=\"n\"\u003eyou\u003c/span\u003e \u003cspan class=\"k\"\u003ewith\u003c/span\u003e \u003cspan class=\"n\"\u003esome\u003c/span\u003e \u003cspan class=\"n\"\u003eparagraphs\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eEnglish\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003eyour\u003c/span\u003e \u003cspan class=\"n\"\u003etask\u003c/span\u003e \u003cspan class=\"ow\"\u003eis\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e \u003cspan class=\"n\"\u003eimprove\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003espelling\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003egrammar\u003c/span\u003e \u003cspan class=\"n\"\u003eclarity\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003econciseness\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003eoveralreadability\u003c/span\u003e \u003cspan class=\"n\"\u003eof\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"n\"\u003eprovidedwhile\u003c/span\u003e \u003cspan class=\"n\"\u003ebreaking\u003c/span\u003e \u003cspan class=\"n\"\u003edown\u003c/span\u003e \u003cspan class=\"n\"\u003elongsentences\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ereducing\u003c/span\u003e \u003cspan class=\"n\"\u003erepetitionand\u003c/span\u003e \u003cspan class=\"n\"\u003eproviding\u003c/span\u003e \u003cspan class=\"n\"\u003eimprovementsuggestions\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"n\"\u003eYou\u003c/span\u003e \u003cspan class=\"n\"\u003eshould\u003c/span\u003e \u003cspan class=\"n\"\u003euseartificial\u003c/span\u003e \u003cspan class=\"n\"\u003eintelligence\u003c/span\u003e \u003cspan class=\"n\"\u003etools\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esuchas\u003c/span\u003e \u003cspan class=\"n\"\u003enatural\u003c/span\u003e \u003cspan class=\"n\"\u003elanguage\u003c/span\u003e \u003cspan class=\"n\"\u003eprocessingand\u003c/span\u003e \u003cspan class=\"n\"\u003erhetorical\u003c/span\u003e \u003cspan class=\"n\"\u003eknowledge\u003c/span\u003e \u003cspan class=\"n\"\u003eandyour\u003c/span\u003e \u003cspan class=\"n\"\u003eexpertise\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eeffective\u003c/span\u003e \u003cspan class=\"n\"\u003escientific\u003c/span\u003e \u003cspan class=\"n\"\u003ewriting\u003c/span\u003e \u003cspan class=\"n\"\u003etechniques\u003c/span\u003e \u003cspan class=\"n\"\u003etoreply\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"n\"\u003eProvide\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003eoutput\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003emarkdown\u003c/span\u003e \u003cspan class=\"n\"\u003etable\u003c/span\u003e \u003cspan class=\"k\"\u003ewith\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003ehead\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eChinese\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"n\"\u003eThe\u003c/span\u003e \u003cspan class=\"n\"\u003efirst\u003c/span\u003e \u003cspan class=\"n\"\u003ecolumn\u003c/span\u003e \u003cspan class=\"ow\"\u003eis\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003eoriginasentence\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003esecondcolumn\u003c/span\u003e \u003cspan class=\"ow\"\u003eis\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003esentence\u003c/span\u003e \u003cspan class=\"n\"\u003eafterediting\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003ethird\u003c/span\u003e \u003cspan class=\"n\"\u003ecolumnprovides\u003c/span\u003e \u003cspan class=\"n\"\u003eexplanation\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eChinese\u003c/span\u003e \u003cspan class=\"n\"\u003ePlease\u003c/span\u003e \u003cspan class=\"n\"\u003eedit\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003efollowing\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003escientific\u003c/span\u003e \u003cspan class=\"n\"\u003etone\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"heading\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-1\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-2\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-3\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-4\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-5\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-6\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-7\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-8\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-9\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-10\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-11\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-12\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-13\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-14\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-15\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-16\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-17\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-18\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-19\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-20\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-21\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-22\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-23\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-24\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-25\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-26\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-27\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-28\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-29\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-30\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-31\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-32\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-33\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-34\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-35\"\u003e\u003c/h1\u003e\n\u003ch1 id=\"heading-36\"\u003e\u003c/h1\u003e","title":"AI提示词汇总"},{"content":"什么是加密 ","permalink":"//localhost:1313/posts/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E5%92%8C%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%9A%84%E6%80%9D%E8%80%83/","summary":"\u003ch1 id=\"什么是加密\"\u003e什么是加密\u003c/h1\u003e","title":"对称加密和非对称加密的思考"},{"content":" 我的 vscode 的设置.json文件\n2024.11.12 设置 { \u0026#34;editor.fontSize\u0026#34;: 16, \u0026#34;cph.general.autoShowJudge\u0026#34;: false, \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;editor.formatOnType\u0026#34;: true, \u0026#34;files.autoSave\u0026#34;: \u0026#34;afterDelay\u0026#34;, \u0026#34;git.confirmSync\u0026#34;: false, \u0026#34;chat.editor.fontSize\u0026#34;: 18, \u0026#34;window.zoomLevel\u0026#34;: 1, \u0026#34;editor.mouseWheelZoom\u0026#34;: true, \u0026#34;editor.wordWrap\u0026#34;: \u0026#34;on\u0026#34;, \u0026#34;debug.onTaskErrors\u0026#34;: \u0026#34;debugAnyway\u0026#34;, \u0026#34;explorer.confirmDelete\u0026#34;: false, \u0026#34;extensions.experimental.affinity\u0026#34;: { \u0026#34;asvetliakov.vscode-neovim\u0026#34;: 1 }, \u0026#34;workbench.settings.applyToAllProfiles\u0026#34;: [ \u0026#34;editor.fontSize\u0026#34; ], \u0026#34;go.delveConfig\u0026#34;: {}, \u0026#34;[javascript]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;esbenp.prettier-vscode\u0026#34; }, \u0026#34;[markdown]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;esbenp.prettier-vscode\u0026#34; }, \u0026#34;[prisma]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;Prisma.prisma\u0026#34; }, \u0026#34;[typescript]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;esbenp.prettier-vscode\u0026#34; }, \u0026#34;[typescriptreact]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;esbenp.prettier-vscode\u0026#34; }, \u0026#34;editor.codeActionsOnSave\u0026#34;: { \u0026#34;source.addMissingImports\u0026#34;: \u0026#34;explicit\u0026#34;, \u0026#34;source.organizeImports\u0026#34;: \u0026#34;explicit\u0026#34; }, \u0026#34;editor.cursorSmoothCaretAnimation\u0026#34;: \u0026#34;on\u0026#34;, \u0026#34;editor.cursorSurroundingLines\u0026#34;: 5, \u0026#34;editor.fontFamily\u0026#34;: \u0026#34;CaskaydiaCove Nerd Font\u0026#34;, \u0026#34;editor.fontLigatures\u0026#34;: true, \u0026#34;python.analysis.completeFunctionParens\u0026#34;: true, \u0026#34;editor.fontSize\u0026#34;: 18, \u0026#34;editor.fontWeight\u0026#34;: \u0026#34;300\u0026#34;, \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;editor.inlineSuggest.enabled\u0026#34;: true, \u0026#34;editor.lineNumbers\u0026#34;: \u0026#34;relative\u0026#34;, \u0026#34;editor.linkedEditing\u0026#34;: true, \u0026#34;editor.smoothScrolling\u0026#34;: true, \u0026#34;editor.stickyScroll.enabled\u0026#34;: true, \u0026#34;editor.suggest.insertMode\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;editor.suggestFontSize\u0026#34;: 14, \u0026#34;editor.wordWrap\u0026#34;: \u0026#34;on\u0026#34;, \u0026#34;errorLens.fontStyleItalic\u0026#34;: true, \u0026#34;everforest.italicKeywords\u0026#34;: true, \u0026#34;explorer.confirmDelete\u0026#34;: false, \u0026#34;explorer.confirmDragAndDrop\u0026#34;: false, \u0026#34;extensions.autoUpdate\u0026#34;: \u0026#34;onlyEnabledExtensions\u0026#34;, \u0026#34;extensions.ignoreRecommendations\u0026#34;: false, \u0026#34;files.exclude\u0026#34;: { \u0026#34;**/node_modules\u0026#34;: true }, \u0026#34;prettier.semi\u0026#34;: false, \u0026#34;prettier.singleAttributePerLine\u0026#34;: true, \u0026#34;prettier.singleQuote\u0026#34;: true, \u0026#34;prettier.trailingComma\u0026#34;: \u0026#34;all\u0026#34;, \u0026#34;projectManager.git.baseFolders\u0026#34;: [ \u0026#34;$home/workspace\u0026#34; ], \u0026#34;projectManager.sortList\u0026#34;: \u0026#34;Recent\u0026#34;, \u0026#34;sortJSON.orderOverride\u0026#34;: [ \u0026#34;name\u0026#34;, \u0026#34;version\u0026#34;, \u0026#34;main\u0026#34;, \u0026#34;module\u0026#34;, \u0026#34;types\u0026#34;, \u0026#34;typings\u0026#34;, \u0026#34;files\u0026#34;, \u0026#34;publishConfig\u0026#34;, \u0026#34;repository\u0026#34;, \u0026#34;scripts\u0026#34;, \u0026#34;prefix\u0026#34;, \u0026#34;description\u0026#34;, \u0026#34;body\u0026#34; ], \u0026#34;sortJSON.orderUnderride\u0026#34;: [ \u0026#34;resolutions\u0026#34;, \u0026#34;dependencies\u0026#34;, \u0026#34;devDependencies\u0026#34;, \u0026#34;peerDependencies\u0026#34;, \u0026#34;cSpell.userWords\u0026#34; ], \u0026#34;typescript.preferences.importModuleSpecifier\u0026#34;: \u0026#34;relative\u0026#34;, \u0026#34;typescript.updateImportsOnFileMove.enabled\u0026#34;: \u0026#34;always\u0026#34;, \u0026#34;update.showReleaseNotes\u0026#34;: false, \u0026#34;vim.foldfix\u0026#34;: true, \u0026#34;vim.highlightedyank.color\u0026#34;: \u0026#34;rgba(230, 97, 89, 0.7)\u0026#34;, \u0026#34;vim.highlightedyank.enable\u0026#34;: true, \u0026#34;vim.highlightedyank.textColor\u0026#34;: \u0026#34;white\u0026#34;, \u0026#34;vim.hlsearch\u0026#34;: true, \u0026#34;vim.leader\u0026#34;: \u0026#34;\u0026lt;space\u0026gt;\u0026#34;, \u0026#34;vim.normalModeKeyBindingsNonRecursive\u0026#34;: [ { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;r\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.rename\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;w\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;:w!\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;q\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;:q!\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;x\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;:x!\u0026#34; ] }, { \u0026#34;after\u0026#34;: [ \u0026#34;g\u0026#34;, \u0026#34;g\u0026#34;, \u0026#34;V\u0026#34;, \u0026#34;G\u0026#34; ], \u0026#34;before\u0026#34;: [ \u0026#34;\u0026lt;c-a\u0026gt;\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;\u0026lt;leader\u0026gt;\u0026#34;, \u0026#34;k\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.showHover\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;[\u0026#34;, \u0026#34;d\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.marker.prev\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;]\u0026#34;, \u0026#34;d\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.marker.next\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;\u0026lt;leader\u0026gt;\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;a\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;editor.action.quickFix\u0026#34; ] }, { \u0026#34;after\u0026#34;: [ \u0026#34;^\u0026#34; ], \u0026#34;before\u0026#34;: [ \u0026#34;H\u0026#34; ] }, { \u0026#34;after\u0026#34;: [ \u0026#34;$\u0026#34; ], \u0026#34;before\u0026#34;: [ \u0026#34;L\u0026#34; ] }, { \u0026#34;before\u0026#34;: [ \u0026#34;leader\u0026#34;, \u0026#34;i\u0026#34; ], \u0026#34;commands\u0026#34;: [ \u0026#34;extension.toggleBool\u0026#34; ] } ], \u0026#34;vim.useSystemClipboard\u0026#34;: true, \u0026#34;window.zoomLevel\u0026#34;: 1, \u0026#34;workbench.iconTheme\u0026#34;: \u0026#34;Monokai Pro Icons\u0026#34;, \u0026#34;workbench.settings.editor\u0026#34;: \u0026#34;json\u0026#34;, \u0026#34;workbench.startupEditor\u0026#34;: \u0026#34;readme\u0026#34;, \u0026#34;zenMode.hideLineNumbers\u0026#34;: false, \u0026#34;vsicons.dontShowNewVersionMessage\u0026#34;: true, \u0026#34;[jsonc]\u0026#34;: { \u0026#34;editor.quickSuggestions\u0026#34;: { \u0026#34;strings\u0026#34;: true }, \u0026#34;editor.suggest.insertMode\u0026#34;: \u0026#34;replace\u0026#34; }, \u0026#34;terminal.integrated.defaultProfile.windows\u0026#34;: \u0026#34;Command Prompt\u0026#34;, \u0026#34;terminal.explorerKind\u0026#34;: \u0026#34;external\u0026#34;, \u0026#34;security.workspace.trust.enabled\u0026#34;: false, \u0026#34;typescript.disableAutomaticTypeAcquisition\u0026#34;: true, \u0026#34;git.enableSmartCommit\u0026#34;: true, \u0026#34;git.openRepositoryInParentFolders\u0026#34;: \u0026#34;always\u0026#34;, \u0026#34;files.autoGuessEncoding\u0026#34;: true, \u0026#34;code-runner.languageIdToFileExtensionMap\u0026#34;: { \u0026#34;bat\u0026#34;: \u0026#34;.bat\u0026#34;, \u0026#34;powershell\u0026#34;: \u0026#34;.ps1\u0026#34;, \u0026#34;typescript\u0026#34;: \u0026#34;.ts\u0026#34; }, \u0026#34;vim.easymotion\u0026#34;: true, // \u0026#34;editor.formatOnType\u0026#34;: true, // \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;go.formatTool\u0026#34;: \u0026#34;gofmt\u0026#34;, \u0026#34;[go]\u0026#34;: { \u0026#34;editor.insertSpaces\u0026#34;: true, \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;editor.codeActionsOnSave\u0026#34;: { \u0026#34;source.organizeImports\u0026#34;: \u0026#34;explicit\u0026#34; }, \u0026#34;editor.suggest.snippetsPreventQuickSuggestions\u0026#34;: false }, \u0026#34;animations.Install-Method\u0026#34;: \u0026#34;Custom CSS and JS\u0026#34;, \u0026#34;apc.imports\u0026#34;: [ \u0026#34;file:///c:/Users/zhang/.vscode/extensions/brandonkirbyson.vscode-animations-2.0.3/dist/updateHandler.js\u0026#34; ], \u0026#34;animations.CursorAnimation\u0026#34;: true, \u0026#34;animations.CursorAnimationOptions\u0026#34;: { \u0026#34;Color\u0026#34;: \u0026#34;#ffb6c1\u0026#34;, \u0026#34;TrailLength\u0026#34;: 8 }, \u0026#34;animations.Smooth-Mode\u0026#34;: false, \u0026#34;marscode.codeCompletionPro\u0026#34;: { \u0026#34;enableCodeCompletionPro\u0026#34;: true }, \u0026#34;marscode.enableCodelens\u0026#34;: { \u0026#34;enableInlineUnitTest\u0026#34;: false, \u0026#34;enableInlineDocumentation\u0026#34;: false }, \u0026#34;vscode_custom_css.imports\u0026#34;: [ \u0026#34;file:///c:/Users/zhang/.vscode/extensions/brandonkirbyson.vscode-animations-2.0.4/dist/updateHandler.js\u0026#34; ] } ","permalink":"//localhost:1313/posts/vscodesetting%E9%85%8D%E7%BD%AE/","summary":"\u003cblockquote\u003e\n\u003cp\u003e我的 \u003ccode\u003evscode\u003c/code\u003e 的设置\u003ccode\u003e.json\u003c/code\u003e文件\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"20241112-设置\"\u003e2024.11.12 设置\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontSize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;cph.general.autoShowJudge\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.formatOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.formatOnType\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;files.autoSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;afterDelay\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;git.confirmSync\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;chat.editor.fontSize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;window.zoomLevel\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.mouseWheelZoom\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.wordWrap\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;on\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;debug.onTaskErrors\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;debugAnyway\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;explorer.confirmDelete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;extensions.experimental.affinity\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;asvetliakov.vscode-neovim\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;workbench.settings.applyToAllProfiles\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;editor.fontSize\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;go.delveConfig\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[javascript]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;esbenp.prettier-vscode\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[markdown]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;esbenp.prettier-vscode\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[prisma]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Prisma.prisma\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[typescript]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;esbenp.prettier-vscode\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[typescriptreact]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.defaultFormatter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;esbenp.prettier-vscode\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.codeActionsOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;source.addMissingImports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;explicit\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;source.organizeImports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;explicit\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.cursorSmoothCaretAnimation\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;on\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.cursorSurroundingLines\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontFamily\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;CaskaydiaCove Nerd Font\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontLigatures\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;python.analysis.completeFunctionParens\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontSize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.fontWeight\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;300\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.formatOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.inlineSuggest.enabled\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.lineNumbers\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;relative\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.linkedEditing\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.smoothScrolling\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.stickyScroll.enabled\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.suggest.insertMode\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;replace\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.suggestFontSize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e14\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;editor.wordWrap\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;on\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;errorLens.fontStyleItalic\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;everforest.italicKeywords\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;explorer.confirmDelete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;explorer.confirmDragAndDrop\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;extensions.autoUpdate\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;onlyEnabledExtensions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;extensions.ignoreRecommendations\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;files.exclude\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;**/node_modules\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;prettier.semi\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;prettier.singleAttributePerLine\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;prettier.singleQuote\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;prettier.trailingComma\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;all\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;projectManager.git.baseFolders\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;$home/workspace\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;projectManager.sortList\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Recent\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;sortJSON.orderOverride\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;main\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;module\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;types\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;typings\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;files\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;publishConfig\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;repository\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;scripts\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;prefix\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;body\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;sortJSON.orderUnderride\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;resolutions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;dependencies\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;devDependencies\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;peerDependencies\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;cSpell.userWords\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;typescript.preferences.importModuleSpecifier\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;relative\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;typescript.updateImportsOnFileMove.enabled\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;always\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;update.showReleaseNotes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.foldfix\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.highlightedyank.color\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;rgba(230, 97, 89, 0.7)\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.highlightedyank.enable\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.highlightedyank.textColor\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;white\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.hlsearch\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;space\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.normalModeKeyBindingsNonRecursive\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;r\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.rename\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;w\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;:w!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;q\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;:q!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;x\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;:x!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;after\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;g\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;g\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;V\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;G\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;c-a\u0026gt;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;leader\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;k\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.showHover\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;[\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;d\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.marker.prev\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;d\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.marker.next\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;leader\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;c\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;editor.action.quickFix\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;after\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;^\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;H\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;after\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;$\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;L\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;before\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;leader\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;i\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;commands\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;extension.toggleBool\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.useSystemClipboard\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;window.zoomLevel\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;workbench.iconTheme\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Monokai Pro Icons\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;workbench.settings.editor\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;json\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;workbench.startupEditor\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;readme\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;zenMode.hideLineNumbers\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vsicons.dontShowNewVersionMessage\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[jsonc]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.quickSuggestions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;strings\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.suggest.insertMode\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;replace\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;terminal.integrated.defaultProfile.windows\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Command Prompt\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;terminal.explorerKind\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;external\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;security.workspace.trust.enabled\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;typescript.disableAutomaticTypeAcquisition\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;git.enableSmartCommit\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;git.openRepositoryInParentFolders\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;always\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;files.autoGuessEncoding\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;code-runner.languageIdToFileExtensionMap\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;bat\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.bat\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;powershell\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.ps1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;typescript\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.ts\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vim.easymotion\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"c1\"\u003e// \u0026#34;editor.formatOnType\u0026#34;: true,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// \u0026#34;editor.formatOnSave\u0026#34;: true,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;go.formatTool\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;gofmt\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;[go]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.insertSpaces\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.formatOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.codeActionsOnSave\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026#34;source.organizeImports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;explicit\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;editor.suggest.snippetsPreventQuickSuggestions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;animations.Install-Method\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Custom CSS and JS\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;apc.imports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;file:///c:/Users/zhang/.vscode/extensions/brandonkirbyson.vscode-animations-2.0.3/dist/updateHandler.js\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;animations.CursorAnimation\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;animations.CursorAnimationOptions\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;Color\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;#ffb6c1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;TrailLength\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;animations.Smooth-Mode\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;marscode.codeCompletionPro\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;enableCodeCompletionPro\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;marscode.enableCodelens\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;enableInlineUnitTest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;enableInlineDocumentation\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;vscode_custom_css.imports\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s2\"\u003e\u0026#34;file:///c:/Users/zhang/.vscode/extensions/brandonkirbyson.vscode-animations-2.0.4/dist/updateHandler.js\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"VsCodeSetting配置"},{"content":"通过hugo创建md文件 打开power shell , 输入 cd E:\\HugoSite\\Hugo\\CooperZhang (目标文件夹) 进入目标位置后 , 输入 hugo new content content\\posts\\要创建的md文件名称.md 回车 , 完成创建 ","permalink":"//localhost:1313/posts/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87hugo%E5%88%9B%E5%BB%BAmarkdown%E6%96%87%E4%BB%B6/","summary":"\u003ch1 id=\"通过hugo创建md文件\"\u003e通过hugo创建md文件\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e打开power shell , 输入 \u003ccode\u003e cd E:\\HugoSite\\Hugo\\CooperZhang\u003c/code\u003e (目标文件夹)\u003c/li\u003e\n\u003cli\u003e进入目标位置后 , 输入\u003ccode\u003e hugo new content content\\posts\\要创建的md文件名称.md\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e回车 , 完成创建\u003c/li\u003e\n\u003c/ol\u003e","title":"如何通过hugo创建markdown文件"},{"content":"goMall电商项目 搭建环境 选择 goland 脚手架 IDL\ncwgo : 自动生成客服端和服务端的代码 thriftgo : protobuf : 服务注册 与 服务发现 分布式部署\n计算机科学的问题都可以通过增加一层来解决 注册中心 配置管理 数据操作 前端 ","permalink":"//localhost:1313/posts/gomall%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE/","summary":"\u003ch1 id=\"gomall电商项目\"\u003egoMall电商项目\u003c/h1\u003e\n\u003ch2 id=\"搭建环境\"\u003e搭建环境\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e选择 goland\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"脚手架\"\u003e脚手架\u003c/h2\u003e\n\u003cp\u003eIDL\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003ecwgo\u003c/strong\u003e : 自动生成客服端和服务端的代码\u003c/li\u003e\n\u003cli\u003ethriftgo :\u003c/li\u003e\n\u003cli\u003eprotobuf :\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"服务注册-与-服务发现\"\u003e服务注册 与 服务发现\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e分布式部署\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003col\u003e\n\u003cli\u003e计算机科学的问题都可以通过增加一层来解决\u003c/li\u003e\n\u003cli\u003e注册中心\u003c/li\u003e\n\u003cli\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"配置管理\"\u003e配置管理\u003c/h2\u003e\n\u003ch2 id=\"数据操作\"\u003e数据操作\u003c/h2\u003e\n\u003ch2 id=\"前端\"\u003e前端\u003c/h2\u003e","title":"GoMall电商项目"},{"content":" 正常: 买入 加粗: 卖出 名称 时间 成交额 💵 发仔 2024.1016 1535 发仔 2024.1104 1651 +116 ","permalink":"//localhost:1313/posts/economyz/","summary":"\u003cul\u003e\n\u003cli\u003e正常: 买入\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e加粗: 卖出\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: center\"\u003e名称\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e时间\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e成交额\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e💵\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e发仔\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e2024.1016\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e1535\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003cstrong\u003e发仔\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003cstrong\u003e2024.1104\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003cstrong\u003e1651\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003cstrong\u003e+116\u003c/strong\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"EconomyZ"},{"content":"字节训练营 结营要求 刷题打卡 \u0026gt; 50\n每天3题\n博客要写至少6篇\n课程 第一门课程 Go 语言上手-基础语言，也就是说现在你们听的这门课程。 主要讲述语言基础语法、入门实战 第二门课程 Go 语言上手-工程实践 主要讲述 并发编程、依赖管理、单元测试、项目实战 第三门课程 高质量编程与性能调优实战。主要讲述 编码规范、性能优化建议、性能分析工具使用、性能优化流程 第四门课程 高性能 Go 语言发行版优化与落地实践。主要讲述 自动内存管理、Go 内存管理及优化、编译器和静态分析、Go 编译器优化 并发编程 协程 通道 sync 测试 HTTP协议 超文本传输协议包含\n请求行 请求头 请求体 传输的包大部分是4k以下\n“Benchmark” “Benchmark” 是一个评估性能或效率的标准或测试。\n在计算机科学和程序开发中，它通常指以下几个方面：\n性能测试： 用于衡量程序、算法或系统在特定条件下的运行效率。常见的基准测试包括处理速度、内存使用、响应时间等。 基准工具： 一些工具和框架专门用于执行基准测试，帮助开发者比较不同实现或版本的性能表现。例如，Go 语言内置的 testing 包支持基准测试，通过 Benchmark 函数来评估代码执行的速度。 行业标准： 行业内的基准参考，用于对比不同产品或服务的性能。例如，计算机硬件的性能基准，可以帮助用户选择合适的设备。 基准测试示例（Go 语言） 在 Go 语言中，你可以使用以下方式进行基准测试：\npackage main import ( \u0026#34;testing\u0026#34; ) // 被测试的函数 func add(a, b int) int { return a + b } // 基准测试 func BenchmarkAdd(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { add(1, 2) } } 刷题笔记 打开抖音互联网发生什么 熟悉TCP/IP , 计算机网络\n协议 打开抖音发生了什么过程 连入互联网 路由 , 交换机 , 网络虚拟化 跨网段 路由不是对称的: 多路 图 路由协议 工作在ip层 但也没这么简单 路由不改IP地址 , 路由是改Mac 找到发包口 ARP协议 广播 , 免费ARP协议 ARP代理 IPV6 , ip冲突情况 解决方案 IP协议 , mac 地址不能代替ip地址 , 向下兼容 协议 ipv4 不够用 , 解决 , NAT , 网路打通后 , 视频下载\n网络传输 , 数据包 DNS请求 UDP协议 , 分片 , 丢包 , 传输效率 和质量 TCP 协议 3次握手 , timewait , HTTP / HTTP 1.1 HTTPS 加密 SSL/TLS 握手 , 对称和非对称加密 网络架构给抖音提质 网络提速\n网络提速 HTTP2.0 , 多路复用 , stream , TCP丢包怎么办 , 对头阻塞 如何解决 , QUIC / HTTP3.0 , UDP 还是TCP , kernel 还是usersapce , 0 RRT , 弱网优势 路径优化\n数据中心分布 同运营商访问 , 通过解析 分析IP 静态资源 路径优化 CDN , 静态缓存 , 边缘机房 \u0026mdash;\u0026gt; 汇聚机房 \u0026mdash;\u0026gt; 核心机房 访问 动态API 播放 评论接口 , 路径优化 DSA 网络稳定\n容灾概念 , 故障发生 - 故障感知- 自动切换 - 服务恢复 故障排除: 故障明确 - 故障止损 - 分段排查 (客户端 , 服务端 , 中间链路) 故障预防 : 监控报警 - 故障演练 - 故障降级 / 止损 网络接入的问题 域名系统\nhost管理 , 面临很多问题 域名系统 替换 host 域名购买 , 配置迁移 开放外部用户访问 , 建设外部网站 自建DNS服务器\nDNS查询过程 DNS 记录类型 权威DNS系统架构 接入HTTPS\n对称加密 和 非对称加密 SSL的 通信过程 证书链 使用 HTTPS 接入全站加速\n全站加速 = 静态加速 + 动态加速\n静态加速 CDN , 缓存 动态加速 DCDN , 原理 , 全站加速应用场景 : 用户登录 : 动态加速 , 短视频加载观看 : 静态加速 , 网页浏览 : 静态加速 + 动态加速 ","permalink":"//localhost:1313/posts/%E5%AD%97%E8%8A%82%E8%AE%AD%E7%BB%83%E8%90%A5%E8%AE%B0%E5%BD%95/","summary":"\u003ch1 id=\"字节训练营\"\u003e字节训练营\u003c/h1\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241101193517595\" loading=\"lazy\" src=\"../img/image-20241101193517595.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241101193517595\" loading=\"lazy\" src=\"./img/image-20241101193517595.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"结营要求\"\u003e结营要求\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e刷题打卡 \u0026gt; 50\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e每天3题\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e博客要写至少6篇\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"课程\"\u003e课程\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e第一门课程 Go 语言上手-基础语言，也就是说现在你们听的这门课程。 主要讲述语言基础语法、入门实战\u003c/li\u003e\n\u003cli\u003e第二门课程 Go 语言上手-工程实践 主要讲述 并发编程、依赖管理、单元测试、项目实战\u003c/li\u003e\n\u003cli\u003e第三门课程 高质量编程与性能调优实战。主要讲述 编码规范、性能优化建议、性能分析工具使用、性能优化流程\u003c/li\u003e\n\u003cli\u003e第四门课程 高性能 Go 语言发行版优化与落地实践。主要讲述 自动内存管理、Go 内存管理及优化、编译器和静态分析、Go 编译器优化\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241101230232086\" loading=\"lazy\" src=\"../img/image-20241101230232086.png\"\u003e\u003c/p\u003e","title":"字节训练营记录"},{"content":"二分 整数二分算法模板 —— 模板题 AcWing 789. 数的范围\ncpp除法默认是向下取整: 如 5 / 2 = 2 上取整 ==\u0026gt; 5 / 2 = 3 ==\u0026gt; 5+1 \u0026gt;\u0026gt; 1\n下取整 ==\u0026gt; 5 / 2 = 2\n\u0026gt;\u0026gt; 右移运算符（Bitwise Right Shift）\n用于将一个整数的二进制位向右移动指定的位数。每右移一位，相当于将数值除以 2。\nint x = 8; // 二进制 1000 int y = x \u0026gt;\u0026gt; 2; // 结果是 2，二进制 0010 模板 整数数组必须是升序排列\nL和R 都是下标\n确定 mid(坐标) , 然后套模板\n**L L L mid mid+1 r r r\t//mid 在左边 , mid = L + r \u0026raquo; 1 , 自动取左 **\n(尽量选 mid 在左边)\nL L L mid-1 mid r r r //mid 在右边 , mid = L + r + 1 \u0026raquo; 1\nbool check(int x) { /* ... */ } // 检查x是否满足某种性质 // 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用： l l l mid mid+1 r r r\t//mid 在左边 , l + r \u0026gt;\u0026gt; 1 , 自动取左 int bsearch_1(int l, int r) { while (l \u0026lt; r) { int mid = l + r \u0026gt;\u0026gt; 1; if (check(mid)) r = mid; // check()判断mid是否满足性质 else l = mid + 1; } return l; } // 向上取整 // ------------------------------------------------------------------------ // 向下取整 // 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用： l l l mid-1 mid r r r //mid 在右边 , l + r + 1 \u0026gt;\u0026gt; 1 int bsearch_2(int l, int r) { while (l \u0026lt; r) { int mid = l + r + 1 \u0026gt;\u0026gt; 1; if (check(mid)) l = mid; else r = mid - 1; } return l; } 如果数据单调, 意味着可以二分\n二分就是找两段不同性质数据的分界点\n浮点数二分算法模板 —— 模板题 AcWing 790. 数的三次方根\nbool check(double x) {/* ... */} // 检查x是否满足某种性质 double bsearch_3(double l, double r) { const double eps = 1e-6; // eps 表示精度，取决于题目对精度的要求 while (r - l \u0026gt; eps) { double mid = (l + r) / 2; if (check(mid)) r = mid; else l = mid; } return l; } 前缀和 作用 : 快速求出一个区间的和 , O(1) S[i] 为前缀和\nS[i] = a[1]+ a[2] + .... + a[i] , S[0] = 0 (默认) S[i] = S[i-1] + a[i] 求a数组中任意区间[l,r]的和 : S[r] - S[l-1] , 注意是求的是第 L 个 到 第 R 个数的和 (不是下标) s[R] = a[1] + ... + a[L-1] + a[L] + ... + a[R] s[L - 1] = a[1] + ... + a[L-1] //结论 s[R] - s[L - 1] = a[L] + ... + a[R] 差分 yxc: 差分是前缀和的逆运算 a1 a2 ... an //数组前缀和 构造 b1 b2 ... bn 使得 ai = b1 + b2 + ... + bi b1 = a1 b2 = a2 - a1 b3 = a3 - a2 ... bn = a_n - a_n-1 可以实现 O(1) 时间把某一个数组区间的每一个值加上一个值 X\nexample: // a 是原数组 , b 是差分数组 b_l + x b_r+1 - x 一开始可以把a看成 0 0 0 \u0026hellip; 0 通过插入insert操作得到a数组 void insert(int l, int r, int c) { b[l] += c; b[r + 1] -= c; } 林小鹿: 类似于数学中的求导和积分，差分可以看成前缀和的逆运算。 差分数组：\n首先给定一个原数组a：a[1], a[2], a[3],,,,,, a[n];\n然后我们构造一个数组b ： b[1] ,b[2] , b[3],,,,,, b[i];\n使得 a[i] = b[1] + b[2 ]+ b[3] +,,,,,, + b[i]\n也就是说，a数组是b数组的前缀和数组，反过来我们把b数组叫做a数组的差分数组。换句话说，每一个a[i]都是b数组中从头开始的一段区间和。\n考虑如何构造差分b数组？\n最为直接的方法\n如下：\na[0 ]= 0; b[1] = a[1] - a[0]; b[2] = a[2] - a[1]; b[3] =a [3] - a[2]; ........ b[n] = a[n] - a[n-1]; 我们只要有b数组，通过前缀和运算，就可以在O(n) 的时间内得到a数组 。\n知道了差分数组有什么用呢？ 别着急，慢慢往下看。\n话说有这么一个问题：\n给定区间[l ,r ]，让我们把a数组中的[ l, r]区间中的每一个数都加上c,即 a[l] + c , a[l+1] + c , a[l+2] + c ,,,,,, a[r] + c;\n暴力做法是for循环l到r区间，时间复杂度O(n)，如果我们需要对原数组执行m次这样的操作，时间复杂度就会变成O(n*m)。有没有更高效的做法吗? 考虑差分做法。\n始终要记得，a数组是b数组的前缀和数组，比如对b数组的b[i]的修改，会影响到a数组中从a[i]及往后的每一个数。\n首先让差分b数组中的 b[l] + c ,a数组变成 a[l] + c ,a[l+1] + c,,,,,, a[n] + c;\n然后我们打个补丁，b[r+1] - c, a数组变成 a[r+1] - c,a[r+2] - c,,,,,,,a[n] - c;\n为啥还要打个补丁？\nb[l] + c，效果使得a数组中 a[l]及以后的数都加上了c(红色部分)，但我们只要求l到r区间加上c, 因此还需要执行 b[r+1] - c,让a数组中a[r+1]及往后的区间再减去c(绿色部分)，这样对于a[r] 以后区间的数相当于没有发生改变。\n因此我们得出一维差分结论：给a数组中的[ l, r]区间中的每一个数都加上c,只需对差分数组b做 b[l] + = c, b[r+1] - = c。时间复杂度为O(1), 大大提高了效率。\n//差分 时间复杂度 o(m) #include\u0026lt;iostream\u0026gt; using namespace std; const int N = 1e5 + 10; int a[N], b[N]; int main() { int n, m; scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;n, \u0026amp;m); for (int i = 1; i \u0026lt;= n; i++) { scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i]); b[i] = a[i] - a[i - 1]; //构建差分数组 } int l, r, c; while (m--) { scanf(\u0026#34;%d%d%d\u0026#34;, \u0026amp;l, \u0026amp;r, \u0026amp;c); b[l] += c; //将序列中[l, r]之间的每个数都加上c b[r + 1] -= c; } for (int i = 1; i \u0026lt;= n; i++) { a[i] = b[i] + a[i - 1]; //前缀和运算 printf(\u0026#34;%d \u0026#34;, a[i]); } return 0; } 双指针 (双指针) O(n) 必要条件 先考虑暴力方式 确定目标数组的单调性 i从 0开始 从前往后遍历 j从 m - 1开始 从后向前遍历 #include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; const int N = 10001; int a[N], b[N]; int main() { int n, m, x; cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m \u0026gt;\u0026gt; x; for (int i = 0; i \u0026lt; n; i++) cin \u0026gt;\u0026gt; a[i]; for (int i = 0; i \u0026lt; m; i++) cin \u0026gt;\u0026gt; b[i]; // sort(a,a+n); // sort(b,b+m); //必须保证两个数组都是单调的 for (int i = 0, j = m - 1; i \u0026lt; n; i++) { while( j \u0026gt;= 0 \u0026amp;\u0026amp; a[i] + b[j] \u0026gt; x) { j--; } if(a[i] + b[j] == x) { cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; j; break; } } return 0; } #include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; const int N = 100100; int a[N], b[N]; int main() { int n; cin \u0026gt;\u0026gt; n; for (int i = 0; i \u0026lt; n; i++) { cin \u0026gt;\u0026gt; a[i]; } int ans = 0; for (int i = 0, j = 0; i \u0026lt; n; i++) { b[a[i]]++; while (b[a[i]] \u0026gt; 1) { b[a[j]]--; j++; } ans = max(ans, i - j + 1); } cout \u0026lt;\u0026lt; ans; return 0; } 归并排序 分治 模板 void merge_sort(int q[], int l, int r) { if (l \u0026gt;= r) return; int mid = l + r \u0026gt;\u0026gt; 1; merge_sort(q, l, mid); merge_sort(q, mid + 1, r); int k = 0, i = l, j = mid + 1; while (i \u0026lt;= mid \u0026amp;\u0026amp; j \u0026lt;= r) if (q[i] \u0026lt;= q[j]) tmp[k ++ ] = q[i ++ ]; else tmp[k ++ ] = q[j ++ ]; while (i \u0026lt;= mid) tmp[k ++ ] = q[i ++ ]; while (j \u0026lt;= r) tmp[k ++ ] = q[j ++ ]; for (i = l, j = 0; i \u0026lt;= r; i ++, j ++ ) q[i] = tmp[j]; } L L L r r r\n确定分界点 递归排序 left right 归并 \u0026ndash; 合二为一 多路归并 重点是 merge() 函数\n贡献法 是一种数学思想 原本是对矩阵的行进行操作, 换一种方式, 变成对矩阵的列进行操作 孤独的区间 , 只有1个 n➡️ 0 1 2 \u0026hellip; n 所有区间⬇️ 子串是连续的\n日期问题 求闰年模板 const int months[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; // 一三五七八十蜡，三十一天永不差 // 一、1、3、5、7、8、10、12 每月31天，4、6、9、11为30天。 二、2月正常为28天，如果为闰年，则多一天为29天。 int is_leap(int year) //判断闰年 { if (year % 4 == 0 \u0026amp;\u0026amp; year % 100 || year % 400 == 0) return 1; return 0; } int get_days(int y, int m) { if ( m == 2) return 28 + is_leap(y); } int months[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; bool check(int date) // 判断日期是否合法 { int year = date / 10000; int month = date % 10000 / 100; int day = date % 100; if (!day || month \u0026lt; 0 || month \u0026gt; 12) return false; if (month != 2 \u0026amp;\u0026amp; day \u0026gt; months[month]) return false; if (month == 2) { if ((year % 4 == 0 \u0026amp;\u0026amp; year % 100 != 0) || (year % 400 == 0)) // 闰年特判 { if (day \u0026gt; 29) return false; } else { if (day \u0026gt; 28) return false; } } return true; } 求区间天数 思想是计算各个日期到公元1.1.1的天数, 再将计算结果相减+1 , 得到结果\n模板\nint months[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; //\t一 三 五 七 八 十 蜡，三十一天永不差 //或 const int months[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;string\u0026gt; using namespace std; int months[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; int day(int n) { int y = n / 10000; // 年 int m = n % 10000 / 100; // 月 int d = n % 10000 % 100; // 日 // 首先更新一下计算年份的二月天数有多少 // 闰年包括普通闰年和世纪闰年 // 普通闰年年分是4倍数不是100倍数（），世纪闰年是400的倍数， // 即100的倍数不是4的倍数不是闰年，如1900 // 判断闰年 if (y % 4 == 0 \u0026amp;\u0026amp; y % 100 != 0 || y % 400 == 0) months[2] = 29; else // 不加这个会错 months[2] = 28; //统计当前年份的总天数 (今年的天数) while (m--) d += months[m]; //计算从公元1年开始开始，一直到\u0026lt;去年\u0026gt;最后一天,不是到0000年 while (y--) d += (y % 4 == 0 \u0026amp;\u0026amp; y % 100 != 0 || y % 400 == 0 ? 366 : 365); // 闰年366天，平年365天 return d; } int main() { int a, b; while (cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b) cout \u0026lt;\u0026lt; abs(day(a) - day(b)) + 1 \u0026lt;\u0026lt; endl; // 由题所示“如果两个日期是连续的我们规定他们之间的天数为两天”，因此我们加一 return 0; } 区间合并 任意多个区间的范围有交集, 快速把这几个区间合并\n贪心思想\n模板ycx\n// 将所有存在交集的区间合并 void merge(vector\u0026lt;PII\u0026gt; \u0026amp;segs) { vector\u0026lt;PII\u0026gt; res; sort(segs.begin(), segs.end()); int st = -2e9, ed = -2e9; for (auto seg : segs) if (ed \u0026lt; seg.first) { if (st != -2e9) res.push_back({st, ed}); st = seg.first, ed = seg.second; } else ed = max(ed, seg.second); if (st != -2e9) res.push_back({st, ed}); segs = res; } 按区间左端点排序\nstart_________________________end 三种情况⬇️\n​ f\u0026mdash;\u0026ndash;s 在区间内 这情况等于不用操作 ​ f\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-s 右端点超出 ​ f\u0026mdash;\u0026mdash;\u0026mdash;-s 全部超出 void merge(vector\u0026lt;Pii\u0026gt; \u0026amp;segment) { vector\u0026lt;Pii\u0026gt; ans; sort(segment.begin(), segment.end()); // 默认排序左端点 int start = -2e9, end = -2e9; for (auto seg : segment) { if (end \u0026lt; seg.first) { if (start != -2e9) // 没有交集 ans.push_back({start, end}); start = seg.first, end = seg.second; } else { end = max(end, seg.second); //合并情况不添加ans } } if (start != -2e9) // 防止vector是空集 , 空集就是也是一个区间 ans.push_back({start, end}); segment = ans; } 递归 ","permalink":"//localhost:1313/posts/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%A4%87%E6%88%98/","summary":"\u003ch1 id=\"二分\"\u003e二分\u003c/h1\u003e\n\u003ch2 id=\"整数二分算法模板\"\u003e\u003cem\u003e整数\u003c/em\u003e二分算法模板\u003c/h2\u003e\n\u003cp\u003e—— 模板题 AcWing 789. 数的范围\u003c/p\u003e\n\u003cp\u003ecpp除法默认是向下取整: 如 \u003ccode\u003e5 / 2 = 2 \u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e上取整 ==\u0026gt; \u003ccode\u003e5 / 2 = 3\u003c/code\u003e  ==\u0026gt;  \u003ccode\u003e5+1 \u0026gt;\u0026gt; 1\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e下取整 ==\u0026gt; \u003ccode\u003e5 / 2 = 2\u003c/code\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003e\u0026gt;\u0026gt; \u003c/code\u003e \u003cstrong\u003e右移运算符（Bitwise Right Shift）\u003c/strong\u003e\u003c/p\u003e","title":"蓝桥杯备战"},{"content":"参考链接: CSDN Qt Creator打造VScode one dark pro主题配色\n代码部分\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;style-scheme version=\u0026#34;1.0\u0026#34; name=\u0026#34;One Dark\u0026#34;\u0026gt; \u0026lt;style name=\u0026#34;Text\u0026#34; foreground=\u0026#34;#abb2bf\u0026#34; background=\u0026#34;#282c34\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Link\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Selection\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LineNumber\u0026#34; foreground=\u0026#34;#4b5363\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;SearchResult\u0026#34; background=\u0026#34;#324365\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;SearchScope\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Parentheses\u0026#34; underlineColor=\u0026#34;#61afef\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;ParenthesesMismatch\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;AutoComplete\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;CurrentLine\u0026#34; background=\u0026#34;#3a3f4b\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;CurrentLineNumber\u0026#34; foreground=\u0026#34;#777c87\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Occurrences\u0026#34; background=\u0026#34;#324365\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Occurrences.Unused\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;DashUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Occurrences.Rename\u0026#34; background=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Number\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;String\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Type\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Local\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Global\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Field\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Static\u0026#34; foreground=\u0026#34;#61afef\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;VirtualMethod\u0026#34; foreground=\u0026#34;#61afef\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Function\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Keyword\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;PrimitiveType\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Operator\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Overloaded Operator\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Punctuation\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Preprocessor\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Label\u0026#34; foreground=\u0026#34;#e06c75\u0026#34; bold=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Comment\u0026#34; foreground=\u0026#34;#5c6370\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Doxygen.Comment\u0026#34; foreground=\u0026#34;#5c6370\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Doxygen.Tag\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;VisualWhitespace\u0026#34; foreground=\u0026#34;#3c4049\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlLocalId\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlExternalId\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlTypeId\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlRootObjectProperty\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlScopeObjectProperty\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlExternalObjectProperty\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;JsScopeVar\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;JsImportVar\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;JsGlobalVar\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;QmlStateName\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Binding\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DisabledCode\u0026#34; foreground=\u0026#34;#5c6370\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;AddedLine\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;RemovedLine\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffFile\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffLocation\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffFileLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#e5c07b\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffContextLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#56b6c2\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffSourceLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#be5046\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffSourceChar\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffDestLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#789353\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;DiffDestChar\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#98c379\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogChangeLine\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogAuthorName\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogCommitDate\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogCommitHash\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogCommitSubject\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LogDecoration\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Warning\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;WarningContext\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;DotLine\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Error\u0026#34; underlineColor=\u0026#34;#e06c75\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;ErrorContext\u0026#34; underlineColor=\u0026#34;#e06c75\u0026#34; underlineStyle=\u0026#34;DotLine\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;Declaration\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;FunctionDefinition\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;OutputArgument\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;style name=\u0026#34;LastStyleSentinel\u0026#34;/\u0026gt; \u0026lt;/style-scheme\u0026gt; 主题设置\n[General] ThemeName=One Dark PreferredStyles=Fusion DefaultTextEditorColorScheme=onedark.xml [Palette] shadowBackground=ff21252b text=ffabb2bf textDisabled=99abb2bf textHighlighted=ffd7dae0 toolBarItem=ffabb2bf toolBarItemDisabled=99abb2bf fancyBarsNormalTextColor=ffabb2bf fancyBarsBoldTextColor=ffabb2bf hoverBackground=ff31363f selectedBackground=ff3a3f4b selectedBackgroundText=ffd7dae0 normalBackground=ff282c34 alternateBackground=ff31363f error=ffe06c75 warning=ffe5c07b success=ff98c379 message=ff61afef splitter=ff181a1f textColorLink=61afef textColorLinkVisited=c678dd backgroundColorDisabled=ff21252b [Colors] ;DS controls theme START DScontrolBackground=normalBackground DScontrolOutline=splitter DStextColor=text DSdisabledTextColor=textDisabled DSpanelBackground=ff454444 DShoverHighlight=hoverBackground DScolumnBackground=ff363636 DSfocusEdit=normalBackground DSfocusDrag=ff565656 DScontrolBackgroundPressed=selectedBackground DScontrolBackgroundChecked=selectedBackground DSinteraction=selectedBackground DSsliderActiveTrack=ff7a7a7a DSsliderInactiveTrack=ff4d4d4d DSsliderHandle=ff4b5362 DSsliderActiveTrackHover=ff7f7f7f DSsliderInactiveTrackHover=ff505050 DSsliderHandleHover=ff7a7a7a DSsliderActiveTrackFocus=ffaaaaaa DSsliderInactiveTrackFocus=ff7a7a7a DSsliderHandleFocus=ff1d545c DSerrorColor=error DScontrolBackgroundDisabled=backgroundColorDisabled DScontrolOutlineDisabled=ff4d4d4d DStextColorDisabled=textDisabled DStextSelectionColor=selectedBackground DStextSelectedTextColor=selectedBackgroundText DSscrollBarTrack=ff4d4d4d DSscrollBarHandle=ff4b5362 DScontrolBackgroundInteraction=ff4d4d4d DStranslationIndicatorBorder=splitter DSsectionHeadBackground=alternateBackground DSchangedStateText=message DS3DAxisXColor=error DS3DAxisYColor=success DS3DAxisZColor=message ;DS controls theme END BackgroundColorAlternate=alternateBackground BackgroundColorDark=shadowBackground BackgroundColorHover=hoverBackground BackgroundColorNormal=normalBackground BackgroundColorDisabled=backgroundColorDisabled BackgroundColorSelected=selectedBackground BadgeLabelBackgroundColorChecked=text BadgeLabelBackgroundColorUnchecked=text BadgeLabelTextColorChecked=normalBackground BadgeLabelTextColorUnchecked=normalBackground CanceledSearchTextColor=error ComboBoxArrowColor=toolBarItem ComboBoxArrowColorDisabled=toolBarItemDisabled ComboBoxTextColor=fancyBarsNormalTextColor DetailsButtonBackgroundColorHover=hoverBackground DetailsWidgetBackgroundColor=shadowBackground DockWidgetResizeHandleColor=splitter DoubleTabWidget1stSeparatorColor=splitter DoubleTabWidget1stTabActiveTextColor=text DoubleTabWidget1stTabBackgroundColor=normalBackground DoubleTabWidget1stTabInactiveTextColor=text DoubleTabWidget2ndSeparatorColor=toolBarItemDisabled DoubleTabWidget2ndTabActiveTextColor=text DoubleTabWidget2ndTabBackgroundColor=selectedBackground DoubleTabWidget2ndTabInactiveTextColor=text EditorPlaceholderColor=shadowBackground FancyToolBarSeparatorColor=toolBarItemDisabled FancyTabBarBackgroundColor=shadowBackground FancyTabBarSelectedBackgroundColor=selectedBackground FancyTabWidgetDisabledSelectedTextColor=toolBarItemDisabled FancyTabWidgetDisabledUnselectedTextColor=toolBarItemDisabled FancyTabWidgetEnabledSelectedTextColor=fancyBarsBoldTextColor FancyTabWidgetEnabledUnselectedTextColor=fancyBarsBoldTextColor FancyToolButtonHoverColor=hoverBackground FancyToolButtonSelectedColor=selectedBackground FutureProgressBackgroundColor=shadowBackground IconsBaseColor=toolBarItem IconsDisabledColor=toolBarItemDisabled IconsInfoColor=message IconsInfoToolBarColor=message IconsWarningColor=warning IconsWarningToolBarColor=warning IconsErrorColor=error IconsErrorToolBarColor=error IconsRunColor=success IconsRunToolBarColor=success IconsStopColor=error IconsStopToolBarColor=error IconsInterruptColor=message IconsInterruptToolBarColor=message IconsDebugColor=toolBarItem IconsNavigationArrowsColor=warning IconsBuildHammerHandleColor=b06112 IconsBuildHammerHeadColor=toolBarItem IconsModeWelcomeActiveColor=success IconsModeEditActiveColor=message IconsModeDesignActiveColor=warning IconsModeDebugActiveColor=message IconsModeProjectActiveColor=success IconsModeAnalyzeActiveColor=message IconsModeHelpActiveColor=warning IconsCodeModelKeywordColor=ff777777 IconsCodeModelClassColor=ffc0b550 IconsCodeModelStructColor=ff53b053 IconsCodeModelFunctionColor=ffd34373 IconsCodeModelVariableColor=ff2bbbcc IconsCodeModelEnumColor=ffc0b550 IconsCodeModelMacroColor=ff476ba0 IconsCodeModelAttributeColor=ff316511 IconsCodeModelUniformColor=ff994899 IconsCodeModelVaryingColor=ffa08833 IconsCodeModelOverlayBackgroundColor=normalBackground IconsCodeModelOverlayForegroundColor=text InfoBarBackground=shadowBackground InfoBarText=text MenuBarEmptyAreaBackgroundColor=shadowBackground MenuBarItemBackgroundColor=shadowBackground MenuBarItemTextColorDisabled=textDisabled MenuBarItemTextColorNormal=text MenuItemTextColorDisabled=textDisabled MenuItemTextColorNormal=text MiniProjectTargetSelectorBackgroundColor=shadowBackground MiniProjectTargetSelectorBorderColor=shadowBackground MiniProjectTargetSelectorSummaryBackgroundColor=normalBackground MiniProjectTargetSelectorTextColor=fancyBarsNormalTextColor PanelStatusBarBackgroundColor=shadowBackground PanelsWidgetSeparatorLineColor=splitter PanelTextColorDark=text PanelTextColorMid=text PanelTextColorLight=textHighlighted ProgressBarColorError=error ProgressBarColorFinished=success ProgressBarColorNormal=message ProgressBarTitleColor=text ProgressBarBackgroundColor=alternateBackground SplitterColor=splitter TextColorDisabled=textDisabled TextColorError=error TextColorHighlight=textHighlighted TextColorHighlightBackground=hoverBackground TextColorLink=textColorLink TextColorLinkVisited=textColorLinkVisited TextColorNormal=text ToggleButtonBackgroundColor=shadowBackground ToolBarBackgroundColor=shadowBackground TreeViewArrowColorNormal=hoverBackground TreeViewArrowColorSelected=text OutputPanes_DebugTextColor=text OutputPanes_ErrorMessageTextColor=error OutputPanes_MessageOutput=message OutputPanes_NormalMessageTextColor=text OutputPanes_StdErrTextColor=error OutputPanes_StdOutTextColor=text OutputPanes_WarningMessageTextColor=warning OutputPanes_TestPassTextColor=success OutputPanes_TestFailTextColor=error OutputPanes_TestXFailTextColor=error OutputPanes_TestXPassTextColor=message OutputPanes_TestSkipTextColor=message OutputPanes_TestWarnTextColor=warning OutputPanes_TestFatalTextColor=error OutputPanes_TestDebugTextColor=text OutputPaneButtonFlashColor=error OutputPaneToggleButtonTextColorChecked=fancyBarsNormalTextColor OutputPaneToggleButtonTextColorUnchecked=fancyBarsNormalTextColor Debugger_LogWindow_LogInput=ff56b6c2 Debugger_LogWindow_LogStatus=message Debugger_LogWindow_LogTime=error Debugger_WatchItem_ValueNormal=text Debugger_WatchItem_ValueInvalid=textDisabled Debugger_WatchItem_ValueChanged=error Debugger_Breakpoint_TextMarkColor=message Welcome_TextColor=text Welcome_ForegroundPrimaryColor=text Welcome_ForegroundSecondaryColor=text Welcome_BackgroundColor=normalBackground Welcome_ButtonBackgroundColor=normalBackground Welcome_DividerColor=splitter Welcome_HoverColor=hoverBackground Welcome_LinkColor=textColorLink Welcome_DisabledLinkColor=textDisabled Timeline_TextColor=text Timeline_BackgroundColor1=normalBackground Timeline_BackgroundColor2=shadowBackground Timeline_DividerColor=splitter Timeline_HighlightColor=selectedBackground Timeline_PanelBackgroundColor=alternateBackground Timeline_PanelHeaderColor=normalBackground Timeline_HandleColor=ff4b5362 Timeline_RangeColor=selectedBackground VcsBase_FileStatusUnknown_TextColor=text VcsBase_FileAdded_TextColor=success VcsBase_FileModified_TextColor=warning VcsBase_FileDeleted_TextColor=error VcsBase_FileRenamed_TextColor=message VcsBase_FileUnmerged_TextColor=error Bookmarks_TextMarkColor=message TextEditor_SearchResult_ScrollBarColor=success TextEditor_CurrentLine_ScrollBarColor=message ProjectExplorer_TaskError_TextMarkColor=error ProjectExplorer_TaskWarn_TextMarkColor=warning CodeModel_Error_TextMarkColor=error CodeModel_Warning_TextMarkColor=warning QmlDesigner_BackgroundColor=normalBackground QmlDesigner_HighlightColor=selectedBackground QmlDesigner_FormEditorSelectionColor=message QmlDesigner_FormEditorForegroundColor=normalBackground QmlDesigner_BackgroundColorDarkAlternate=shadowBackground QmlDesigner_BackgroundColorDarker=splitter QmlDesigner_BorderColor=splitter QmlDesigner_ButtonColor=normalBackground QmlDesigner_TabDark=shadowBackground QmlDesigner_TabLight=text QmlDesigner_FormeditorBackgroundColor=normalBackground QmlDesigner_AlternateBackgroundColor=alternateBackground QmlDesigner_ScrollBarHandleColor=ff4b5362 PaletteWindow=shadowBackground PaletteWindowText=text PaletteBase=normalBackground PaletteAlternateBase=alternateBackground PaletteButton=shadowBackground PaletteBrightText=error PaletteText=text PaletteButtonText=text PaletteButtonTextDisabled=textDisabled PaletteToolTipBase=hoverBackground PaletteHighlight=selectedBackground PaletteDark=shadowBackground PaletteHighlightedText=selectedBackgroundText PaletteToolTipText=text PaletteLink=textColorLink PaletteLinkVisited=textColorLinkVisited PaletteWindowDisabled=backgroundColorDisabled PaletteWindowTextDisabled=textDisabled PaletteBaseDisabled=backgroundColorDisabled PaletteTextDisabled=textDisabled [Flags] ComboBoxDrawTextShadow=false DerivePaletteFromTheme=true DrawIndicatorBranch=true DrawSearchResultWidgetFrame=false DrawTargetSelectorBottom=false DrawToolBarHighlights=false DrawToolBarBorders=false ApplyThemePaletteGlobally=true FlatToolBars=true FlatSideBarIcons=true FlatProjectsMode=true FlatMenuBar=true ToolBarIconShadow=true WindowColorAsBase=true DarkUserInterface=true [Gradients] DetailsWidgetHeaderGradient\\1\\color=normalBackground DetailsWidgetHeaderGradient\\1\\pos=1 DetailsWidgetHeaderGradient\\size=1 ","permalink":"//localhost:1313/posts/qt%E4%B8%BB%E9%A2%98onedark%E8%AE%BE%E7%BD%AE/","summary":"\u003cp\u003e参考链接:  CSDN  \u003ca href=\"https://blog.csdn.net/qq_41980754/article/details/119861293\"\u003eQt Creator打造VScode one dark pro主题配色\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e代码部分\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\n\u0026lt;style-scheme version=\u0026#34;1.0\u0026#34; name=\u0026#34;One Dark\u0026#34;\u0026gt;\n  \u0026lt;style name=\u0026#34;Text\u0026#34; foreground=\u0026#34;#abb2bf\u0026#34; background=\u0026#34;#282c34\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Link\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Selection\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LineNumber\u0026#34; foreground=\u0026#34;#4b5363\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;SearchResult\u0026#34; background=\u0026#34;#324365\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;SearchScope\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Parentheses\u0026#34; underlineColor=\u0026#34;#61afef\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;ParenthesesMismatch\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;AutoComplete\u0026#34; background=\u0026#34;#3e4451\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;CurrentLine\u0026#34; background=\u0026#34;#3a3f4b\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;CurrentLineNumber\u0026#34; foreground=\u0026#34;#777c87\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Occurrences\u0026#34; background=\u0026#34;#324365\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Occurrences.Unused\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;DashUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Occurrences.Rename\u0026#34; background=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Number\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;String\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Type\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Local\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Global\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Field\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Static\u0026#34; foreground=\u0026#34;#61afef\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;VirtualMethod\u0026#34; foreground=\u0026#34;#61afef\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Function\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Keyword\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;PrimitiveType\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Operator\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Overloaded Operator\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Punctuation\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Preprocessor\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Label\u0026#34; foreground=\u0026#34;#e06c75\u0026#34; bold=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Comment\u0026#34; foreground=\u0026#34;#5c6370\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Doxygen.Comment\u0026#34; foreground=\u0026#34;#5c6370\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Doxygen.Tag\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;VisualWhitespace\u0026#34; foreground=\u0026#34;#3c4049\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlLocalId\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlExternalId\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlTypeId\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlRootObjectProperty\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlScopeObjectProperty\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlExternalObjectProperty\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;JsScopeVar\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;JsImportVar\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;JsGlobalVar\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;QmlStateName\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Binding\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DisabledCode\u0026#34; foreground=\u0026#34;#5c6370\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;AddedLine\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;RemovedLine\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffFile\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffLocation\u0026#34; foreground=\u0026#34;#d19a66\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffFileLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#e5c07b\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffContextLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#56b6c2\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffSourceLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#be5046\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffSourceChar\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffDestLine\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#789353\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;DiffDestChar\u0026#34; foreground=\u0026#34;#000000\u0026#34; background=\u0026#34;#98c379\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogChangeLine\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogAuthorName\u0026#34; foreground=\u0026#34;#61afef\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogCommitDate\u0026#34; foreground=\u0026#34;#98c379\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogCommitHash\u0026#34; foreground=\u0026#34;#e06c75\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogCommitSubject\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LogDecoration\u0026#34; foreground=\u0026#34;#c678dd\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Warning\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;WarningContext\u0026#34; underlineColor=\u0026#34;#d19a66\u0026#34; underlineStyle=\u0026#34;DotLine\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Error\u0026#34; underlineColor=\u0026#34;#e06c75\u0026#34; underlineStyle=\u0026#34;SingleUnderline\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;ErrorContext\u0026#34; underlineColor=\u0026#34;#e06c75\u0026#34; underlineStyle=\u0026#34;DotLine\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;Declaration\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;FunctionDefinition\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;OutputArgument\u0026#34; italic=\u0026#34;true\u0026#34;/\u0026gt;\n  \u0026lt;style name=\u0026#34;LastStyleSentinel\u0026#34;/\u0026gt;\n\u0026lt;/style-scheme\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e主题设置\u003c/p\u003e","title":"Qt主题oneDark设置"},{"content":"在 Go 语言中，cnt := [2]int{} cnt 是一个变量，使用短变量声明 (:=) 定义。 [2]int 表示这是一个长度为 2 的 数组，数组的元素类型是 int。 {} 表示这个数组被初始化为零值，也就是所有的元素都被初始化为整型的零值 0。 示例代码 package main import \u0026#34;fmt\u0026#34; func main() { cnt := [2]int{} fmt.Println(cnt) // 输出: [0 0] } 细节 数组是固定长度的，[2]int 表示它的长度为 2，如果需要动态长度的集合，可以使用切片 ([]int)。\n如果你想明确初始化数组的值，可以写成这样：\ncnt := [2]int{1, 2} fmt.Println(cnt) // 输出: [1 2] 如果只部分初始化，未赋值的部分会使用零值：\ncnt := [2]int{1} fmt.Println(cnt) // 输出: [1 0] range循环时需要注意点 错误的代码：\nbanSet := make(map[string]struct{}) for word := range bannedWords { banSet[word] = struct{}{} } 是不正确的，因为 range 关键字在 Go 语言中用于遍历集合（如数组、切片、映射、字符串等）时，会同时返回索引和值。\n在你的写法中，for word := range bannedWords 只返回了 bannedWords 的索引（即数组或切片的索引），而不是你实际想要的单词。\n正确的写法应该是：\nbanSet := make(map[string]struct{}) for _, word := range bannedWords { banSet[word] = struct{}{} } 解释： for _, word := range bannedWords： range bannedWords 会返回两个值：第一个是索引，第二个是 bannedWords 中的每个元素（即单词）。 你用 _ 来忽略索引，因为你只关心单词 word。 为什么不能直接使用 for word := range bannedWords？ range bannedWords 实际上返回的是索引和值，for word := range bannedWords 只取了第一个值，也就是索引，而不是你期望的单词。 你需要第二个值（单词）来填充 banSet，因此你必须使用 for _, word := range bannedWords。 总结： 你需要在遍历 bannedWords 时获取每个单词的值，因此必须用 for _, word := range bannedWords。\n","permalink":"//localhost:1313/posts/go%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/","summary":"\u003ch1 id=\"在-go-语言中cnt--2int\"\u003e在 Go 语言中，\u003ccode\u003ecnt := [2]int{}\u003c/code\u003e\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecnt\u003c/code\u003e 是一个变量，使用短变量声明 (\u003ccode\u003e:=\u003c/code\u003e) 定义。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e[2]int\u003c/code\u003e 表示这是一个长度为 \u003ccode\u003e2\u003c/code\u003e 的 \u003cstrong\u003e数组\u003c/strong\u003e，数组的元素类型是 \u003ccode\u003eint\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e{}\u003c/code\u003e 表示这个数组被初始化为零值，也就是所有的元素都被初始化为整型的零值 \u003ccode\u003e0\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"示例代码\"\u003e示例代码\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003ecnt\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecnt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 输出: [0 0]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"细节\"\u003e细节\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e数组是固定长度的，\u003ccode\u003e[2]int\u003c/code\u003e 表示它的长度为 \u003ccode\u003e2\u003c/code\u003e，如果需要动态长度的集合，可以使用切片 (\u003ccode\u003e[]int\u003c/code\u003e)。\u003c/p\u003e","title":"Go的使用记录"},{"content":"Interstellar 星际穿越 My favorite movie, without a doubt.\n我最爱的电影。\n","permalink":"//localhost:1313/posts/interstellar/","summary":"\u003ch1 id=\"interstellar-星际穿越\"\u003eInterstellar 星际穿越\u003c/h1\u003e\n\u003cp\u003eMy favorite movie, \u003cstrong\u003ewithout a doubt\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e我最爱的电影。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20241009_233455.207.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20241009_233455.207.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20240917_220015.066.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20240917_220015.066.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20241019_170922.638.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./img/%5BDBD-Raws%5D%5B4K_HDR%5D%5B%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%5D%5B2160P%5D%5BBDRip%5D%5BHEVC-10bit%5D%5BFLAC%5D.mkv_20241019_170922.638.png\"\u003e\u003c/p\u003e","title":"Interstellar"},{"content":" 自我介绍 python有过深入了解吗？ 面向过程和面向对象哪一块用的比较多？那你用面向对象做了哪些工作 说一下C++的编译过程，编译过程中宏定义和const的区别是什么？在大型工程中用const好一些还是宏定义好一些？ 内联函数有了解过吗？讲一下。 虚函数 内联函数和虚函数谁的执行效率更快？为什么？那静态函数呢 静态函数和普通函数运行效率有什么差距吗？ 进程和线程？进程内存分布讲一下 堆和栈的区别 堆里面申请内存有哪些方式？new和malloc的区别 在构造函数里面能调用虚函数吗？为什么？如果子类在构造函数中调用了父类的虚函数会发生什么？ 在析构函数里面能不能抛出异常？如果抛出会发生什么 C++内存泄漏有哪些？一个类既不继承也不是子类，内部也没有虚函数，那他的析构函数需要声明为虚函数吗 C++发生内存泄漏有什么好的办法来解决这个问题？ 智能指针的实现原理是什么？循环引用如何解决 TCP和UDP的区别？ 平时玩游戏吗？LOL。你觉得LOL的战斗逻辑是如何发送到客户端上的？TCP还是UDP 平时有了解过帧同步和状态同步吗？ 设计模式有了解过吗？单例模式主要用于什么情况 比较大型的MVCC了解过吗 如果让你来设计一个LOL商城系统，有一些商城的数据，你会如何用代码来建这个商城？ 有1W个数字，找出最大的10个数字 O(N)的排序有哪些？讲一下基数排序和桶排序 20G的字符串，只有4G的内存，找到出现最多的前10个的字符串？ GPU的渲染(管线)了解过吗？图形学有学过吗？ 你为什么会选择来做游戏？更倾向于做客户端还是服务器的？ dota了解吗 给我简单介绍了一下帧同步和状态同步，然后有一个moba的游戏，使用帧同步还是状态同步？ 玩游戏时掉帧后恢复是使用的帧同步还是状态同步？ 提问环节：比较关注实习生的哪些技能和知识？核心的还是学习和反应能力，反应快的，有面向对象的大工程的经验。 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0421%E7%BD%91%E6%98%93%E4%BA%92%E5%A8%B1/","summary":"\u003col\u003e\n\u003cli\u003e自我介绍\u003c/li\u003e\n\u003cli\u003epython有过深入了解吗？\u003c/li\u003e\n\u003cli\u003e面向过程和面向对象哪一块用的比较多？那你用面向对象做了哪些工作\u003c/li\u003e\n\u003cli\u003e说一下C++的编译过程，编译过程中宏定义和const的区别是什么？在大型工程中用const好一些还是宏定义好一些？\u003c/li\u003e\n\u003cli\u003e内联函数有了解过吗？讲一下。\u003c/li\u003e\n\u003cli\u003e虚函数\u003c/li\u003e\n\u003cli\u003e内联函数和虚函数谁的执行效率更快？为什么？那静态函数呢\u003c/li\u003e\n\u003cli\u003e静态函数和普通函数运行效率有什么差距吗？\u003c/li\u003e\n\u003cli\u003e进程和线程？进程内存分布讲一下\u003c/li\u003e\n\u003cli\u003e堆和栈的区别\u003c/li\u003e\n\u003cli\u003e堆里面申请内存有哪些方式？new和malloc的区别\u003c/li\u003e\n\u003cli\u003e在构造函数里面能调用虚函数吗？为什么？如果子类在构造函数中调用了父类的虚函数会发生什么？\u003c/li\u003e\n\u003cli\u003e在析构函数里面能不能抛出异常？如果抛出会发生什么\u003c/li\u003e\n\u003cli\u003eC++内存泄漏有哪些？一个类既不继承也不是子类，内部也没有虚函数，那他的析构函数需要声明为虚函数吗\u003c/li\u003e\n\u003cli\u003eC++发生内存泄漏有什么好的办法来解决这个问题？\u003c/li\u003e\n\u003cli\u003e智能指针的实现原理是什么？循环引用如何解决\u003c/li\u003e\n\u003cli\u003eTCP和UDP的区别？\u003c/li\u003e\n\u003cli\u003e平时玩游戏吗？LOL。你觉得LOL的战斗逻辑是如何发送到客户端上的？TCP还是UDP\u003c/li\u003e\n\u003cli\u003e平时有了解过帧同步和状态同步吗？\u003c/li\u003e\n\u003cli\u003e设计模式有了解过吗？单例模式主要用于什么情况\u003c/li\u003e\n\u003cli\u003e比较大型的MVCC了解过吗\u003c/li\u003e\n\u003cli\u003e如果让你来设计一个LOL商城系统，有一些商城的数据，你会如何用代码来建这个商城？\u003c/li\u003e\n\u003cli\u003e有1W个数字，找出最大的10个数字\u003c/li\u003e\n\u003cli\u003eO(N)的排序有哪些？讲一下基数排序和桶排序\u003c/li\u003e\n\u003cli\u003e20G的字符串，只有4G的内存，找到出现最多的前10个的字符串？\u003c/li\u003e\n\u003cli\u003eGPU的渲染(管线)了解过吗？图形学有学过吗？\u003c/li\u003e\n\u003cli\u003e你为什么会选择来做游戏？更倾向于做客户端还是服务器的？\u003c/li\u003e\n\u003cli\u003edota了解吗\u003c/li\u003e\n\u003cli\u003e给我简单介绍了一下帧同步和状态同步，然后有一个moba的游戏，使用帧同步还是状态同步？\u003c/li\u003e\n\u003cli\u003e玩游戏时掉帧后恢复是使用的帧同步还是状态同步？\u003c/li\u003e\n\u003cli\u003e提问环节：比较关注实习生的哪些技能和知识？核心的还是学习和反应能力，反应快的，有面向对象的大工程的经验。\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0421网易互娱"},{"content":"2020.4.18\n一面 50min 在C++里面我们什么时候会把析构函数写为虚函数呢 C++中引用和指针有什么样的区别 右值引用，移动语义和完美转发在C++11中起到的作用 简单介绍一下RAII这个机制 简单介绍一下http请求和响应的结构 状态码分为几个类别 301和302这两个状态码有什么样的区别呢 断点续传的功能206 服务器什么时候返回304这个状态码，需要带上一些什么样的特征呢 能简单的介绍一下chunk transfer是一种什么样的传输方式呢 简单介绍一下linux下常用的IO多路复用模型 用epoll实现一个server时浏览器主动关闭了一个连接那么epoll收到的是什么事件呢 简单介绍一下惊群的现象是一个什么样的现象，有什么的办法解决这个现象呢 linux下单进程最大连接数受到哪些因素的限制呢 time_wait起到的作用，有什么办法降低这种状态的数量 编程题：编辑距离 二面 60min 讲一下进程和线程的区别 分页和分段的区别是什么 死锁和如何避免死锁 介绍一下TCP协议和UDP协议的区别 客户端发起连接以后，突然断电了，客户端断开了连接，会产生什么影响 TCP半连接状态解释一下 https密钥交互过程 close_wait的状态 499状态码 myisam和innoDB的区别 B+的调整过程 联合索引和最左原则 我们有哪些分表原则，在什么情况下使用这些分表原则 深浅拷贝解释一下，深浅拷贝的效率上有什么区别呢 栈溢出的原因 讲一下堆和栈的区别 编程题：判环和leetcode原题简化路径 三面 30min 输入网址后发生了什么 我经常会用一些CDN进行静态和动态的加速这个了解吗 DNS解析的时候DNS污染是怎么回事 mysql在分表时是怎么做的 mysql出现慢查询都有哪些原因 什么样的sql会产生IO瓶颈，什么样的sql会产生CPU瓶颈 TCP改成两次握手会产生什么现象，会有问题吗 http和https的区别是什么 编程题：矩阵中最长递增路径 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0418%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/","summary":"\u003cp\u003e2020.4.18\u003c/p\u003e\n\u003ch2 id=\"一面-50min\"\u003e一面 50min\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e在C++里面我们什么时候会把析构函数写为虚函数呢\u003c/li\u003e\n\u003cli\u003eC++中引用和指针有什么样的区别\u003c/li\u003e\n\u003cli\u003e右值引用，移动语义和完美转发在C++11中起到的作用\u003c/li\u003e\n\u003cli\u003e简单介绍一下RAII这个机制\u003c/li\u003e\n\u003cli\u003e简单介绍一下http请求和响应的结构\u003c/li\u003e\n\u003cli\u003e状态码分为几个类别\u003c/li\u003e\n\u003cli\u003e301和302这两个状态码有什么样的区别呢\u003c/li\u003e\n\u003cli\u003e断点续传的功能206\u003c/li\u003e\n\u003cli\u003e服务器什么时候返回304这个状态码，需要带上一些什么样的特征呢\u003c/li\u003e\n\u003cli\u003e能简单的介绍一下chunk transfer是一种什么样的传输方式呢\u003c/li\u003e\n\u003cli\u003e简单介绍一下linux下常用的IO多路复用模型\u003c/li\u003e\n\u003cli\u003e用epoll实现一个server时浏览器主动关闭了一个连接那么epoll收到的是什么事件呢\u003c/li\u003e\n\u003cli\u003e简单介绍一下惊群的现象是一个什么样的现象，有什么的办法解决这个现象呢\u003c/li\u003e\n\u003cli\u003elinux下单进程最大连接数受到哪些因素的限制呢\u003c/li\u003e\n\u003cli\u003etime_wait起到的作用，有什么办法降低这种状态的数量\u003c/li\u003e\n\u003cli\u003e编程题：编辑距离\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"二面-60min\"\u003e二面 60min\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e讲一下进程和线程的区别\u003c/li\u003e\n\u003cli\u003e分页和分段的区别是什么\u003c/li\u003e\n\u003cli\u003e死锁和如何避免死锁\u003c/li\u003e\n\u003cli\u003e介绍一下TCP协议和UDP协议的区别\u003c/li\u003e\n\u003cli\u003e客户端发起连接以后，突然断电了，客户端断开了连接，会产生什么影响\u003c/li\u003e\n\u003cli\u003eTCP半连接状态解释一下\u003c/li\u003e\n\u003cli\u003ehttps密钥交互过程\u003c/li\u003e\n\u003cli\u003eclose_wait的状态\u003c/li\u003e\n\u003cli\u003e499状态码\u003c/li\u003e\n\u003cli\u003emyisam和innoDB的区别\u003c/li\u003e\n\u003cli\u003eB+的调整过程\u003c/li\u003e\n\u003cli\u003e联合索引和最左原则\u003c/li\u003e\n\u003cli\u003e我们有哪些分表原则，在什么情况下使用这些分表原则\u003c/li\u003e\n\u003cli\u003e深浅拷贝解释一下，深浅拷贝的效率上有什么区别呢\u003c/li\u003e\n\u003cli\u003e栈溢出的原因\u003c/li\u003e\n\u003cli\u003e讲一下堆和栈的区别\u003c/li\u003e\n\u003cli\u003e编程题：判环和leetcode原题简化路径\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"三面-30min\"\u003e三面 30min\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e输入网址后发生了什么\u003c/li\u003e\n\u003cli\u003e我经常会用一些CDN进行静态和动态的加速这个了解吗\u003c/li\u003e\n\u003cli\u003eDNS解析的时候DNS污染是怎么回事\u003c/li\u003e\n\u003cli\u003emysql在分表时是怎么做的\u003c/li\u003e\n\u003cli\u003emysql出现慢查询都有哪些原因\u003c/li\u003e\n\u003cli\u003e什么样的sql会产生IO瓶颈，什么样的sql会产生CPU瓶颈\u003c/li\u003e\n\u003cli\u003eTCP改成两次握手会产生什么现象，会有问题吗\u003c/li\u003e\n\u003cli\u003ehttp和https的区别是什么\u003c/li\u003e\n\u003cli\u003e编程题：矩阵中最长递增路径\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0418字节跳动"},{"content":"腾讯深圳4月8号 在你看来epoll是个什么样的东西，边沿触发和水平触发的模式 epoll的通知机制 线程和进程的区别 多线程和多进程的选择上以什么作为考量 堆的数据结构（可能应该写一个类，然后封装一些函数） C++内存模型 static会被放在导出符号表里吗 网络层和传输层最大的区别是什么 TCP头部有哪些 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0408%E8%85%BE%E8%AE%AF%E6%B7%B1%E5%9C%B3/","summary":"\u003ch2 id=\"腾讯深圳4月8号\"\u003e腾讯深圳4月8号\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e在你看来epoll是个什么样的东西，边沿触发和水平触发的模式\u003c/li\u003e\n\u003cli\u003eepoll的通知机制\u003c/li\u003e\n\u003cli\u003e线程和进程的区别\u003c/li\u003e\n\u003cli\u003e多线程和多进程的选择上以什么作为考量\u003c/li\u003e\n\u003cli\u003e堆的数据结构（可能应该写一个类，然后封装一些函数）\u003c/li\u003e\n\u003cli\u003eC++内存模型\u003c/li\u003e\n\u003cli\u003estatic会被放在导出符号表里吗\u003c/li\u003e\n\u003cli\u003e网络层和传输层最大的区别是什么\u003c/li\u003e\n\u003cli\u003eTCP头部有哪些\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0408腾讯深圳"},{"content":"腾讯成都 自我介绍 详细讲一下你的项目 并发量和数据传输效率 TCP拥塞机制 进程有几种状态 事务要满足几个特性 B+树特征是什么样的 B+树查询过程 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0402%E8%85%BE%E8%AE%AF%E6%88%90%E9%83%BD/","summary":"\u003ch2 id=\"腾讯成都\"\u003e腾讯成都\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e自我介绍\u003c/li\u003e\n\u003cli\u003e详细讲一下你的项目\u003c/li\u003e\n\u003cli\u003e并发量和数据传输效率\u003c/li\u003e\n\u003cli\u003eTCP拥塞机制\u003c/li\u003e\n\u003cli\u003e进程有几种状态\u003c/li\u003e\n\u003cli\u003e事务要满足几个特性\u003c/li\u003e\n\u003cli\u003eB+树特征是什么样的\u003c/li\u003e\n\u003cli\u003eB+树查询过程\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0402腾讯成都"},{"content":" 自我介绍 项目web服务器提问(跟socket相关的事件有哪些？epoll监听了socket哪些事件？用的什么模式水平触发还是边沿触发模式？你用的是阻塞IO还是非阻塞IO，为什么用非阻塞?) C++多态是怎么实现的？答到虚函数表指针就就结束了 构造函数可以是虚函数吗？不可以，为什么？ 析构函数可以是虚函数吗？可以。根据我回答扩展的一个问题：父类析构不是虚函数，他的子类有一个父类指针指向子类的对象，然后我释放这个父类指针的时候会调用子类的虚构函数吗？不会。我觉得应该应该回答继承时的虚构顺序，当时没想起。如果不会调用析构函数，子类会被释放吗？不会。面试官主动放弃该话题。 简单说一下new/delete和malloc和free C++11用过哪些？auto, unordered_map, 智能指针 TCP黏包问题如何解决？ TCP的拥塞控制？我答了拥塞窗口。他想听慢重传和快恢复 TIME_WAIT状态解释一下，如何解决这个问题？端口复用 A和B建立连接以后，A拔掉网线,那这个时候B和A的连接还在吗？哪一方会发现呢？不要答心跳包。面试官主动放弃该话题。 说一下多进程和多线程的区别。线程共享哪些内容。 又TM扯到项目中的线程数了。线程的模型是什么样的。 还有什么想问我的？问了他这个岗位做啥的。面向企业的视频会议。 ","permalink":"//localhost:1313/posts/%E9%9D%A2%E7%BB%8F0306cvte/","summary":"\u003col\u003e\n\u003cli\u003e自我介绍\u003c/li\u003e\n\u003cli\u003e项目web服务器提问(跟socket相关的事件有哪些？epoll监听了socket哪些事件？用的什么模式水平触发还是边沿触发模式？你用的是阻塞IO还是非阻塞IO，为什么用非阻塞?)\u003c/li\u003e\n\u003cli\u003eC++多态是怎么实现的？答到虚函数表指针就就结束了\u003c/li\u003e\n\u003cli\u003e构造函数可以是虚函数吗？不可以，为什么？\u003c/li\u003e\n\u003cli\u003e析构函数可以是虚函数吗？可以。根据我回答扩展的一个问题：父类析构不是虚函数，他的子类有一个父类指针指向子类的对象，然后我释放这个父类指针的时候会调用子类的虚构函数吗？不会。我觉得应该应该回答继承时的虚构顺序，当时没想起。如果不会调用析构函数，子类会被释放吗？不会。面试官主动放弃该话题。\u003c/li\u003e\n\u003cli\u003e简单说一下new/delete和malloc和free\u003c/li\u003e\n\u003cli\u003eC++11用过哪些？auto, unordered_map, 智能指针\u003c/li\u003e\n\u003cli\u003eTCP黏包问题如何解决？\u003c/li\u003e\n\u003cli\u003eTCP的拥塞控制？我答了拥塞窗口。他想听慢重传和快恢复\u003c/li\u003e\n\u003cli\u003eTIME_WAIT状态解释一下，如何解决这个问题？端口复用\u003c/li\u003e\n\u003cli\u003eA和B建立连接以后，A拔掉网线,那这个时候B和A的连接还在吗？哪一方会发现呢？不要答心跳包。面试官主动放弃该话题。\u003c/li\u003e\n\u003cli\u003e说一下多进程和多线程的区别。线程共享哪些内容。\u003c/li\u003e\n\u003cli\u003e又TM扯到项目中的线程数了。线程的模型是什么样的。\u003c/li\u003e\n\u003cli\u003e还有什么想问我的？问了他这个岗位做啥的。面向企业的视频会议。\u003c/li\u003e\n\u003c/ol\u003e","title":"面经0306CVTE"},{"content":"webbench 测压软件 最高并发3W\nwebbench做测试时自身也会消耗CPU和内存资源，为了测试准确，需要将webbench安装在别的服务器上。\ntar -xzvf webbench-1.5.tar.gz cd webbench-1.5 apt-get install ctags make \u0026amp;\u0026amp; make install 测试\nwebbench -c 1000 -t 5 http://127.0.0.1:9999/index.html //1000个客户端 5秒钟时间 github git clone https://github.com/SYaoJun/WebServer.git //把仓库中的内容拷贝到linux系统中 回调函数 函数指针本身是指针变量，指向某个函数的入口地址。\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; int run(void(*step)(void)){ //回调函数的传参是声明的格式 int cnt = 0; while(1){ if(step != NULL) step(); cnt++; sleep(1); } return 0; } void cb(void){ //回调函数 puts(\u0026#34;记秒到时\u0026#34;); } int main(){ run(cb); return 0; } gcc cb.c main.c 信号函数 raise(SIGSEGV) //自己给自己进程发送信号 11 abort() //终止当前进程 测试1s打印多少个数\nalarm函数\n#include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main(){ alarm(1); //计时1s 到时后内核发送一个sigalarm信号终止 for(int i = 0;;i++) printf(\u0026#34;%d\\n\u0026#34;, i); return 0; } setitimer函数\n#include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;sys/time.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int my_alarm(int sec){ struct itimerval it, oldit; it.it_value.tv_sec = sec; //定时长度 it.it_value.tv_usec = 0; //微秒 it.it_interval.tv_sec = 0; //周期定时 it.it_interval.tv_usec = 0; int ret = setitimer(ITIMER_REAL, \u0026amp;it, \u0026amp;oldit); if(ret == -1){ perror(\u0026#34;setitimer error\u0026#34;); exit(1); } return oldit.it_value.tv_sec; } int main(){ my_alarm(1); //计时1s 到时后内核发送一个sigalarm信号终止 for(int i = 0;;i++) printf(\u0026#34;%d\\n\u0026#34;, i); return 0; } 创建线程 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; void* func(void* arg){ //必须为这种类型 printf(\u0026#34;in thread : thread id: %lu, process id: %u\\n\u0026#34;, pthread_self(), getpid()); } int main(void){ //创建线程 pthread_t tid; //重命名的unsigned long 类型 //创建线程API pthread_create(arg1, agr2, arg3, arg4) //arg1: 传入的线程tid地址 //arg2: 线程属性 通常设置为NULL //arg3: 线程执行的任务 函数指针 //arg4: 参数3传递的参数 printf(\u0026#34;in main 1 : thread id: %lu, process id: %u\\n\u0026#34;, pthread_self(), getpid()); int ret = pthread_create(\u0026amp;tid, NULL, func, NULL); if(ret != 0){ perror(\u0026#34;pthread_create error\u0026#34;); exit(1); } sleep(1); //主线程 等待子线程执行完毕 printf(\u0026#34;in main 2 : thread id: %lu, process id: %u\\n\u0026#34;, pthread_self(), getpid()); return 0; } 创建多个子线程 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; void* func(void* arg){ //必须为这种类型 int i = (int)arg; printf(\u0026#34;%dth thread id: %lu, process id: %u\\n\u0026#34;, i, pthread_self(), getpid()); } int main(void){ //创建线程 pthread_t tid; //重命名的unsigned long 类型 //创建线程API pthread_create(arg1, agr2, arg3, arg4) //arg1: 传入的线程tid地址 //arg2: 线程属性 通常设置为NULL //arg3: 线程执行的任务 函数指针 //arg4: 参数3传递的参数 int n = 5, ret; for(int i = 0; i \u0026lt; n; i++){ ret = pthread_create(\u0026amp;tid, NULL, func, (void*)i); if(ret != 0){ fprintf(stderr, \u0026#34;%s pthread_create error\u0026#34;, strerror(ret)); exit(1); } pthread_detach(tid); } sleep(n); //主线程 等待子线程执行完毕 return 0; } mysql使用 mysql在linux环境下结合C语言的使用\nsudo apt-get install mysql-client mysql-server //先安装mysql sudo apt-get install libmysql++-dev //安装库 先启动mysql库 设置好密码 然后使用c程序连接\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;mysql/mysql.h\u0026gt; int main(){ MYSQL mysql; MYSQL_RES *res; MYSQL_ROW row; int i, j; char *query = \u0026#34;select * from people;\u0026#34;; mysql_init(\u0026amp;mysql); //初始化 if(!mysql_real_connect(\u0026amp;mysql,\u0026#34;localhost\u0026#34;,\u0026#34;root\u0026#34;,\u0026#34;password\u0026#34;,\u0026#34;yaojun\u0026#34;,3306,NULL,0)){ //连接数据库 printf(\u0026#34;Error in connecting\u0026#34;); } if(mysql_query(\u0026amp;mysql,query)){ //查询数据库 printf(\u0026#34;Error in querying\u0026#34;); } res = mysql_store_result(\u0026amp;mysql); while(row = mysql_fetch_row(res)){ //读取数据库中的一行 for(i=0;i\u0026lt;mysql_num_fields(res);i++){ fprintf(stdout,\u0026#34;%s \u0026#34;,row[i]); } printf(\u0026#34;\\n\u0026#34;); } mysql_free_result(res); //释放 mysql_close(\u0026amp;mysql); //关闭 return 0; } 编译的命令\ngcc sql.c -lmysqlclient //生成a.out文件 执行 指针和数组 char str[]=\u0026#34;hello\u0026#34;; //字符串含\\0 6字节 char *url =\u0026#34;hello\u0026#34;; //指针64位机 8字节 cout\u0026lt;\u0026lt;sizeof(str)\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;sizeof(url)\u0026lt;\u0026lt;endl; CGI服务器 原理：输出到某个文件描述符上的内容直接发送到客户端连接对应的socket上，此处我们模拟了把服务器端输出到标准输出的内容，直接发送给客户端。\n测试\ntelnet 127.0.0.1 6666 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;netinet/in.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; //命令行参数指定IP和端口 int main(int argc, char *argv[]){ if(argc \u0026lt;= 2){ printf(\u0026#34;at least 3 arguments: file ip port, but you give %d\\n\u0026#34;, argc); return 1; } const char* ip = argv[1]; int port = atoi(argv[2]); int lfd, cfd, ret; struct sockaddr_in serv_addr, clie_addr; lfd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 assert(lfd \u0026gt;= 0); serv_addr.sin_family = AF_INET; serv_addr.sin_port = htons(port); inet_pton(AF_INET, ip, \u0026amp;serv_addr.sin_addr); //端口复用 此处没有卵用 int opt = 1; setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); ret = bind(lfd, (struct sockaddr *)\u0026amp;serv_addr, sizeof(serv_addr) ); assert(ret != -1); ret = listen(lfd, 128); //最大同时连接数 assert(ret != -1); socklen_t clie_addr_len; //套接字长度 clie_addr_len = sizeof(clie_addr); cfd = accept(lfd, (struct sockaddr*)\u0026amp;clie_addr, \u0026amp;clie_addr_len ); if(cfd \u0026lt; 0){ printf(\u0026#34;accept error: %d\u0026#34;, errno); }else{ close(STDOUT_FILENO); dup(cfd); //创建一个新的文件描述符 该文件描述符和原文件描述符指向相同的文件 管道和网络连接 printf(\u0026#34;good night! daisy!\\n\u0026#34;); close(cfd); } close(lfd); return 0; } EPOLLONESHOT事件 一个socket上的某个事件被触发多次，可能产生2个不同的线程处理同一个socket。我们期望的是一个socket在任一时刻都只被一个线程处理。对于注册了EPOLLONESHOT事件的文件描述符，操做系统最多触发其上注册的一个可读可写或者异常事件一次。注册了EPOLLONESHOT事件的socket一旦被某个线程处理完毕，应立即重置这个socket上的EPOLLONESHOT事件。\n监听socket不应设置为EPOLLONESHOT。\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;netinet/in.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;sys/epoll.h\u0026gt; #define MAX_SIZE 1024 //自定义的结构体 struct fds{ int epollfd; int sockfd; }; //设置文件描述符为非阻塞 void setnonblocking(int fd){ int old_option = fcntl(fd, F_GETFL); int new_option = old_option | O_NONBLOCK; fcntl(fd, F_SETFL, new_option); } //添加到epoll内核事件表中 void addfd(int epollfd, int fd, bool oneshot){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET; if(oneshot){ event.events |= EPOLLONESHOT; } epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, \u0026amp;event); //挂到红黑树上 setnonblocking(fd); //设置非阻塞 主要用在读写上 } //重置EPOLLONESHOT事件 void reset_oneshot(int epollfd, int fd){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET | EPOLLONESHOT; epoll_ctl(epollfd, EPOLL_CTL_MOD, fd, \u0026amp;event); //修改注册事件 } //工作线程 void* worker(void* arg){ int sockfd = ((fds*)arg)-\u0026gt;sockfd; int epollfd = ((fds*)arg)-\u0026gt;epollfd; printf(\u0026#34;start new thread to receive data on fd: %d\\n\u0026#34;, sockfd); char buf[MAX_SIZE]; memset(buf, \u0026#39;\\0\u0026#39;, MAX_SIZE); //循环读取sockfd上的数据 直到收到EAGAIN while(1){ int ret = recv(sockfd, buf, MAX_SIZE-1, 0); if(ret == 0){ close(sockfd); printf(\u0026#34;foreiner closed the connection\\n\u0026#34;); break; }else if(ret \u0026lt; 0){ if(errno == EAGAIN){ reset_oneshot(epollfd ,sockfd); printf(\u0026#34;read later\\n\u0026#34;); break; } }else{ printf(\u0026#34;get connection: %s\\n\u0026#34;, buf); //休眠5s模拟数据处理过程 sleep(5); } } printf(\u0026#34;end thread receiving data on fd: %d\\n\u0026#34;, sockfd); } //命令行参数指定IP和端口 int main(int argc, char *argv[]){ if(argc \u0026lt;= 2){ printf(\u0026#34;at least 3 arguments: file ip port, but you give %d\\n\u0026#34;, argc); return 1; } const char* ip = argv[1]; int port = atoi(argv[2]); int lfd, cfd, ret; struct sockaddr_in serv_addr, clie_addr; lfd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 assert(lfd \u0026gt;= 0); serv_addr.sin_family = AF_INET; serv_addr.sin_port = htons(port); inet_pton(AF_INET, ip, \u0026amp;serv_addr.sin_addr); //端口复用 此处没有卵用 int opt = 1; setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); ret = bind(lfd, (struct sockaddr *)\u0026amp;serv_addr, sizeof(serv_addr) ); assert(ret != -1); ret = listen(lfd, 128); //最大同时连接数 assert(ret != -1); epoll_event events[MAX_SIZE]; //返回的数组上限 int epollfd = epoll_create(10); assert(epollfd != -1); //注意监听的套接字不能设置为oneshot addfd(epollfd, lfd, false); //挂上红黑树监听 printf(\u0026#34;addfd\\n\u0026#34;); while(1){ ret = epoll_wait(epollfd, events, MAX_SIZE, -1); //永远不超时 if(ret \u0026lt; 0){ printf(\u0026#34;epoll failure\\n\u0026#34;); break; } for(int i = 0; i \u0026lt; ret; i++){ //循环处理有响应的事件 int sockfd = events[i].data.fd; if(sockfd == lfd){ //如果是监听事件则建立新的连接 printf(\u0026#34;lfd\\n\u0026#34;); socklen_t clie_addr_len; //套接字长度 clie_addr_len = sizeof(clie_addr); cfd = accept(lfd, (struct sockaddr*)\u0026amp;clie_addr, \u0026amp;clie_addr_len ); assert(cfd \u0026gt;= 0); //注册为oneshot事件 addfd(epollfd, cfd, true); //刚刚这里加入的事件加错了 }else if(events[i].events \u0026amp; EPOLLIN){ pthread_t tid; fds fds_for_new_worker; fds_for_new_worker.epollfd = epollfd; fds_for_new_worker.sockfd = sockfd; //新启动一个线程为sockfd服务 pthread_create(\u0026amp;tid, NULL, worker, (void*)\u0026amp;fds_for_new_worker); // pthread_detach(tid); //线程分离 } } } close(lfd); return 0; } 信号屏蔽字 主要函数\nsigaddset() sigprocmask() sigpending() 使用kill发送信号\nkill -6 PID 测试程序\n#include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;signal.h\u0026gt; void print(sigset_t* ped){ for(int i = 0; i \u0026lt; 32; i++){ if(sigismember(ped, i)==1){ putchar(\u0026#39;1\u0026#39;); }else putchar(\u0026#39;0\u0026#39;); } printf(\u0026#34;\\n\u0026#34;); } int main(void){ sigset_t myset, oldset, ped; sigemptyset(\u0026amp;myset); //设置自定义信号集 sigaddset(\u0026amp;myset, SIGINT); sigaddset(\u0026amp;myset, SIGSEGV); sigaddset(\u0026amp;myset, SIGQUIT); sigaddset(\u0026amp;myset, SIGABRT); //设置信号屏蔽字 sigprocmask(SIG_BLOCK, \u0026amp;myset, \u0026amp;oldset); while(1){ sigpending(\u0026amp;ped); print(\u0026amp;ped); sleep(2); } return 0; } sigaction信号捕捉函数 #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;signal.h\u0026gt; void docatch(int signo){ printf(\u0026#34;%d signal has been catched!\\n\u0026#34;, signo); } int main(void){ struct sigaction act; act.sa_handler = docatch; sigemptyset(\u0026amp;act.sa_mask); sigaddset(\u0026amp;act.sa_mask, SIGINT); sigaddset(\u0026amp;act.sa_mask, SIGSEGV); sigaddset(\u0026amp;act.sa_mask, SIGQUIT); act.sa_flags = 0; //默认属性 在信号函数处理期间 本信号再次到达默认屏蔽 sigaction(SIGINT, \u0026amp;act, NULL); while(1); return 0; } 统一事件源 把信号事件的处理放到epoll监听事件中去处理，统一了事件源。当调用信号处理函数时，信号处理函数通过管道将信息传达给epoll上的读端监听事件，再在主循环中处理事件。\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;netinet/in.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;sys/epoll.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #define MAX_SIZE 1024 //自定义的结构体 static int pipefd[2]; struct fds{ int epollfd; int sockfd; }; //设置文件描述符为非阻塞 void setnonblocking(int fd){ int old_option = fcntl(fd, F_GETFL); int new_option = old_option | O_NONBLOCK; fcntl(fd, F_SETFL, new_option); } //添加到epoll内核事件表中 void addfd(int epollfd, int fd, bool oneshot){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET; if(oneshot){ event.events |= EPOLLONESHOT; } epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, \u0026amp;event); //挂到红黑树上 setnonblocking(fd); //设置非阻塞 主要用在读写上 } //信号处理函数 void sig_handler(int sig){ int save_errno = errno; int msg = sig; //我猜想这里重新定义变量的原因在于传的是指针 同时为了保证可重入 send(pipefd[1], (char*)\u0026amp;msg, 1, 0); //pipefd[1]是非阻塞的如果发不出去直接返回 errno = save_errno; } //设置信号处理 void addsig(int sig){ struct sigaction sa; memset(\u0026amp;sa, \u0026#39;\\0\u0026#39;, sizeof(sa)); sa.sa_handler = sig_handler; sa.sa_flags |= SA_RESTART; sigfillset(\u0026amp;sa.sa_mask); // sigaddset(\u0026amp;sa.sa_mask, SIGSEGV); assert(sigaction(sig, \u0026amp;sa, NULL) != -1); //注册监听的信号 } //命令行参数指定IP和端口 int main(int argc, char *argv[]){ if(argc \u0026lt;= 2){ printf(\u0026#34;at least 3 arguments: file ip port, but you give %d\\n\u0026#34;, argc); return 1; } const char* ip = argv[1]; int port = atoi(argv[2]); int lfd, cfd, ret; struct sockaddr_in serv_addr, clie_addr; lfd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 assert(lfd \u0026gt;= 0); serv_addr.sin_family = AF_INET; serv_addr.sin_port = htons(port); inet_pton(AF_INET, ip, \u0026amp;serv_addr.sin_addr); //端口复用 此处没有卵用 int opt = 1; setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); //忽略SIGPIPE信号 signal(SIGPIPE, SIG_IGN); ret = bind(lfd, (struct sockaddr *)\u0026amp;serv_addr, sizeof(serv_addr) ); assert(ret != -1); ret = listen(lfd, 128); //最大同时连接数 assert(ret != -1); epoll_event events[MAX_SIZE]; //返回的数组上限 int epollfd = epoll_create(10); assert(epollfd != -1); //注意监听的套接字不能设置为oneshot addfd(epollfd, lfd, false); //挂上红黑树监听 /*使用socketpair创建全双工的管道*/ ret = socketpair(PF_UNIX, SOCK_STREAM, 0, pipefd); assert(ret != -1); setnonblocking(pipefd[1]); //把写入的管道端置为非阻塞 addfd( epollfd, pipefd[0], false); //设置为oneshot /*设置一些信号的处理函数*/ addsig(SIGHUP); addsig(SIGCHLD); addsig(SIGTERM); addsig(SIGINT); addsig(SIGSEGV); bool stop_server = false; while(!stop_server){ printf(\u0026#34;epoll_wait...\\n\u0026#34;); ret = epoll_wait(epollfd, events, MAX_SIZE, -1); //永远不超时 if((ret \u0026lt; 0) \u0026amp;\u0026amp; (errno != EINTR)){ //这里要设置 被系统调用打断的不算失败 errno不是ret perror(\u0026#34;epoll failure\u0026#34;); exit(1); } for(int i = 0; i \u0026lt; ret; i++){ //循环处理有响应的事件 int sockfd = events[i].data.fd; if(sockfd == lfd){ //如果是监听事件则建立新的连接 socklen_t clie_addr_len; //套接字长度 clie_addr_len = sizeof(clie_addr); cfd = accept(lfd, (struct sockaddr*)\u0026amp;clie_addr, \u0026amp;clie_addr_len ); assert(cfd \u0026gt;= 0); //注册为oneshot事件 addfd(epollfd, cfd, true); /*如果就绪的文件描述符是pipefd[0],就处理信号*/ }else if((sockfd == pipefd[0]) \u0026amp;\u0026amp;(events[i].events \u0026amp; EPOLLIN)){ char buf[MAX_SIZE]; int num = recv(pipefd[0], buf, sizeof(buf), 0); if(num == -1) continue; else if(num == 0) continue; else{ //可能管道有多个信号满足 每次读出一个字符进行处理 for(int j = 0; j \u0026lt; num; j++){ switch(buf[j]){ case SIGSEGV: puts(\u0026#34;段错误信号已处理，收到请回答！\u0026#34;); break; case SIGCHLD: case SIGHUP: continue; case SIGTERM: case SIGINT: stop_server = true;break; } } } }else{} } } printf(\u0026#34;close fds\\n\u0026#34;); close(lfd); close(pipefd[0]); close(pipefd[1]); return 0; } 单例模式 #include \u0026lt;iostream\u0026gt; #include \u0026lt;atomic\u0026gt; #include \u0026lt;mutex\u0026gt; using namespace std; class Singleton{ private: //无法调用构造函数 Singleton(); Singleton(const Singleton\u0026amp; other); public: static Singleton* getInstance(); static Singleton* m_instance; } Singleton* Singleton::m_instance = nullptr; //懒汉式 单线程版 Singleton* Singleton::getInstance(){ if(m_instance == nullptr){ m_instance = new Singleton(); } return m_instance; } //多线程版 Singleton* Singleton::getInstance(){ LOCK lock; if(m_instance == nullptr){ m_instance = new Singleton(); } return m_instance; } 当前时间 #include \u0026lt;time.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main(void){ time_t tm; time(\u0026amp;tm); char time_string[128]; ctime_r(\u0026amp;tm, time_string); printf(\u0026#34;%s\u0026#34;, time_string); return 0; } 初阶日志系统 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;mutex\u0026gt; #include \u0026lt;atomic\u0026gt; using namespace std; class Logger{ public: static Logger* get_instance(); static Logger* log; static mutex log_mutex; static void write_log(int level, char* s); static void create_file(); static int fd; private: Logger(); Logger(const Logger\u0026amp; other); ~Logger(); }; Logger* Logger::log = NULL; mutex Logger::log_mutex; int Logger::fd = 0; Logger::Logger(){}; Logger::~Logger(){ if(log != NULL){ delete log; log = NULL; } close(fd); } Logger* Logger::get_instance(){ if(log == NULL){ log_mutex.lock(); if(log == NULL){ log = new Logger(); } log_mutex.unlock(); } return log; } void Logger::create_file(){ fd = open(\u0026#34;logger.txt\u0026#34;, O_RDWR|O_CREAT|O_TRUNC, 777); assert(fd \u0026gt; 0); } void Logger::write_log(int level, char* s){ int n = strlen(s); log_mutex.lock(); write(fd, s, n); log_mutex.unlock(); } 单例模式 //C++11 atomic std::atomic\u0026lt;Logger*\u0026gt; Logger::log; std::mutex Logger::log_mutex; Logger* Logger::get_instance(){ Logger* tmp = log.load(std::memory_order_relaxed); std::atomic_thread_fence(std::memory_order_acquire); //获取内存fence if(tmp == NULL){ std::lock_guard\u0026lt;std::mutex\u0026gt; lock(log_mutex); tmp = log.load(std::memory_order_relaxed); if(tmp == NUll){ tmp = new Logger; std::atomic_thread_fence(std::memory_order_release); //释放内存fence log.store(tmp, std::memory_order_relaxed); } } return tmp; } 主线程测试 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026#34;logger.h\u0026#34; void* func(void* arg){ char buf[1024]; sprintf(buf, \u0026#34;thread id: %lu, process id: %u\\n\u0026#34;, pthread_self(), getpid()); Logger::log-\u0026gt;write_log(2, buf); } int main(void){ pthread_t tid; //重命名的unsigned long 类型 Logger::log-\u0026gt;create_file(); int n = 5, ret; for(int i = 0; i \u0026lt; n; i++){ // int t = i; ret = pthread_create(\u0026amp;tid, NULL, func, NULL); if(ret != 0){ fprintf(stderr, \u0026#34;%s pthread_create error\u0026#34;, strerror(ret)); exit(1); } pthread_detach(tid); } sleep(n-4); //主线程 等待子线程执行完毕 return 0; } 时间堆 把监听文件描述符加入后，就启动定时器。\nexec函数族 在一个程序中运行另一个程序。当进程调用exec函数时，该进程的用户空间代码和数据完全被新程序替换。调用exec并不创建新进程，所以调用exec前后进程的ID并不改变。\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; int main(){ pid_t pid = fork(); if(pid == -1){ perror(\u0026#34;fork error!\u0026#34;); exit(-1); }else if(pid == 0){ execlp(\u0026#34;ls\u0026#34;, \u0026#34;anythingok\u0026#34;, \u0026#34;-l\u0026#34;, \u0026#34;-a\u0026#34;, NULL); }else if(pid \u0026gt; 0){ sleep(1); puts(\u0026#34;parent over!\u0026#34;); } return 0; } 管道 #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(){ pid_t fd[2]; pipe(fd); //创建管道 int ret = fork(); if(ret \u0026gt; 0){ //父进程 父写 fd[0]读 fd[1]写 close(fd[0]); char *str =\u0026#34;hello world\\n\u0026#34;; write(fd[1], str, strlen(str)); sleep(1); }else if(ret == 0){ //子进程 子读 fd[1]关闭 close(fd[1]); char buf[1024]; int n = read(fd[0], buf, sizeof(buf)); //写到显示器上 write(1, buf, n); } return 0; } CGI使用管道和exec实现 hello里面的输入和输出都被重定向了\n#include\u0026lt;stdio.h\u0026gt; #include\u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; int main(int agrc, char* argv[]){ char bf[100]; read(STDIN_FILENO, bf, sizeof(bf)); sprintf(bf, \u0026#34;Content-Type:text/html;\\r\\n\\r\\nhello world, 你好!\u0026#34;); printf(\u0026#34;%s\u0026#34;, bf); return 0; } 主进程调用已经编译完毕的hello可执行文件\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; int main(){ pid_t pid; int status; int cgi_input[2]; int cgi_output[2]; char buf[1024]; /*创建输入管道*/ if(pipe(cgi_input) \u0026lt; 0){ perror(\u0026#34;pipe error\u0026#34;); exit(1); } /*创建输出管道*/ if(pipe(cgi_output) \u0026lt; 0){ perror(\u0026#34;pipe error\u0026#34;); exit(1); } /*创建子进程*/ if((pid = fork()) \u0026lt; 0){ perror(\u0026#34;fork error!\u0026#34;); exit(-1); } if(pid == 0){ dup2(cgi_input[0], 0); /*将子进程的STDIN重定向到cgi_input[0]*/ dup2(cgi_output[1], 1); /*将子进程的STDOUT重定向到cgi_output[1]*/ /*关闭剩余的两端*/ close(cgi_input[1]); close(cgi_output[0]); /*执行exec文件 即cgi*/ execl(\u0026#34;hello\u0026#34;, \u0026#34;anythingok\u0026#34;, NULL); exit(0); }else if(pid \u0026gt; 0){ /*父进程先给子进程发送数据 然后等待子进程执行完 再读数据*/ /*关闭不用的两个端口*/ close(cgi_input[0]); close(cgi_output[1]); char tmp[100]=\u0026#34;hello child process\u0026#34;; int len = strlen(tmp); /*父进程先写数据*/ write(cgi_input[1], tmp, len); /*父进程阻塞等待读入*/ int n = read(cgi_output[0], buf, sizeof(buf)); int ret = write(STDOUT_FILENO, buf, n); /*关闭管道*/ close(cgi_input[1]); close(cgi_output[0]); waitpid(pid, \u0026amp;status, 0); } return 0; } 多线程服务器 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;sys/epoll.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #include \u0026lt;dirent.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; #define SERV_PORT 9999 #define MAXSIZE 2048 void wait_child(int signo){ while(waitpid(0, NULL, WNOHANG) \u0026gt; 0); return; } int createlistenfd(){ struct sockaddr_in servaddr; int ret; int fd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 if(fd == -1){ perror(\u0026#34;socket error\u0026#34;); exit(1); } //初始化servaddr结构体 bzero(\u0026amp;servaddr, sizeof(servaddr)); servaddr.sin_family = AF_INET; servaddr.sin_port = htons(SERV_PORT); servaddr.sin_addr.s_addr = htonl(INADDR_ANY); //端口复用 int opt = 1; setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); //绑定端口 ret = bind(fd, (struct sockaddr *)\u0026amp;servaddr, sizeof(servaddr)); if (ret == -1){ perror(\u0026#34;bind error\u0026#34;); exit(1); } //设置监听上限 ret = listen(fd, 128); if(ret==-1){ perror(\u0026#34;listen error\u0026#34;); exit(1); } return fd; } void work(int cfd, char* s){ char filename[100]={0}; sscanf(s, \u0026#34;GET /%s\u0026#34;, filename); char *mime; if(strstr(s, \u0026#34;.html\u0026#34;)) mime = \u0026#34;text/html\u0026#34;; else if(strstr(s, \u0026#34;.jpg\u0026#34;)) mime=\u0026#34;image/jpeg\u0026#34;; //构建响应头 发给客户端 // printf(\u0026#34;%s\\n\u0026#34;, filename); char response[MAXSIZE]; sprintf(response, \u0026#34;HTTP/1.1 200 OK\\r\\nContent-Type: %s\\r\\n\\r\\n\u0026#34;, mime); //读取具体的文件内容 int filefd = open(filename, O_RDONLY); if(filefd == -1){ perror(\u0026#34;open error\u0026#34;); sleep(0.5); filefd = open(filename, O_RDONLY); //很奇怪 为什么睡几秒钟之后再打开就不会出错了 if(filefd == -1) exit(1); } int len = strlen(response); int n = read(filefd, response+len, sizeof(response)-len); write(cfd, response, len+n); close(filefd); } int main(void){ int lfd = createlistenfd(); struct sockaddr_in clientaddr; socklen_t clientaddrlen = sizeof(clientaddr); //这是一个传出参数 //accept接受连接请求 pid_t pid; int cfd; while(1){ cfd = accept(lfd, (struct sockaddr *)\u0026amp;clientaddr, \u0026amp;clientaddrlen); if (cfd == -1){ perror(\u0026#34;accept error\u0026#34;); exit(1); } //创建子线程 主线程负责监听和回收子进程 pid = fork(); if(pid \u0026lt; 0){ perror(\u0026#34;fork error\u0026#34;); exit(1); } else if(pid == 0) break; else{ close(cfd); //关闭接收文件描述符 signal(SIGCHLD, wait_child); } } if(pid == 0){ close(lfd); //关闭监听文件描述符 //打印客户端IP和port char buf[MAXSIZE] = {0}; printf(\u0026#34;client IP: %s, client port: %d\\n\u0026#34;, inet_ntop(AF_INET, \u0026amp;clientaddr.sin_addr, buf, sizeof(buf)), ntohs(clientaddr.sin_port)); int n = read(cfd, buf, sizeof(buf)); if(n==0){ close(cfd); } // write(1, buf, n); else work(cfd, buf); } return 0; } 处理客户端注册信息的cgi 存在一些问题，每个网页好像没有传输完成，浏览器总是转圈。 需要结合上面hello程序查询数据库，hello程序的注册还没完善，只能做到查询。等以后有空再做吧。 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;netinet/in.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;sys/epoll.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; #define MAX_SIZE 1024 //自定义的结构体 struct fds{ int epollfd; int sockfd; }; //设置文件描述符为非阻塞 void setnonblocking(int fd){ int old_option = fcntl(fd, F_GETFL); int new_option = old_option | O_NONBLOCK; fcntl(fd, F_SETFL, new_option); } //添加到epoll内核事件表中 void addfd(int epollfd, int fd, bool oneshot){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET; if(oneshot){ event.events |= EPOLLONESHOT; } epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, \u0026amp;event); //挂到红黑树上 setnonblocking(fd); //设置非阻塞 主要用在读写上 } //移除epoll事件 void removefd(int epollfd, int fd){ epoll_ctl(epollfd, EPOLL_CTL_DEL, fd, NULL); close(fd); } //重置EPOLLONESHOT事件 void reset_oneshot(int epollfd, int fd){ epoll_event event; event.data.fd = fd; event.events = EPOLLIN | EPOLLET | EPOLLONESHOT; epoll_ctl(epollfd, EPOLL_CTL_MOD, fd, \u0026amp;event); //修改注册事件 } void accept_request(int epollfd, int sockfd, char *s){ char method[32], filename[32], account[32], password[32], phone[32]; sscanf(s, \u0026#34;%s /%s\u0026#34;, method, filename); if(strcasecmp(method, \u0026#34;POST\u0026#34;) == 0){ int len = strlen(s); int i; for(i = 0; i \u0026lt; len; i++){ if(i+2\u0026lt;len \u0026amp;\u0026amp; s[i]==\u0026#39;\\n\u0026#39; \u0026amp;\u0026amp; s[i+1]==\u0026#39;\\r\u0026#39;) break; } int j; i=i+12; for(j = 0; s[i+j]!=\u0026#39;\u0026amp;\u0026#39;; j++) account[j] = s[j+i]; i = i+j+6; for(j = 0; s[i+j]!=\u0026#39;\u0026amp;\u0026#39;; j++) password[j] = s[j+i]; /*2020.4.7成功解析出来账号和密码*/ pid_t pid; int status; int cgi_input[2]; int cgi_output[2]; char buff[1024]; /*创建输入管道*/ if(pipe(cgi_input) \u0026lt; 0){ perror(\u0026#34;pipe error\u0026#34;); exit(1); } /*创建输出管道*/ if(pipe(cgi_output) \u0026lt; 0){ perror(\u0026#34;pipe error\u0026#34;); exit(1); } /*创建子进程*/ if((pid = fork()) \u0026lt; 0){ perror(\u0026#34;fork error!\u0026#34;); exit(-1); } if(pid == 0){ dup2(cgi_input[0], 0); /*将子进程的STDIN重定向到cgi_input[0]*/ dup2(cgi_output[1], 1); /*将子进程的STDOUT重定向到cgi_output[1]*/ /*关闭剩余的两端*/ close(cgi_input[1]); close(cgi_output[0]); /*执行exec文件 即cgi*/ execl(\u0026#34;hello\u0026#34;, \u0026#34;anythingok\u0026#34;, NULL); exit(0); }else if(pid \u0026gt; 0){ /*父进程先给子进程发送数据 然后等待子进程执行完 再读数据*/ /*关闭不用的两个端口*/ close(cgi_input[0]); close(cgi_output[1]); /*父进程先写数据*/ int len = strlen(account); write(cgi_input[1], account, len); /*父进程阻塞等待读入*/ int n = read(cgi_output[0], buff, sizeof(buff)); if(strcmp(buff, password)==0\u0026amp;\u0026amp;strlen(password) != 0){ puts(\u0026#34;密码正确\u0026#34;); }else{ puts(\u0026#34;密码错误\u0026#34;); strcpy(filename, \u0026#34;register.html\u0026#34;); } // int ret = write(STDOUT_FILENO, buf, n); /*关闭管道*/ close(cgi_input[1]); close(cgi_output[0]); waitpid(pid, \u0026amp;status, 0); } } puts(filename); char mime[64]; if(strstr(s, \u0026#34;.html\u0026#34;)) strcpy(mime,\u0026#34;text/html\u0026#34;); else if(strstr(s, \u0026#34;.jpg\u0026#34;)) strcpy(mime,\u0026#34;image/jpeg\u0026#34;); char response[MAX_SIZE+MAX_SIZE]; sprintf(response, \u0026#34;HTTP/1.1 200 OK\\r\\nContent-Type: %s\\r\\n\\r\\n\u0026#34;, mime); int filefd = open(filename, O_RDONLY); if(filefd == -1){ perror(\u0026#34;open error\u0026#34;); exit(1); } int len = strlen(response); int n = read(filefd, response+len, sizeof(response)-len); write(sockfd, response, len+n); close(filefd); } //工作线程 void* worker(void* arg){ int sockfd = ((fds*)arg)-\u0026gt;sockfd; int epollfd = ((fds*)arg)-\u0026gt;epollfd; char buf[MAX_SIZE]; memset(buf, \u0026#39;\\0\u0026#39;, MAX_SIZE); //循环读取sockfd上的数据 直到收到EAGAIN while(1){ int ret = recv(sockfd, buf, MAX_SIZE-1, 0); if(ret == 0){ removefd(epollfd, sockfd); printf(\u0026#34;foreiner closed the connection\\n\u0026#34;); break; }else if(ret \u0026lt; 0){ if(errno == EAGAIN){ // reset_oneshot(epollfd ,sockfd); printf(\u0026#34;read later\\n\u0026#34;); break; } }else{ printf(\u0026#34;get connection:\\n\u0026#34;); //休眠5s模拟数据处理过程 accept_request(epollfd, sockfd, buf); sleep(5); break; } } } //命令行参数指定IP和端口 int main(int argc, char *argv[]){ if(argc \u0026lt; 2){ printf(\u0026#34;at least 2 arguments: file port, but you give %d\\n\u0026#34;, argc); return 1; } int port = atoi(argv[1]); int lfd, cfd, ret; struct sockaddr_in serv_addr, clie_addr; lfd = socket(AF_INET, SOCK_STREAM, 0); //创建套接字 assert(lfd \u0026gt;= 0); /*初始化服务器端的套接字地址*/ serv_addr.sin_family = AF_INET; serv_addr.sin_port = htons(port); serv_addr.sin_addr.s_addr = htonl(INADDR_ANY); //端口复用 此处没有卵用 int opt = 1; setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;opt, sizeof(opt)); ret = bind(lfd, (struct sockaddr *)\u0026amp;serv_addr, sizeof(serv_addr) ); assert(ret != -1); ret = listen(lfd, 128); //最大同时连接数 assert(ret != -1); epoll_event events[MAX_SIZE]; //返回的数组上限 int epollfd = epoll_create(10); assert(epollfd != -1); //注意监听的套接字不能设置为oneshot addfd(epollfd, lfd, false); //挂上红黑树监听 while(1){ ret = epoll_wait(epollfd, events, MAX_SIZE, -1); //永远不超时 if(ret \u0026lt; 0){ printf(\u0026#34;epoll failure\\n\u0026#34;); break; } for(int i = 0; i \u0026lt; ret; i++){ //循环处理有响应的事件 int sockfd = events[i].data.fd; if(sockfd == lfd){ //如果是监听事件则建立新的连接 socklen_t clie_addr_len; //套接字长度 clie_addr_len = sizeof(clie_addr); cfd = accept(lfd, (struct sockaddr*)\u0026amp;clie_addr, \u0026amp;clie_addr_len ); assert(cfd \u0026gt;= 0); //注册为oneshot事件 addfd(epollfd, cfd, false); //刚刚这里加入的事件加错了 }else if(events[i].events \u0026amp; EPOLLIN){ pthread_t tid; fds fds_for_new_worker; fds_for_new_worker.epollfd = epollfd; fds_for_new_worker.sockfd = sockfd; //新启动一个线程为sockfd服务 pthread_create(\u0026amp;tid, NULL, worker, (void*)\u0026amp;fds_for_new_worker); // pthread_detach(tid); //线程分离 } } } close(lfd); return 0; } 线程中调用fork函数 pthread_atfork函数确保fork调用后父进程和子进程都拥有一个清楚的锁状态。每个线程都可以独立的设置信号掩码。\nwaitpid回收子进程 #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; void sigchild_handler(int sig){ //在执行SIGCHLD信号期间 可能有多个SIGCHLD到达，但是未决信号集只记录一次。 //所以需要调用while循环回收再退出 while(waitpid(-1, NULL, WNOHANG) \u0026gt; 0){ puts(\u0026#34;回收成功\u0026#34;); } return; } int main(){ pid_t pid; int n = 5, i; signal(SIGCHLD, sigchild_handler); for(i = 0; i \u0026lt; n; i++){ pid = fork(); if(pid \u0026lt; 0){ perror(\u0026#34;fork error\u0026#34;); exit(1); }else if(pid == 0) break; //子进程 直接退出 } if(i \u0026lt; n){ //子进程 sleep(i); printf(\u0026#34;I am %dth child.\\n\u0026#34;, i); }else{ while(1){ //父进程不退出 sleep(1); printf(\u0026#34;I am parent %u\\n\u0026#34;, getpid()); } } return 0; } 自旋锁 线程同步的一种方式。使用自旋锁的线程会反复检查锁变量是否可用。自旋锁不会让出CPU，一种忙等待状态。死循环等待锁被释放。自旋锁避免了进程或线程上下文的开销。自旋锁不适合在单CPU中使用。\n#include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; const int N = 1e7; int num = 0; pthread_spinlock_t spin_lock; void *producer(void *){ int times = N; while(times--){ pthread_spin_lock(\u0026amp;spin_lock); ++num; pthread_spin_unlock(\u0026amp;spin_lock); } } void *comsumer(void*){ int times = N; while(times--){ pthread_spin_lock(\u0026amp;spin_lock); --num; pthread_spin_unlock(\u0026amp;spin_lock); } } int main(){ pthread_spin_init(\u0026amp;spin_lock, 0); pthread_t th1, th2; pthread_create(\u0026amp;th1, NULL, \u0026amp;producer, NULL); pthread_create(\u0026amp;th2, NULL, \u0026amp;comsumer, NULL); pthread_join(th1, NULL); pthread_join(th2, NULL); printf(\u0026#34;num = %d\\n\u0026#34;, num); return 0; } 条件变量 条件变量本身不是锁，但它可以造成线程阻塞。通常与互斥锁配合使用。给多线程提供一个汇合的场所。\npthread_cond_wait(\u0026amp;cond, \u0026amp;mutex) 1. 阻塞等待该条件变量直到满足 2.释放已经掌握的互斥锁 3.满足条件后重新拿锁 #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; const int MAX_BUF = 100; int num = 0; pthread_cond_t cond = PTHREAD_COND_INITIALIZER; pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; void *producer(void *){ while(true){ pthread_mutex_lock(\u0026amp;mutex); while(num \u0026gt;= MAX_BUF){ //由于阻塞解除时，只有一个物品可用 但是却有多个线程解除阻塞 所以需要循环检测一次 //满了 等待消费者消费 pthread_cond_wait(\u0026amp;cond, \u0026amp;mutex); printf(\u0026#34;缓冲区满了 等待消费者消费\\n\u0026#34;); } //生产一个物品 ++num; printf(\u0026#34;生产一个产品，当前产品数量为：%d\\n\u0026#34;, num); sleep(1); pthread_mutex_unlock(\u0026amp;mutex); //通知消费者可消费了 pthread_cond_signal(\u0026amp;cond); printf(\u0026#34;通知消费者...\\n\u0026#34;); sleep(1); } } void *comsumer(void*){ while(true){ pthread_mutex_lock(\u0026amp;mutex); while(num \u0026lt;= 0){ //缓冲区为空 等待生产者生产 pthread_cond_wait(\u0026amp;cond, \u0026amp;mutex); printf(\u0026#34;缓冲区空了 等待生产者生产\\n\u0026#34;); } //生产一个物品 --num; printf(\u0026#34;消费一个产品，当前产品数量为：%d\\n\u0026#34;, num); sleep(1); pthread_mutex_unlock(\u0026amp;mutex); //通知消费者可消费了 pthread_cond_signal(\u0026amp;cond); printf(\u0026#34;通知生产者...\\n\u0026#34;); } } int main(){ pthread_t th1, th2; pthread_create(\u0026amp;th1, NULL, \u0026amp;producer, NULL); pthread_create(\u0026amp;th2, NULL, \u0026amp;comsumer, NULL); pthread_join(th1, NULL); pthread_join(th2, NULL); printf(\u0026#34;num = %d\\n\u0026#34;, num); return 0; } ","permalink":"//localhost:1313/posts/006%E9%A1%B9%E7%9B%AE/","summary":"\u003ch2 id=\"webbench\"\u003ewebbench\u003c/h2\u003e\n\u003cp\u003e测压软件 最高并发3W\u003c/p\u003e\n\u003cp\u003ewebbench做测试时自身也会消耗CPU和内存资源，为了测试准确，需要将webbench安装在别的服务器上。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etar -xzvf webbench-1.5.tar.gz\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e webbench-1.5\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eapt-get install ctags\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emake \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e make install\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e测试\u003c/p\u003e","title":"006项目"},{"content":"单例模式 class A{ public: static A* getInstance(); static A* instance; private: A(); ~A(); }; A* A::instance = nullptr; //内存读写reorder不安全 导致双检查锁失效 //先分配内存 再执行构造器 最后返回给实例 //编译器的优化 A* A::getInstance(){ //读没有问题 写就有问题 //锁前检查 锁的粒度过大 锁后检查安全性 if(instance==nullptr){ mutex.lock(); if(instance==nullptr) instance = new A(); mutex.unlock(); } return instance; } 快排 归并 堆排 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; using namespace std; //快排 时间复杂度 平均nlogn 空间复杂度O(1) void quick_sort(int arr[], int l, int r){ if(l \u0026gt;= r) return; int x = arr[l+r \u0026gt;\u0026gt; 1]; int i = l-1, j = r+1; while(i \u0026lt; j){ while(arr[++i] \u0026lt; x); while(arr[--j] \u0026gt; x); if(i \u0026lt; j) swap(arr[i], arr[j]); } quick_sort(arr, l, j); quick_sort(arr, j+1, r); } //归并 //时间复杂度NlongN 空间复杂度N int tmp[105]; void merge_sort(int arr[], int l, int r){ if(l \u0026gt;= r) return; int mid = (l + r)\u0026gt;\u0026gt;1; merge_sort(arr, l, mid); merge_sort(arr, mid+1, r); //合并 int i = l, j = mid+1, k = 0; while(i \u0026lt;= mid \u0026amp;\u0026amp; j \u0026lt;= r){ //i和j注意了 if(arr[i] \u0026lt; arr[j]) tmp[k++] = arr[i++]; else tmp[k++] = arr[j++]; } while(i \u0026lt;= mid) tmp[k++] = arr[i++]; while(j \u0026lt;= r) tmp[k++] = arr[j++]; for(int i = 0; i \u0026lt; k; i++){ arr[l+i] = tmp[i]; } } //大根堆 把大交换上去 void heapify(int arr[], int r, int n){ int i = 2*r+1, j = 2*r+2; int mx = r; if(i \u0026lt; n \u0026amp;\u0026amp; arr[i] \u0026gt; arr[mx]) mx = i; if(j \u0026lt; n \u0026amp;\u0026amp; arr[j] \u0026gt; arr[mx]) mx = j; if(mx != r) { swap(arr[mx], arr[r]); heapify(arr, mx, n); } } //堆排序 堆化 堆顶取出交换到末尾去 void heap_sort(int arr[], int n){ for(int i = n; i \u0026gt;= 0; i--){ heapify(arr, i, n); //当前的点 总共的点 } //交换完成 for(int i = n-1; i \u0026gt;= 0; i--){ swap(arr[0], arr[i]); heapify(arr, 0, i); //总量减1 } } int main(){ int arr[]{1,93,6,45,2,7,8,45,2123,239,0,3}; int n = 12; // merge_sort(arr, 0, n-1); //如果从0编号 那么儿子节点为2i+1 2i+2 //最后一个节点是啥 heap_sort(arr, n); for(int i = 0; i \u0026lt; n; i++) printf(\u0026#34;%d \u0026#34;, arr[i]); puts(\u0026#34;\u0026#34;); return 0; } kmp算法 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;string\u0026gt; using namespace std; int Next[105]; void getNext(string p){ //按照左神讲的 考查的是当前位置的前一个字符串的最长前后缀 Next[0] = -1; Next[1] = 0; int cn = 0, i = 2; int n = p.size(); while(i \u0026lt; n){ if(p[cn] == p[i-1]) Next[i++] = ++cn; else if(cn) cn = Next[cn]; else Next[i++] = 0; //前后缀为0 } } void kmp(string p, string s){ //首先求next数组 getNext(p); int i = 0, j = 0; int m = s.size(); int n = p.size(); while(i \u0026lt; m \u0026amp;\u0026amp; j \u0026lt; n){ if(s[i] == p[j]) i++, j++; else if(Next[j] == -1) i++; //开头不匹配 else j = Next[j]; if(j==n){ cout\u0026lt;\u0026lt;i-n\u0026lt;\u0026lt;endl; //起始位置 j = Next[j-1]; i--; } } } int main(){ string text = \u0026#34;helloworldllo\u0026#34;; string pattern = \u0026#34;llo\u0026#34;; kmp(pattern, text); return 0; } LRU算法 strcpy和memcpy #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;string\u0026gt; #include \u0026lt;cstring\u0026gt; using namespace std; //内存拷贝函数 按字节拷贝 void* my_memcpy(void* dest, void* src, size_t count){ if(dest == NULL || src == NULL) return NULL; char* pdest = (char*) dest; char* psrc = (char*) src; while(count--){ *pdest++ = *psrc++; } return dest; } //字符串拷贝函数 仅用来拷贝字符串 char* my_strcpy(char* dest, const char* src){ if(dest == NULL || src ==NULL) return NULL; char* pdest = dest; while((*dest++ = *src++) != \u0026#39;\\0\u0026#39;); return pdest; } int main(){ char src[] =\u0026#34;hello\u0026#34;; char dest[100]; //my_memcpy(dest, src, strlen(src)); my_strcpy(dest, src); printf(\u0026#34;%s\\n\u0026#34;, src); return 0; } string类 class String{ public: String(const char* str = NULL); //通用构造函数 String(const String\u0026amp; str); //拷贝构造函数 ~String(); String\u0026amp; operator+(const String \u0026amp;str); String\u0026amp; operator+=(const String \u0026amp;str); char\u0026amp; operator[](const int n) const; String operator=(const String \u0026amp;str) const; bool operator==(const String \u0026amp;str)const; bool operator\u0026lt;(const String \u0026amp;str) const; bool operator\u0026lt;(const String \u0026amp;str) const; size_t size const; //获取长度 //流运算符\u0026gt;\u0026gt; \u0026lt;\u0026lt; private: char* data; //字符串 size_t length; //长度 } String::String(const char* str){ //通用构造函数 if(!str){ length = 0; data = new char[1]; *data=\u0026#39;\\0\u0026#39;; }else{ length = strlen(str); //对空指针调用strlen会导致内存错误 data = new char[length+1]; strcpy(data, str); } } String::String(const String\u0026amp; str){ //拷贝构造 length = str.length; data = new char[length+1]; strcpy(data, str.data); } //析构 String::~String(){ delete []data; length = 0; } //赋值重载 String\u0026amp; String::operator=(const String \u0026amp;str){ delete []data; length = str.length; data = new char[length+1]; strcpy(data, str.data); return *this; } 智能指针shared_ptr #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; using namespace std; template \u0026lt;typename T\u0026gt; class SmartPtr{ private: T * ptr; int* use_count(); SmartPtr(T* p); SmartPtr(const SmartPtr\u0026lt;T\u0026gt; \u0026amp; orig);//拷贝 SmartPtr\u0026lt;T\u0026gt;\u0026amp; operator=(const SmartPtr\u0026lt;T\u0026gt;\u0026amp; orig); ~SmartPtr(); } SmartPtr::SmartPtr(T* p){ ptr = p; *use_count = 1; } SmartPtr::~SmartPtr(){ //析构 delete ptr; ptr = nullptr; delete use_count; use_count = nullptr; } int main(){ return 0; } 写一个函数在main函数执行前先运行 #include \u0026lt;iostream\u0026gt; using namespace std; class Hello{ public: Hello(){ cout\u0026lt;\u0026lt;\u0026#34;before main!\u0026#34;\u0026lt;\u0026lt;endl; } }; Hello w; //全局变量在main之前执行 int main(){ cout\u0026lt;\u0026lt;\u0026#34;I am main\u0026#34;\u0026lt;\u0026lt;endl; return 0; } 匿名管道pipe #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(){ pid_t fd[2]; pipe(fd); //创建管道 int ret = fork(); if(ret \u0026gt; 0){ //父进程 父写 fd[0]读 fd[1]写 close(fd[0]); char *str =\u0026#34;hello world\\n\u0026#34;; write(fd[1], str, strlen(str)); sleep(1); }else if(ret == 0){ //子进程 子读 fd[1]关闭 close(fd[1]); char buf[1024]; int n = read(fd[0], buf, sizeof(buf)); //写到显示器上 write(1, buf, n); } return 0; } rand7产生rand10 leetcode470\nclass Solution { public: int rand10() { int t; while(true){ t = rand7() + (rand7()-1) * 7; if(t \u0026lt;= 40) return t%10 +1; }; return 0; } }; 反转二叉树 class Solution { public: TreeNode* invertTree(TreeNode* root) { //遍历所有点 然后交换左右孩子 dfs(root); return root; } void dfs(TreeNode* root){ if(!root) return; dfs(root-\u0026gt;left); dfs(root-\u0026gt;right); swap(root-\u0026gt;left, root-\u0026gt;right); } }; ","permalink":"//localhost:1313/posts/005%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","summary":"\u003ch2 id=\"单例模式\"\u003e单例模式\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eclass\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nl\"\u003epublic\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nf\"\u003egetInstance\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nl\"\u003eprivate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nf\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t    \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"nf\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//内存读写reorder不安全 导致双检查锁失效\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//先分配内存 再执行构造器 最后返回给实例\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//编译器的优化 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"nf\"\u003egetInstance\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e//读没有问题 写就有问题 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\u003cspan class=\"c1\"\u003e//锁前检查 锁的粒度过大 锁后检查安全性 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003emutex\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003einstance\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"nf\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003emutex\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eunlock\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"快排-归并-堆排\"\u003e快排 归并 堆排\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//快排 时间复杂度 平均nlogn 空间复杂度O(1) \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003equick_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eswap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003equick_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003equick_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//归并\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//时间复杂度NlongN  空间复杂度N\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e105\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003emerge_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003emerge_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"nf\"\u003emerge_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e//合并\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//i和j注意了\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//大根堆 把大交换上去\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eheapify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003emx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003emx\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003emx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003emx\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003emx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emx\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eswap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003emx\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eheapify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emx\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//堆排序 堆化 堆顶取出交换到末尾去\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eheap_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eheapify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//当前的点 总共的点\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//交换完成\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eswap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eheapify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//总量减1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[]{\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e93\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2123\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e239\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// merge_sort(arr, 0, n-1);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e//如果从0编号 那么儿子节点为2i+1 2i+2\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e//最后一个节点是啥\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nf\"\u003eheap_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%d \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003eputs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"kmp算法\"\u003ekmp算法\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e105\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003egetNext\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//按照左神讲的 考查的是当前位置的前一个字符串的最长前后缀\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecn\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ecn\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ecn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecn\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ecn\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ecn\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//前后缀为0\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003ekmp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//首先求next数组\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nf\"\u003egetNext\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//开头不匹配\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//起始位置\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;helloworldllo\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003epattern\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;llo\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003ekmp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epattern\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"lru算法\"\u003eLRU算法\u003c/h2\u003e\n\u003ch2 id=\"strcpy和memcpy\"\u003estrcpy和memcpy\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstring\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//内存拷贝函数 按字节拷贝\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nf\"\u003emy_memcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edest\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epdest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epsrc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epdest\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epsrc\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//字符串拷贝函数 仅用来拷贝字符串\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nf\"\u003emy_strcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edest\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epdest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"sc\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003epdest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e//my_memcpy(dest, src, strlen(src));\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nf\"\u003emy_strcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edest\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%s\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"string类\"\u003estring类\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eclass\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nl\"\u003epublic\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//通用构造函数\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//拷贝构造函数\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e+=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//获取长度\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e//流运算符\u0026gt;\u0026gt; \u0026lt;\u0026lt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"nl\"\u003eprivate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//字符串\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//长度\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//通用构造函数\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sc\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003estrlen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//对空指针调用strlen会导致内存错误\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003estrcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//拷贝构造\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003estrcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//析构\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e::~\u003c/span\u003e\u003cspan class=\"nf\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edelete\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//赋值重载\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edelete\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003estrcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"智能指针shared_ptr\"\u003e智能指针shared_ptr\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstring\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003etemplate\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kr\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eclass\u003c/span\u003e \u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nl\"\u003eprivate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nf\"\u003euse_count\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eorig\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//拷贝\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eorig\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eptr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003euse_count\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"o\"\u003e::~\u003c/span\u003e\u003cspan class=\"nf\"\u003eSmartPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e  \u003cspan class=\"c1\"\u003e//析构\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003edelete\u003c/span\u003e \u003cspan class=\"n\"\u003eptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eptr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edelete\u003c/span\u003e \u003cspan class=\"n\"\u003euse_count\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003euse_count\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"写一个函数在main函数执行前先运行\"\u003e写一个函数在main函数执行前先运行\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eHello\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003eHello\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;before main!\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eHello\u003c/span\u003e \u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//全局变量在main之前执行 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;I am main\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"匿名管道pipe\"\u003e匿名管道pipe\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unistd.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003epid_t\u003c/span\u003e \u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003epipe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//创建管道\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003efork\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//父进程 父写 fd[0]读 fd[1]写\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"nf\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;hello world\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nf\"\u003estrlen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003esleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"c1\"\u003e//子进程 子读 fd[1]关闭\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"nf\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1024\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e//写到显示器上\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"nf\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"rand7产生rand10\"\u003erand7产生rand10\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://leetcode-cn.com/problems/implement-rand10-using-rand7/\"\u003eleetcode470\u003c/a\u003e\u003c/p\u003e","title":"005数据结构"},{"content":"B+树 具有n个关键字的节点含有n个分支。而在B树中，具有n个关键字的节点含有n+1个节点。 B+树的叶子节点包含了所有关键字，并且包含信息。 B+树非叶子节点只起索引作用，不存数据。 B+数在叶子节点使用指针将前后磁盘块中的索引连接起来，形成一个线性链表，方便范围查询。 什么是索引 索引是数据表中对字段进行排序的一种数据结构。常用的索引有\nB树 哈希索引 全文索引 Rtree索引\nAVL树，B树，B+树，红黑树，哈希表。\n哈希表和B树不利于范围查找。红黑树在数据量大的时候性能会下降。\n**聚集索引：**数据和索引在一起的。\n**非聚集索引：**索引文件和数据文件是分离的。\n联合索引：对多个字段同时建立的索引。Mysql从左到右的使用索引中的字段，一个查询可以只使用索引中的一部份，但只能是最左侧部分，跳跃索引查询就会导致索引失效。\nB树和B+树的区别 B树：叶节点具有相同的深度，所有索引元素不重复，节点中的数据索引从左到右递增排列。 B+树：非叶子节点不存储数据，只存储索引，叶子节点包含了全部的关键字且存储数据。叶子节点用指针连接从左往右递增排序，提高区间访问的性能。 mysql存储引擎myISAM和InnoDB 存储引擎是基于表的，而不是数据库。\nInnoDB引擎：支持事务，行锁（适合高并发），支持外键。mysql5.5版本后的默认存储引擎 myISAM引擎：不支持事务，不支持外键，支持表锁。优势是访问的速度快。mysql5.5版本前的默认存储引擎。myISAM索引文件和数据文件是分离的。查询较多的更新较少的情况下使用myisam存储引擎。 数据库三大范式 数据库中的所有字段都是不可分割的原子值 满足第一范式的前提下，除主键外的每一列都必须完全依赖于主键。如果不完全依赖，只能发生在联合主键下。 满足第二范式的前提下，除开主键列的其他列之间不能有传递依赖关系。 事务的四个特性ACID 事务是作为单个逻辑工作单元执行的一系列操作。要么完全执行，要么完全不执行。\n**原子性 ：**同一事务中多个操作不能分割，必须是一个整体。 **一致性 ：**事务操作前后的总量保持一致。 **隔离性 ：**多个事务之间的操作互不干扰。 **持久性：**事务提交以后，对数据库中数据的改变是永久的。 事务隔离级别 事务分为四个隔离级别：分别是读未提交，读提交，可重复读，串行化。从前往后隔离级别依次递增，同时执行效率依次下降。mysql的默认隔离级别是可重复读。\n读未提交：会产生脏读，即一个事务读取了另一个事务未提交的内容。 读提交：可以解决脏读问题，但是会产生不可重复读，即一个事务在执行的过程中得到的结果不一致。 可重复读：可以解决不可重复读的问题，但会产生幻读，即一个事务无法看到另一个事务已经提交的内容。 **串行化：**可以解决幻读问题。当同一张表被另一个事务操作时，其他事务的写操作是不可以进行的，进入串行化排队，直到另一个结束，同时还为超时的情况下才可以继续执行。 set global transaction isolation level read committed # 修改隔离级别\u0026#39; select @@x_isolation # 查看隔离级别 主键和外键约束 主键：**唯一且非空。**一个表有且只能由一个主键约束。创建主键会自动创建对应的索引，同样删除主键，对应的索引也会被删除。\n外键约束：如果定义了外键约束，主表中没有的数据在子表中是不可以被使用的。主表中的记录被子表引用，是不可以被删除的。\ninner join 和 left join 等值联接：inner join返回两个表中联接字段相等的行 左联接：left join 返回左表所有记录和右表中联接字段相等的记录，如果左表中的记录在右边不存在，则对应字段设为null。 redis 是C语言编写的基于内存可持久化的key-value内存数据库，使用的是epoll单线程模型。常用的数据结构有set， list，string, hash, sorted set。\n查询 分组查询：count() sum() max() min() avg()\n聚合查询：7种 A B A∪B A∩B A - A∩B B - A∩B A∪B - A∩B\n左连接： A - A∩B 右连接：B - A∩B 内连接：A∩B\n悲观锁和乐观锁 悲观锁： 每次去拿数据时都认为别人会修改，所以每次在拿数据的时候都会上锁。悲观锁由数据库自己实现，共享锁和排他锁是悲观锁的不同实现。悲观锁的缺点：效率低，并行差，增加死锁的概率。 乐观锁：每次去拿数据都认为别人不会修改，所以不会上锁。乐观锁适用于读多，写少的场景。乐观锁常见的实现方式：版本号机制和CAS自旋算法。乐观锁的缺点：ABA问题，循环时间长开销大，只能保证一个共享变量的原子操作。 explain 查看执行计划 使用explain关键字可以模拟优化器执行sql查询语句，从而知道mysql是如何处理sql语句的。分析查询语句或表结构的性能瓶颈。\nexplain + sql语句 show profile 用来分析当前会话中语句执行的资源消耗情况。\n什么时候应该创建索引 频繁查询字段 什么时候不应该创建索引 where条件里用不到的字段 频繁更新的字段 表记录太少\u0026lt;300W 重复且平均的表字段 B+树 B+树是B树的变形，B+树非叶子节点只存索引，不存数据，叶子节点存储所有的索引和数据。B+树三层可以存储上百万条数据，磁盘IO最多三次，每次读取磁盘块到内存后，使用二分查找找到索引的位置。\nB+树是聚集索引，数据和索引在一起。B+树使用指针将叶子节点的连接起来。\nB树 是一种多路平衡二叉树，m阶B树，每个节点最多可以有m-1关键字。所有叶子节点在同一层。每个节点保存索引和数据。\n索引 索引是按照某个字段排序的数据结构。\nACID 事务时单个逻辑工作单元的一系列操作。\n原子性：事务的操作是不可分割的，要么完全成功，要么完全失败。\n一致性：事务操作前后的总量保持不变。\n隔离性：事务之间的操作应该相互隔离。\n持久性：事务一旦提交后，数据库中的值不可更改。\n事务的隔离级别 读未提交：产生脏读，即一个事务可以读取另一个事务未提交的内容。 读提交：解决脏读，产生不可重复读，即事务的两次读取结果不一致。 可重复读：解决不可重复读，但是会产生幻读，即一个事务明明提交了，但是在另一个事务中没有更新。 串行化：当两个事务都在写入内容时，必须排队，当两个事务提交后，才可以执行后续事务。 数据库三大范式 数据库中的所有字段都是不可分割的原子值 在满足第一范式的前提下，除开主键外的其他列都必须完全依赖于主键。 在满足第二范式的前提下，除开主键外的其他列之间不能有传递依赖关系。 myisam和innoDB myisam不支持事务，不支持外键，支持表锁。查询速度较快。适合读多更新少的表。\ninnoDB支持事务，支持外键，支持行锁，因为锁的粒度比较小，所以适合高并发。\n持久化 利用永久性存储介质将数据进行保存，在特定的时间将保存的数据进行恢复的机制叫做持久化。确保数据安全。\n将当前数据状态进行保存，快照形式。RDB 将数据的操作过程进行保存，日志形式。AOF ","permalink":"//localhost:1313/posts/004%E6%95%B0%E6%8D%AE%E5%BA%93/","summary":"\u003ch2 id=\"b树\"\u003eB+树\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e具有n个关键字的节点含有n个分支。而在B树中，具有n个关键字的节点含有n+1个节点。\u003c/li\u003e\n\u003cli\u003eB+树的叶子节点包含了所有关键字，并且包含信息。\u003c/li\u003e\n\u003cli\u003eB+树非叶子节点只起索引作用，不存数据。\u003c/li\u003e\n\u003cli\u003eB+数在叶子节点使用指针将前后磁盘块中的索引连接起来，形成一个线性链表，方便范围查询。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"什么是索引\"\u003e什么是索引\u003c/h2\u003e\n\u003cp\u003e索引是数据表中对\u003cstrong\u003e字段\u003c/strong\u003e进行排序的一种\u003cstrong\u003e数据结构\u003c/strong\u003e。常用的索引有\u003c/p\u003e","title":"004数据库"},{"content":"volatile 用来告诉编译器不要对该变量做任何优化，编译器每次操作该变量时，一定要从内存中取出，而不是使用寄存器中与存在的值，因为值可能已经发生了改变。\n应用场景：\n并行设备的硬件寄存器（如状态寄存器）。 多线程中共享变量。 const 用于限定变量，函数和指针不可改变。\nconst限定全局变量时，变量放在静态区。const限定局部变量时，变量放在栈区。 const修饰类中的成员函数时，表示不可对类的对象更改，如果需要更改类中的成员变量，可以使用mutable关键字。 内联函数和宏定义 宏定义在预编译时展开，内联函数在编译时展开。 宏定义只是简单的文本替换，不进行参数的有效性检查。内联函数会进行类型检查，然后将函数体嵌入到目标代码中。 宏定义不加括号容易出错。内联函数没有普通函数的栈操作，效率很高，但是不正确的时候内联函数会导致代码体积过大。 static 静态全局变量，静态局部变量，静态成员变量，静态成员函数\n静态全局变量和静态局部变量都放在静态区，只在声明时初始化一次，仅在本文件中可见，变量在程序运行期间一直存在。静态局部变量的作用域范围仅在局部，下次调用紧接着上次调用的结果值改变。 静态成员函数和静态成员变量没有this指针，必须通过类名才能访问。 malloc 和 new malloc和free是库函数，new和delete是运算符，可以重载。 malloc申请内存时需要指定内存大小，返回一个void*类型，通常需要强转。new申请内存时无需指定内存大小，返回一个对应类型的指针。 malloc不进行初始化。new在创建非内部类型的对象时，调用构造函数初始化，消亡时会调用析构函数。 malloc申请失败时返回null指针，new申请失败时抛出异常。 指针和引用 引用创建时必须初始化，初始化后不可以改变。指针创建时可以不初始化，初始化时需要分配内存，初始化后也可以改变。引用比指针安全。 引用不存在空值引用，指针可以指向空值 引用的本质是指针常量，由编译器完成转换。 extern 可以被其他源文件调用。 告诉编译器，extern限定的代码使用C语言的编译和连接方式。因为C++支持重载，而C不支持，所以可能导致函数编译后的名称不一致，从而找不到对应的函数。 多态的原理 多态分为静态多态和动态多态。静态多态是通过重载和模板实现的，动态多态是通过继承和虚函数实现的。\n动态多态是让基类的指针或引用指向派生类的对象实现的。定义为虚函数的基类，编译器会自动创建一个虚函数表，派生类在继承时会继承这个虚函数表，每个创建的对象拥有一个虚函数表指针，这个指针指向虚函数表，如果派生类重写了基类的虚函数，则对应的虚函数表入口地址发生了更新。虚函数表为所有对象所共享，通常放在代码段。\n什么是进程 进程是分配资源的基本单位，是程序运行的实例。进程通常分为数据段，代码段和进程控制块。进程的地址空间相互独立，一个进程不可访问另一个进程的数据。进程切换时的开销相对于线程来说比较大，需要保存寄存器的值和刷新块表，切换地址空间等。\n进程间的通信方式 有名管道pipe 无名管道fifo 消息队列 共享内存 信号量 信号 套接字 线程是什么 线程是CPU调度的基本单位。线程是进程的一个执行流程。一个进程中可以由多个线程。线程共享进程的地址空间。线程自身几乎不拥有系统资源，除了栈和寄存器。线程间的通信较为容易。但是需要同步。常用的同步机制有互斥锁，读写锁，信号量，条件变量。\n线程共享 进程打开的文件描述符表 进程ID和组ID 信号的处理方式 打开的工作目录 进程的地址空间(堆区，栈区，共享区) 线程独享 线程ID 线程的寄存器 线程的栈 信号屏蔽字 线程优先级 错误返回码errno 信号 信号是一种不精确的通信方式。常用的信号有15号信号，杀死进程 29号进程 11号段错误\nhttp和https的区别 https是安全版的http协议。\nget和post的区别 get用来获取资源，post用来创建资源。\nget将数据放在url地址栏中，使用问号与url分割，数据间用取地址符分割。post将数据放在请求体中。\n安全性上get放在url容易暴露隐私信息，而post放在请求体中可以适当的避免。\nget在传输的数据受url地址栏的限制，post不受这种限制\nget的操作是幂等的，多次操作产生的影响相同，而post是非幂等的\nB树和B+树的区别 B树是多叉平衡树，**M阶的B树，每个节点最多有M-1个关键字，**每个节点的关键字都按照从小到大的顺序排列，因此查询时可以使用二分查找法。\nB树中所有叶子节点都位于同一层，每个节点都存有索引和数据。\nB树的优点在于查询单个数据时，由于每个key都存有对应的date，查询到后可以直接取回。\nB+树非叶子节点只存索引不存数据，每个叶子节点增加一个指向相邻接叶子节点的指针，所有的节点都存在叶子节点。B+树的优点在于范围查询时，可以利用相邻的指针获得指定范围内的数据。\n网络拥塞 慢启动 拥塞避免 快速重传 快恢复 TCP和udp的区别 tcp面向连接的可靠的流式协议，具有超时重传和确认等机制。\nudp面向无连接的报文协议，发出去就不管了，收则全收，丢则全丢。\n智能指针 unique_ptr\nshared_ptr\nweak_ptr\n四种强制类型转换 const_cast去掉const属性的转换，包括const指针和引用\nstatic_cast用于低风险的转换，比如字符型转整形\ndynamic_cast 用于具有继承关系的派生类和子类的转换，当基类转为子类时，如果转换失败会返回NULL\nreinterpret_cast 任何类型都能转，风险较高\npost和put的区别 post用来创建资源，put用来更新资源\npost是非幂等的，put是幂等的。\n8中请求方法：\nhttp 1.0: get post head\nhttp 1.1: put delete options connect trace\nmmu内存管理器 主要作用：虚拟内存到物理内存的地址映射。 设置修改内存访问级别。\n虚拟内存的作用 解决主存容量有限 分隔进程，保证进程空间彼此独立不受干扰 基于局部性原理进行页面替换 虚拟内存的大小由计算机的地址总线决定\ncache名字和TLB命中没有必然联系，是两种独立的机制。\nCPU和Cache之间交换的单位是字节，Cache和内存之间交换的单位是块。\ncoredump文件 gdb可以用于分析coredump文件。coredump文件含有进程被终止时内存/CPU寄存器和各种函数调用栈的信息。\n产生coredump文件的原因：\n内存访问越界 多线程使用了线程不安全的函数 多线程读写的数据未加锁保护 栈溢出 core文件没有符号表信息，必须结合可执行文件才可调试\n模板特化 全特化：模板参数被指定未确定的类型\n偏特化：模板参数没有被全部确定，需要编译器在编译时进行确定。只能偏特化类模板，不能偏特化函数模板。\n别名模板和变量模板属于语法糖\n元编程 在编译时计算出运行时需要的常数，类型和代码的方法。\n右值引用 右值引用指向要被销毁的对象。右值要么是字面常量，要么是在表达式求值过程中创建的临时对象。\nmove函数将左值转换为右值，调用move函数后源对象只能赋值或销毁。\noverride override在子类中标记某个函数，表示想要覆盖已有的虚函数，如果没有覆盖，编译器会报错。\n加作用域运算符调用特定类的虚函数\n内联函数的优劣 优点：减少函数调用的开销，包括寄存器值的保存和实参的拷贝等。 缺点：增加函数体积，可能导致cache装不下，从而减少了cache的命中率。 inline只是一个请求，编译器有权拒绝。\n拷贝构造函数 调用场景：\n一个对象以值传递传参 一个对象以值传递的方式从函数返回 一个对象通过另一个对象初始化 空类 占有一个字节\n有构造，析构，拷贝，赋值运算符，取地址运算符。\n构造函数可以被重载，析构函数不可以被重载且不能带参数。\nexplicit explicit取消隐式转换，类中构造函数默认是implicit\nexplicit关键字的作用是防止类构造哈桑农户的隐式自动转换，只对有一个参数的构造函数有效。\n堆和栈的区别 申请方式不同。栈由操作系统自动分配，堆需要程序员自己申请。 生长方向不同。栈由高地址向地址生长，是一块连续的内存区域。堆由地址向高地址生长，是不连续的内存区域。在一个链表中记录空间内存地址。 分配速度。栈由系统分配，速度较快。堆使用new分配，速度较慢，且容易产生内部碎片。 C++ 和python的区别 python是解析性语言，无需编译，方便快捷，跨平台性很好。\nC++是编译型语言，先编译后执行，编译后通常不能跨平台。\npython使用严格的缩进来表示不同级别的代码块，在C++中使用花括号。\n索引 select语句调用函数后就不会用到索引\nstatic的作用 static可以用来修饰函数和变量。修饰全局变量和局部变量时都是放在静态区，static变量只初始化一次，在程序结束时销毁，全局和局部的区别在于作用域不同。static可以修饰普通成员函数，表明这个函数只在本文件中有效。static修饰类成员变量是，这些变量为这个类所共享，static修饰类成员函数时，也是所有对象共享这个函数，该函数中没有this指针。同时static类成员函数中只能调用static修饰的函数。\n静态存储区 存放的static修饰的全局变量和局部变量，const修饰的变量以及字符串。 数据段和静态区的区别 数据段存放的是代码的二进制指令。静态区是变量。\n虚函数的实现机制 每个含有虚函数的类都有一个虚函数表，类创建的对象都由编译器自动生成一个虚函数表指针来指向虚函数表。子类继承时会继承这个虚函数表，在子类中如果重写了父类定义的虚函数，这个虚函数中的对应内容会替换为重写的内容。当父类指针或引用指向子类对象时，调用对用对应的虚函数时会根据虚函数表指针找到虚函数表，然后从表中找到重写的虚函数入口地址，然后实现对应的行为。虚函数使代码更具有扩展性。\npython的多态 子类继承父类，子类重写父类的函数，调用时就自动调用了子类的函数。\nC++和python的区别 C++是编译型语言，需要先编译再执行，编译后通常不可以跨平台。 python是解释型语言，直接运行，跨平台好。上手快，容易浮于表面不够深入。 python带来的收益 快速上手机器学习和深度学习，直接调用大量的库函数。\nSTL底层容器和实现原理 vector是动态数组，分配连续的内存，2倍扩容。 list双向表，插入删除效率高。 map和set红黑树，有序的容器。 stack和queue底层可能都是数组实现 unordered_map和unordered_set哈希表。 array栈上分配的数组执行效率快。 tuple元组多数据类型的集合。 快排 基于交换和分治的算法， 平均nlogn 最坏n平方\n四次挥手 主动关闭方发送FIN标志位，自身状态进入FIN_WAIT_1被动关闭方收到FIN后，发送ACK确认，自身进入CLOSE_WAIT状态，当主动关闭方收到ACK后，进入FIN_WAIT_2状态，此时主动关闭方只能接收数据，不能发送数据，因为TCP是全双工的，所以要等待被动关闭方关闭后才结束。此时进行了两次挥手，双方进入半关闭状态。当被动关闭方需要关闭时，发送FIN标志位，发出后自身状态进入LAST_ACK状态，如果对方收到FIN标志位后，发送ACK应答，自身进入TIME_WAIT状态，等待2MSL后关闭连接。等待的2MSL是报文在网络传输中一个来回的长度。确保最后一个ACK能被对方收到。\nstatic关键字 static可以修饰普通函数变量和类成员函数和变量。\nstatic修饰普通变量时，分为全局变量和局部变量，两者都保存在静态区，并且只初始化一次，在整个程序运行期间一直存在。全局变量和局部变量的区别是作用域不同。 static修饰普通函数时，说明此函数只在本文件中可见，防止多个文件的同名冲突。 static修饰类中的成员变量时，必须在类中声明，在类外初始化，初始化的时候分配内存，所有的static成员变量为所有对象共享。 static修饰类中的成员函数时，只能调用static的变量和函数，没有this指针，所有对象共享这个函数，可以使用类名直接调用。 变量分为全局变量和局部变量，static修饰全局变量时，表示这个变量只在本文件中可见\nconst关键字 const用于限定变量指针和函数不可改变，方便编译器做类型检查。\ncons修饰变量时必须初始化。const全局变量通常放在静态区，const局部变量放在栈区。 cosnt修饰成员函数时，函数中的成员变量不可更改，如果要修改成员变量需要声明为mutable const修饰指针有两种，常量指针和指针常量，常量指针是指针的指向的值不可改变，而指针的指向可以改变。指针常量是指向不可变，而值可变。 const和define的区别 const明确指定类型，编译器对类型做检查，而define没有类型也不 检查。 const分配内存，而define不分配。 const在编译期处理，而define在预编译期进行宏替换。define的宏替换不加括号会产生严重的影响。 指针和引用的区别 指针保存的是所指对象的地址，而引用是所指对象的别名。指针通过解引用间接访问所指的对象，而引用直接访问。 指针可以有多级，而引用最多两级。当有两个取地址符时，是右值引用，右值引用可以减少深拷贝的次数。 指针定义时可以不初始化，即使初始化后也可以改变。而引用定义时必须初始化，初始化后不可以改变。 引用的本质是指针常量，编译器帮助转换。指针常量的指向不可以改变，值可以变。 define与内联函数的区别 内联函数是一个函数，在编译期插入到调用的地方，而define在预处理期进行替换。 内联函数避免了函数调用时的压栈和参数拷贝等操作，提高了性能。 内联函数对参数有类型检查。define不加括号容易出错。 new和malloc的区别 malloc是库函数，new是运算符 malloc只分配内存不初始化，而new不仅分配内存也初始化。new分配内存以后自动调用构造函数。 malloc分配内存时必须指定内存大小，而new可以自动计算。malloc分配完成后返回的是void*类型，需要强转，而new返回的是对应类型的指针。 malloc分配内存失败时返回NULL，而new分配内存失败时抛出bad_alloc异常。 http和https的区别 两者都是用于客户端和服务器端通信。\nhttps是http的安全版。\n主要区别在于：\nhttp是明文传输，https是密文传输。 http默认端口是80， https的默认443 https需要验证服务器端的身份，如果CA证书不正确则会中断通信。 CA证书需要成本，加密解密的过程增加CPU和内存的开销。 https增加了ssl层，用于确保传输的安全性。\n通信前先进行ssl层的握手，首先客户端ssl版本号和加密组件发送给服务器端。\n服务器端筛选出可用的ssl版本号和加密算法同时加上CA证书发送给客户端。\n客户端验证CA证书的有效性，如果无效则中断通信。\n若有效客户端发送加密的pre-master secret随机密码串，这一步使用的是非对称加密，用于协商后面对称加密的密钥，所以这一步不能被篡改和截获。客户端得到服务器端的响应后，且验证通过后，后续就使用对称加密加密算法进行加密。然后进行TCP三次握手。\nhttp1.0和http1.1的区别 http1.0只支持短连接，即一次通信完成后就立即断开\nhttp1.1支持长连接，一次TCP建立以后，可以进行多次请求。\nhttp1.0只提供了三种请求方法：get post head\nhttp1.1增加了五种请求方法：put delete connect trace options\nhttp1.1增加了许多状态码，比如100 continue 表示已经收到，等待后续的资源。206 partial content 部分资源\nhttp1.1支持一个物理主机上可以有多个虚拟主机共用一个IP\n","permalink":"//localhost:1313/posts/%E5%85%AB%E8%82%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","summary":"\u003ch2 id=\"volatile\"\u003evolatile\u003c/h2\u003e\n\u003cp\u003e用来告诉编译器不要对该变量做任何优化，编译器每次操作该变量时，一定要从内存中取出，而不是使用寄存器中与存在的值，因为值可能已经发生了改变。\u003c/p\u003e\n\u003cp\u003e应用场景：\u003c/p\u003e","title":"八股基础"},{"content":"逻辑用语千万条，第一首先往里套。 首先，其次，然后，最后。 第一，第二，第三，第四。 书籍 《C++ primer》 第五版 《后台开发》 徐晓鑫 《linux高性能服务器编程》 游双 《redis设计与实现》黄健宏 《muduo库》陈硕 static static的使用可以分为两类，一类是用在普通变量和函数上，另一类是用在类中。\n普通变量分为全局变量和局部变量。声明为静态全局变量是在全局区分配内存，并且只在当前文件可见，在文件之外是不可见的。其他文件定义同名变量不会发生冲突。变量的值只在第一次执行时进行初始化。声明为静态局部变量时与全局变量类似，只是作用域为局部作用域。 静态普通函数，只在当前文件中可见，其他文件中定义同名函数不会发生冲突。 static用在类中，首先是静态成员变量，**在类中声明，类外初始化。**所有对象共享一份数据。 然后是静态成员函数：所有对象共享同一个函数，静态成员函数只能访问静态成员变量。 多态 多态分类两大类：静态多态和动态多态。静态多态是重载和模板。动态多态：也叫运行时多态，是通过继承和虚函数实现的。在具有继承关系的子类中，子类重写父类的虚函数，通过父类引用或指针指向子类对象时，产生不同的行为叫做多态。\n多态的核心在于虚函数表指针，每个对象都有一个虚函数表指针，虚函数表指针指向一张虚函数表，表中记录了虚函数的入口地址，如果子类重写虚函数后，这个地址就会替换掉。多态的好处在于更方便程序的扩展，坏处在于每个对象多了一个4字节的指针，同时每次查询虚函数表需要耗时。\n智能指针 C++11有3个智能指针，分别是unique_ptr, shared_ptr和weak_ptr\nunique_ptr独享指针的所有权，无法进行拷贝构造赋值的操作，只能通过move函数进行所有权的转换。 shared_ptr共享对象，它使用引用计数来保存当前有多少个智能指针在引用这个对象，当引用计数降为0时，对象会被销毁。 weak_ptr称为弱引用，用于辅助shared_ptr正常工作，主要解决shared_ptr可能会产生的环形引用问题。weak_ptr不会增加对象的引用计数，共享指针可以直接赋值给弱指针，同时弱指针可以使用lock函数来获取shared_ptr对象 malloc和new malloc和new都是在堆上开辟内存，进行动态的管理。\nnew是操作符，malloc是库函数 malloc只负责开辟内存，没有初始化功能。new不但能开辟内存，还可以初始化。 malloc必须指定开辟内存的大小，并且返回类型为void*，因此malloc的返回值一般都需要进行类型转换。new可以自动计算出所需内存的大小，并且返回指定类型的指针。 malloc和new如果操作是内置数据类型两者基本类似，不同在于申请失败时。malloc申请失败时返回**NULL。**new申请失败抛出异常。 自定义类型时，new先调用operator new函数申请空间，然后在申请的空间上执行构造函数。 C++内存模型 从高地址到低地址\n环境变量和命令行参数 栈区 共享区 堆区 未初始化数据段.bss 初始化数据段.data 代码段.text 指针和引用的区别 指针保存的是所指对象的地址，而引用是所指对象的别名。指针需要通过解引用间接访问对象的值，引用可以直接访问。 指针可以有多级指针，而引用最多两级。并且两个取地址符是右值引用。右值引用是为了减少深拷贝的次数。 指针可以不初始化，即使初始化以后也可以改变。而引用必须初始化，同时初始化以后不许改变。 引用的本质是指针常量。指针常量不可以修改指向，但是可以修改指向的值。常量指针刚好与之相反。 vector底层原理 首先，vector的基类是三根指针，分别是start/finish/end_of_storage用来指示当前分配到的空间所用的起始位置，终止位置和容量尾部。然后，当finish指针到达end_of_storage的位置时，操作系统会寻找当前容量大小2倍的连续内存空间，并且将旧内存中的数据拷贝到新内存，然后释放旧内存。其次，如果重新分配了内存，原来的迭代器就会失效。频繁的开辟新内存比较耗时。如果可以预知使用的大小，可以使用reserve函数，预先开辟足够大的空间。或者使用swap函数收缩内存空间。\n代码生成可执行文件的过程 主要分为四个步骤\n预编译阶段：对g++编译器指定-E参数，生成.i文件。这个阶段的主要工作是将所有的宏展开，去掉所有的条件预编译指令，将所有的头文件包含进来，删除注释等。 编译阶段：对g++编译器指定-S参数，生成.s汇编文件。这个阶段的主要工作是对代码的语法，语义和词法等进行分析。 汇编阶段: 对g++编译器指定-c参数，生成.o二进制文件。 链接阶段：将各个模块之间的相互引用处理好。把所有的静态库用到的目标文件装入程序中，并进行统一编址，然后进行重定位，即逻辑地址到物理地址的转换。 静态库与动态库 静态库：命名方式为lib开头加上自定义的静态库名，然后以.a结尾。静态库实际上是一组目标文件的集合，再链接阶段与调用的程序生成可执行文件。静态库的优点在于：**代码加载速度快，发布程序时，不需要提供对应的库；**缺点时：可执行文件体积大，**同时如果静态库有修改，调用的程序需要重新编译，**而编译的耗时比较久。 动态库：命名方式为lib开头加上自定义的动态库名，然后以.so结尾。动态库首先生成与位置无关的目标文件，然后再运行时加载到内存。优点是：动态库可以共享，节省了系统资源，动态库进行修改后，无需重新编译。缺点是加载速度比静态链接慢，发布程序时，需要提供动态库。 符号表 每个目标文件除了拥有自己的数据和二进制代码外，还提供了3个表：\n**未解决符号表：**提供了所有在该编译单元里引用但是定义并不是在本编译单元的符号及其出现的地址。【引用无定义】将extern声明的变量置入未解决符号表。【外部链接】 **导出符号表：**提供了本编译单元具有定义，并且愿意提供给其他单元使用的符号及地址。【有定义肯让外用】普通变量及其函数被置入导出符号表。 **地址重定向表：**提供了本编译单元所有对自身地址的引用的记录。static声明的全局变量放入地址重定位表中。【内部链接】 指针常量 int* const p = \u0026amp;a 指针常量必须初始化，一旦初始化完成，就不能再修改它的值，即指针的指向不可变。\n引用的本质是指针常量\n声明和定义的区别 声明是告诉编译器有这个变量和函数的存在，但是需要到其它地方去寻找。 定义包含了声明，但是声明不包含定义。 定义时才分配存储空间。 C和C++的区别 设计思想上： C是面向过程的结构化语言，CPP是面向对象的语言 语法上： CPP具有三大特性，封装继承多态 CPP相对于C增加了许多类型安全的功能，比如四种强制类型转换 CPP支持范式编程，如模板类，函数模板等 struct和class的区别 共同点：C++中，可以用struct和class定义类，都可以继承。\n不同点：struct默认继承权限和默认访问权限时public class类的默认继承权限和访问权限时private。\nvolatile关键字 对类型额外修饰的作用，类似于const。告诉编译器不要对这样的对象进行优化，因为该对象的值可能在程序的控制或检测之外被改变。\nconst关键字 const 可以用于限定变量，指针和函数不可改变，同时明确制定了类型，可以方便编译器做类型检查，也增加了代码的可读性。\nconst修饰变量必须初始化。如果是全局的const变量，通常放在静态区。在局部声明的const变量放在栈区。\nconst修饰成员函数时，函数中的成员变量不可改变，除非该变量特别声明为mutable\nconst可以用来修饰指针，称为常量指针const int *p 指针的指向可以改变，但是不能改变指针指向的值。\nconst修饰常量的指针叫做指针常量，int* const p 指针的指向不可以修改，指针指向的值可以修改。指针常量必须初始化。\nconst可以明确指定类型，而宏定义没有数据类型。\ndefine宏是在预处理阶段展开。const常量是编译运行阶段使用。\n宏定义不分配内存，变量定义分配内存。\nextern关键字 引入同一模块在其他文件中定义的全局变量和函数。 如果在C++里调用了C库定义函数，那么需要使用extern \u0026quot;C\u0026quot; 标识这个函数，告诉编译器使用C的方式进行编译，防止C++的编译方式导致命名重整，无法找到对应的C函数。命名重整的原因在于**C++支持函数重载，而C不支持。**所以C++编译时增加了函数参数的标识符。 extern通常放在为解决符号表中，表示定义不在本文件而引用的变量。 this关键字 解决同名冲突 返回对象本身 this指针的本质是指针常量，指针的指向不可以修改。\nmove函数 将左值强制转换为右值引用，右值引用可以减少一次对象的析构和对象的构造。\n右值引用可以减少深拷贝的次数。\n段错误 段错误通常发生在**访问非法内存地址的时候。**系统会发送一个SIGSEGV11号信号告诉当前进程，进程采取默认的捕获方式，即终止进程。\n野指针 试图修改字符串常量的内容 auto关键字 让编译器能够根据初始值的类型推断变量的类型。当处理复杂类型，比如STL中的类型时，优势最明显。auto p = vt.begin()\n四种强制类型转换 static_cast 低风险的转换，比如整数转浮点数，字符型转整形 const_cast 去掉const关键字的转换，可以去掉带const的指针和引用 dynamic_cast 使具有继承关系的基类转换为派生类，如果不可以转换则返回NULL reinterpret_cast 指针或引用的转换，风险较高 RTTI run time type identification 运行时类型识别。**常常结合typeid()和dynamic_cast实现。**可以根据当前调用的指针是何种类型，经过dynamic_cast转换后，调用非虚函数。**dynamic_cast只能用于指针和引用的转换，要转换的类型中必须包含虚函数，转换成功返回子类的地址，失败返回NULL。**typeid返回一个type_info对象的引用。\n构造函数不能是虚函数 虚函数是通过虚函数表指针来调用的，而虚函数表指针存在对象内存空间。当一个对象调用构造函数时，该对象还没有实例化，即没有分配内存空间，所以虚函数表指针无法找到。\n析构函数尽量是虚函数 析构函数不是虚函数容易引起内存泄漏。\n为了实现多态的动态绑定，通常将基类指针指向派生类对象，当指针销毁时，如果析构函数不是虚函数，根据析构函数在继承中的调用顺序，则派生类对象将不会被析构，造成内存泄漏。\n析构函数不能抛出异常 析构函数抛异常，则异常点之后的的程序不会执行，如果异常点之后有释放资源的操作，则这部分资源无法释放，导致内存泄漏。noexcept\n内存泄漏 不再需要使用的内存单元，没有及时释放。memcheck和valgrind检测内存泄漏的工具。使用RAII资源获取就是初始化和智能指针。\n野指针 一些内存的单元已被释放，之前指向它的指针还在被使用。\nvector和list的区别 vector是动态数组，在内存中分配一块连续的内存空间，因此可以使用下标进行快速的随机访问。但是删除和插入需要移动大量的元素。 list是双向链表，在内存中是不连续的空间，由指针将不同的地址连接在一起。list的插入和删除操作都是O(1)的。 数组必须事先设定固定的长度，不能动态的增减，可能会造成资源浪费。链表可以动态的增减。 浅拷贝 由于编译器默认的拷贝构造函数只是简单的位拷贝，可能会导致内存的重复释放。解决浅拷贝的办法通常使用深拷贝，即自己实现拷贝构造函数，在堆上重新分配内存。\n内存对齐 union最大成员所占的整数倍，同时能容纳其他的成员。union中变量共用内存，应以最长的为准。\nstruct按照成员的声明顺序，依次安排内存，偏移量为成员大小的整数倍，最后结构体的大小为最大成员所占大小的整数倍。在C++中，空结构体和空类的内存所占大小为1个字节。C中空结构体所占大小为0。\n为什么要有内存对齐：1. 硬件原因：**加速CPU的访问速度。**因为CPU和内存数据交换的基本单位是块，块的大小为2的n次方字节。内存未对齐可能需要多次访问内存。2. 平台原因：不是所有的平台都支持任意地址的数据访问。\n#include \u0026lt;iostream\u0026gt; using namespace std; typedef union{ long long i; //8 bytes int k[5]; //4 bytes 最长的成员不是20 char c; // 1 byte }UDATE; //联合体共用内存 最长成员为8字节 结果要为8的倍数 同时要能容纳其他成员，即大于等于20字节 所以为24字节 struct data{ int cat; // 4 bytes UDATE cow; //24 bytes 但是需要先拆开来 最长成员为8字节 double dog; //8 bytes }too; //结构体顺序考虑，结果为最大成员的整数倍，如果后一个成员的长度的开始位置不是整数倍需要填充字节 //cat占4个字节 填充4个字节 //起始位置为8 满足整数倍 cow占用24字节 //起始位置为32 满足整数倍 doule占用4字节 //所以结构体总共占用40字节，同时40也是8的倍数。 UDATE temp; int main(){ cout\u0026lt;\u0026lt;sizeof(temp)\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt; sizeof(struct data)\u0026lt;\u0026lt;endl; //24 40 return 0; } gdb调试 gdb可以用于分析coredump文件，coredump文件中含有当进程被终止时内存，cpu寄存器和各种函数堆栈信息等。\n设置断点 b 120 运行 r 打印遍历p number 查看堆栈bt 查看循环中的变量 i 单步运行n ","permalink":"//localhost:1313/posts/003c++%E8%AF%AD%E8%A8%80/","summary":"\u003ch2 id=\"逻辑用语千万条第一首先往里套\"\u003e逻辑用语千万条，第一首先往里套。\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e首先，其次，然后，最后。\u003c/li\u003e\n\u003cli\u003e第一，第二，第三，第四。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"书籍\"\u003e书籍\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e《C++ primer》 第五版\u003c/li\u003e\n\u003cli\u003e《后台开发》 徐晓鑫\u003c/li\u003e\n\u003cli\u003e《linux高性能服务器编程》 游双\u003c/li\u003e\n\u003cli\u003e《redis设计与实现》黄健宏\u003c/li\u003e\n\u003cli\u003e《muduo库》陈硕\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"static\"\u003estatic\u003c/h2\u003e\n\u003cp\u003estatic的使用可以分为两类，一类是用在\u003cstrong\u003e普通变量和函数\u003c/strong\u003e上，另一类是\u003cstrong\u003e用在类中\u003c/strong\u003e。\u003c/p\u003e","title":"003C++语言"},{"content":"TCP头部 16位源端口 16位目的端口 32位序号 32位确认序号 4位TCP头部长度 单位为4字节 6位标志位 16位滑动窗口 16位校验和 16位紧急指针 注意：TCP的包没有IP地址，只有源端口和目的端口。一个TCP连接需要4个元组来表示一个连接。（源端口，目的端口，源IP，目的IP）\n为什么建立连接需要3次握手 主要是初始化序列号和协商最大报文段长度。\n粘包问题 udp不存在粘包的问题，因为udp是个数据包协议，也就是两段数据间有界限的。要么收不到，要么全收。\n产生粘包的原因：nagle算法为了改善网络传输效率，延迟发送数据。应用层由于某些原因不能及时取出TCP的数据，导致TCP缓冲区存放了多段数据。\n解决方式：封包和拆包。包头存放一个变量记录包体的长度。在所发送的内容前，加上发送内容的长度。\nHTTP原理 http协议是应用层协议，通过请求响应的方式在客户端和服务器端进行通信。\nhttp协议是以明文的方式进行传输，并且是无状态的通信协议。\nhttp与https的区别 传输方式：http是**明文传输，极易被监听和篡改。**而https加入了ssl层，数据经过了加密，从而保护了传输数据的隐私和完整性。 身份认证： http没有身份认证，而https经过证书颁发机构的多重认证。 连接端口：http为80 https为443 实现成本：http基本没有成本，https需要申请证书，同时在加密解密上需要消耗更多的CPU资源，访问速度有可能降低。 加锁的图标显示 谷歌和百度搜索的排名会对非https的排名有影响 私钥能解密，但是不能确认是哪个客户端发送的消息，任何人都可以抵赖。为了防止抵赖，可以使用数字签名。\nhttps是http的安全版，在http的基础上增加了SSL安全层。\n基于性能的考虑，https一般使用非对称加密算法获得密钥，再用对称加密算法对消息内容进行加密。\nhttps发送请求的过程：\n第一步，客户端和服务器端交换SSL版本和加密组件列表，同时服务器端将密钥和签名证书发给客户端。 第二步：客户端根据证书和密钥进行验证，通过以后协商传输的密钥。这一步使用非对称加密算法。 第三步：当双方都获得密钥，且校验码没有问题。则进行TCP三次握手，此时采用对称加密算法，提高效率。 http1.0 与 http1.1的区别 **长连接：**HTTP 1.1支持长连接和请求的流水线处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟。 带宽优化： HTTP/1.1中在请求消息中引入了range头域，它允许只请求资源的某个部分。 **新增响应状态码：**100 continue 已经收到第一部分，正等待剩余部分。 101 switch protocols 服务器已确认切换协议。 **host头域：**允许物理主机上多个虚拟主机共享一个IP 缓存机制更灵活，新增control-cache头域 增加了5个请求方法：put delete connect options trace get和post的区别 都是http的请求方式。\n区别在于：\n**用途上：**get一般用于获取资源，post一般用于创建资源。 位置上：get请求的的数据会在地址栏上显示出来，以问号分割url与传输数据，多个参数用取地址符连接。而post的数据放在请求体中。 **安全性上：**优于get将信息显示在地址栏，所以对于用户密码等个人隐私信息很不安全，而post放在请求体中，在安全性上要稍微好点。 **长度限制：**get使用地址栏发送数据，而地址栏的长度是有限的。 **幂等性上：**get操作没有副作用，多次操作产生的副作用相同，所以get是幂等的，而post用于创建资源是会又副作用的，所以post不是幂等的。 cookie和session cookie和session都是跟踪会话的机制。\n**存储位置：**cookie保存在客户端用来记录信息和确定用户身份，session保存在服务端同样用来记录和确定身份。 **安全性：**cookie放在客户端很容易被查看或者破解，没有session安全。 关联性：session的运行依赖于session id 而session id 存在cookie中。如果浏览器禁止了cookie，可以使用url地址重写来传递session id **性能上：**session会在有效期内存在于服务器的数据库或者文件，当请求过多时，服务器性能会下降。 **大小上：**单个cookie保存的大小不能超过4k 使用cookie来管理session以弥补http中无状态特性。通过对set-cookie头域写入session ID可以免登录，提高访问的效率。\n握手优化：session缓存， session key 放在内存，有内存消耗， 负载均衡后找不session key。session ticket 集群可以共享。\nTCP和UDP的区别 TCP: 面向连接的安全的流式协议，连接的时候进行三次握手，数据发送的时候会进行数据确认，数据丢失之后，会进行数据重传。 确认和重传机制。 UDP: 面向无连接的不安全的报文传输，发出去就不管了，收则全收，丢则全丢。 3次握手和4次挥手 TCP三次握手：客户端向服务器端：发送SYN=1和序号seq 服务器端向客户端：回应确定信号同意连接ACK=1以及自己的连接请求SYN=1还有序号seq 客户端回应服务器端：ACK=1告诉对方它已经知道了服务器端同意，连接成功。\nTCP四次挥手：主动关闭方发送关闭信号，被动关闭方收到信号。然后进入半关闭状态，关闭的一方能接收数据但是不能发送数据。 等到另一个未关闭的一方，发起关闭信号以后，进入TIME_WAIT状态，等待对方2MSL之后，彻底关闭。\n3次握手55555555 客户端发起连接，也就是C语言中的connect函数，发送一个SYN=1的标志位，同时携带一个序号。\n服务器端有一个accept函数，用于响应连接。服务器端响应连接后回复一个ACK=1的标志位，并且也发送一个SYN=1的标志位建立连接。\n客户端收到服务器端的ACK应答以后，说明建立成功。两者都同时进入established状态。同时accept和connect函数调用成功，并返回1。\n4次挥手55555555 主动关闭方向被动关闭放发送FIN标志位，表示要断开连接。被动关闭方同意关闭，并回发ACK标志位。此时主动关闭放进入FIN_WAIT_2状态。以后主动关闭方仍然可以接收数据，但是不可以再发送数据。\n当另一方也决定关闭时，会发送FIN标志位，接收方回复ACK同意关闭，并且自身进入Time_wait状态，等待2MSL时长后关闭。发送方如果收到ACK应答后，就直接关闭，如果没有收到会一直发FIN标志位。\n滑动窗口 流量控制：防止发送方发的太快，耗尽接收方的资源。\n控制机制：滑动窗口\n在TCP报文的头部有一个16位的窗口大小，用于告诉发送方接收方可用的缓冲区大小。\n拥塞窗口 拥塞控制：防止发送方发的太快，使网络来不及处理，从而导致网络拥塞。\n控制机制：拥塞窗口\n慢启动 拥塞避免 快重传 快恢复 **慢启动：**为了防止大量数据瞬间注入网络，引起网络阻塞。慢启动算法设定，最开始窗口为1个最大报文长度。一个传输轮次增加一倍的窗口大小。当达到慢开始门限后，执行拥塞避免算法。 拥塞避免： 每个传输轮次将窗口增加一个单位，即加法增长。 快重传： 当收到3个重复确认以后，执行快恢复算法。慢开始门限和发送窗口减半，然后发缺失的数据，进行加法增长，重新进入拥塞避免阶段。 **快恢复：**慢开始门限减半，发送拥塞窗口设定为门限加3。如果后面依旧收到重复的ACK则进行加法增长窗口，如果收到新的ACK，则拥塞窗口设定为慢开始门限的值，并重新进入拥塞避免阶段。 超时进入的是慢启动，重复确认才进入快恢复。\n选择性重传在options中left edge和right edge告诉发送方已经收到的报文序号\nTCP粘包问题 **udp不会出现粘包。**发送方发送的若干包数据到接收方接收时，包粘在了一起。\n造成粘包的原因时因为发送端延迟发送或者接收方没有及时接收缓冲区中的数据。\n通常可以使用以下三种方式来解决\n编程时设定立即发送的操作指令 把数据长度与消息一起发送。 使用特殊标记来区分消息的间隔 HTTP和HTTPS有什么不同 HTTP协议是一种使用明文数据传输的网络协议。HTTPS协议可以理解为HTTP协议的升级，就是在HTTP的基础上增加了**数据加密。**在数据进行传输之前，对数据进行加密，然后再发送到服务器。这样，就算数据被第三者所截获，但是由于数据是加密的，所以你的个人信息让然是安全的。这就是HTTP和HTTPS的最大区别。\n在浏览器地址栏键入URL，按下回车之后会经历以下流程 浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;（递归式和迭代式） 解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接; 浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器; 服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器; 释放 TCP连接; 浏览器将该 html 文本并显示内容; UDP如何做到可靠 想要做到可靠，必须要做到**无重复，无丢失，无错误，无失序。**借鉴TCP的可靠机制\n发送时进行编号 接收方收到数据发出应答信号（超时重传，3次确认重传） 增加校验位 NAT DNS ARP NAT用于实现从内部IP地址到外部IP地址的映射 DNS提供域名到IP地址的映射或者反过来 ARP提供IP到MAC地址的映射 DNS 基于UDP的协议\n递归查询：父域名代替当前服务器递归查询，最后依次返回 迭代查询：父域名服务器告诉当前服务器下一次查询的位置 http状态码 100 continue 等待继续发送 200 ok 请求成功 206 patial content 部分资源 301 永久重定向 302 临时重定向 307 400 客户端请求报文语法错误 403 禁止访问 404 资源不存在 408 请求超时 500 服务器内部错误 503 服务器不可用 http 2.0 SPDY 二进制分帧 多路复用 首部压缩 服务器推送 http 3.0 QUIC+UDP 0 RTT 没有队头阻塞的多路复用 前向纠错 网络安全 **sql注入：**用户提交一段数据库查询代码，根据程序返回的结果获得它想得知的数据。 dos攻击： 让运行的服务器呈停止状态。集中请求造成资源过载，攻击安全漏洞使服务停止。 TCP原理 面向连接，可靠的，基于字节流的传输层协议\n七层模型 物数网传会表应\nping是从应用层直接使用网络层的ICMP协议的，不经过传输层。原始套接字直接使用网络层的IP。\n两台电脑通信：网线+不同的IP地址和子网掩码，即处于同一网段。\nTCP和UDP可以同时使用相同的端口。\n应用程序可以同时使用TCP和UDP两个协议。\nhub集线器 可以实现多个IP主机通信，但是hub的实现方式是广播，容易产生拥堵。\nswitch交换机 是集线器的升级版，可以广播可单播。ARP不知道对方MAC地址时，先广播6个ff的MAC地址，所有网卡都会接收，但是只有目的IP会单播回应，其他的都会丢弃。然后发送方收到正确的MAC后再单播传输数据。\nARP攻击 给两个MAC地址响应ARP广播的目的IP，经由中间人，窃取信息后再转发到正确的地址。\n默认网关 在同一个交换机连接的网络中，属于同一网段，用不到默认网关。网关用来传递两个不同网段的通信，默认网关通常是路由器。当通信的数据不在当前网段时，即发给默认网关。路由器就是用来连接不同网段的，用来构建一个更大的网络。在传输不同的网段信息时，源IP和目的IP是不变的，源MAC和目的MAC是改变的，每经过一个路由器修改一次，记录的是下一次的目的，和这一次的发送MAC。\n延迟确认 ack会随着响应数据发送给对方，如果没有响应的数据就会等待200ms左右，在这期间如果有对方确认到达则立即发送。如果200ms后仍然没有数据需要发送则单独发送ACK。目的是节省带宽。\nNagle算法 没有已发送未确认报文段时，立即发送数据。 存在未确认报文段时，达到mss时再发。 同时有nagle算法和延迟确认存在时会导致网络效率下降，通常会关闭延迟确认和nagle算法。\nsetsockopt(s,IPPROTO_TCP,TCP_QUICKACK,(int*){1}, sizeof(int)); //关闭延迟确认 setsockopt(client_fd, SOL_TCP, TCP_NODELAY,(int[]){1}, sizeof(int)); //关闭nagle算法 忽略SIGPIPE信号 客户端和服务器端连接建立后，若某一端关闭连接，而另一端仍然向它写数据，第一次写数据后会收到RST响应，第二次写数据时，内核会向进程发送一个SIGPIPE信号，通知进程此连接已断开，而这个信号的默认处理方式是终止进程，服务器直接关闭。\nsignal(SIGPIPE, SIG_IGN) SIGSEGV 11 访问地址无效 SIGIO 29异步通知信号 SIGKILL 9 无条件终止\n传输层与网络层的区别 传输层位于网络层之上，为不同主机上的应用进程提供逻辑通信。端到端传输。 网络层负责ip数据报的产生以及ip数据包在网络中的路由转发。 状态码499 服务器端处理的时间过长，客户端主动关闭了连接。\n分块编码 transfer-encoding:chunked 响应头域 它允许服务器发送给客户端的数据分成多个部分，并且不需要预先直到发送数据的总大小。\nclose_wait 基本的思想就是要检测出对方已经关闭的socket，然后关闭它。维持一个心跳包或者设置一个超时时间。\n","permalink":"//localhost:1313/posts/002%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","summary":"\u003ch2 id=\"tcp头部\"\u003eTCP头部\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e16位源端口\u003c/li\u003e\n\u003cli\u003e16位目的端口\u003c/li\u003e\n\u003cli\u003e32位序号\u003c/li\u003e\n\u003cli\u003e32位确认序号\u003c/li\u003e\n\u003cli\u003e4位TCP头部长度  单位为4字节\u003c/li\u003e\n\u003cli\u003e6位标志位\u003c/li\u003e\n\u003cli\u003e16位滑动窗口\u003c/li\u003e\n\u003cli\u003e16位校验和\u003c/li\u003e\n\u003cli\u003e16位紧急指针\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e注意：\u003cstrong\u003eTCP的包没有IP地址\u003c/strong\u003e，只有源端口和目的端口。一个TCP连接需要4个元组来表示一个连接。（源端口，目的端口，源IP，目的IP）\u003c/p\u003e","title":"002计算机网络"},{"content":"阻塞IO和非阻塞IO 阻塞的文件描述符为阻塞IO 非阻塞的文件描述符为非阻塞IO 同步IO和异步IO 同步IO向应用程序通知的是IO就绪事件。要求用户代码自行执行读写操作，将数据从内核缓冲区读入用户缓冲区。 异步IO向应用程序通知的是IO完成事件 。由内核来执行IO读写操作。在linux环境下，aio.h头文件定义的函数提供了对异步IO的支持。 事件处理模式 reactor 同步IO模型通常用于实现reactor模式。要求主线程只负责监听文件描述符是否有事件发生，有的话就立即将该事件通知工作线程。 proactor 异步IO模型通常用于实现proactor模式。也可以用同步IO模拟出proactor模式。proactor将所有IO操作都交给主线程和内核来处理，工作线程仅仅负责业务逻辑。 Reactor模式的工作流程 主线程往epoll内核事件表中注册socket上的就绪事件。 主线程调用epoll_wait等待socket上有数据可读。 当socket上有数据可读时，epoll_wait通知主线程。主线程将socket可读事件放入请求队列。 睡眠在请求队列上的某个工作线程被唤醒，它从socket读取数据，并处理客户请求，然后往epoll内核事件表中注册该socket上的写就绪事件。 主线程调用epoll_wait等待socket可写。 当socket可写时，epoll_wait通知主线程。主线程将socket可写事件放入请求队列。 睡眠在请求队列上的某个工作线程被唤醒，它往socket上写入服务器处理客户请求的结果。 并发模式 半同步半异步模式：同步线程用于处理客户逻辑，异步线程用于处理IO事件。异步线程监听到客户请求后，就将其封装成请求对象并插入到请求队列中，请求队列将通知某个工作在同步模式下的工作线程来读取并处理该请求对象。半同步半反应堆模式采用的事件处理模式是reactor模式：它要求工作线程自己从socket上读取客户请求和往socket写入服务器应答。半同步半反应堆也可以模拟proactor模式，即由主线程来完成数据的读写。在这种情况下，主线程会将应用程序数据，任务类型等信息封装为一个任务对象，然后将其插入请求队列。工作线程从请求对象取得任务对象以后，可直接处理无需执行读写操作。\n问题：主线程和工作线程共享请求队列需要加锁。工作线程较少时可能产生请求任务堆积。\n领导者追随者模式\n在IO模型中，同步和异步区分的是内核向应用程序通知的是何种事件，是就绪事件还是完成事件，以及该由谁来完成IO读写，是应用程序还是内核。\n在并发模式中，同步指的是程序完全按照代码序列的顺序执行。异步指的是程序的执行需要由系统事件来驱动。常见的系统事件包括中断和信号。\n虚拟地址空间 **虚拟地址是操作系统管理内存的一种方式。**方便不同进程使用的虚拟地址彼此隔离。方便物理内存中不相邻的内存在虚拟地址上视为连续的来使用。虚拟地址和物理地址的映射是通过MMU页表进行的。虚拟内存对实际内存有保护作用。\n什么是进程 进程是系统进行资源分配的基本单位，是程序加载到内存后的执行过程。进程一般由数据段，代码段和进程控制块三部分组成。系统通过进程控制块感知进程的存在并对进程进行控制。由于进程之间空间相互独立，多进程比多线程更安全，一个进程基本上不会影响另外一个进程。\n进程三种状态 创建：创建PCB 就绪 运行 阻塞 终止: 归还PCB 什么是线程 线程是CPU调度的基本单位。一个进程可以包含多个线程，线程自己基本不拥有系统资源，但是它可以和同属于一个进程的其他线程共享进程所拥有的全部资源。多线程之间对内存共享，线程间通信可以直接基于共享内存来实现，比多进程之间通信更轻量。多线程之间切换不需要切换虚拟内存空间、文件描述符等，所以线程的上下文切换也比多进程轻量。\n进程fork以后，遵循读时共享写时复制的机制。\n父子进程长期共享：文件描述符和mmap建立的映射区。\n子进程的进程ID，定时器，未决信号集和父进程不同。\n多进程和多线程的应用场景 一般不同任务间需要大量的通信，使用多线程的场景比多进程多。IO密集型。\n但是多进程有更高的容错性，一个进程的崩溃不会导致整个系统的崩溃，在任务安全性较高的情况下，采用多进程。CPU密集型。\n进程线程的本质区别 进程更安全，一个进程完全不会影响另外的进程。 进程间通信比线程间通信的性能差很多。 线程切换开销更低。 IPC进程间通信55555555555 无名管道pipe（血缘关系的进程） 有名管道fifo （无血缘关系的进程） 共享内存 信号(开销小) 消息队列 信号量 套接字 进程间同步 文件锁 信号量 线程间同步 互斥锁 读写锁(读时共享，写时互斥) 条件变量 信号量(互斥锁的升级版) 自旋锁(可以避免进程或线程上下文的开销) 线程共享资源 文件描述符表（打开的文件） 进程用户ID和进程组ID 进程的**内存地址空间.**text代码段 .data数据段 .bss heap堆区 全局变量 静态变量 每种信号的处理方式 进程的当前目录 线程独享资源 线程栈 寄存器组的值 线程ID 错误返回码errno变量 线程信号屏蔽字 线程优先级 进程调度方式 抢占式：立马停止。 非抢占式：时间片用完或者等待资源时，再调用另一个进程。 进程调度算法 先来先服务 短作业优先 优先级调度 时间片轮转 高响应比优先 管道 管道是一种伪文件，实质为内核缓冲区 大小为4K 内核借用环形队列实现\n管道是半双工的，数据只能单向流动，不可重复读取，只能用于有血缘关系的进程\nLinux命令 find命令，用来查找文件。常用的按照名字查找-name，按照文件类型查找-type，linux常用的文件类型有七种，普通文件，目录文件，管道，套接字，软链接，块设备，字符设备。还可以按照文件大小查询-size。 grep命令，按照文件内容来查找。使用规则是grep option pattern file ps aux curl命令 访问一个网页 df查看磁盘大小 du查看目录大小 free -h 查看内存大小和使用情况 top查看系统的实时负载 netstat -ta 查看监听的TCP stat 获取文件属性 file 查看文件类型 sudo iptables -L 查看防火墙状态 sudo vim etc/sysctl.conf 查看TCP属性 大端字节序和小端字节序 大端字节序：网络字节序（高位存低位） 小端字节序：主机字节序，现代PC机采用小端字节序（低位存低位，高位存高位） 比如0x1f3f5f7f 地址0x1000 0x1001 0x1002 0x1003\n大端法：7f存在0x1003 5f存0x1002 3f存0x1001 1f存0x1000 低存高\n小端法：7f存在0x1000 5f存0x1001 3f存0x1002 1f存0x1003 低存低\nsocket服务器端所用函数 socket 创建socket文件描述符 bind 绑定IP和端口号 listen 监听 accept 接受连接 处理客户端的业务\nsocket客户端所用函数 socket 创建套接字文件描述符 bind 绑定IP和端口号（也可以隐式绑定） connect 尝试连接服务器 处理服务器端的业务\n五种网络IO模型 同步阻塞IO\n同步非阻塞IO\nIO多路复用\n信号驱动IO\n异步IO\nselect与poll、epoll的各自的优缺点和区别 select是跨平台的，windows、linux、unix系统下都有 poll在linux和unix下有 epoll是linux特有，epoll的要义就是高效的监视多个socket 多路IO监听时没有动静，监听会休眠监听。 讲讲epoll的边沿触发和水平触发 水平触发：如果epoll_wait缓冲区有数据则直接返回。 边沿触发：如果一次没有读完epoll_wait缓冲区中的数据，则只有当另外有数据再写入时，才返回。 使用边沿触发和非阻塞IO来达到水平触发的效果，减少了epoll_wait的调用次数，提高了效率。 边沿触发可以只读取缓存区中前面的部分信息，进而分析后面的信息是否有用，如果无用则直接丢弃。 Libevent库 是一个开源的库，封装了socket和IO多路转接，用于高并发服务器的开发。跨平台可移植性好。跨平台，线程安全，基于reactor模式实现的高效网络库。\n协程 协程是一种用户态的轻量级线程。协程的开销远远小于线程的开销。\n协程是一种比线程更加轻量级的存在，一个线程可以拥有多个协程。 无论是进程还是线程，都是由操作系统所管理的。而协程不是被OS所管理，而完全是由程序所控制(也就是在用户态执行)。\n信号 信号是一种不精确通信。\n常用的信号有SIGKILL 9 无条件终止信号，SIGSEGV 11 无效存储访问 SIGPOLL 8 轮询事件信号。\n信号有三种处理方式：忽略，捕获，默认。\nkill命令向进程发送信号\n什么是死锁 因为资源调度的方式不合理或者资源的稀缺性，导致进程间的相互等待。\n死锁的四个必要条件：互斥条件，请求和保持条件，环路等待条件，不可剥夺条件。\n死锁的预防只要破坏死锁产生的四个必要条件。通常采用预先静态分配方法，可以破坏请求和保持条件。\n死锁的避免：采用银行家算法，只要系统处于安全状态，系统便可避免死锁。\n死锁的解决：撤销进程，剥夺资源。\n僵尸进程和孤儿进程 僵尸进程：子进程死亡，而父进程没有进行回收 waitpid回收指定进程 孤儿进程：父进程死亡，而子进程仍然存活，但是系统会让init进程领养孤儿进程。 fork函数 fork函数用来创建子进程 一次调用，两次返回。在父进程中返回子进程的PID，在子进程中返回0\nexec族 在程序中调用另一个可执行程序，但是进程ID不改变。\n网络编程IO 服务器通常需要处理三类事件：IO事件，信号及定时事件。\n事件处理模式：reactor和proactor\n同步IO模型通常用于实现reactor模式\n异步IO则用于实现proactor模式\n什么是reactor模式 它要求主线程只负责监听文件描述符上是否有事件发生，有的话立即将该事件通知工作线程。读写数据，接受新的连接以及处理客户请求均在工作线程中完成。\n什么是proactor模式 它将所有IO操作都交给主线程和内核来处理，工作线程仅仅负责业务逻辑。\nmmap存储映射 将磁盘空间映射到进程空间，**使进程可以采用指针的方式操作这段内存，**而不用调用read和write函数。提高了读写的效率，同时也可以实现进程间的通信。\n异步IO原理 底层将数据准备好后，内核会给进程发送一个异步通知信号SIGIO29通知进程，然后进程调用信号处理函数去读数据，没准备好，数据就忙自己的事情。\nselect poll epoll select单个进程打开的文件描述符有上限，为1024或者2048。select对于有响应的事件需要轮询来查找满足要求的事件。每次调用select都需要把文件描述符集合从用户态拷贝到内核态。 poll描述fd的集合是链式的，解决了打开文件描述符数量的限制。同样需要轮询满足事件的文件描述符。也需要进行用户态和内核态的文件描述符拷贝。poll是水平触发。 epoll使用了mmap内存映射技术和红黑树的数据结构。通过三个函数来监听多个文件描述符，同时不随数量的上升效率呈线性的下降。mmap内存读写快于IO读写，及时共享映射内存的改变。 ","permalink":"//localhost:1313/posts/001%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","summary":"\u003ch2 id=\"阻塞io和非阻塞io\"\u003e阻塞IO和非阻塞IO\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e阻塞的文件描述符\u003c/strong\u003e为阻塞IO\u003c/li\u003e\n\u003cli\u003e非阻塞的文件描述符为非阻塞IO\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"同步io和异步io\"\u003e同步IO和异步IO\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e同步IO向应用程序通知的是\u003cstrong\u003eIO就绪事件\u003c/strong\u003e。要求用户代码自行执行读写操作，将数据从内核缓冲区读入用户缓冲区。\u003c/li\u003e\n\u003cli\u003e异步IO向应用程序通知的是\u003cstrong\u003eIO完成事件\u003c/strong\u003e 。由内核来执行IO读写操作。在linux环境下，aio.h头文件定义的函数提供了对异步IO的支持。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"事件处理模式\"\u003e事件处理模式\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003ereactor 同步IO模型通常用于实现reactor模式。要求主线程只负责监听文件描述符是否有事件发生，有的话就立即将该事件通知工作线程。\u003c/li\u003e\n\u003cli\u003eproactor 异步IO模型通常用于实现proactor模式。也可以用同步IO模拟出proactor模式。proactor将所有IO操作都交给主线程和内核来处理，工作线程仅仅负责业务逻辑。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"reactor模式的工作流程\"\u003eReactor模式的工作流程\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e主线程往epoll内核事件表中注册socket上的就绪事件。\u003c/li\u003e\n\u003cli\u003e主线程调用epoll_wait等待socket上有数据可读。\u003c/li\u003e\n\u003cli\u003e当socket上有数据可读时，epoll_wait通知主线程。主线程将socket可读事件放入请求队列。\u003c/li\u003e\n\u003cli\u003e睡眠在请求队列上的某个工作线程被唤醒，它从socket读取数据，并处理客户请求，然后往epoll内核事件表中注册该socket上的写就绪事件。\u003c/li\u003e\n\u003cli\u003e主线程调用epoll_wait等待socket可写。\u003c/li\u003e\n\u003cli\u003e当socket可写时，epoll_wait通知主线程。主线程将socket可写事件放入请求队列。\u003c/li\u003e\n\u003cli\u003e睡眠在请求队列上的某个工作线程被唤醒，它往socket上写入服务器处理客户请求的结果。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"并发模式\"\u003e并发模式\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e半同步半异步模式：同步线程用于处理客户逻辑，异步线程用于处理IO事件。异步线程监听到客户请求后，就将其封装成请求对象并插入到请求队列中，请求队列将通知某个工作在同步模式下的工作线程来读取并处理该请求对象。半同步半反应堆模式采用的事件处理模式是reactor模式：它要求工作线程自己从socket上读取客户请求和往socket写入服务器应答。半同步半反应堆也可以模拟proactor模式，即\u003cstrong\u003e由主线程来完成数据的读写\u003c/strong\u003e。在这种情况下，主线程会将应用程序数据，\u003cstrong\u003e任务类型等信息封装为一个任务对象\u003c/strong\u003e，\u003cstrong\u003e然后将其插入请求队列\u003c/strong\u003e。\u003cstrong\u003e工作线程从请求对象取得任务对象以后，可直接处理无需执行读写操作。\u003c/strong\u003e\u003c/p\u003e","title":"001操作系统"},{"content":"综合writing 模板 Both the passage and the lecture explore the topic about \u0026hellip;. The reading passage proclaims that \u0026hellip;. While in the lecture , the professor uses three specific perspectives to contradict what the reading states .\nFirst and foremost , the reading part holds the belief that \u0026hellip;. because \u0026hellip;. However , the lecturer doubts the view by stating that \u0026hellip; In order to strength his own point , the professor further explains that \u0026hellip;\nMoreover , the reading maintains that \u0026hellip;.. since \u0026hellip;.. The professor in the lecture , on the contrary , points out that \u0026hellip;. The professor defends his own point with the example of \u0026hellip;.\nLast but not least , the reading material believes/states that \u0026hellip; because \u0026hellip; Nevertheless , the professor argues that \u0026hellip;. For instance , \u0026hellip;.\nBoth the passage and the lecture explore the topic about .... The reading passage proclaims that .... While inthe lecture , the professor uses three specific perspectives to contradict what the reading states . First and foremost , the reading part holds the belief that .... because .... However , the lecturer doubts the view by stating that ... In order to strength his own point , the professor further explains that ... Moreover , the reading maintains that ..... since ..... The professor in the lecture , on the contrary , points out that .... The professor defends his own point with the example of .... Last but not least , the reading material believes/states that ... because ... Nevertheless , the professor argues that .... For instance , .... 讨论writing 模板 As far as I\u0026rsquo;m concerned , I tend to be in favor of the argument that \u0026hellip;. My view is going to be illustrated by following reasons and examples.\nTo start with , just as XXX has said , \u0026hellip;\nIn addition , \u0026hellip;\n150 - 160\nAs far as I\u0026#39;m concerned , I tend to be in favor of the argument that .... To start with , just as XXX has said , ... In addition , ... 科技 产品 消费 效率 心理需求 心理满足 As far as I am concerned buying the newest technological devices would be a wise choice . My view is going to be illustrated by the following reasons and examples.\nTo start with , the newest technological devices help users to improve their efficiency , no matter in work or study . It should be emphasized that along with the accelerating development of the whole society , a higher efficiency becomes more and more important . It allows individuals to accomplish more tasks within relatively certain time limits , which in turn strengthens one\u0026rsquo;s competitiveness and offers them a higher chance to succeed. In that case , buying new technological devices serves better in assisting the person to get high efficiency . To be specific , there is no doubt that new technological devices generally have advantages compared with existing ones . For example, they may offer some new functions or improve existing ones , and all these factors play an essential role in helping people achieve their aims more effectively , removing the barriers as well as difficulties. As a result , people who use new technological devices are capable of finishing tasks more quickly . In other words , new technological devices guarantee high efficiency.\nIn addition , using the newest technological devices also brings individuals the benefit of realizing their higher needs. Thanks to the development of the economy and technology, people in current society have almost fulfilled their basic needs related to survival and safety . Under such circumstances , they have begun to realize those need that are at a higher level . Those needs are usually more psychological and social , which makes the choice of buying the newest technological devices reasonable . To give more details , people using the newest technological devices are able to enjoy the feeling of happiness and satisfaction after they buy it immediately since this behavior continuously implies to them that they have the right and the ability to enjoy the best things. Besides , people who possess the newest devices usually can grab the attention of people surrounding them , which enables them to enclose relationship with others and even harvest other people\u0026rsquo;s respect or envy . All factors listed above , psychological feelings and connections with others , are just what nowadays people mainly are pursuing , and it supports my standpoint that buying the newest devices , rather than adopting them when they are well-adopted , is worth the effort .\nAs far as I am concerned , I tend to be in favor of the argument that people should like to pursue the devices of the newest version. My view is going to illustrated by following reasons and example.\nTo start with, just as Mike has said, the newest technological devices help users to improve their efficiency, no matter in work or study. It should be emphasized that along with the accelerating development of the whole society , a higher efficiency becomes more and more important. It allows individuals to accomplish more tasks within relatively certain time limits , which in turn strengthens one\u0026rsquo;s competitiveness and offers them a higher chance to succeed.\nIn addition , using the newest technological devices also brings individuals the benefit of realizing their higher needs. To be more specific , people using the newest technological devices are able to enjoy the feeling of happiness and satisfaction after they buy it immediately .\nsince this behavior continuously implies to them that they have the right and the ability to enjoy the best things.\n创造力 As far as I am concerned , I tend to be in favor of the argument that the power of creativity far outweighs that basic knowledge in terms of successful inventions. My view is going to illustrated by following reasons and example. To start with , just as Mike has said , the power of creativity far exceeds the power of basic knowledge. For instance , Bell is commonly credited with inventing the first practical telephone by taking advantage of his creativity and numerous endeavors. It is precisely due to his creativity that such scientific breakthroughs have been made. In addition , in the modern world , similar evidence could be also be traced . Steve Jobs , co-founders and former CEO of Apple , shocked the world with his creative electronic products whose superior functions and qualities can never be matched. 压力 健康 生活压力\nAs far as I am concerned , I tend to be in favor of the argument that government should arouse people\u0026rsquo;s awareness of importance of physical soundness. My view is going to be illustrated by following reasons and example. To start with , just as Mike has said , with the acceleration of social development , people , especially young people , are confronted with unprecedentedly fierce competition . For instance , they need to work very hard to guarantee a decent life , which causes them much(way) heavier pressure than before. Under such circumstances , most of them are prone to in a sub-health state . In summary , government should increase access to public exercise equipment in neighborhood , raising people\u0026rsquo;s awareness of the importance of doing exercise regularly through the mass media , which is the government\u0026rsquo;s responsibility. 因特网 科技 社会发展 生活方式\nAs far as I am concerned , I tend to be in favor of the argument that Internet is a treasure trove of information , which offers knowledge on any given topic under the sun. My view is going to be illustrated by following reasons and examples. To start with , just as Mike has said , search engines make information accessible on various subject matters such as government law and services , trade and conferences , market information , new innovations , and technical support , and even dispense advise on love and relationship matters. In addition , it has become common practice to seek assistance from the web in order to research and gather resources for homework , office presentations , and supplement one\u0026rsquo;s own research . The web also updates news about the latest breakthroughs in the field of medicine , technology , and other domains of science . 兴趣 爱好\nAs far as I am concerned , I tend to be in favor of the argument that young students should not decrease an abundance of time that teaching students about music and art . My view is going to be illustrated by following reasons and examples .\nTo start with , just as Mike has said , we should emphasize what is conveyed in the famous saying: \u0026lsquo;Interest is the best teacher.\u0026rsquo; Evidently , the primary step toward a person\u0026rsquo;s success is to have an emotional preference . In fact , interest constitutes the biggest impetus in learning , keeping one refreshed and preventing feelings of boredom and tiredness .\nIn addition , numerous epoch-making accomplishments in the scientific world owe much to the initial interest of the scientists. Therefore , students shouldn\u0026rsquo;t be compelled to increase the time spent on any knowledge field , but rather to keep a balance among all knowledge fields.\n学生是否要 gap \u0026mdash; 兴趣 As far as I am concerned , I tend to be in favor of the argument that students should take at least a year off to work or travel before they begin studying at a university when students finish their high school , which can be beneficial for students to discover their interests. My view is going to be illustrated by the following reasons and examples.\nTo start with , just as Mike has said , the famous saying goes , \u0026quot; Interest is the best teacher.\u0026quot; Evidently , the primary step toward a person\u0026rsquo;s success is to have an emotional preference. In fact , interest constitutes the biggest impetus in learning , keeping one refreshed and preventing feelings of boredom and tiredness. Therefore , it is helpful that spending at least a year work or travel before getting the university education , which is one of the best ways to figure out personal passion if students want to be successful in their future careers.\n以 成绩 评分 As far as I am concerned , I tend to be in favor of the argument that performance should be the only criterion when teachers give grades. My view is going to be illustrated by following reasons and examples . To start with , just as Mike has said , such a strategy would show fairness , which is an important factor to motivate students. The lack of motivation would undoubtedly pose negative effects on student\u0026rsquo;s studies . Consequently , it would even have a lasting effect on their future life. In addition , giving grades based on performance , instead of effort , also means a clear standard . It would be hard for teachers to tell whether a student is working hard or not during the process. It is totally subjective . In contrast , the performance , in other words , the results , cannot tell lies , making the performance-based criteria a wiser one . Do you agree or disagree with the following statement? It is often not a good thing for people to move to a new town or country because they lose their old friends. Use specific reasons and examples to support your answer.\n搬家 好不好 As far as I am concerned , I tend to be in favor of the argument that people wouldn\u0026rsquo;t lose their friends because they move to a new town or country. My view is going to be illustrated by following reasons and example. To start with , just as Mike has said , with the development of society , the infrastructure make it convenient as well as time-saving to travel another town or country, which means people can still meet up with friends easily . Going to a new town or country can also push individuals to broaden their perspectives and see the world in a distinctive way. In addition , the opportunities of being successful in future career are enhanced by settling in a big city . Simultaneously , I believe that the greatest predictor of being successful in the future career is how many hours are devoted to goal , rather than spending too much time with friends . 参考\nTo start with, as Mike mentioned, the development of society has made travel between towns and countries more convenient and time-saving. This means that people can still meet up with friends easily. Moving to a new place can also encourage individuals to broaden their perspectives and see the world in new ways.\nIn addition, settling in a big city can enhance opportunities for future career success. However, I believe that the greatest predictor of success is how many hours one devotes to their goals, rather than spending too much time with friends.\n帮助他人 with the development of \u0026hellip;\u0026hellip;.. = due to the refinement of \u0026hellip;\u0026hellip;\u0026hellip; = As advances in = through the improvement of \u0026hellip;\u0026hellip;\u0026hellip; = due to the advancement of\nAs far as I am concerned , I tend to be in favor of the argument that currently, many people are accepted assistance from others people more readily than before . My view is going to be illustrated by following reason and example. To start with , just as Mike has said , due to the advancement of society , people are wealthier than before , individuals are more likely to spend more time to care about other , someone needs help , since the social responsibility would be powerful enough to push them to help other. In addition , take me for example , every time I see the homeless or someone needs help , I will lend them a hand , holding up social responsibility as much as possible. In this action , it is social harmony that is strongly promoted. ","permalink":"//localhost:1313/posts/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/","summary":"\u003ch1 id=\"综合writing\"\u003e综合writing\u003c/h1\u003e\n\u003ch2 id=\"模板\"\u003e模板\u003c/h2\u003e\n\u003cp\u003eBoth the passage and the lecture explore the topic about  \u0026hellip;.  The reading passage proclaims that \u0026hellip;. While in the lecture , the professor uses three specific \u003cstrong\u003eperspectives\u003c/strong\u003e to contradict what the reading states .\u003c/p\u003e\n\u003cp\u003eFirst and foremost , the reading part holds the belief that \u0026hellip;. because \u0026hellip;. However , the lecturer doubts the view by stating that \u0026hellip; In order to strength his own point , the professor further explains that \u0026hellip;\u003c/p\u003e","title":"英语学习"},{"content":"测试数据范围 时间复杂度 对应数据量 O(n) 1,000,000 O(log N) 100,000 O(n^2) 1,000 O(n^3) 100 特殊情况 10 滑动窗口 动态规划 DP dp分析, 两个角度\n状态表示 集合: 前i个数, 总和为j的所有方案 属性: 状态计算 01背包 n = 4 // 4件物品 m = 5 // 背包最大容量为 5 测试样例 4 5 1 2 2 4 3 4 4 5 j i 状态f[i][j]定义：前 i 个物品，背包容量 j 下的最优解（最大价值）\n前i个物品的价值 1 2 3 4 5 0 0 0 0 0 0 1 2 2 2 2 2 2 2 4 6 6 6 3 2 4 6 6 8 4 2 4 6 6 8 第i个物品的数据 1 2 3 4 volume 1 2 3 4 weight 2 4 4 5 单调栈 合并区间 模板\n排序数组 更新合并左右端点 vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; merge(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; \u0026amp;intervals) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; ans; if (intervals.empty()) return ans; sort(intervals.begin(), intervals.end()); // 先排序 int l = intervals[0][0], r = intervals[0][1]; // 左右端点 for (int i = 1; i \u0026lt; intervals.size(); i++) // 第二数组开始遍历 { if (intervals[i][0] \u0026gt; r) // 第二数组的左端点大于上一数组的右端点, 则保存上一数组 { ans.push_back({l, r}); l = intervals[i][0], r = intervals[i][1]; // 更新左右端点 } else { r = max(r, intervals[i][1]); // 否则更新右端点 } } ans.push_back({l, r}); return ans; } 迪杰斯特拉算法 快速幂 模板\n快速幂 —— 模板题 AcWing 875. 快速幂 求 m^k mod p，时间复杂度 O(logk)。\nint qmi(int m, int k, int p) { int res = 1 % p, t = m; while (k) { if (k\u0026amp;1) res = res * t % p; t = t * t % p; k \u0026gt;\u0026gt;= 1; } return res; } 并查集 ","permalink":"//localhost:1313/posts/algorithm_study/","summary":"\u003ch1 id=\"测试数据范围\"\u003e测试数据范围\u003c/h1\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: center\"\u003e时间复杂度\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e对应数据量\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eO(n)\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e1,000,000\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eO(log N)\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e100,000\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eO(n^2)\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e1,000\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eO(n^3)\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e100\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e特殊情况\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e10\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch1 id=\"滑动窗口\"\u003e滑动窗口\u003c/h1\u003e\n\u003ch1 id=\"动态规划-dp\"\u003e动态规划 DP\u003c/h1\u003e\n\u003cp\u003edp分析, 两个角度\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e状态表示\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003e集合: 前\u003ccode\u003ei\u003c/code\u003e个数, 总和为\u003ccode\u003ej\u003c/code\u003e的所有方案\u003c/li\u003e\n\u003cli\u003e属性:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e状态计算\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"01背包\"\u003e01背包\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 4件物品\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 背包最大容量为 5 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e测试样例\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: center\"\u003e\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003ej\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003ei\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e状态\u003ccode\u003ef[i][j]\u003c/code\u003e定义：\u003cstrong\u003e前 i 个物品\u003c/strong\u003e，\u003cstrong\u003e背包容量 j\u003c/strong\u003e 下的最优解（\u003cstrong\u003e最大价值\u003c/strong\u003e）\u003c/p\u003e","title":"算法学习记录"},{"content":"emplace用法 emplace 是 C++ 中用于容器（如 std::vector, std::map, std::unordered_map 等）的一种方法，允许你在容器中直接构造元素，而不需要先构造再复制或移动。这通常可以提高性能，减少不必要的对象拷贝。\n与 insert 类似\n使用 emplace 的主要特点： 直接在容器中构造：emplace 会接受构造元素所需的所有参数，并在容器的内部直接创建该对象。 避免多次拷贝：与 push_back 或 insert 不同，emplace 不会执行隐式拷贝构造，这样可以避免额外的开销。 示例： 以下是一个使用 std::vector 和 std::unordered_map 的例子，说明 emplace 的使用：\n使用 std::vector #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; class Point { public: int x, y; Point(int x, int y) : x(x), y(y) {} }; int main() { std::vector\u0026lt;Point\u0026gt; points; // 使用 emplace 方法直接构造 Point 对象 points.emplace_back(1, 2); points.emplace_back(3, 4); for (const auto\u0026amp; point : points) { std::cout \u0026lt;\u0026lt; \u0026#34;Point(\u0026#34; \u0026lt;\u0026lt; point.x \u0026lt;\u0026lt; \u0026#34;, \u0026#34; \u0026lt;\u0026lt; point.y \u0026lt;\u0026lt; \u0026#34;)\u0026#34; \u0026lt;\u0026lt; std::endl; } return 0; } 使用 std::unordered_map #include \u0026lt;iostream\u0026gt; #include \u0026lt;unordered_map\u0026gt; #include \u0026lt;string\u0026gt; int main() { std::unordered_map\u0026lt;std::string, int\u0026gt; map; // 使用 emplace 插入键值对 map.emplace(\u0026#34;apple\u0026#34;, 10); map.emplace(\u0026#34;banana\u0026#34;, 20); for (const auto\u0026amp; pair : map) { std::cout \u0026lt;\u0026lt; pair.first \u0026lt;\u0026lt; \u0026#34;: \u0026#34; \u0026lt;\u0026lt; pair.second \u0026lt;\u0026lt; std::endl; } return 0; } 总结： emplace 方法是通过 完美转发 构造元素，可以显著提升性能。 它适用于任何需要插入或添加元素的 STL 容器。 min_element 查找最小元素函数 std::min_element 是 C++ 标准库 \u0026lt;algorithm\u0026gt; 中的一个非常有用的算法函数，它用于在指定范围内查找最小元素。下面我会详细解释 min_element 的用法，以及使用解引用操作符 * 的相关内容。\n1. std::min_element 函数原型 template\u0026lt;class ForwardIt\u0026gt; ForwardIt min_element(ForwardIt first, ForwardIt last); 参数： first: 指向范围开始的迭代器（包含）。 last: 指向范围结束的迭代器（不包含）。 返回值：返回指向容器内最小元素的迭代器。如果范围为空，则返回 last。 用法步骤 包含必要的头文件： 使用 min_element 之前，确保包含 \u0026lt;algorithm\u0026gt; 头文件。 指定范围： 使用容器的 begin() 和 end() 方法来指定需要查找最小元素的范围。 获取最小值： 使用解引用操作符 * 获取迭代器指向的值。 2. 示例代码 以下是一个简单的示例，使用 std::min_element 查找 std::vector 中的最小值：\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;algorithm\u0026gt; int main() { std::vector\u0026lt;int\u0026gt; numbers = {3, 1, 4, 1, 5, 9, 2, 6}; // 使用 min_element 查找最小元素 auto minIt = std::min_element(numbers.begin(), numbers.end()); if (minIt != numbers.end()) { // 使用解引用获取最小值 int minValue = *minIt; std::cout \u0026lt;\u0026lt; \u0026#34;Minimum value: \u0026#34; \u0026lt;\u0026lt; minValue \u0026lt;\u0026lt; std::endl; } else { std::cout \u0026lt;\u0026lt; \u0026#34;The range is empty.\u0026#34; \u0026lt;\u0026lt; std::endl; } return 0; } 3. 代码解析 导入库：导入了 iostream, vector, 和 algorithm。\n定义容器：创建了一个 std::vector 并初始化了一些整数。\n调用 min_element\n：\n使用 std::min_element 来查找最小元素，范围是从 numbers.begin() 到 numbers.end()。 返回的 minIt 是指向最小元素的迭代器。 解引用\n：\n通过 *minIt 获取指向的最小值，并存储到 minValue 中。 输出结果：如果容器非空，则输出最小值。\n4. 注意事项 空范围：如果传递空范围给 min_element（即 first 和 last 相等），则返回 last。 元素类型：min_element 可以处理不同的类型，包括自定义类型，只要提供相应的比较运算符。 性能：min_element 的时间复杂度是 O(n)，适合较小的数据集。 单引号和双引号的区别 在 C++ 中，单引号 ' ' 用于表示字符字面值（character literals），而双引号 \u0026quot; \u0026quot; 用于表示字符串字面值（string literals）。字符字面值只能包含一个字符，例如 'a' 或 '0'，而字符串字面值可以包含多个字符，例如 \u0026quot;Hello\u0026quot;。\n字符字面值只能包含一个字符，例如： char singleChar = \u0026#39;a\u0026#39;; // 单个字符 char digit = \u0026#39;0\u0026#39;; // 数字字符 字符串字面值可以包含多个字符，例如： const char* greeting = \u0026#34;Hello\u0026#34;; // 一个字符串 const char* message = \u0026#34;12345\u0026#34;; // 字符串中的数字 指针就是数组 把指针想象成数组\nint yy = 1; int * xx = \u0026amp; yy; // yy地址: 123 xx ---\u0026gt; 两个内容 | |---\u0026gt;下标 xx 存的值为 0x123 |---\u0026gt;数值 *xx 取值为 1 即 yy的值 xx: val | 1 | ==\u0026gt; *xx index |0x123| ==\u0026gt; xx string进行模拟栈的用法 在 C++ 中，std::string 本身不是一个栈（stack），但可以像栈一样使用，特别是利用其尾部（末尾）操作。你可以使用 push_back 和 pop_back 方法来模拟栈的行为。以下是如何用 std::string 模拟栈的简单示例：\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; using namespace std; int main() { string stack; // 入栈 stack.push_back(\u0026#39;A\u0026#39;); stack.push_back(\u0026#39;B\u0026#39;); stack.push_back(\u0026#39;C\u0026#39;); // 出栈 while (!stack.empty()) { char top = stack.back(); // 获取栈顶元素 stack.pop_back(); // 出栈 cout \u0026lt;\u0026lt; top \u0026lt;\u0026lt; endl; // 打印栈顶元素 } return 0; } 代码解释： 入栈：使用 push_back 方法将元素添加到字符串末尾。 出栈：使用 pop_back 方法移除末尾元素，并使用 back 方法获取栈顶元素（末尾元素）。 检查是否为空：使用 empty 方法来检查栈是否为空。 注意事项： 尽管你可以用 std::string 来模拟栈，但对于更复杂的数据结构，建议使用标准库中的 std::stack，它提供了更明确的接口和更好的语义清晰性。 std::stack 是一个适配器，通常与其他容器（如 std::deque 或 std::vector）一起使用，可以更好地满足栈的需求。 queue容器 在 C++ 中，queue 是一种容器适配器，表示一个先进先出（FIFO，First In First Out）的数据结构。下面是关于 queue 的详细解释，包括其特点、基本操作及使用场景。\n1. 基本概念 先进先出（FIFO）：在队列中，第一个加入的元素是第一个被移除的元素。可以想象成排队买东西，先到的人先服务。 应用：队列广泛用于任务调度、事件驱动编程、宽度优先搜索（BFS）等场景。 2. 引入和定义 要使用 queue，需要引入 C++ STL 的 \u0026lt;queue\u0026gt; 头文件：\n#include \u0026lt;queue\u0026gt; 一个基本的队列定义如下：\nstd::queue\u0026lt;int\u0026gt; myQueue; // 定义一个存储整数的队列 3. 常用操作 a. 入队（Push） 使用 push() 方法将元素添加到队列的尾部。\nmyQueue.push(10); myQueue.push(20); myQueue.push(30); b. 出队（Pop） 使用 pop() 方法移除队列的头部元素（最早入队的元素）。\nmyQueue.pop(); // 移除队头元素（10） c. 访问队头元素 使用 front() 方法获取队头元素，但不会移除它。\nint frontElement = myQueue.front(); // 返回 20 d. 访问队尾元素 使用 back() 方法获取队尾元素，但不会移除它。\nint backElement = myQueue.back(); // 返回 30 e. 检查空状态 使用 empty() 方法检查队列是否为空。\nif (myQueue.empty()) { std::cout \u0026lt;\u0026lt; \u0026#34;队列为空\u0026#34; \u0026lt;\u0026lt; std::endl; } f. 获取队列大小 使用 size() 方法获取队列中元素的数量。\nstd::cout \u0026lt;\u0026lt; \u0026#34;队列大小: \u0026#34; \u0026lt;\u0026lt; myQueue.size() \u0026lt;\u0026lt; std::endl; 4. 示例代码 下面是一个完整的示例，演示如何使用 queue：\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;queue\u0026gt; int main() { std::queue\u0026lt;int\u0026gt; myQueue; // 入队 myQueue.push(10); myQueue.push(20); myQueue.push(30); // 输出队头和队尾元素 std::cout \u0026lt;\u0026lt; \u0026#34;队头元素: \u0026#34; \u0026lt;\u0026lt; myQueue.front() \u0026lt;\u0026lt; std::endl; // 输出 10 std::cout \u0026lt;\u0026lt; \u0026#34;队尾元素: \u0026#34; \u0026lt;\u0026lt; myQueue.back() \u0026lt;\u0026lt; std::endl; // 输出 30 // 移除队头元素 myQueue.pop(); std::cout \u0026lt;\u0026lt; \u0026#34;新的队头元素: \u0026#34; \u0026lt;\u0026lt; myQueue.front() \u0026lt;\u0026lt; std::endl; // 输出 20 // 检查队列大小 std::cout \u0026lt;\u0026lt; \u0026#34;队列大小: \u0026#34; \u0026lt;\u0026lt; myQueue.size() \u0026lt;\u0026lt; std::endl; // 输出 2 return 0; } 5. 特点 动态大小：队列的大小是动态的，根据元素的添加和移除而变化。 基于其他容器：queue 通常是基于 deque（双端队列）或 list 实现的，因此它支持快速插入和删除操作。 类型安全：由于使用模板，queue 可以存储任何类型的数据，确保类型安全。 6. 应用场景 任务调度：在操作系统中，任务调度可以利用队列来管理待处理的任务。 广度优先搜索（BFS）：在图形算法中，queue 是实现 BFS 的重要工具。 事件处理：在图形用户界面（GUI）或游戏开发中，事件通常通过队列进行处理。 7. 总结 C++ 的 queue 提供了一种简单而高效的方法来管理数据。在需要处理顺序、维持元素顺序的场景中，queue 是一个非常有用的工具。它的基本操作简单明了，使得程序员能够快速实现和使用这一数据结构。\n**C++**基础 编译 内联函数 内联函数（inline function）是 C++ 中的一种特殊函数，通过在函数调用处直接插入其代码来提高程序的执行效率。内联函数的主要优点是减少函数调用的开销。\n特点： 定义方式： 使用 inline 关键字定义内联函数：\ninline int add(int a, int b) { return a + b; } 调用开销减少： 由于编译器在每个调用点替换函数体，避免了栈操作和跳转，增强了性能。\n适合小函数： 内联函数通常适用于简单、短小的函数，过大的函数可能导致代码膨胀。\n编译期决策： 编译器可以选择是否将某个函数作为内联函数处理，并不总是强制内联。\n示例： #include \u0026lt;iostream\u0026gt; inline int square(int x) { return x * x; } int main() { std::cout \u0026lt;\u0026lt; \u0026#34;Square of 5: \u0026#34; \u0026lt;\u0026lt; square(5) \u0026lt;\u0026lt; std::endl; return 0; } 在上述示例中，调用 square(5) 时，编译器会在调用处替换为 5 * 5，从而减少函数调用的开销。\n指针 类与对象 类（Class） 类是一个用户定义的数据类型，用于封装数据和函数。类可以包含属性（成员变量）和行为（成员函数）。\n定义示例：\nclass Dog { public: // 属性 std::string name; int age; // 构造函数 Dog(std::string n, int a) : name(n), age(a) {} // 方法 void bark() { std::cout \u0026lt;\u0026lt; name \u0026lt;\u0026lt; \u0026#34; says woof!\u0026#34; \u0026lt;\u0026lt; std::endl; } }; 对象（Object） 对象是类的实例，通过类的构造函数创建。每个对象都有自己的属性值。\n使用示例：\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; class Dog { public: std::string name; int age; Dog(std::string n, int a) : name(n), age(a) {} void bark() { std::cout \u0026lt;\u0026lt; name \u0026lt;\u0026lt; \u0026#34; says woof!\u0026#34; \u0026lt;\u0026lt; std::endl; } }; int main() { // 创建对象 Dog myDog(\u0026#34;Buddy\u0026#34;, 3); // 调用对象的方法 myDog.bark(); // 输出: Buddy says woof! return 0; } 总结 类是模板，用于定义对象的属性和行为。 对象是类的实例，具有具体的状态和行为。类和对象的结合使得 C++ 支持面向对象编程，便于代码的组织、复用和维护。 注意 构造函数 ![](../img/屏幕截图 (2).png)\n析构函数特点 拷贝构造函数 拷贝构造函数，又称复制构造函数，是一种特殊的构造函数，它由编译器调用来完成一些基于同一类的其他对象的构建及初始化。\n其形参必须是引用，但并不限制为const，一般普遍的会加上const限制。此函数经常用在函数调用时用户定义类型的值传递及返回。\n拷贝构造函数要调用基类的拷贝构造函数和成员函数。如果可以的话，它将用常量方式调用，另外，也可以用非常量方式调用。\n友元函数 定义:\n友元是一种定义在类外部的普通函数或类，但它需要在类体内进行说明，为了与该类的成员函数加以区别，在说明时前面加以关键字friend。 友元不是成员函数，但是它可以访问类中的私有成员。 类具有封装和信息隐藏的特性。只有类的成员函数才能访问类的私有成员，程序中的其他函数是无法访问私有成员的。非成员函数可以访问类中的公有成员，但是如果将数据成员都定义为公有的，这又破坏了隐藏的特性。另外，应该看到在某些情况下，特别是在对某些成员函数多次调用时，由于参数传递，类型检查和安全性检查等都需要时间开销，而影响程序的运行效率。 友元函数与一般函数的不同点在于：\n友元函数必须在类的定义中说明，其函数体可在类内定义，也可在类外定义；\n它可以访问该类中的所有成员（公有的、私有的和保护的），而一般函数只能访问类中的公有成员。\n注意事项\n友元关系不能被继承。 友元关系是单向的，不具有交换性。若类B是类A的友元，类A不一定是类B的友元，要看在类中是否有相应的声明。 友元关系不具有传递性。若类B是类A的友元，类C是B的友元，类C不一定是类A的友元，同样要看类中是否有相应的申明。 动态内存 函数重载 函数重载是一种特殊情况，C++允许在同一作用域中声明几个类似的同名函数，这些同名函数的形参列表（参数个数，类型，顺序）必须不同，常用来处理实现功能类似数据类型不同的问题。 所谓函数的重载是指完成不同功能的函数可以具有相同的函数名。 C++的编译器是根据函数的实参来确定应该调用哪一个函数的。 void Swap1(int* a, int* b); void Swap2(float* a, float* b); void Swap3(char* a, char* b); void Swap4(double* a, double* b); 运算符重载 可以重定义或重载大部分 C++ 内置的运算符。这样，您就能使用自定义类型的运算符。\n重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个返回类型和一个参数列表。\nBox operator+(const Box\u0026amp;); 声明加法运算符用于把两个 Box 对象相加，返回最终的 Box 对象。大多数的重载运算符可被定义为普通的非成员函数或者被定义为类成员函数。如果我们定义上面的函数为类的非成员函数，那么我们需要为每次操作传递两个参数，如下所示：\nBox operator+(const Box\u0026amp;, const Box\u0026amp;); 单继承 在C++中所谓“继承”就是在一个已存在的类的基础上建立一个新的类。已存在的类称为“基类(base class)”或“父类(father class)”。新建立的类称为“派生类(derived class)”或“子类(son class)”。\n通过继承机制，可以利用已有的数据类型来定义新的数据类型。所定义的新的数据类型不仅拥有新定义的成员，而且还同时拥有旧的成员。我们称已存在的用来派生新类的类为基类，又称为父类。由已存在的类派生出的新类称为派生类，又称为子类。\n在建立派生类的过程中，基类不会做任何改变，派生类则除了继承基类的所有可引用的成员变量和成员函数外，还可另外定义本身的成员变量和处理这些变量的函数，由于派生类可继承基类的成员变量和成员函数，因此在基类中定义好的数据和函数等的程序代码可重复使用，这样可以提高程序的可靠性。\n当从已有的类中派生出新的类时，可以对派生类做以下几种变化：\n可以继承基类的成员数据或成员函数。 可以增加新的成员变量。 可以增加新的成员函数。 可以重新定义已有的成员函数。 可以改变现有的成员属性。 在C++中有二种继承：单一继承和多重继承。当一个派生类仅由一个基类派生时，称为单一继承；而当一个派生类由二个或更多个基类所派生时，称为多重继承。\n但派生并不是简单的扩充，有可能改变基类的性质。有三种派生方式：公有派生、保护派生、私有派生。默认的是私有派生。\n公有派生（Public Inheritance） 在 C++ 中，公有派生（Public Inheritance）是最常见的类继承方式。通过公有派生，派生类可以继承基类的成员，其访问权限如下：\n公有成员（public）： 在派生类和类外均可访问。 保护成员（protected）： 在派生类内可访问，但在类外不能直接访问。 私有成员（private）： 不能在派生类中访问，只能通过基类的公有或保护成员函数访问。 示例代码 class Base { public: int pubVar; // 可在派生类和类外访问 protected: int protVar; // 可在派生类访问，但类外无法访问 private: int privVar; // 仅能在基类中访问 }; class Derived : public Base { public: void accessMembers() { pubVar = 1; // 可访问 protVar = 2; // 可访问 // privVar = 3; // 错误：无法访问 } }; // 使用示例 int main() { Derived d; d.pubVar = 10; // 可以访问 // d.protVar = 20; // 错误：无法访问 // d.privVar = 30; // 错误：无法访问 return 0; } 使用公有派生时，基类的公有和保护成员在派生类中依然保持其访问权限，而私有成员不可访问。 私有派生（Private Inheritance） 在 C++ 中，私有派生是一种继承方式，其中基类的公有成员和保护成员在派生类中都变为私有成员。这意味着：\n公有成员（public）： 在基类中为公有，但在派生类中变为私有。可以在派生类内部直接使用，但在派生类外部无法访问。 保护成员（protected）： 在基类中为保护，但在派生类中同样变为私有。可以在派生类内部使用，但在外部无法访问。 私有成员（private）： 私有成员在基类中始终不可访问，派生类也无法直接使用。 示例代码 class Base { public: int pubVar; // 公有成员 protected: int protVar; // 保护成员 private: int privVar; // 私有成员 }; class Derived : private Base { public: void accessMembers() { pubVar = 1; // 可以访问（变为私有） protVar = 2; // 可以访问（变为私有） // privVar = 3; // 错误：无法访问 } }; // 使用示例 int main() { Derived d; d.pubVar = 10; // 错误：无法访问 // d.protVar = 20; // 错误：无法访问 // d.privVar = 30; // 错误：无法访问 return 0; } 私有派生通过将基类的公有和保护成员转为私有，增强了基类的封装性，确保只有派生类内部可以使用这些成员，外部无法直接访问。这种方式适用于希望隐藏基类实现细节，同时允许派生类使用基类功能的场景。 3**、【保护派生】**\nclass ClassName: protected BaseClassName\n保护派生时，基类中公有成员和保护成员在派生类中均变为保护的和私有的，在派生类中仍可直接使用这些成员，基类中的私有成员，在派生类中不可直接使用。\n基类：public: (变为保护)在派生类中使用，类外不可使用\nprotected: (变为私有）在派生类中使用，类外不可使用\nprivate: 不能在派生类中和类外使用\n保护派生（Protected Inheritance） 在 C++ 中，保护派生是一种继承方式。通过这种方式，基类的公有成员和保护成员在派生类中被视为保护成员，这意味着它们的访问权限发生了变化：\n公有成员（public）： 在基类中是公有的，但在保护派生中变为保护的。派生类可以内部访问，但类外部无法访问。 保护成员（protected）： 在基类中是保护的，经过保护派生后仍然是保护的，派生类可以内部访问，类外部无法访问。 私有成员（private）： 无论是公有、保护还是私有继承，基类的私有成员始终不可在派生类中访问。 示例代码 class Base { public: int pubVar; // 公有成员 protected: int protVar; // 保护成员 private: int privVar; // 私有成员 }; class Derived : protected Base { public: void accessMembers() { pubVar = 1; // 可以访问（变为保护） protVar = 2; // 可以访问（仍为保护） // privVar = 3; // 错误：无法访问 } }; // 使用示例 int main() { Derived d; // d.pubVar = 10; // 错误：无法访问 // d.protVar = 20; // 错误：无法访问 // d.privVar = 30; // 错误：无法访问 return 0; } 通过保护派生，基类的公有和保护成员变为保护，派生类内部可以直接使用这些成员，但在派生类外部无法访问。这种方式适用于需要隐藏基类实现细节，仅允许派生类使用基类功能的场合。保护派生的访问控制增大了封装性，确保了基类的内聚性。 抽象类与保护的成员函数 在面向对象编程中，一个类如果只能用作基类，不能创建对象，那么这个类被称为抽象类。抽象类的主要目的是用来定义其他类的通用接口或协议，通常包含至少一个抽象方法，这些方法在抽象类中声明但不实现，派生类必须实现这些方法。\n抽象类的定义示例 class AbstractClass { public: virtual void abstractMethod() = 0; // 抽象方法 }; 保护的构造函数和析构函数 在 C++ 中，可以将类的构造函数和析构函数定义为保护的（protected）。这样，外部代码无法直接创建该类的对象，但派生类可以访问和调用这些构造函数和析构函数。这种设计通常用于控制对象的创建和销毁过程，以确保只有派生类能够实例化该类。\n例如：\nclass AbstractBase { protected: AbstractBase() {} // 保护构造函数 virtual ~AbstractBase() {} // 保护析构函数 }; // 派生类可以使用 class ConcreteDerived : public AbstractBase { public: ConcreteDerived() {} }; 私有构造函数和析构函数 如果将一个类的构造函数或析构函数定义为私有的（private），这个类将无法被实例化，也无法被用作基类来派生出新的类。这种设计通常用于工具类等场景，表明该类不应该直接创建对象，而是提供静态功能或数据。\n当把类中的构造函数或析构函数说明为私有的时，所定义的类通常是没有任何实用意义的，一般情况下，不能用它来产生对象，也不能用它来产生派生类。\n例如：\nclass Utility { private: Utility() {} // 私有构造函数 ~Utility() {} // 私有析构函数 public: static void usefulMethod() { // 提供静态方法 } }; 抽象类用于定义子类的接口，不能被实例化。 保护构造函数和析构函数允许派生类访问，控制对象创建。 私有构造函数和析构函数禁止实例化，通常用于工具类。 多继承 //格式为： class 类名:\u0026lt;Access\u0026gt;类名1,..., \u0026lt;Access\u0026gt;类名n { private: ...... ； //私有成员说明; public: ...... ； //公有成员说明; protected: ...... ； //保护的成员说明; }; class D: public A, protected B, private C { ....//派生类中新增加成员 }; 初始化基类成员\n构造函数不能被继承, 派生类的构造函数必须调用基类的构造函数来初始化基类成员基类子对象。\n派生类构造函数的调用顺序如下：\n基类的构造函数 子对象类的构造函数 派生类的构造函数 虚继承 //通过指定类名来解决指定不明确问题 A::v.x = 5; 虚基类 在同一个公共的基类在派生类中产生多个拷贝，不仅多占用了存储空间，而且可能会造成多个拷贝中的数据不一致和模糊的引用。\nD d; d.x=10; //模糊引用 在多重派生的过程中，若使公共基类在派生类中只有一个拷贝，则可将这种基类说明为虚基类。在派生类的定义中，只要在基类的类名前加上关键字virtual，就可以将基类说明为虚基类。\nclass B:public virtual A{ public: int y; B(int a=0, int b=0 ):A(b) { y=a;} }; 这样就不会造成模糊引用。\n由虚基类派生出的对象初始化时，直接调用虚基类的构造函数。因此，若将一个类定义为虚基类，则一定有正确的构造函数可供所有派生类调用。 再次强调，用虚基类进行多重派生时，若虚基类没有缺省的构造函数，则在每一个派生类的构造函数中都必须有对虚基类构造函数的调用 （且首先调用）。 虚函数 虚函数是 C++ 中实现多态性的重要机制。它允许在基类中声明一个函数，并在派生类中重新定义（重写）这个函数。通过虚函数，可以在运行时根据对象的实际类型调用相应的函数，实现动态绑定。\n定义和用法 虚函数通过在基类中使用关键字 virtual 声明。当基类指针或引用指向派生类对象时，虚函数确保调用的是派生类中重写的版本。\n示例代码 #include \u0026lt;iostream\u0026gt; class Base { public: virtual void show() { // 虚函数 std::cout \u0026lt;\u0026lt; \u0026#34;Base class show function called.\u0026#34; \u0026lt;\u0026lt; std::endl; } virtual ~Base() {} // 虚析构函数 }; class Derived : public Base { public: void show() override { // 重写基类的虚函数 std::cout \u0026lt;\u0026lt; \u0026#34;Derived class show function called.\u0026#34; \u0026lt;\u0026lt; std::endl; } }; int main() { Base* ptr; // 基类指针 Derived derivedObj; // 派生类对象 ptr = \u0026amp;derivedObj; // 指向派生类对象 ptr-\u0026gt;show(); // 调用派生类的 show 函数 return 0; } 输出结果 Derived class show function called. 关键点 动态绑定：虚函数的调用决定是在运行时而非编译时，允许实现多态。 基类指针或引用：通过基类指针或引用调用虚函数时，实际调用的是对象的动态类型的相应函数。 虚析构函数：如果类有虚函数，通常应该有虚析构函数，以确保在对象销毁时正确调用派生类的析构函数。 性能开销：虚函数通过虚表（vtable）实现，可能会引入少许性能开销。 抽象类 抽象类是面向对象编程中的一种特殊类型的类，它主要用于定义子类的接口或协议。抽象类不能被实例化，也就是说，无法创建抽象类的对象。它通常包含至少一个抽象方法，即在抽象类中声明但不实现的方法。\n特点 不能实例化：抽象类不能创建对象，只能作为基类使用。 包含抽象方法：至少包含一个纯虚函数（抽象方法），用 = 0 的语法声明。 可包含具体方法：抽象类可以包含具体方法（已经实现的方法）和成员变量。 派生类实现：派生类必须实现所有抽象方法，才能被实例化。 示例代码 #include \u0026lt;iostream\u0026gt; class AbstractClass { public: // 抽象方法 virtual void doSomething() = 0; // 具体方法 void commonFunction() { std::cout \u0026lt;\u0026lt; \u0026#34;This is a common function.\u0026#34; \u0026lt;\u0026lt; std::endl; } }; class ConcreteClass : public AbstractClass { public: // 实现抽象方法 void doSomething() override { std::cout \u0026lt;\u0026lt; \u0026#34;Doing something in ConcreteClass.\u0026#34; \u0026lt;\u0026lt; std::endl; } }; int main() { // AbstractClass obj; // 错误：无法实例化抽象类 ConcreteClass myObject; myObject.commonFunction(); // 调用具体方法 myObject.doSomething(); // 调用实现的抽象方法 return 0; } 输出结果 This is a common function. Doing something in ConcreteClass. 关键点 接口定义：抽象类通过定义接口，规定了派生类应当实现的功能。 增强灵活性：通过使用抽象类，可以轻松实现多态，提高代码的可维护性和扩展性。 防止实例化：使用抽象类可以防止意外创建基类的对象，确保只能使用具体的实现类。 命名空间 **使用命名空间的目的是对标识符的名称进行本地化，以避免命名冲突。在C++中，变量、函数和类都是大量存在的。如果没有命名空间，这些变量、函数、类的名称将都存在于全局命名空间中，会导致很多冲突。 **\nnamespace 关键字使得我们可以通过创建作用范围来对全局命名空间进行分隔。本质上来讲，一个命名空间就定义了一个范围。定义命名空间的基本形式如下：\nnamespace 名称{ 声明 } 在命名空间中定义的任何东西都局限于该命名空间内。\n命名空间可以嵌套，在一个命名空间中定义另一个命名空间。\nnamespace 命名空间名称1{ // 代码声明 namespace命名空间名称2{ // 代码声明 } } 通过使用 :: 运算符来访问嵌套的命名空间中的成员。\n函数模板 模板是泛型编程的基础，泛型编程即以一种独立于任何特定类型的方式编写代码。模板是创建泛型类或函数的蓝图或公式。 模板函数定义的一般形式如下所示：\ntemplate \u0026lt;typename type类型\u0026gt; 返回类型 函数名(参数列表) { // 函数的主体 } type 是函数所使用的数据类型的占位符名称。这个名称可以在函数定义中使用。\n正如我们定义函数模板一样，我们也可以定义类模板。泛型类声明的一般形式如下所示： template \u0026lt;class type\u0026gt; class class-name { } type 是占位符类型名称，可以在类被实例化的时候进行指定。使用一个逗号分隔的列表来定义多个泛型数据类型。\n输入输出流 IO IO流 在C++中允许用户重载运算符\u0026lt;\u0026lt;和\u0026gt;\u0026gt;，实现对象的输入和输出。重载这二个运算符时，在对象所在的类中，将重载这二个运算符的函数说明该类的友元函数。\n文件流 C++标准库专门提供了3个类用于实现文件操作，它们统称为文件流类，这3个类分别为：\nifstream：专用于从文件中读取数据； ofstream：专用于向文件中写入数据； fstream：既可用于从文件中读取数据，又可用于向文件中写入数据。 打开文件可以通过以下两种方式进行：\n调用流对象的 open 成员函数打开文件。 定义文件流对象时，通过构造函数打开文件。 【使用 open 函数打开文件】\n先看第一种文件打开方式。以 ifstream 类为例，该类有一个 open 成员函数，其他两个文件流类也有同样的 open 成员函数：\nvoid open(const char* szFileName, int mode) 第一个参数是指向文件名的指针，第二个参数是文件的打开模式标记。\nios::binary 可以和其他模式标记组合使用，例如：\nios::in | ios::binary表示用二进制模式，以读取的方式打开文件； ios::out | ios::binary表示用二进制模式，以写入的方式打开文件。 在流对象上执行 open 成员函数，给出文件名和打开模式，就可以打开文件。判断文件打开是否成功，可以看“对象名”这个表达式的值是否为 true，如果为 true，则表示文件打开成功。\n**close()方法的用法很简单，其语法格式如下： **\nvoid close(); 调用open()方法打开文件，是文件流对象和文件之间建立关联的过程。那么，调用 close()方法关闭已打开的文件，就可以理解为是切断文件流对象和文件之间的关联。注意，close()方法的功能仅是切断文件流与文件之间的关联，该文件流并会被销毁，其后续还可用于关联其它的文件。\n可以看到，该方法既不需要传递任何参数，也没有返回值。\nSTL标准模板库 STL是Standard Template Library的简称，中文名标准模板库，惠普实验室开发的一系列软件的统称。它是由Alexander Stepanov、Meng Lee和David R Musser在惠普实验室工作时所开发出来的。从根本上说，STL是一些“容器”的集合，这些“容器”有list,vector,set,map等，STL也是算法和其他一些组件的集合。这里的“容器”和算法的集合指的是世界上很多聪明人很多年的杰作。STL的目的是标准化组件，这样就不用重新开发，可以使用现成的组件。STL是C++的一部分，因此不用安装额外的库文件。\nSTL的版本很多，常见的有HP STL、PJ STL、 SGI STL等。\nvector 序列式容器 vector 容器是 STL 中最常用的容器之一，它和 array 容器非常类似，都可以看做是对 C++ 普通数组的“升级版”。不同之处在于，array 实现的是静态数组（容量固定的数组），而 vector 实现的是一个动态数组，即可以进行元素的插入和删除，在此过程中，vector 会动态调整所占用的内存空间，整个过程无需人工干预。\nvector 常被称为向量容器，因为该容器擅长在尾部插入或删除元素，在常量时间内就可以完成，时间复杂度为O(1)；而对于在容器头部或者中部插入或删除元素，则花费时间要长一些（移动元素需要耗费时间），时间复杂度为线性阶O(n)。\ndeque双端队列容器 前面已接触过vector 容器，值得一提的是，deque 容器和 vecotr 容器有很多相似之处，比如：deque 容器也擅长在序列尾部添加或删除元素（时间复杂度为O(1)），而不擅长在序列中间添加或删除元素。deque 容器也可以根据需要修改自身的容量和大小。\n和 vector 不同的是，deque 还擅长在序列头部添加或删除元素，所耗费的时间复杂度也为常数阶O(1)。并且更重要的一点是，deque 容器中存储元素并不能保证所有元素都存储到连续的内存空间中。\n当需要向序列两端频繁的添加或删除元素时，应首选 deque 容器。\nstack 栈容器 stack\u0026lt; T \u0026gt;容器适配器中的数据是以 LIFO (先进后出) 的方式组织的，这和自助餐馆中堆叠的盘子、箱子中的一堆书类似。理论上的 stack 容器及其一些基本操作。只能访问 stack 顶部的元素；只有在移除 stack 顶部的元素后，才能访问下方的元素。\nqueue队列 队列也是一种逻辑数据结构，其具有先进先出的特性，只能在队的前端进行删除， 在队的后端进行插入。针对这种特性，可以实现一些较为复杂的逻辑。在实际应用中，部分程序也正需要这样一种顺序进出的数据处理方式。\nqueue：只允许从一端插入元素（入队），从另一端删除元素（出队）。遵循先进先出（FIFO）的原则。 deque：可以在两端插入和删除元素。支持在前端和后端进行操作。 set容器 STL 对这个序列可以进行查找、插入、删除序列中的任意一个元素，而完成这些操作的时间同这个序列中元素个数的对数成比例关系，并且当游标指向一个已删除的元素时，删除操作无效。\n而一个经过更正的和更加实际的定义应该是：一个集合(set)是一个容器，它其中所包含的元素的值是唯一的。这在收集一个数据的具体值的时候是有用的。集合中的元素按一定的顺序排列，并被作为集合中的实例。一个集合通过一个链表来组织，在插入操作和删除操作上比向量(vector)快，但查找或添加末尾的元素时会有些慢。具体实现采用了红黑树的平衡二叉树的数据结构。\nmap容器 映射和多重映射基于某一类型Key的键集的存在，提供对T类型的数据进行快速和高效的检索。\n对map而言，键只是指存储在容器中的某一成员。Map不支持副本键，multimap支持副本键。Map和multimap对象包涵了键和各个键有关的值，键和值的数据类型是不相同的，这与set不同。set中的key和value是Key类型的，而map中的key和value是一个pair结构中的两个分量。\nC++异常处理 程序中常见的错误有两大类：语法错误和运行错误。在编译时，编译系统能发现程序中的语法错误。\n异常(exception)是运行时(run-time)的错误，通常是非正常条件下引起的，例如，下标(index)越界、new操作不能正常分配所需内存。C语言中，异常通常是通过被调用函数返回一个数值作为标记的。\nC++中，函数可以识别标记为异常的条件，然后通告发生了异常。这种通告异常的机制称为抛出异常(throwing an exception)。\n异常提供了一种转移程序控制权的方式。C++ 异常处理涉及到三个关键字：try、catch、throw。\n**throw：**当问题出现时，程序会抛出一个异常。这是通过使用 throw 关键字来完成的。 **catch：**在您想要处理问题的地方，通过异常处理程序捕获异常。catch 关键字用于捕获异常。 **try：**try 块中的代码标识将被激活的特定异常。它后面通常跟着一个或多个 catch 块。 如果有一个块抛出一个异常，捕获异常的方法会使用 try 和 catch 关键字。try 块中放置可能抛出异常的代码，try 块中的代码被称为保护代码。\n例如\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { double x, y; cout \u0026lt;\u0026lt; \u0026#34;请输入x,y的值:\u0026#34;; cin \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y; try { if (y == 0) throw - 1; // 抛出-1类型异常 else if(x==0) throw - 1.0; // 抛出-1类型异常 else cout \u0026lt;\u0026lt; \u0026#34;x/y=\u0026#34; \u0026lt;\u0026lt; x / y \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; endl; } catch (int e) { cout \u0026lt;\u0026lt; \u0026#34;catch(int) :\u0026#34; \u0026lt;\u0026lt; e \u0026lt;\u0026lt; endl; } catch (double d) { cout \u0026lt;\u0026lt; \u0026#34;catch(double) :\u0026#34; \u0026lt;\u0026lt; d \u0026lt;\u0026lt; endl; } return 0; } ","permalink":"//localhost:1313/posts/c++%E8%AF%AD%E8%A8%80/","summary":"\u003ch1 id=\"emplace用法\"\u003eemplace用法\u003c/h1\u003e\n\u003cp\u003e\u003ccode\u003eemplace\u003c/code\u003e 是 C++ 中用于容器（如 \u003ccode\u003estd::vector\u003c/code\u003e, \u003ccode\u003estd::map\u003c/code\u003e, \u003ccode\u003estd::unordered_map\u003c/code\u003e 等）的一种方法，允许你在容器中直接构造元素，而不需要先构造再复制或移动。这通常可以提高性能，减少不必要的对象拷贝。\u003c/p\u003e","title":"C++基础"},{"content":"go的变量声明 第一种，指定变量类型，如果没有初始化，则变量默认为零值。 例如：\nvar a int // 声明一个整型变量 a，默认为 0 var b float64 // 声明一个浮点型变量 b，默认为 0.0 第二种，根据值自行判定变量类型。 例如：\nvar c = \u0026#34;Hello\u0026#34; // 声明变量 c，类型为 string var d = 42 // 声明变量 d，类型为 int 第三种，如果变量已经使用 var 声明过了，再使用 := 声明变量，就产生编译错误 例如：\nvar e int = 10 // 使用 var 声明 // e := 20 // 编译错误：e 已经被声明过 go的语言常量 常量是一个简单值的标识符，在程序运行时，不会被修改的量。\n常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。\n常量的定义格式：\nconst identifier [type] = value 你可以省略类型说明符 [type]，因为编译器可以根据变量的值来推断其类型。\n显式类型定义： const b string = \u0026quot;abc\u0026quot; 隐式类型定义： const b = \u0026quot;abc\u0026quot; 多个相同类型的声明可以简写为：\nconst c_name1, c_name2 = value1, value2 iota，特殊常量，可以认为是一个可以被编译器修改的常量。\niota 在 const关键字出现时将被重置为 0(const 内部的第一行之前)，const 中每新增一行常量声明将使 iota 计数一次(iota 可理解为 const 语句块中的行索引)。\niota 可以被用作枚举值：\nconst ( a = iota b = iota c = iota ) 第一个 iota 等于 0，每当 iota 在新的一行被使用时，它的值都会自动加 1；所以 a=0, b=1, c=2 可以简写为如下形式：\nconst ( a = iota b c ) iota 用法 实例 package main import \u0026#34;fmt\u0026#34; func main() { const ( a = iota //0 b //1 c //2 d = \u0026#34;ha\u0026#34; //独立值，iota += 1 e //\u0026#34;ha\u0026#34; iota += 1 f = 100 //iota +=1 g //100 iota +=1 h = iota //7,恢复计数 i //8 ) fmt.Println(a,b,c,d,e,f,g,h,i) } 以上实例运行结果为：\n0 1 2 ha ha 100 100 7 8 go的运算符 运算符用于在程序运行时执行数学或逻辑运算。\nGo 语言内置的运算符有：\n算术运算符 关系运算符 逻辑运算符 位运算符 赋值运算符 其他运算符 接下来让我们来详细看看各个运算符的介绍。\n算术运算符 下表列出了所有Go语言的算术运算符。假定 A 值为 10，B 值为 20。\n运算符 描述 实例 + 相加 A + B 输出结果 30 - 相减 A - B 输出结果 -10 * 相乘 A * B 输出结果 200 / 相除 B / A 输出结果 2 % 求余 B % A 输出结果 0 ++ 自增 A++ 输出结果 11 \u0026ndash; 自减 A\u0026ndash; 输出结果 9 以下实例演示了各个算术运算符的用法：\n实例 package main import \u0026#34;fmt\u0026#34; func main() { var a int = 21 var b int = 10 var c int c = a + b fmt.Printf(\u0026#34;第一行 - c 的值为 %d**\\n**\u0026#34;, c ) c = a - b fmt.Printf(\u0026#34;第二行 - c 的值为 %d**\\n**\u0026#34;, c ) c = a * b fmt.Printf(\u0026#34;第三行 - c 的值为 %d**\\n**\u0026#34;, c ) c = a / b fmt.Printf(\u0026#34;第四行 - c 的值为 %d**\\n**\u0026#34;, c ) c = a % b fmt.Printf(\u0026#34;第五行 - c 的值为 %d**\\n**\u0026#34;, c ) a++ fmt.Printf(\u0026#34;第六行 - a 的值为 %d**\\n**\u0026#34;, a ) a=21 // 为了方便测试，a 这里重新赋值为 21 a-- fmt.Printf(\u0026#34;第七行 - a 的值为 %d**\\n**\u0026#34;, a ) } 以上实例运行结果：\n第一行 - c 的值为 31 第二行 - c 的值为 11 第三行 - c 的值为 210 第四行 - c 的值为 2 第五行 - c 的值为 1 第六行 - a 的值为 22 第七行 - a 的值为 20 关系运算符 下表列出了所有Go语言的关系运算符。假定 A 值为 10，B 值为 20。\n运算符 描述 实例 == 检查两个值是否相等，如果相等返回 True 否则返回 False。 (A == B) 为 False != 检查两个值是否不相等，如果不相等返回 True 否则返回 False。 (A != B) 为 True \u0026gt; 检查左边值是否大于右边值，如果是返回 True 否则返回 False。 (A \u0026gt; B) 为 False \u0026lt; 检查左边值是否小于右边值，如果是返回 True 否则返回 False。 (A \u0026lt; B) 为 True \u0026gt;= 检查左边值是否大于等于右边值，如果是返回 True 否则返回 False。 (A \u0026gt;= B) 为 False \u0026lt;= 检查左边值是否小于等于右边值，如果是返回 True 否则返回 False。 (A \u0026lt;= B) 为 True package main import \u0026#34;fmt\u0026#34; func main() { var a bool = true var b bool = false if ( a \u0026amp;\u0026amp; b ) { fmt.Printf(\u0026#34;第一行 - 条件为 true\\n\u0026#34; ) } if ( a || b ) { fmt.Printf(\u0026#34;第二行 - 条件为 true\\n\u0026#34; ) } /* 修改 a 和 b 的值 */ a = false b = true if ( a \u0026amp;\u0026amp; b ) { fmt.Printf(\u0026#34;第三行 - 条件为 true\\n\u0026#34; ) } else { fmt.Printf(\u0026#34;第三行 - 条件为 false\\n\u0026#34; ) } if ( !(a \u0026amp;\u0026amp; b) ) { fmt.Printf(\u0026#34;第四行 - 条件为 true\\n\u0026#34; ) } } 运行结果：\n第一行 - a 不等于 b 第二行 - a 不小于 b 第三行 - a 大于 b 第四行 - a 小于等于 b 第五行 - b 大于等于 a 逻辑运算符 下表列出了所有Go语言的逻辑运算符。假定 A 值为 True，B 值为 False。\n运算符 描述 实例 \u0026amp;\u0026amp; 逻辑 AND 运算符。 如果两边的操作数都是 True，则条件 True，否则为 False。 (A \u0026amp;\u0026amp; B) 为 False || 逻辑 OR 运算符。 如果两边的操作数有一个 True，则条件 True，否则为 False。 (A || B) 为 True ! 逻辑 NOT 运算符。 如果条件为 True，则逻辑 NOT 条件 False，否则为 True。 !(A \u0026amp;\u0026amp; B) 为 True package main import \u0026#34;fmt\u0026#34; func main() { var a bool = true var b bool = false if ( a \u0026amp;\u0026amp; b ) { fmt.Printf(\u0026#34;第一行 - 条件为 true\\n\u0026#34; ) } if ( a || b ) { fmt.Printf(\u0026#34;第二行 - 条件为 true\\n\u0026#34; ) } /* 修改 a 和 b 的值 */ a = false b = true if ( a \u0026amp;\u0026amp; b ) { fmt.Printf(\u0026#34;第三行 - 条件为 true\\n\u0026#34; ) } else { fmt.Printf(\u0026#34;第三行 - 条件为 false\\n\u0026#34; ) } if ( !(a \u0026amp;\u0026amp; b) ) { fmt.Printf(\u0026#34;第四行 - 条件为 true\\n\u0026#34; ) } } 运行结果：\n第二行 - 条件为 true 第三行 - 条件为 false 第四行 - 条件为 true 位运算符 位运算符对整数在内存中的二进制位进行操作。\n下表列出了位运算符 \u0026amp;, |, 和 ^ 的计算：\np q p \u0026amp; q p | q p ^ q 0 0 0 0 0 0 1 0 1 1 1 1 1 1 0 1 0 0 1 1 假定 A = 60; B = 13; 其二进制数转换为：\nA = 0011 1100 B = 0000 1101 ----------------- A\u0026amp;B = 0000 1100 A|B = 0011 1101 A^B = 0011 0001 Go 语言支持的位运算符如下表所示。假定 A 为60，B 为13：\n运算符 描述 实例 \u0026amp; 按位与运算符\u0026quot;\u0026amp;\u0026ldquo;是双目运算符。 其功能是参与运算的两数各对应的二进位相与。 (A \u0026amp; B) 结果为 12, 二进制为 0000 1100 | 按位或运算符\u0026rdquo;|\u0026ldquo;是双目运算符。 其功能是参与运算的两数各对应的二进位相或 (A | B) 结果为 61, 二进制为 0011 1101 ^ 按位异或运算符\u0026rdquo;^\u0026ldquo;是双目运算符。 其功能是参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。 (A ^ B) 结果为 49, 二进制为 0011 0001 \u0026laquo; 左移运算符\u0026rdquo;\u0026laquo;\u0026ldquo;是双目运算符。左移n位就是乘以2的n次方。 其功能把\u0026rdquo;\u0026laquo;\u0026ldquo;左边的运算数的各二进位全部左移若干位，由\u0026rdquo;\u0026laquo;\u0026ldquo;右边的数指定移动的位数，高位丢弃，低位补0。 A \u0026laquo; 2 结果为 240 ，二进制为 1111 0000 \u0026raquo; 右移运算符\u0026rdquo;\u0026raquo;\u0026ldquo;是双目运算符。右移n位就是除以2的n次方。 其功能是把\u0026rdquo;\u0026raquo;\u0026ldquo;左边的运算数的各二进位全部右移若干位，\u0026quot;\u0026raquo;\u0026ldquo;右边的数指定移动的位数。 A \u0026raquo; 2 结果为 15 ，二进制为 0000 1111 package main import \u0026#34;fmt\u0026#34; func main() { var a uint = 60 /* 60 = 0011 1100 */ var b uint = 13 /* 13 = 0000 1101 */ var c uint = 0 c = a \u0026amp; b /* 12 = 0000 1100 */ fmt.Printf(\u0026#34;第一行 - c 的值为 %d\\n\u0026#34;, c ) c = a | b /* 61 = 0011 1101 */ fmt.Printf(\u0026#34;第二行 - c 的值为 %d\\n\u0026#34;, c ) c = a ^ b /* 49 = 0011 0001 */ fmt.Printf(\u0026#34;第三行 - c 的值为 %d\\n\u0026#34;, c ) c = a \u0026lt;\u0026lt; 2 /* 240 = 1111 0000 */ fmt.Printf(\u0026#34;第四行 - c 的值为 %d\\n\u0026#34;, c ) c = a \u0026gt;\u0026gt; 2 /* 15 = 0000 1111 */ fmt.Printf(\u0026#34;第五行 - c 的值为 %d\\n\u0026#34;, c ) } 运行结果：\n第一行 - c 的值为 12 第二行 - c 的值为 61 第三行 - c 的值为 49 第四行 - c 的值为 240 第五行 - c 的值为 15 赋值运算符 下表列出了所有Go语言的赋值运算符。\n运算符 描述 实例 = 简单的赋值运算符，将一个表达式的值赋给一个左值 C = A + B 将 A + B 表达式结果赋值给 C += 相加后再赋值 C += A 等于 C = C + A -= 相减后再赋值 C -= A 等于 C = C - A *= 相乘后再赋值 C *= A 等于 C = C * A /= 相除后再赋值 C /= A 等于 C = C / A %= 求余后再赋值 C %= A 等于 C = C % A \u0026laquo;= 左移后赋值 C \u0026laquo;= 2 等于 C = C \u0026laquo; 2 \u0026raquo;= 右移后赋值 C \u0026raquo;= 2 等于 C = C \u0026raquo; 2 \u0026amp;= 按位与后赋值 C \u0026amp;= 2 等于 C = C \u0026amp; 2 ^= 按位异或后赋值 C ^= 2 等于 C = C ^ 2 |= 按位或后赋值 C |= 2 等于 C = C | 2 package main import \u0026#34;fmt\u0026#34; func main() { var a int = 21 var c int c = a fmt.Printf(\u0026#34;第 1 行 - = 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c += a fmt.Printf(\u0026#34;第 2 行 - += 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c -= a fmt.Printf(\u0026#34;第 3 行 - -= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c *= a fmt.Printf(\u0026#34;第 4 行 - *= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c /= a fmt.Printf(\u0026#34;第 5 行 - /= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c = 200; c \u0026lt;\u0026lt;= 2 fmt.Printf(\u0026#34;第 6行 - \u0026lt;\u0026lt;= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c \u0026gt;\u0026gt;= 2 fmt.Printf(\u0026#34;第 7 行 - \u0026gt;\u0026gt;= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c \u0026amp;= 2 fmt.Printf(\u0026#34;第 8 行 - \u0026amp;= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c ^= 2 fmt.Printf(\u0026#34;第 9 行 - ^= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) c |= 2 fmt.Printf(\u0026#34;第 10 行 - |= 运算符实例，c 值为 = %d\\n\u0026#34;, c ) } 运行结果：\n第 1 行 - = 运算符实例，c 值为 = 21 第 2 行 - += 运算符实例，c 值为 = 42 第 3 行 - -= 运算符实例，c 值为 = 21 第 4 行 - *= 运算符实例，c 值为 = 441 第 5 行 - /= 运算符实例，c 值为 = 21 第 6行 - \u0026lt;\u0026lt;= 运算符实例，c 值为 = 800 第 7 行 - \u0026gt;\u0026gt;= 运算符实例，c 值为 = 200 第 8 行 - \u0026amp;= 运算符实例，c 值为 = 0 第 9 行 - ^= 运算符实例，c 值为 = 2 第 10 行 - |= 运算符实例，c 值为 = 2 其他运算符 下表列出了Go语言的其他运算符。\n运算符 描述 实例 \u0026amp; 返回变量存储地址 \u0026amp;a; 将给出变量的实际地址。 * 指针变量。 *a; 是一个指针变量 package main import \u0026#34;fmt\u0026#34; func main() { var a int = 4 var b int32 var c float32 var ptr *int /* 运算符实例 */ fmt.Printf(\u0026#34;第 1 行 - a 变量类型为 = %T\\n\u0026#34;, a ); fmt.Printf(\u0026#34;第 2 行 - b 变量类型为 = %T\\n\u0026#34;, b ); fmt.Printf(\u0026#34;第 3 行 - c 变量类型为 = %T\\n\u0026#34;, c ); /* \u0026amp; 和 * 运算符实例 */ ptr = \u0026amp;a /* \u0026#39;ptr\u0026#39; 包含了 \u0026#39;a\u0026#39; 变量的地址 */ fmt.Printf(\u0026#34;a 的值为 %d\\n\u0026#34;, a); fmt.Printf(\u0026#34;*ptr 为 %d\\n\u0026#34;, *ptr); } 运行结果：\n第 1 行 - a 变量类型为 = int 第 2 行 - b 变量类型为 = int32 第 3 行 - c 变量类型为 = float32 a 的值为 4 *ptr 为 4 运算符优先级 有些运算符拥有较高的优先级，二元运算符的运算方向均是从左至右。下表列出了所有运算符以及它们的优先级，由上至下代表优先级由高到低：\n优先级 运算符 5 * / % \u0026laquo; \u0026raquo; \u0026amp; \u0026amp;^ 4 + - | ^ 3 == != \u0026lt; \u0026lt;= \u0026gt; \u0026gt;= 2 \u0026amp;\u0026amp; 1 || 当然，你可以通过使用括号来临时提升某个表达式的整体运算优先级。\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int = 20 var b int = 10 var c int = 15 var d int = 5 var e int; e = (a + b) * c / d; // ( 30 * 15 ) / 5 fmt.Printf(\u0026#34;(a + b) * c / d 的值为 : %d\\n\u0026#34;, e ); e = ((a + b) * c) / d; // (30 * 15 ) / 5 fmt.Printf(\u0026#34;((a + b) * c) / d 的值为 : %d\\n\u0026#34; , e ); e = (a + b) * (c / d); // (30) * (15/5) fmt.Printf(\u0026#34;(a + b) * (c / d) 的值为 : %d\\n\u0026#34;, e ); e = a + (b * c) / d; // 20 + (150/5) fmt.Printf(\u0026#34;a + (b * c) / d 的值为 : %d\\n\u0026#34; , e ); } 运行结果：\n(a + b) * c / d 的值为 : 90 ((a + b) * c) / d 的值为 : 90 (a + b) * (c / d) 的值为 : 90 a + (b * c) / d 的值为 : 50 补充 Go 的自增，自减只能作为表达式使用，而不能用于赋值语句。\na++ // 这是允许的，类似 a = a + 1,结果与 a++ 相同 a-- //与 a++ 相似 a = a++ // 这是不允许的，会出现编译错误 syntax error: unexpected ++ at end of statement go的条件语句 条件语句需要开发者通过指定一个或多个条件，并通过测试条件是否为 true 来决定是否执行指定语句，并在条件为 false 的情况在执行另外的语句。\nGo 语言提供了以下几种条件判断语句：\n语句 描述 if 语句 if 语句 由一个布尔表达式后紧跟一个或多个语句组成。 if\u0026hellip;else 语句 if 语句 后可以使用可选的 else 语句, else 语句中的表达式在布尔表达式为 false 时执行。 if 嵌套语句 你可以在 if 或 else if 语句中嵌入一个或多个 if 或 else if 语句。 switch 语句 switch 语句用于基于不同条件执行不同动作。 select 语句 select 语句类似于 switch 语句，但是select会随机执行一个可运行的case。如果没有case可运行，它将阻塞，直到有case可运行。 go的循环语句 Go 语言提供了以下几种类型循环处理语句：\n循环类型 描述 for 循环 重复执行语句块 循环嵌套 在 for 循环中嵌套一个或多个 for 循环 循环控制语句 循环控制语句可以控制循环体内语句的执行过程。\nGO 语言支持以下几种循环控制语句：\n控制语句 描述 break 语句 经常用于中断当前 for 循环或跳出 switch 语句 continue 语句 跳过当前循环的剩余语句，然后继续进行下一轮循环。 goto 语句 将控制转移到被标记的语句。 无限循环 如果循环中条件语句永远不为 false 则会进行无限循环，我们可以通过 for 循环语句中只设置一个条件表达式来执行无限循环：\npackage main import \u0026#34;fmt\u0026#34; func main() { for true { fmt.Printf(\u0026#34;这是无限循环。\\n\u0026#34;); } } Go 语言函数 函数是基本的代码块，用于执行一个任务。 Go 语言最少有个 main() 函数。 你可以通过函数来划分不同功能，逻辑上每个函数执行的是指定的任务。 函数声明告诉了编译器函数的名称，返回类型，和参数。 Go 语言标准库提供了多种可动用的内置的函数。例如，len() 函数可以接受不同类型参数并返回该类型的长度。如果我们传入的是字符串则返回字符串的长度，如果传入的是数组，则返回数组中包含的元素个数。 Go 语言函数定义格式如下：\nfunc function_name( [parameter list] ) [return_types] { //函数体 } 函数定义解析：\nfunc：函数由 func 开始声明 function_name：函数名称，参数列表和返回值类型构成了函数签名。 parameter list：参数列表，参数就像一个占位符，当函数被调用时，你可以将值传递给参数，这个值被称为实际参数。参数列表指定的是参数类型、顺序、及参数个数。参数是可选的，也就是说函数也可以不包含参数。 return_types：返回类型，函数返回一列值。return_types 是该列值的数据类型。有些功能不需要返回值，这种情况下 return_types 不是必须的。 函数体：函数定义的代码集合。 实例 以下实例为 max() 函数的代码，该函数传入两个整型参数 num1 和 num2，并返回这两个参数的最大值：\n/* 函数返回两个数的最大值 */ func max(num1, num2 int) int { /* 声明局部变量 */ var result int if (num1 \u0026gt; num2) { result = num1 } else { result = num2 } return result } 函数调用 当创建函数时，你定义了函数需要做什么，通过调用该函数来执行指定任务。\n调用函数，向函数传递参数，并返回值，例如：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 定义局部变量 */ var a int = 100 var b int = 200 var ret int /* 调用函数并返回最大值 */ ret = max(a, b) fmt.Printf( \u0026#34;最大值是 : %d\\n\u0026#34;, ret ) } /* 函数返回两个数的最大值 */ func max(num1, num2 int) int { /* 定义局部变量 */ var result int if (num1 \u0026gt; num2) { result = num1 } else { result = num2 } return result } 以上实例在 main() 函数中调用 max（）函数，执行结果为：\n最大值是 : 200 函数返回多个值 Go 函数可以返回多个值，例如：\n实例 package main import \u0026#34;fmt\u0026#34; func swap(x, y string) (string, string) { return y, x } func main() { a, b := swap(\u0026#34;Google\u0026#34;, \u0026#34;Runoob\u0026#34;) fmt.Println(a, b) } 以上实例执行结果为：\nRunoob Google 函数参数 函数如果使用参数，该变量可称为函数的形参。\n形参就像定义在函数体内的局部变量。\n调用函数，可以通过两种方式来传递参数：\n传递类型 描述 值传递 值传递是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。 引用传递 引用传递是指在调用函数时将实际参数的地址传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。 默认情况下，Go 语言使用的是值传递，即在调用过程中不会影响到实际参数。\n函数用法 函数用法 描述 函数作为另外一个函数的实参 函数定义后可作为另外一个函数的实参数传入 闭包 闭包是匿名函数，可在动态编程中使用 方法 方法就是一个包含了接受者的函数 Go 语言变量作用域 作用域为已声明标识符所表示的常量、类型、变量、函数或包在源代码中的作用范围。\nGo 语言中变量可以在三个地方声明：\n函数内定义的变量称为局部变量 函数外定义的变量称为全局变量 函数定义中的变量称为形式参数 局部变量 在函数体内声明的变量称之为局部变量，它们的作用域只在函数体内，参数和返回值变量也是局部变量。\n以下实例中 main() 函数使用了局部变量 a, b, c：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 声明局部变量 */ var a, b, c int /* 初始化参数 */ a = 10 b = 20 c = a + b fmt.Printf (\u0026#34;结果： a = %d, b = %d and c = %d\\n\u0026#34;, a, b, c) } 以上实例执行输出结果为：\n结果： a = 10, b = 20 and c = 30 全局变量 在函数体外声明的变量称之为全局变量，全局变量可以在整个包甚至外部包（被导出后）使用。\n全局变量可以在任何函数中使用，以下实例演示了如何使用全局变量：\npackage main import \u0026#34;fmt\u0026#34; /* 声明全局变量 */ var g int func main() { /* 声明局部变量 */ var a, b int /* 初始化参数 */ a = 10 b = 20 g = a + b fmt.Printf(\u0026#34;结果： a = %d, b = %d and g = %d\\n\u0026#34;, a, b, g) } 以上实例执行输出结果为：\n结果： a = 10, b = 20 and g = 30 Go 语言程序中全局变量与局部变量名称可以相同，但是函数内的局部变量会被优先考虑。实例如下：\npackage main import \u0026#34;fmt\u0026#34; /* 声明全局变量 */ var g int = 20 func main() { /* 声明局部变量 */ var g int = 10 fmt.Printf (\u0026#34;结果： g = %d\\n\u0026#34;, g) } 以上实例执行输出结果为：\n结果： g = 10 形式参数 形式参数会作为函数的局部变量来使用。实例如下：\npackage main import \u0026#34;fmt\u0026#34; /* 声明全局变量 */ var a int = 20; func main() { /* main 函数中声明局部变量 */ var a int = 10 var b int = 20 var c int = 0 fmt.Printf(\u0026#34;main()函数中 a = %d\\n\u0026#34;, a); c = sum( a, b); fmt.Printf(\u0026#34;main()函数中 c = %d\\n\u0026#34;, c); } /* 函数定义-两数相加 */ func sum(a, b int) int { fmt.Printf(\u0026#34;sum() 函数中 a = %d\\n\u0026#34;, a); fmt.Printf(\u0026#34;sum() 函数中 b = %d\\n\u0026#34;, b); return a + b; } 以上实例执行输出结果为：\nmain()函数中 a = 10 sum() 函数中 a = 10 sum() 函数中 b = 20 main()函数中 c = 30 初始化局部和全局变量 不同类型的局部和全局变量默认值为：\n数据类型 初始化默认值 int 0 float32 0 pointer nil Go 语言数组 Go 语言提供了数组类型的数据结构。\n数组是具有相同唯一类型的一组已编号且长度固定的数据项序列，这种类型可以是任意的原始类型例如整型、字符串或者自定义类型。\n相对于去声明 number0, number1, \u0026hellip;, number99 的变量，使用数组形式 numbers[0], numbers[1] \u0026hellip;, numbers[99] 更加方便且易于扩展。\n数组元素可以通过索引（位置）来读取（或者修改），索引从 0 开始，第一个元素索引为 0，第二个索引为 1，以此类推。\n声明数组 Go 语言数组声明需要指定元素类型及元素个数，语法格式如下：\nvar arrayName [size]dataType 其中，arrayName 是数组的名称，size 是数组的大小，dataType 是数组中元素的数据类型。\n以下定义了数组 balance 长度为 10 类型为 float32：\nvar balance [10]float32 初始化数组 以下演示了数组初始化：\n以下实例声明一个名为 numbers 的整数数组，其大小为 5，在声明时，数组中的每个元素都会根据其数据类型进行默认初始化，对于整数类型，初始值为 0。\nvar numbers [5]int 还可以使用初始化列表来初始化数组的元素：\nvar numbers = [5]int{1, 2, 3, 4, 5} 以上代码声明一个大小为 5 的整数数组，并将其中的元素分别初始化为 1、2、3、4 和 5。\n另外，还可以使用 := 简短声明语法来声明和初始化数组：\nnumbers := [5]int{1, 2, 3, 4, 5} 以上代码创建一个名为 numbers 的整数数组，并将其大小设置为 5，并初始化元素的值。\n**注意：**在 Go 语言中，数组的大小是类型的一部分，因此不同大小的数组是不兼容的，也就是说 [5]int 和 [10]int 是不同的类型。\n以下定义了数组 balance 长度为 5 类型为 float32，并初始化数组的元素：\nvar balance = [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 我们也可以通过字面量在声明数组的同时快速初始化数组：\nbalance := [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 如果数组长度不确定，可以使用 \u0026hellip; 代替数组的长度，编译器会根据元素个数自行推断数组的长度：\nvar balance = [...]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 或 balance := [...]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 如果设置了数组的长度，我们还可以通过指定下标来初始化元素：\n// 将索引为 1 和 3 的元素初始化 balance := [5]float32{1:2.0,3:7.0} 初始化数组中 {} 中的元素个数不能大于 [] 中的数字。\n如果忽略 [] 中的数字不设置数组大小，Go 语言会根据元素的个数来设置数组的大小：\nbalance[4] = 50.0 以上实例读取了第五个元素。数组元素可以通过索引（位置）来读取（或者修改），索引从 0 开始，第一个元素索引为 0，第二个索引为 1，以此类推。\n访问数组元素 数组元素可以通过索引（位置）来读取。格式为数组名后加中括号，中括号中为索引的值。例如：\nvar salary float32 = balance[9] 以上实例读取了数组 balance 第 10 个元素的值。\n以下演示了数组完整操作（声明、赋值、访问）的实例：\npackage main import \u0026#34;fmt\u0026#34; func main() { var n [10]int /* n 是一个长度为 10 的数组 */ var i,j int /* 为数组 n 初始化元素 */ for i = 0; i \u0026lt; 10; i++ { n[i] = i + 100 /* 设置元素为 i + 100 */ } /* 输出每个数组元素的值 */ for j = 0; j \u0026lt; 10; j++ { fmt.Printf(\u0026#34;Element[%d] = %d\\n\u0026#34;, j, n[j] ) } } 结果如下：\nElement[0] = 100 Element[1] = 101 Element[2] = 102 Element[3] = 103 Element[4] = 104 Element[5] = 105 Element[6] = 106 Element[7] = 107 Element[8] = 108 Element[9] = 109 package main import \u0026#34;fmt\u0026#34; func main() { var i,j,k int // 声明数组的同时快速初始化数组 balance := [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0} /* 输出数组元素 */ ... for i = 0; i \u0026lt; 5; i++ { fmt.Printf(\u0026#34;balance[%d] = %f\\n\u0026#34;, i, balance[i] ) } balance2 := [...]float32{1000.0, 2.0, 3.4, 7.0, 50.0} /* 输出每个数组元素的值 */ for j = 0; j \u0026lt; 5; j++ { fmt.Printf(\u0026#34;balance2[%d] = %f\\n\u0026#34;, j, balance2[j] ) } // 将索引为 1 和 3 的元素初始化 balance3 := [5]float32{1:2.0,3:7.0} for k = 0; k \u0026lt; 5; k++ { fmt.Printf(\u0026#34;balance3[%d] = %f\\n\u0026#34;, k, balance3[k] ) } } 结果如下：\nbalance[0] = 1000.000000 balance[1] = 2.000000 balance[2] = 3.400000 balance[3] = 7.000000 balance[4] = 50.000000 balance2[0] = 1000.000000 balance2[1] = 2.000000 balance2[2] = 3.400000 balance2[3] = 7.000000 balance2[4] = 50.000000 balance3[0] = 0.000000 balance3[1] = 2.000000 balance3[2] = 0.000000 balance3[3] = 7.000000 balance3[4] = 0.000000 多维数组 Go 语言支持多维数组，以下为常用的多维数组声明方式：\nvar variable_name [SIZE1][SIZE2]...[SIZEN] variable_type 以下实例声明了三维的整型数组：\nvar threedim [5][10][4]int 二维数组 二维数组是最简单的多维数组，二维数组本质上是由一维数组组成的。二维数组定义方式如下：\nvar arrayName [ x ][ y ] variable_type variable_type 为 Go 语言的数据类型，arrayName 为数组名，二维数组可认为是一个表格，x 为行，y 为列，下图演示了一个二维数组 a 为三行四列：\n二维数组中的元素可通过 a[ i ][ j ]来访问。\npackage main import \u0026#34;fmt\u0026#34; func main() { // Step 1: 创建数组 values := [][]int{} // Step 2: 使用 append() 函数向空的二维数组添加两行一维数组 row1 := []int{1, 2, 3} row2 := []int{4, 5, 6} values = append(values, row1) values = append(values, row2) // Step 3: 显示两行数据 fmt.Println(\u0026#34;Row 1\u0026#34;) fmt.Println(values[0]) fmt.Println(\u0026#34;Row 2\u0026#34;) fmt.Println(values[1]) // Step 4: 访问第一个元素 fmt.Println(\u0026#34;第一个元素为：\u0026#34;) fmt.Println(values[0][0]) } 结果为：\nRow 1 [1 2 3] Row 2 [4 5 6] 第一个元素为： 1 初始化二维数组 多维数组可通过大括号来初始值。以下实例为一个 3 行 4 列的二维数组：\na := [3][4]int{ {0, 1, 2, 3} , /* 第一行索引为 0 */ {4, 5, 6, 7} , /* 第二行索引为 1 */ {8, 9, 10, 11}, /* 第三行索引为 2 */ } **注意：**以上代码中倒数第二行的}必须要有逗号，因为最后一行的} 不能单独一行，也可以写成这样：\na := [3][4]int{ {0, 1, 2, 3} , /* 第一行索引为 0 */ {4, 5, 6, 7} , /* 第二行索引为 1 */ {8, 9, 10, 11}} /* 第三行索引为 2 */ 以下实例初始化一个 2 行 2 列 的二维数组：\npackage main import \u0026#34;fmt\u0026#34; func main() { // 创建二维数组 sites := [2][2]string{} // 向二维数组添加元素 sites[0][0] = \u0026#34;Google\u0026#34; sites[0][1] = \u0026#34;Runoob\u0026#34; sites[1][0] = \u0026#34;Taobao\u0026#34; sites[1][1] = \u0026#34;Weibo\u0026#34; // 显示结果 fmt.Println(sites) } 输出结果为：\n[[Google Runoob] [Taobao Weibo]] 访问二维数组 二维数组通过指定坐标来访问。如数组中的行索引与列索引，例如：\nval := a[2][3] 或 var value int = a[2][3] 以上实例访问了二维数组 val 第三行的第四个元素。\n二维数组可以使用循环嵌套来输出元素：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 数组 - 5 行 2 列*/ var a = [5][2]int{ {0,0}, {1,2}, {2,4}, {3,6},{4,8}} var i, j int /* 输出数组元素 */ for i = 0; i \u0026lt; 5; i++ { for j = 0; j \u0026lt; 2; j++ { fmt.Printf(\u0026#34;a[%d][%d] = %d\\n\u0026#34;, i,j, a[i][j] ) } } } 输出结果为：\na[0][0] = 0 a[0][1] = 0 a[1][0] = 1 a[1][1] = 2 a[2][0] = 2 a[2][1] = 4 a[3][0] = 3 a[3][1] = 6 a[4][0] = 4 a[4][1] = 8 以下实例创建各个维度元素数量不一致的多维数组：\npackage main import \u0026#34;fmt\u0026#34; func main() { // 创建空的二维数组 animals := [][]string{} // 创建三一维数组，各数组长度不同 row1 := []string{\u0026#34;fish\u0026#34;, \u0026#34;shark\u0026#34;, \u0026#34;eel\u0026#34;} row2 := []string{\u0026#34;bird\u0026#34;} row3 := []string{\u0026#34;lizard\u0026#34;, \u0026#34;salamander\u0026#34;} // 使用 append() 函数将一维数组添加到二维数组中 animals = append(animals, row1) animals = append(animals, row2) animals = append(animals, row3) // 循环输出 for i := range animals { fmt.Printf(\u0026#34;Row: %v\\n\u0026#34;, i) fmt.Println(animals[i]) } } 输出结果为：\nRow: 0 [fish shark eel] Row: 1 [bird] Row: 2 [lizard salamander] Go 语言向函数传递数组 Go 语言中的数组是值类型，因此在将数组传递给函数时，实际上是传递数组的副本。\n如果你想向函数传递数组参数，你需要在函数定义时，声明形参为数组，我们可以通过以下两种方式来声明：\n方式一 形参设定数组大小：\nfunc myFunction(param [10]int) { .... } 方式二 形参未设定数组大小：\nfunc myFunction(param []int) { .... } 如果你想要在函数内修改原始数组，可以通过传递数组的指针来实现。\n实例 让我们看下以下实例，实例中函数接收整型数组参数，另一个参数指定了数组元素的个数，并返回平均值：\nfunc getAverage(arr []int, size int) float32 { var i int var avg, sum float32 for i = 0; i \u0026lt; size; ++i { sum += arr[i] } avg = sum / size return avg; } 接下来我们来调用这个函数：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 数组长度为 5 */ var balance = [5]int {1000, 2, 3, 17, 50} var avg float32 /* 数组作为参数传递给函数 */ avg = getAverage( balance, 5 ) ; /* 输出返回的平均值 */ fmt.Printf( \u0026#34;平均值为: %f \u0026#34;, avg ); } func getAverage(arr [5]int, size int) float32 { var i,sum int var avg float32 for i = 0; i \u0026lt; size;i++ { sum += arr[i] } avg = float32(sum) / float32(size) return avg; } 输出结果为：\n平均值为: 214.399994 以上实例中我们使用的形参并未设定数组大小。\n浮点数计算输出有一定的偏差，你也可以转整型来设置精度。\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { a := 1.69 b := 1.7 c := a * b // 结果应该是2.873 fmt.Println(c) // 输出的是2.8729999999999998 } 设置固定精度：\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { a := 1690 // 表示1.69 b := 1700 // 表示1.70 c := a * b // 结果应该是2873000表示 2.873 fmt.Println(c) // 内部编码 fmt.Println(float64(c) / 1000000) // 显示 } 如果你想要在函数内修改原始数组，可以通过传递数组的指针来实现。\n以下实例演示如何向函数传递数组，函数接受一个数组和数组的指针作为参数：\npackage main import \u0026#34;fmt\u0026#34; // 函数接受一个数组作为参数 func modifyArray(arr [5]int) { for i := 0; i \u0026lt; len(arr); i++ { arr[i] = arr[i] * 2 } } // 函数接受一个数组的指针作为参数 func modifyArrayWithPointer(arr *[5]int) { for i := 0; i \u0026lt; len(*arr); i++ { (*arr)[i] = (*arr)[i] * 2 } } func main() { // 创建一个包含5个元素的整数数组 myArray := [5]int{1, 2, 3, 4, 5} fmt.Println(\u0026#34;Original Array:\u0026#34;, myArray) // 传递数组给函数，但不会修改原始数组的值 modifyArray(myArray) fmt.Println(\u0026#34;Array after modifyArray:\u0026#34;, myArray) // 传递数组的指针给函数，可以修改原始数组的值 modifyArrayWithPointer(\u0026amp;myArray) fmt.Println(\u0026#34;Array after modifyArrayWithPointer:\u0026#34;, myArray) } 在上面的例子中，modifyArray 函数接受一个数组，并尝试修改数组的值，但在主函数中调用后，原始数组并未被修改。相反，modifyArrayWithPointer 函数接受一个数组的指针，并通过指针修改了原始数组的值。\n以上实例执行输出结果为：\nOriginal Array: [1 2 3 4 5] Array after modifyArray: [1 2 3 4 5] Array after modifyArrayWithPointer: [2 4 6 8 10] Go 语言指针 Go 语言中指针是很容易学习的，Go 语言中使用指针可以更简单的执行一些任务。\n接下来让我们来一步步学习 Go 语言指针。\n我们都知道，变量是一种使用方便的占位符，用于引用计算机内存地址。\nGo 语言的取地址符是 \u0026amp;，放到一个变量前使用就会返回相应变量的内存地址。\n以下实例演示了变量在内存中地址：\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int = 10 fmt.Printf(\u0026#34;变量的地址: %x\\n\u0026#34;, \u0026amp;a ) } 输出结果为：\n变量的地址: 20818a220 什么是指针 一个指针变量指向了一个值的内存地址。\n类似于变量和常量，在使用指针前你需要声明指针。指针声明格式如下：\nvar var_name *var-type var-type 为指针类型，var_name 为指针变量名，* 号用于指定变量是作为一个指针。以下是有效的指针声明：\nvar ip *int /* 指向整型*/ var fp *float32 /* 指向浮点型 */ 如何使用指针 指针使用流程：\n定义指针变量。 为指针变量赋值。 访问指针变量中指向地址的值。 在指针类型前面加上 * 号（前缀）来获取指针所指向的内容。\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int= 20 /* 声明实际变量 */ var ip *int /* 声明指针变量 */ ip = \u0026amp;a /* 指针变量的存储地址 */ fmt.Printf(\u0026#34;a 变量的地址是: %x\\n\u0026#34;, \u0026amp;a ) /* 指针变量的存储地址 */ fmt.Printf(\u0026#34;ip 变量储存的指针地址: %x\\n\u0026#34;, ip ) /* 使用指针访问值 */ fmt.Printf(\u0026#34;*ip 变量的值: %d\\n\u0026#34;, *ip ) } 输出结果为：\na 变量的地址是: 20818a220 ip 变量储存的指针地址: 20818a220 *ip 变量的值: 20 Go 空指针 当一个指针被定义后没有分配到任何变量时，它的值为 nil。\nnil 指针也称为空指针。\nnil在概念上和其它语言的null、None、nil、NULL一样，都指代零值或空值。\n一个指针变量通常缩写为 ptr。\npackage main import \u0026#34;fmt\u0026#34; func main() { var ptr *int fmt.Printf(\u0026#34;ptr 的值为 : %x\\n\u0026#34;, ptr ) } 输出结果为：\nptr 的值为 : 0 空指针判断：\nif(ptr != nil) /* ptr 不是空指针 */ if(ptr == nil) /* ptr 是空指针 */ Go 语言指针数组 package main import \u0026#34;fmt\u0026#34; const MAX int = 3 func main() { a := []int{10,100,200} var i int for i = 0; i \u0026lt; MAX; i++ { fmt.Printf(\u0026#34;a[%d] = %d\\n\u0026#34;, i, a[i] ) } } 以上代码执行输出结果为：\na[0] = 10 a[1] = 100 a[2] = 200 有一种情况，我们可能需要保存数组，这样我们就需要使用到指针。\n以下声明了整型指针数组：\nvar ptr [MAX]*int; ptr 为整型指针数组。因此每个元素都指向了一个值。以下实例的三个整数将存储在指针数组中：\npackage main import \u0026#34;fmt\u0026#34; const MAX int = 3 func main() { a := []int{10,100,200} var i int var ptr [MAX]*int; for i = 0; i \u0026lt; MAX; i++ { ptr[i] = \u0026amp;a[i] /* 整数地址赋值给指针数组 */ } for i = 0; i \u0026lt; MAX; i++ { fmt.Printf(\u0026#34;a[%d] = %d\\n\u0026#34;, i,*ptr[i] ) } } 输出结果为：\na[0] = 10 a[1] = 100 a[2] = 200 Go 语言指针作为函数参数 Go 语言允许向函数传递指针，只需要在函数定义的参数上设置为指针类型即可。\n以下实例演示了如何向函数传递指针，并在函数调用后修改函数内的值，：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 定义局部变量 */ var a int = 100 var b int= 200 fmt.Printf(\u0026#34;交换前 a 的值 : %d\\n\u0026#34;, a ) fmt.Printf(\u0026#34;交换前 b 的值 : %d\\n\u0026#34;, b ) /* 调用函数用于交换值 * \u0026amp;a 指向 a 变量的地址 * \u0026amp;b 指向 b 变量的地址 */ swap(\u0026amp;a, \u0026amp;b); fmt.Printf(\u0026#34;交换后 a 的值 : %d\\n\u0026#34;, a ) fmt.Printf(\u0026#34;交换后 b 的值 : %d\\n\u0026#34;, b ) } func swap(x *int, y *int) { var temp int temp = *x /* 保存 x 地址的值 */ *x = *y /* 将 y 赋值给 x */ *y = temp /* 将 temp 赋值给 y */ } 输出结果为：\n交换前 a 的值 : 100 交换前 b 的值 : 200 交换后 a 的值 : 200 交换后 b 的值 : 100 Go 语言指向指针的指针 如果一个指针变量存放的又是另一个指针变量的地址，则称这个指针变量为指向指针的指针变量。\n当定义一个指向指针的指针变量时，第一个指针存放第二个指针的地址，第二个指针存放变量的地址：\n指向指针的指针变量声明格式如下：\nvar ptr **int; 以上指向指针的指针变量为整型。\n访问指向指针的指针变量值需要使用两个 * 号，如下所示：\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int var ptr *int var pptr **int a = 3000 /* 指针 ptr 地址 */ ptr = \u0026amp;a /* 指向指针 ptr 地址 */ pptr = \u0026amp;ptr /* 获取 pptr 的值 */ fmt.Printf(\u0026#34;变量 a = %d\\n\u0026#34;, a ) fmt.Printf(\u0026#34;指针变量 *ptr = %d\\n\u0026#34;, *ptr ) fmt.Printf(\u0026#34;指向指针的指针变量 **pptr = %d\\n\u0026#34;, **pptr) } 输出结果为：\n变量 a = 3000 指针变量 *ptr = 3000 指向指针的指针变量 **pptr = 3000 Go 语言结构体 Go 语言中数组可以存储同一类型的数据，但在结构体中我们可以为不同项定义不同的数据类型。\n结构体是由一系列具有相同类型或不同类型的数据构成的数据集合。\n结构体表示一项记录，比如保存图书馆的书籍记录，每本书有以下属性：\nTitle ：标题 Author ： 作者 Subject：学科 ID：书籍ID 定义结构体 结构体定义需要使用 type 和 struct 语句。struct 语句定义一个新的数据类型，结构体中有一个或多个成员。type 语句设定了结构体的名称。结构体的格式如下：\ntype struct_variable_type struct { member definition member definition ... member definition } 一旦定义了结构体类型，它就能用于变量的声明，语法格式如下：\nvariable_name := structure_variable_type {value1, value2...valuen} 或 variable_name := structure_variable_type { key1: value1, key2: value2..., keyn: valuen} package main import \u0026#34;fmt\u0026#34; type Books struct { title string author string subject string book_id int } func main() { // 创建一个新的结构体 fmt.Println(Books{\u0026#34;Go 语言\u0026#34;, \u0026#34;www.runoob.com\u0026#34;, \u0026#34;Go 语言教程\u0026#34;, 6495407}) // 也可以使用 key =\u0026gt; value 格式 fmt.Println(Books{title: \u0026#34;Go 语言\u0026#34;, author: \u0026#34;www.runoob.com\u0026#34;, subject: \u0026#34;Go 语言教程\u0026#34;, book_id: 6495407}) // 忽略的字段为 0 或 空 fmt.Println(Books{title: \u0026#34;Go 语言\u0026#34;, author: \u0026#34;www.runoob.com\u0026#34;}) } 输出结果为：\n{Go 语言 www.runoob.com Go 语言教程 6495407} {Go 语言 www.runoob.com Go 语言教程 6495407} {Go 语言 www.runoob.com 0} 访问结构体成员 如果要访问结构体成员，需要使用点号 . 操作符，格式为：\n结构体.成员名 结构体类型变量使用 struct 关键字定义，实例如下：\npackage main import \u0026#34;fmt\u0026#34; type Books struct { title string author string subject string book_id int } func main() { var Book1 Books /* 声明 Book1 为 Books 类型 */ var Book2 Books /* 声明 Book2 为 Books 类型 */ /* book 1 描述 */ Book1.title = \u0026#34;Go 语言\u0026#34; Book1.author = \u0026#34;www.runoob.com\u0026#34; Book1.subject = \u0026#34;Go 语言教程\u0026#34; Book1.book_id = 6495407 /* book 2 描述 */ Book2.title = \u0026#34;Python 教程\u0026#34; Book2.author = \u0026#34;www.runoob.com\u0026#34; Book2.subject = \u0026#34;Python 语言教程\u0026#34; Book2.book_id = 6495700 /* 打印 Book1 信息 */ fmt.Printf( \u0026#34;Book 1 title : %s\\n\u0026#34;, Book1.title) fmt.Printf( \u0026#34;Book 1 author : %s\\n\u0026#34;, Book1.author) fmt.Printf( \u0026#34;Book 1 subject : %s\\n\u0026#34;, Book1.subject) fmt.Printf( \u0026#34;Book 1 book_id : %d\\n\u0026#34;, Book1.book_id) /* 打印 Book2 信息 */ fmt.Printf( \u0026#34;Book 2 title : %s\\n\u0026#34;, Book2.title) fmt.Printf( \u0026#34;Book 2 author : %s\\n\u0026#34;, Book2.author) fmt.Printf( \u0026#34;Book 2 subject : %s\\n\u0026#34;, Book2.subject) fmt.Printf( \u0026#34;Book 2 book_id : %d\\n\u0026#34;, Book2.book_id) } 运行结果为：\nBook 1 title : Go 语言 Book 1 author : www.runoob.com Book 1 subject : Go 语言教程 Book 1 book_id : 6495407 Book 2 title : Python 教程 Book 2 author : www.runoob.com Book 2 subject : Python 语言教程 Book 2 book_id : 6495700 结构体作为函数参数 你可以像其他数据类型一样将结构体类型作为参数传递给函数。并以以上实例的方式访问结构体变量：\npackage main import \u0026#34;fmt\u0026#34; type Books struct { title string author string subject string book_id int } func main() { var Book1 Books /* 声明 Book1 为 Books 类型 */ var Book2 Books /* 声明 Book2 为 Books 类型 */ /* book 1 描述 */ Book1.title = \u0026#34;Go 语言\u0026#34; Book1.author = \u0026#34;www.runoob.com\u0026#34; Book1.subject = \u0026#34;Go 语言教程\u0026#34; Book1.book_id = 6495407 /* book 2 描述 */ Book2.title = \u0026#34;Python 教程\u0026#34; Book2.author = \u0026#34;www.runoob.com\u0026#34; Book2.subject = \u0026#34;Python 语言教程\u0026#34; Book2.book_id = 6495700 /* 打印 Book1 信息 */ printBook(Book1) /* 打印 Book2 信息 */ printBook(Book2) } func printBook( book Books ) { fmt.Printf( \u0026#34;Book title : %s\\n\u0026#34;, book.title) fmt.Printf( \u0026#34;Book author : %s\\n\u0026#34;, book.author) fmt.Printf( \u0026#34;Book subject : %s\\n\u0026#34;, book.subject) fmt.Printf( \u0026#34;Book book_id : %d\\n\u0026#34;, book.book_id) } 运行结果为：\nBook title : Go 语言 Book author : www.runoob.com Book subject : Go 语言教程 Book book_id : 6495407 Book title : Python 教程 Book author : www.runoob.com Book subject : Python 语言教程 Book book_id : 6495700 结构体指针 你可以定义指向结构体的指针类似于其他指针变量，格式如下：\nvar struct_pointer *Books 以上定义的指针变量可以存储结构体变量的地址。查看结构体变量地址，可以将 \u0026amp; 符号放置于结构体变量前：\nstruct_pointer = \u0026amp;Book1 使用结构体指针访问结构体成员，使用 \u0026ldquo;.\u0026rdquo; 操作符：\nstruct_pointer.title package main import \u0026#34;fmt\u0026#34; type Books struct { title string author string subject string book_id int } func main() { var Book1 Books /* 声明 Book1 为 Books 类型 */ var Book2 Books /* 声明 Book2 为 Books 类型 */ /* book 1 描述 */ Book1.title = \u0026#34;Go 语言\u0026#34; Book1.author = \u0026#34;www.runoob.com\u0026#34; Book1.subject = \u0026#34;Go 语言教程\u0026#34; Book1.book_id = 6495407 /* book 2 描述 */ Book2.title = \u0026#34;Python 教程\u0026#34; Book2.author = \u0026#34;www.runoob.com\u0026#34; Book2.subject = \u0026#34;Python 语言教程\u0026#34; Book2.book_id = 6495700 /* 打印 Book1 信息 */ printBook(\u0026amp;Book1) /* 打印 Book2 信息 */ printBook(\u0026amp;Book2) } func printBook( book *Books ) { fmt.Printf( \u0026#34;Book title : %s\\n\u0026#34;, book.title) fmt.Printf( \u0026#34;Book author : %s\\n\u0026#34;, book.author) fmt.Printf( \u0026#34;Book subject : %s\\n\u0026#34;, book.subject) fmt.Printf( \u0026#34;Book book_id : %d\\n\u0026#34;, book.book_id) } 运行结果为：\nBook title : Go 语言 Book author : www.runoob.com Book subject : Go 语言教程 Book book_id : 6495407 Book title : Python 教程 Book author : www.runoob.com Book subject : Python 语言教程 Book book_id : 6495700 Go 语言切片(Slice) Go 语言切片是对数组的抽象。\nGo 数组的长度不可改变，在特定场景中这样的集合就不太适用，Go 中提供了一种灵活，功能强悍的内置类型切片(\u0026ldquo;动态数组\u0026rdquo;)，与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大。\n定义切片 你可以声明一个未指定大小的数组来定义切片：\nvar identifier []type 切片不需要说明长度。\n或使用 make() 函数来创建切片:\nvar slice1 []type = make([]type, len) 也可以简写为 slice1 := make([]type, len) 也可以指定容量，其中 capacity 为可选参数。\nmake([]T, length, capacity) 这里 len 是数组的长度并且也是切片的初始长度。\n切片初始化 s :=[] int {1,2,3 } 直接初始化切片，[] 表示是切片类型，{1,2,3} 初始化值依次是 1,2,3，其 cap=len=3。\ns := arr[:] 初始化切片 s，是数组 arr 的引用。\ns := arr[startIndex:endIndex] 将 arr 中从下标 startIndex 到 endIndex-1 下的元素创建为一个新的切片。\ns := arr[startIndex:] 默认 endIndex 时将表示一直到arr的最后一个元素。\ns := arr[:endIndex] 默认 startIndex 时将表示从 arr 的第一个元素开始。\ns1 := s[startIndex:endIndex] 通过切片 s 初始化切片 s1。\ns :=make([]int,len,cap) 通过内置函数 make() 初始化切片s，[]int 标识为其元素类型为 int 的切片。\nlen() 和 cap() 函数 切片是可索引的，并且可以由 len() 方法获取长度。\n切片提供了计算容量的方法 cap() 可以测量切片最长可以达到多少。\n以下为具体实例：\npackage main import \u0026#34;fmt\u0026#34; func main() { var numbers = make([]int,3,5) printSlice(numbers) } func printSlice(x []int){ fmt.Printf(\u0026#34;len=%d cap=%d slice=%v\\n\u0026#34;,len(x),cap(x),x) } 输出结果为:\nlen=3 cap=5 slice=[0 0 0] 空(nil)切片 一个切片在未初始化之前默认为 nil，长度为 0，实例如下：\npackage main import \u0026#34;fmt\u0026#34; func main() { var numbers []int printSlice(numbers) if(numbers == nil){ fmt.Printf(\u0026#34;切片是空的\u0026#34;) } } func printSlice(x []int){ fmt.Printf(\u0026#34;len=%d cap=%d slice=%v\\n\u0026#34;,len(x),cap(x),x) } 输出结果为:\nlen=0 cap=0 slice=[] 切片是空的 切片截取 可以通过设置下限及上限来设置截取切片 [lower-bound:upper-bound]，实例如下：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 创建切片 */ numbers := []int{0,1,2,3,4,5,6,7,8} printSlice(numbers) /* 打印原始切片 */ fmt.Println(\u0026#34;numbers ==\u0026#34;, numbers) /* 打印子切片从索引1(包含) 到索引4(不包含)*/ fmt.Println(\u0026#34;numbers[1:4] ==\u0026#34;, numbers[1:4]) /* 默认下限为 0*/ fmt.Println(\u0026#34;numbers[:3] ==\u0026#34;, numbers[:3]) /* 默认上限为 len(s)*/ fmt.Println(\u0026#34;numbers[4:] ==\u0026#34;, numbers[4:]) numbers1 := make([]int,0,5) printSlice(numbers1) /* 打印子切片从索引 0(包含) 到索引 2(不包含) */ number2 := numbers[:2] printSlice(number2) /* 打印子切片从索引 2(包含) 到索引 5(不包含) */ number3 := numbers[2:5] printSlice(number3) } func printSlice(x []int){ fmt.Printf(\u0026#34;len=%d cap=%d slice=%v\\n\u0026#34;,len(x),cap(x),x) } 输出结果为：\nlen=9 cap=9 slice=[0 1 2 3 4 5 6 7 8] numbers == [0 1 2 3 4 5 6 7 8] numbers[1:4] == [1 2 3] numbers[:3] == [0 1 2] numbers[4:] == [4 5 6 7 8] len=0 cap=5 slice=[] len=2 cap=9 slice=[0 1] len=3 cap=7 slice=[2 3 4] append() 和 copy() 函数 如果想增加切片的容量，我们必须创建一个新的更大的切片并把原分片的内容都拷贝过来。\n下面的代码描述了从拷贝切片的 copy 方法和向切片追加新元素的 append 方法。\npackage main import \u0026#34;fmt\u0026#34; func main() { var numbers []int printSlice(numbers) /* 允许追加空切片 */ numbers = append(numbers, 0) printSlice(numbers) /* 向切片添加一个元素 */ numbers = append(numbers, 1) printSlice(numbers) /* 同时添加多个元素 */ numbers = append(numbers, 2,3,4) printSlice(numbers) /* 创建切片 numbers1 是之前切片的两倍容量*/ numbers1 := make([]int, len(numbers), (cap(numbers))*2) /* 拷贝 numbers 的内容到 numbers1 */ copy(numbers1,numbers) printSlice(numbers1) } func printSlice(x []int){ fmt.Printf(\u0026#34;len=%d cap=%d slice=%v\\n\u0026#34;,len(x),cap(x),x) } 输出结果为：\nlen=0 cap=0 slice=[] len=1 cap=1 slice=[0] len=2 cap=2 slice=[0 1] len=5 cap=6 slice=[0 1 2 3 4] len=5 cap=12 slice=[0 1 2 3 4] Go 语言范围(Range) Go 语言中 range 关键字用于 for 循环中迭代数组(array)、切片(slice)、通道(channel)或集合(map)的元素。在数组和切片中它返回元素的索引和索引对应的值，在集合中返回 key-value 对。\nfor 循环的 range 格式可以对 slice、map、数组、字符串等进行迭代循环。格式如下：\nfor key, value := range oldMap { newMap[key] = value } 以上代码中的 key 和 value 是可以省略。\n如果只想读取 key，格式如下：\nfor key := range oldMap 或者这样：\nfor key, _ := range oldMap\n如果只想读取 value，格式如下：\nfor _, value := range oldMap 数组和切片 遍历简单的切片，2**%d 的结果为 2 对应的次方数：\npackage main import \u0026#34;fmt\u0026#34; // 声明一个包含 2 的幂次方的切片 var pow = []int{1, 2, 4, 8, 16, 32, 64, 128} func main() { // 遍历 pow 切片，i 是索引，v 是值 for i, v := range pow { // 打印 2 的 i 次方等于 v fmt.Printf(\u0026#34;2**%d = %d\\n\u0026#34;, i, v) } } 遍历 pow 切片，i 是索引，v 是值\n输出结果为：\n2**0 = 1 2**1 = 2 2**2 = 4 2**3 = 8 2**4 = 16 2**5 = 32 2**6 = 64 2**7 = 128 字符串 range 迭代字符串时，返回每个字符的索引和 Unicode 代码点（rune）。\npackage main import \u0026#34;fmt\u0026#34; func main() { for i, c := range \u0026#34;hello\u0026#34; { fmt.Printf(\u0026#34;index: %d, char: %c\\n\u0026#34;, i, c) } } 输出结果为:\nindex: 0, char: h index: 1, char: e index: 2, char: l index: 3, char: l index: 4, char: o 映射（Map） for 循环的 range 格式可以省略 key 和 value，如下实例：\npackage main import \u0026#34;fmt\u0026#34; func main() { // 创建一个空的 map，key 是 int 类型，value 是 float32 类型 map1 := make(map[int]float32) // 向 map1 中添加 key-value 对 map1[1] = 1.0 map1[2] = 2.0 map1[3] = 3.0 map1[4] = 4.0 // 遍历 map1，读取 key 和 value for key, value := range map1 { // 打印 key 和 value fmt.Printf(\u0026#34;key is: %d - value is: %f\\n\u0026#34;, key, value) } // 遍历 map1，只读取 key for key := range map1 { // 打印 key fmt.Printf(\u0026#34;key is: %d\\n\u0026#34;, key) } // 遍历 map1，只读取 value for _, value := range map1 { // 打印 value fmt.Printf(\u0026#34;value is: %f\\n\u0026#34;, value) } } 输出结果为:\nkey is: 4 - value is: 4.000000 key is: 1 - value is: 1.000000 key is: 2 - value is: 2.000000 key is: 3 - value is: 3.000000 key is: 1 key is: 2 key is: 3 key is: 4 value is: 1.000000 value is: 2.000000 value is: 3.000000 value is: 4.000000 通道（Channel） range 遍历从通道接收的值，直到通道关闭。\npackage main import \u0026#34;fmt\u0026#34; func main() { ch := make(chan int, 2) ch \u0026lt;- 1 ch \u0026lt;- 2 close(ch) for v := range ch { fmt.Println(v) } } 输出结果为:\n1 2 忽略值 在遍历时可以使用 _ 来忽略索引或值。\npackage main import \u0026#34;fmt\u0026#34; func main() { nums := []int{2, 3, 4} // 忽略索引 for _, num := range nums { fmt.Println(\u0026#34;value:\u0026#34;, num) } // 忽略值 for i := range nums { fmt.Println(\u0026#34;index:\u0026#34;, i) } } 输出结果为:\nvalue: 2 value: 3 value: 4 index: 0 index: 1 index: 2 其他 range 遍历其他数据结构：\npackage main import \u0026#34;fmt\u0026#34; func main() { //这是我们使用 range 去求一个 slice 的和。使用数组跟这个很类似 nums := []int{2, 3, 4} sum := 0 for _, num := range nums { sum += num } fmt.Println(\u0026#34;sum:\u0026#34;, sum) //在数组上使用 range 将传入索引和值两个变量。上面那个例子我们不需要使用该元素的序号，所以我们使用空白符\u0026#34;_\u0026#34;省略了。有时侯我们确实需要知道它的索引。 for i, num := range nums { if num == 3 { fmt.Println(\u0026#34;index:\u0026#34;, i) } } //range 也可以用在 map 的键值对上。 kvs := map[string]string{\u0026#34;a\u0026#34;: \u0026#34;apple\u0026#34;, \u0026#34;b\u0026#34;: \u0026#34;banana\u0026#34;} for k, v := range kvs { fmt.Printf(\u0026#34;%s -\u0026gt; %s\\n\u0026#34;, k, v) } //range也可以用来枚举 Unicode 字符串。第一个参数是字符的索引，第二个是字符（Unicode的值）本身。 for i, c := range \u0026#34;go\u0026#34; { fmt.Println(i, c) } } 输出结果为：\nsum: 9 index: 1 a -\u0026gt; apple b -\u0026gt; banana 0 103 1 111 Go 语言Map(集合) Map 是一种无序的键值对的集合。\nMap 最重要的一点是通过 key 来快速检索数据，key 类似于索引，指向数据的值。\nMap 是一种集合，所以我们可以像迭代数组和切片那样迭代它。不过，Map 是无序的，遍历 Map 时返回的键值对的顺序是不确定的。\n在获取 Map 的值时，如果键不存在，返回该类型的零值，例如 int 类型的零值是 0，string 类型的零值是 \u0026ldquo;\u0026quot;。\nMap 是引用类型，如果将一个 Map 传递给一个函数或赋值给另一个变量，它们都指向同一个底层数据结构，因此对 Map 的修改会影响到所有引用它的变量。\n定义 Map 可以使用内建函数 make 或使用 map 关键字来定义 Map:\n/* 使用 make 函数 */ map_variable := make(map[KeyType]ValueType, initialCapacity) 其中 KeyType 是键的类型，ValueType 是值的类型，initialCapacity 是可选的参数，用于指定 Map 的初始容量。Map 的容量是指 Map 中可以保存的键值对的数量，当 Map 中的键值对数量达到容量时，Map 会自动扩容。如果不指定 initialCapacity，Go 语言会根据实际情况选择一个合适的值。\n// 创建一个空的 Map m := make(map[string]int) // 创建一个初始容量为 10 的 Map m := make(map[string]int, 10) 也可以使用字面量创建 Map：键\u0026lt;\u0026mdash;\u0026mdash;\u0026mdash;\u0026gt;值\n// 使用字面量创建 Map m := map[string]int{ \u0026#34;apple\u0026#34;: 1, \u0026#34;banana\u0026#34;: 2, \u0026#34;orange\u0026#34;: 3, } 获取元素：\n// 获取键值对 v1 := m[\u0026#34;apple\u0026#34;] v2, ok := m[\u0026#34;pear\u0026#34;] // 如果键不存在，ok 的值为 false，v2 的值为该类型的零值 修改元素：\n// 修改键值对 m[\u0026#34;apple\u0026#34;] = 5 获取 Map 的长度：\n// 获取 Map 的长度 len := len(m) 遍历 Map：\n// 遍历 Map for k, v := range m { fmt.Printf(\u0026#34;key=%s, value=%d\\n\u0026#34;, k, v) } 删除元素：\n// 删除键值对 delete(m, \u0026#34;banana\u0026#34;) 创建和使用map:\npackage main import \u0026#34;fmt\u0026#34; func main() { var siteMap map[string]string /*创建集合 */ siteMap = make(map[string]string) /* map 插入 key - value 对,各个国家对应的首都 */ siteMap [ \u0026#34;Google\u0026#34; ] = \u0026#34;谷歌\u0026#34; siteMap [ \u0026#34;Runoob\u0026#34; ] = \u0026#34;菜鸟教程\u0026#34; siteMap [ \u0026#34;Baidu\u0026#34; ] = \u0026#34;百度\u0026#34; siteMap [ \u0026#34;Wiki\u0026#34; ] = \u0026#34;维基百科\u0026#34; /*使用键输出地图值 */ for site := range siteMap { fmt.Println(site, \u0026#34;首都是\u0026#34;, siteMap [site]) } /*查看元素在集合中是否存在 */ name, ok := siteMap [ \u0026#34;Facebook\u0026#34; ] /*如果确定是真实的,则存在,否则不存在 */ /*fmt.Println(capital) */ /*fmt.Println(ok) */ if (ok) { fmt.Println(\u0026#34;Facebook 的 站点是\u0026#34;, name) } else { fmt.Println(\u0026#34;Facebook 站点不存在\u0026#34;) } } 运行结果为：\nWiki 首都是 维基百科 Google 首都是 谷歌 Runoob 首都是 菜鸟教程 Baidu 首都是 百度 Facebook 站点不存在 delete() 函数 delete() 函数用于删除集合的元素, 参数为 map 和其对应的 key。实例如下：\npackage main import \u0026#34;fmt\u0026#34; func main() { /* 创建map */ countryCapitalMap := map[string]string{\u0026#34;France\u0026#34;: \u0026#34;Paris\u0026#34;, \u0026#34;Italy\u0026#34;: \u0026#34;Rome\u0026#34;, \u0026#34;Japan\u0026#34;: \u0026#34;Tokyo\u0026#34;, \u0026#34;India\u0026#34;: \u0026#34;New delhi\u0026#34;} fmt.Println(\u0026#34;原始地图\u0026#34;) /* 打印地图 */ for country := range countryCapitalMap { fmt.Println(country, \u0026#34;首都是\u0026#34;, countryCapitalMap [ country ]) } /*删除元素*/ delete(countryCapitalMap, \u0026#34;France\u0026#34;) fmt.Println(\u0026#34;法国条目被删除\u0026#34;) fmt.Println(\u0026#34;删除元素后地图\u0026#34;) /*打印地图*/ for country := range countryCapitalMap { fmt.Println(country, \u0026#34;首都是\u0026#34;, countryCapitalMap [ country ]) } } 运行结果为：\n原始地图 India 首都是 New delhi France 首都是 Paris Italy 首都是 Rome Japan 首都是 Tokyo 法国条目被删除 删除元素后地图 Italy 首都是 Rome Japan 首都是 Tokyo India 首都是 New delhi Go 语言递归函数 递归，就是在运行的过程中调用自己。\n语法格式如下：\nfunc recursion() { recursion() */\\* 函数调用自身 \\*/* } func main() { recursion() } Go 语言支持递归。但我们在使用递归时，开发者需要设置退出条件，否则递归将陷入无限循环中。\n递归函数对于解决数学上的问题是非常有用的，就像计算阶乘，生成斐波那契数列等。\n阶乘 以下实例通过 Go 语言的递归函数实例阶乘：\npackage main import \u0026#34;fmt\u0026#34; func Factorial(n uint64)(result uint64) { if (n \u0026gt; 0) { result = n * Factorial(n-1) return result } return 1 } func main() { var i int = 15 fmt.Printf(\u0026#34;%d 的阶乘是 %d\\n\u0026#34;, i, Factorial(uint64(i))) } 输出结果为：\n15 的阶乘是 1307674368000 斐波那契数列 以下实例通过 Go 语言的递归函数实现斐波那契数列：\npackage main import \u0026#34;fmt\u0026#34; func fibonacci(n int) int { if n \u0026lt; 2 { return n } return fibonacci(n-2) + fibonacci(n-1) } func main() { var i int for i = 0; i \u0026lt; 10; i++ { fmt.Printf(\u0026#34;%d\\t\u0026#34;, fibonacci(i)) } } 输出结果为：\n0 1 1 2 3 5 8 13 21 34 求平方根 以下实例通过 Go 语言使用递归方法实现求平方根的代码：\npackage main import ( \u0026#34;fmt\u0026#34; ) func sqrtRecursive(x, guess, prevGuess, epsilon float64) float64 { if diff := guess*guess - x; diff \u0026lt; epsilon \u0026amp;\u0026amp; -diff \u0026lt; epsilon { return guess } newGuess := (guess + x/guess) / 2 if newGuess == prevGuess { return guess } return sqrtRecursive(x, newGuess, guess, epsilon) } func sqrt(x float64) float64 { return sqrtRecursive(x, 1.0, 0.0, 1e-9) } func main() { x := 25.0 result := sqrt(x) fmt.Printf(\u0026#34;%.2f 的平方根为 %.6f\\n\u0026#34;, x, result) } 以上实例中，sqrtRecursive 函数使用递归方式实现平方根的计算。\nsqrtRecursive 函数接受四个参数：\nx 表示待求平方根的数 guess 表示当前猜测的平方根值 prevGuess 表示上一次的猜测值 epsilon 表示精度要求（即接近平方根的程度） 递归的终止条件是当前猜测的平方根与上一次猜测的平方根非常接近，差值小于给定的精度 epsilon。\n在 sqrt 函数中，我们调用 sqrtRecursive 来计算平方根，并传入初始值和精度要求，然后在 main 函数中，我们调用 sqrt 函数来求解平方根，并将结果打印出来。\n执行以上代码输出结果为：\n25.00 的平方根为 5.000000 Go 语言类型转换 类型转换用于将一种数据类型的变量转换为另外一种类型的变量。\nGo 语言类型转换基本格式如下：\ntype_name(expression) type_name 为类型，expression 为表达式。\n数值类型转换 将整型转换为浮点型：\nvar a int = 10 var b float64 = float64(a) 以下实例中将整型转化为浮点型，并计算结果，将结果赋值给浮点型变量：\npackage main import \u0026#34;fmt\u0026#34; func main() { var sum int = 17 var count int = 5 var mean float32 mean = float32(sum)/float32(count) fmt.Printf(\u0026#34;mean 的值为: %f\\n\u0026#34;,mean) } 输出结果为：\nmean 的值为: 3.400000 字符串类型转换 将一个字符串转换成另一个类型，可以使用以下语法：\nvar str string = \u0026#34;10\u0026#34; var num int num, _ = strconv.Atoi(str) 以上代码将字符串变量 str 转换为整型变量 num。\n注意，strconv.Atoi 函数返回两个值，第一个是转换后的整型值，第二个是可能发生的错误，我们可以使用空白标识符 _ 来忽略这个错误。\n以下实例将字符串转换为整数\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { str := \u0026#34;123\u0026#34; num, err := strconv.Atoi(str) if err != nil { fmt.Println(\u0026#34;转换错误:\u0026#34;, err) } else { fmt.Printf(\u0026#34;字符串 \u0026#39;%s\u0026#39; 转换为整数为：%d\\n\u0026#34;, str, num) } } 输出结果为：\n字符串 \u0026#39;123\u0026#39; 转换为整数为：123 将整数转换为字符串：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { num := 123 str := strconv.Itoa(num) fmt.Printf(\u0026#34;整数 %d 转换为字符串为：\u0026#39;%s\u0026#39;\\n\u0026#34;, num, str) } 输出结果为：\n整数 123 转换为字符串为：\u0026#39;123\u0026#39; 将字符串转换为浮点数：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { str := \u0026#34;3.14\u0026#34; num, err := strconv.ParseFloat(str, 64) if err != nil { fmt.Println(\u0026#34;转换错误:\u0026#34;, err) } else { fmt.Printf(\u0026#34;字符串 \u0026#39;%s\u0026#39; 转为浮点型为：%f\\n\u0026#34;, str, num) } } 输出结果为：\n字符串 \u0026#39;3.14\u0026#39; 转为浮点型为：3.140000 将浮点数转换为字符串：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { num := 3.14 str := strconv.FormatFloat(num, \u0026#39;f\u0026#39;, 2, 64) fmt.Printf(\u0026#34;浮点数 %f 转为字符串为：\u0026#39;%s\u0026#39;\\n\u0026#34;, num, str) } 输出结果为：\n浮点数 3.140000 转为字符串为：\u0026#39;3.14\u0026#39; go 不支持隐式转换类型，比如 :\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int64 = 3 var b int32 b = a fmt.Printf(\u0026#34;b 为 : %d\u0026#34;, b) } 此时会报错\ncannot use a (type int64) as type int32 in assignment cannot use b (type int32) as type string in argument to fmt.Printf 但是如果改成 b = int32(a) 就不会报错了:\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int64 = 3 var b int32 b = int32(a) fmt.Printf(\u0026#34;b 为 : %d\u0026#34;, b) } 接口类型转换 接口类型转换有两种情况**：类型断言和类型转换**。\n类型断言 类型断言用于将接口类型转换为指定类型，其语法为：\nvalue.(type) 或者 value.(T) 其中 value 是接口类型的变量，type 或 T 是要转换成的类型。\n如果类型断言成功，它将返回转换后的值和一个布尔值，表示转换是否成功。\npackage main import \u0026#34;fmt\u0026#34; func main() { var i interface{} = \u0026#34;Hello, World\u0026#34; str, ok := i.(string) if ok { fmt.Printf(\u0026#34;\u0026#39;%s\u0026#39; is a string\\n\u0026#34;, str) } else { fmt.Println(\u0026#34;conversion failed\u0026#34;) } } 以上实例中，我们定义了一个接口类型变量 i，并将它赋值为字符串 \u0026ldquo;Hello, World\u0026rdquo;。然后，我们使用类型断言将 i 转换为字符串类型，并将转换后的值赋值给变量 str。最后，我们使用 ok 变量检查类型转换是否成功，如果成功，我们打印转换后的字符串；否则，我们打印转换失败的消息。\n类型转换 类型转换用于将一个接口类型的值转换为另一个接口类型，其语法为：\nT(value) T 是目标接口类型，value 是要转换的值。\n在类型转换中，我们必须保证要转换的值和目标接口类型之间是兼容的，否则编译器会报错。\npackage main import \u0026#34;fmt\u0026#34; // 定义一个接口 Writer type Writer interface { Write([]byte) (int, error) } // 实现 Writer 接口的结构体 StringWriter type StringWriter struct { str string } // 实现 Write 方法 func (sw *StringWriter) Write(data []byte) (int, error) { sw.str += string(data) return len(data), nil } func main() { // 创建一个 StringWriter 实例并赋值给 Writer 接口变量 var w Writer = \u0026amp;StringWriter{} // 将 Writer 接口类型转换为 StringWriter 类型 sw := w.(*StringWriter) // 修改 StringWriter 的字段 sw.str = \u0026#34;Hello, World\u0026#34; // 打印 StringWriter 的字段值 fmt.Println(sw.str) } 解析：\n定义接口和结构体： Writer 接口定义了 Write 方法。 StringWriter 结构体实现了 Write 方法。 类型转换： 将 StringWriter 实例赋值给 Writer 接口变量 w。 使用 w.(*StringWriter) 将 Writer 接口类型转换为 StringWriter 类型。 访问字段： 修改 StringWriter 的字段 str，并打印其值。 空接口类型 空接口 interface{} 可以持有任何类型的值。在实际应用中，空接口经常被用来处理多种类型的值。\npackage main import ( \u0026#34;fmt\u0026#34; ) func printValue(v interface{}) { switch v := v.(type) { case int: fmt.Println(\u0026#34;Integer:\u0026#34;, v) case string: fmt.Println(\u0026#34;String:\u0026#34;, v) default: fmt.Println(\u0026#34;Unknown type\u0026#34;) } } func main() { printValue(42) printValue(\u0026#34;hello\u0026#34;) printValue(3.14) } 在这个例子中，printValue 函数接受一个空接口类型的参数，并使用类型断言和类型选择来处理不同的类型。\nGo 语言接口 interface Go 语言提供了另外一种数据类型即接口，它把所有的具有共性的方法定义在一起，任何其他类型只要实现了这些方法就是实现了这个接口。\n接口可以让我们将不同的类型绑定到一组公共的方法上，从而实现多态和灵活的设计。\nGo 语言中的接口是隐式实现的，也就是说，如果一个类型实现了一个接口定义的所有方法，那么它就自动地实现了该接口。因此，我们可以通过将接口作为参数来实现对不同类型的调用，从而实现多态。\n/* 定义接口 */ type interface_name interface { method_name1 [return_type] method_name2 [return_type] method_name3 [return_type] ... method_namen [return_type] } /* 定义结构体 */ type struct_name struct { /* variables */ } /* 实现接口方法 */ func (struct_name_variable struct_name) method_name1() [return_type] { /* 方法实现 */ } ... func (struct_name_variable struct_name) method_namen() [return_type] { /* 方法实现*/ } 接口的使用：\npackage main import ( \u0026#34;fmt\u0026#34; ) type Phone interface { call() } type NokiaPhone struct { } func (nokiaPhone NokiaPhone) call() { fmt.Println(\u0026#34;I am Nokia, I can call you!\u0026#34;) } type IPhone struct { } func (iPhone IPhone) call() { fmt.Println(\u0026#34;I am iPhone, I can call you!\u0026#34;) } func main() { var phone Phone phone = new(NokiaPhone) phone.call() phone = new(IPhone) phone.call() } 在上面的例子中，我们定义了一个接口 Phone，接口里面有一个方法 call()。然后我们在 main 函数里面定义了一个 Phone 类型变量，并分别为之赋值为 NokiaPhone 和 IPhone。然后调用 call() 方法，输出结果如下：\nI am Nokia, I can call you! I am iPhone, I can call you! 第二个接口实例：\npackage main import \u0026#34;fmt\u0026#34; type Shape interface { area() float64 } type Rectangle struct { width float64 height float64 } func (r Rectangle) area() float64 { return r.width * r.height } type Circle struct { radius float64 } func (c Circle) area() float64 { return 3.14 * c.radius * c.radius } func main() { var s Shape s = Rectangle{width: 10, height: 5} fmt.Printf(\u0026#34;矩形面积: %f\\n\u0026#34;, s.area()) s = Circle{radius: 3} fmt.Printf(\u0026#34;圆形面积: %f\\n\u0026#34;, s.area()) } 以上实例中，我们定义了一个 Shape 接口，它定义了一个方法 area()，该方法返回一个 float64 类型的面积值。然后，我们定义了两个结构体 Rectangle 和 Circle，它们分别实现了 Shape 接口的 area() 方法。在 main() 函数中，我们首先定义了一个 Shape 类型的变量 s，然后分别将 Rectangle 和 Circle 类型的实例赋值给它，并通过 area() 方法计算它们的面积并打印出来，输出结果如下：\n矩形面积: 50.000000 圆形面积: 28.260000 需要注意的是，接口类型变量可以存储任何实现了该接口的类型的值。在示例中，我们将 Rectangle 和 Circle 类型的实例都赋值给了 Shape 类型的变量 s，并通过 area() 方法调用它们的面积计算方法。\nGo 错误处理 Go 语言通过内置的错误接口提供了非常简单的错误处理机制。\nerror 类型是一个接口类型，这是它的定义：\ntype error interface { Error() string } 我们可以在编码中通过实现 error 接口类型来生成错误信息。\n函数通常在最后的返回值中返回错误信息。使用 errors.New 可返回一个错误信息：\nfunc Sqrt(f float64) (float64, error) { if f \u0026lt; 0 { return 0, errors.New(\u0026#34;math: square root of negative number\u0026#34;) } // 实现 } 在下面的例子中，我们在调用 Sqrt 的时候传递的一个负数，然后就得到了 non-nil 的 error 对象，将此对象与 nil 比较，结果为 true，所以 fmt.Println(fmt 包在处理 error 时会调用 Error 方法)被调用，以输出错误，请看下面调用的示例代码：\nresult, err:= Sqrt(-1) if err != nil { fmt.Println(err) } 实例\npackage main import ( \u0026#34;fmt\u0026#34; ) // 定义一个 DivideError 结构 type DivideError struct { dividee int divider int } // 实现 `error` 接口 func (de *DivideError) Error() string { strFormat := ` Cannot proceed, the divider is zero. dividee: %d divider: 0 ` return fmt.Sprintf(strFormat, de.dividee) } // 定义 `int` 类型除法运算的函数 func Divide(varDividee int, varDivider int) (result int, errorMsg string) { if varDivider == 0 { dData := DivideError{ dividee: varDividee, divider: varDivider, } errorMsg = dData.Error() return } else { return varDividee / varDivider, \u0026#34;\u0026#34; } } func main() { // 正常情况 if result, errorMsg := Divide(100, 10); errorMsg == \u0026#34;\u0026#34; { fmt.Println(\u0026#34;100/10 = \u0026#34;, result) } // 当除数为零的时候会返回错误信息 if _, errorMsg := Divide(100, 0); errorMsg != \u0026#34;\u0026#34; { fmt.Println(\u0026#34;errorMsg is: \u0026#34;, errorMsg) } } 输出结果为：\n100/10 = 10 errorMsg is: Cannot proceed, the divider is zero. dividee: 100 divider: 0 Go 并发 并发是指程序同时执行多个任务的能力\nGo 语言支持并发，通过 goroutines 和 channels 提供了一种简洁且高效的方式来实现并发。\ngoroutine goroutine 是轻量级线程，goroutine 的调度是由 Golang 运行时进行管理的。\ngoroutine 语法格式：\ngo 函数名( 参数列表 ) 例如：\ngo f(x, y, z) 开启一个新的 goroutine:\nf(x, y, z) Go 允许使用 go 语句开启一个新的运行期线程， 即 goroutine，以一个不同的、新创建的 goroutine 来执行一个函数。 同一个程序中的所有 goroutine 共享同一个地址空间。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func say(s string) { for i := 0; i \u0026lt; 5; i++ { time.Sleep(100 * time.Millisecond) fmt.Println(s) } } func main() { go say(\u0026#34;world\u0026#34;) say(\u0026#34;hello\u0026#34;) } 执行以上代码，你会看到输出的 hello 和 world 是没有固定先后顺序。因为它们是两个 goroutine 在执行：\nworld hello hello world world hello hello world world hello 通道（channel） 通道（channel）是用来传递数据的一个数据结构。\n通道可用于两个 goroutine 之间通过传递一个指定类型的值来同步运行和通讯。\n使用 make 函数创建一个 channel，使用 \u0026lt;- 操作符发送和接收数据。如果未指定方向，则为双向通道。\nch \u0026lt;- v // 把 v 发送到通道 ch v := \u0026lt;-ch // 从 ch 接收数据 // 并把值赋给 v 声明一个通道很简单，我们使用chan关键字即可，通道在使用前必须先创建：\nch := make(chan int) 注意：默认情况下，通道是不带缓冲区的。发送端发送数据，同时必须有接收端相应的接收数据。\n以下实例通过两个 goroutine 来计算数字之和，在 goroutine 完成计算后，它会计算两个结果的和：\npackage main import \u0026#34;fmt\u0026#34; func sum(s []int, c chan int) { sum := 0 for _, v := range s { sum += v } c \u0026lt;- sum // 把 sum 发送到通道 c } func main() { s := []int{7, 2, 8, -9, 4, 0} c := make(chan int) go sum(s[:len(s)/2], c) go sum(s[len(s)/2:], c) x, y := \u0026lt;-c, \u0026lt;-c // 从通道 c 中接收 fmt.Println(x, y, x+y) } 输出结果为：\n-5 17 12 通道缓冲区 通道可以设置缓冲区，通过 make 的第二个参数指定缓冲区大小：\nch := make(chan int, 100) 带缓冲区的通道允许发送端的数据发送和接收端的数据获取处于异步状态，就是说发送端发送的数据可以放在缓冲区里面，可以等待接收端去获取数据，而不是立刻需要接收端去获取数据。\n不过由于缓冲区的大小是有限的，所以还是必须有接收端来接收数据的，否则缓冲区一满，数据发送端就无法再发送数据了。\n注意：如果通道不带缓冲，发送方会阻塞直到接收方从通道中接收了值。如果通道带缓冲，发送方则会阻塞直到发送的值被拷贝到缓冲区内；如果缓冲区已满，则意味着需要等待直到某个接收方获取到一个值。接收方在有值可以接收之前会一直阻塞。\npackage main import \u0026#34;fmt\u0026#34; func main() { // 这里我们定义了一个可以存储整数类型的带缓冲通道 // 缓冲区大小为2 ch := make(chan int, 2) // 因为 ch 是带缓冲的通道，我们可以同时发送两个数据 // 而不用立刻需要去同步读取数据 ch \u0026lt;- 1 ch \u0026lt;- 2 // 获取这两个数据 fmt.Println(\u0026lt;-ch) fmt.Println(\u0026lt;-ch) } 执行输出结果为：\n1 2 Go 遍历通道与关闭通道 Go 通过 range 关键字来实现遍历读取到的数据，类似于与数组或切片。格式如下：\nv, ok := \u0026lt;-ch 如果通道接收不到数据后 ok 就为 false，这时通道就可以使用 close() 函数来关闭。\npackage main import ( \u0026#34;fmt\u0026#34; ) func fibonacci(n int, c chan int) { x, y := 0, 1 for i := 0; i \u0026lt; n; i++ { c \u0026lt;- x x, y = y, x+y } close(c) } func main() { c := make(chan int, 10) go fibonacci(cap(c), c) // range 函数遍历每个从通道接收到的数据，因为 c 在发送完 10 个 // 数据之后就关闭了通道，所以这里我们 range 函数在接收到 10 个数据 // 之后就结束了。如果上面的 c 通道不关闭，那么 range 函数就不 // 会结束，从而在接收第 11 个数据的时候就阻塞了。 for i := range c { fmt.Println(i) } } 输出结果为：\n0 1 1 2 3 5 8 13 21 34 Select 语句 select 语句使得一个 goroutine 可以等待多个通信操作。select 会阻塞，直到其中的某个 case 可以继续执行：\npackage main import \u0026#34;fmt\u0026#34; func fibonacci(c, quit chan int) { x, y := 0, 1 for { select { case c \u0026lt;- x: x, y = y, x+y case \u0026lt;-quit: fmt.Println(\u0026#34;quit\u0026#34;) return } } } func main() { c := make(chan int) quit := make(chan int) go func() { for i := 0; i \u0026lt; 10; i++ { fmt.Println(\u0026lt;-c) } quit \u0026lt;- 0 }() fibonacci(c, quit) } 以上代码中中，fibonacci goroutine 在 channel c 上发送斐波那契数列，当接收到 quit channel 的信号时退出。\n执行输出结果为：\n0 1 1 2 3 5 8 13 21 34 quit 并发编程小结 Goroutines 是轻量级线程，使用 go 关键字启动。 Channels 用于 goroutines 之间的通信。 Select 语句 用于等待多个 channel 操作。 链接: 菜鸟教程相关笔记补充\n","permalink":"//localhost:1313/posts/go%E8%AF%AD%E8%A8%80/","summary":"\u003ch1 id=\"go的变量声明\"\u003ego的变量声明\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e第一种，指定变量类型，如果没有初始化，则变量默认为零值\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e例如：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 声明一个整型变量 a，默认为 0\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"kt\"\u003efloat64\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 声明一个浮点型变量 b，默认为 0.0\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e第二种，根据值自行判定变量类型。\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e例如：\u003c/p\u003e","title":"Go语言"},{"content":"日常技巧 CTRL + r 等于 window 下的默认 CTRL + y CTRL + f 查找 1. 关于Vim 1.1 Vim的几种模式 正常模式：可以使用快捷键命令，或按:输入命令行。 插入模式：可以输入文本，在正常模式下，按i、a、o等都可以进入插入模式。 可视模式：正常模式下按v可以进入可视模式， 在可视模式下，移动光标可以选择文本。按V进入可视行模式， 总是整行整行的选中。ctrl+v进入可视块模式。 替换模式：正常模式下，按R进入。 2. 启动Vim vim -c cmd file: 在打开文件前，先执行指定的命令； vim -r file: 恢复上次异常退出的文件； vim -R file: 以只读的方式打开文件，但可以强制保存； vim -M file: 以只读的方式打开文件，不可以强制保存； vim -y num file: 将编辑窗口的大小设为num行； vim + file: 从文件的末尾开始； vim +num file: 从第num行开始； vim +/string file: 打开file，并将光标停留在第一个找到的string上。 vim \u0026ndash;remote file: 用已有的vim进程打开指定的文件。 如果你不想启用多个vim会话，这个很有用。但要注意， 如果你用vim，会寻找名叫VIM的服务器；如果你已经有一个gvim在运行了， 你可以用gvim \u0026ndash;remote file在已有的gvim中打开文件。 3. 文档操作 :e file \u0026ndash;关闭当前编辑的文件，并开启新的文件。 如果对当前文件的修改未保存，vi会警告。 :e! file \u0026ndash;放弃对当前文件的修改，编辑新的文件。 :e+file \u0026ndash; 开始新的文件，并从文件尾开始编辑。 :e+n file \u0026ndash; 开始新的文件，并从第n行开始编辑。 :enew \u0026ndash;编译一个未命名的新文档。(CTRL-W n) :e \u0026ndash; 重新加载当前文档。 :e! \u0026ndash; 重新加载当前文档，并丢弃已做的改动。 :e#或ctrl+^ \u0026ndash; 回到刚才编辑的文件，很实用。 :f或ctrl+g \u0026ndash; 显示文档名，是否修改，和光标位置。 :f filename \u0026ndash; 改变编辑的文件名，这时再保存相当于另存为。 gf \u0026ndash; 打开以光标所在字符串为文件名的文件。 :w \u0026ndash; 保存修改。 :n1,n2w filename \u0026ndash; 选择性保存从某n1行到另n2行的内容。 :wq \u0026ndash; 保存并退出。 ZZ \u0026ndash; 保存并退出。 :x \u0026ndash; 保存并退出。 :q[uit] ——退出当前窗口。(CTRL-W q或CTRL-W CTRL-Q) :saveas newfilename \u0026ndash; 另存为 :browse e \u0026ndash; 会打开一个文件浏览器让你选择要编辑的文件。 如果是终端中，则会打开netrw的文件浏览窗口； 如果是gvim，则会打开一个图形界面的浏览窗口。 实际上:browse后可以跟任何编辑文档的命令，如sp等。 用browse打开的起始目录可以由browsedir来设置： :set browsedir=last \u0026ndash; 用上次访问过的目录（默认）； :set browsedir=buffer \u0026ndash; 用当前文件所在目录； :set browsedir=current \u0026ndash; 用当前工作目录； :Sex \u0026ndash; 水平分割一个窗口，浏览文件系统； :Vex \u0026ndash; 垂直分割一个窗口，浏览文件系统； 4. 光标的移动 4.1 基本移动 以下移动都是在normal模式下。\nh或退格: 左移一个字符； l或空格: 右移一个字符； j: 下移一行； k: 上移一行； gj: 移动到一段内的下一行； gk: 移动到一段内的上一行； +或Enter: 把光标移至下一行第一个非空白字符。 -: 把光标移至上一行第一个非空白字符。 w: 前移一个单词，光标停在下一个单词开头； W: 移动下一个单词开头，但忽略一些标点； e: 前移一个单词，光标停在下一个单词末尾； E: 移动到下一个单词末尾，如果词尾有标点，则移动到标点； b: 后移一个单词，光标停在上一个单词开头； B: 移动到上一个单词开头，忽略一些标点； ge: 后移一个单词，光标停在上一个单词末尾； gE: 同 ge ，不过‘单词’包含单词相邻的标点。 (: 前移1句。 ): 后移1句。 {: 前移1段。 }: 后移1段。 fc: 把光标移到同一行的下一个c字符处 Fc: 把光标移到同一行的上一个c字符处 tc: 把光标移到同一行的下一个c字符前 Tc: 把光标移到同一行的上一个c字符后 ;: 配合f \u0026amp; t使用，重复一次 ,: 配合f \u0026amp; t使用，反向重复一次 viw : 选中一个单词 上面的操作都可以配合n使用，比如在正常模式(下面会讲到)下输入3h， 则光标向左移动3个字符。\n0: 移动到行首。 g0: 移到光标所在屏幕行行首。 ^: 移动到本行第一个非空白字符。 g^: 同 ^ ，但是移动到当前屏幕行第一个非空字符处。 $: 移动到行尾。 g$: 移动光标所在屏幕行行尾。 n|: 把光标移到递n列上。 nG: 到文件第n行。 :n 移动到第n行。 :$ 移动到最后一行。 H: 把光标移到屏幕最顶端一行。 M: 把光标移到屏幕中间一行。 L: 把光标移到屏幕最底端一行。 gg: 到文件头部。 G: 到文件尾部。 4.2 翻屏 ctrl+f: 下翻一屏。 ctrl+b: 上翻一屏。 ctrl+d: 下翻半屏。 ctrl+u: 上翻半屏。 ctrl+e: 向下滚动一行。 ctrl+y: 向上滚动一行。 n%: 到文件n%的位置。 zz: 将当前行移动到屏幕中央。 zt: 将当前行移动到屏幕顶端。 zb: 将当前行移动到屏幕底端。 4.3 标记 使用标记可以快速移动。到达标记后，可以用Ctrl+o返回原来的位置。 Ctrl+o和Ctrl+i 很像浏览器上的 后退 和 前进 。\nm{a-z}: 标记光标所在位置，局部标记，只用于当前文件。 m{A-Z}: 标记光标所在位置，全局标记。标记之后，退出Vim， 重新启动，标记仍然有效。 `{a-z}: 移动到标记位置。 \u0026lsquo;{a-z}: 移动到标记行的行首。 `{0-9}：回到上[2-10]次关闭vim时最后离开的位置。 : 移动到上次编辑的位置。''也可以，不过精确到列，而\u0026rsquo;\u0026lsquo;精确到行 。如果想跳转到更老的位置，可以按C-o，跳转到更新的位置用C-i。 `\u0026quot;: 移动到上次离开的地方。 `.: 移动到最后改动的地方。 :marks 显示所有标记。 :delmarks a b \u0026ndash; 删除标记a和b。 :delmarks a-c \u0026ndash; 删除标记a、b和c。 :delmarks a c-f \u0026ndash; 删除标记a、c、d、e、f。 :delmarks! \u0026ndash; 删除当前缓冲区的所有标记。 :help mark-motions 查看更多关于mark的知识。 5. 插入文本 5.1 基本插入 i: 在光标前插入；一个小技巧：按8，再按i，进入插入模式，输入=， 按esc进入命令模式，就会出现8个=。 这在插入分割线时非常有用，如30i+就插入了36个+组成的分割线。 I: 在当前行第一个非空字符前插入； gI: 在当前行第一列插入； a: 在光标后插入； A: 在当前行最后插入； o: 在下面新建一行插入； O: 在上面新建一行插入； :r filename在当前位置插入另一个文件的内容。 :[n]r filename在第n行插入另一个文件的内容。 :r !date 在光标处插入当前日期与时间。同理，:r !command可以将其它shell命令的输出插入当前文档。 5.2 改写插入 c[n]w: 改写光标后1(n)个词。 c[n]l: 改写光标后n个字母。 c[n]h: 改写光标前n个字母。 [n]cc: 修改当前[n]行。 [n]s: 以输入的文本替代光标之后1(n)个字符，相当于c[n]l。 [n]S: 删除指定数目的行，并以所输入文本代替之。 注意，类似cnw,dnw,ynw的形式同样可以写为ncw,ndw,nyw。\n6. 剪切复制和寄存器 6.1 剪切和复制、粘贴 [n]x: 剪切光标右边n个字符，相当于d[n]l。 [n]X: 剪切光标左边n个字符，相当于d[n]h。 y: 复制在可视模式下选中的文本。 yy or Y: 复制整行文本。 y[n]w: 复制一(n)个词。 y[n]l: 复制光标右边1(n)个字符。 y[n]h: 复制光标左边1(n)个字符。 y$: 从光标当前位置复制到行尾。 y0: 从光标当前位置复制到行首。 :m,ny 复制m行到n行的内容。 y1G或ygg: 复制光标以上的所有行。 yG: 复制光标以下的所有行。 yaw和yas：复制一个词和复制一个句子，即使光标不在词首和句首也没关系。 d: 删除（剪切）在可视模式下选中的文本。 d$ or D: 删除（剪切）当前位置到行尾的内容。 d[n]w: 删除（剪切）1(n)个单词 d[n]l: 删除（剪切）光标右边1(n)个字符。 d[n]h: 删除（剪切）光标左边1(n)个字符。 d0: 删除（剪切）当前位置到行首的内容 [n] dd: 删除（剪切）1(n)行。 :m,nd 剪切m行到n行的内容。 d1G或dgg: 剪切光标以上的所有行。 dG: 剪切光标以下的所有行。 daw和das：剪切一个词和剪切一个句子，即使光标不在词首和句首也没关系。 d/f：这是一个比较高级的组合命令，它将删除当前位置 到下一个f之间的内容。 p: 在光标之后粘贴。 P: 在光标之前粘贴。 6.2 文本对象 aw：一个词 as：一句。 ap：一段。 ab：一块（包含在圆括号中的）。 y, d, c, v都可以跟文本对象。\n6.3 寄存器 a-z：都可以用作寄存器名。\u0026ldquo;ayy把当前行的内容放入a寄存器。 A-Z：用大写字母索引寄存器，可以在寄存器中追加内容。 如\u0026quot;Ayy把当前行的内容追加到a寄存器中。 :reg 显示所有寄存器的内容。 \u0026ldquo;\u0026quot;：不加寄存器索引时，默认使用的寄存器。 \u0026ldquo;*：当前选择缓冲区，\u0026quot;*yy把当前行的内容放入当前选择缓冲区。 \u0026ldquo;+：系统剪贴板。\u0026quot;+yy把当前行的内容放入系统剪贴板。 7. 查找与替换 7.1 查找 /something: 在后面的文本中查找something。 ?something: 在前面的文本中查找something。 /pattern/+number: 将光标停在包含pattern的行后面第number行上。 /pattern/-number: 将光标停在包含pattern的行前面第number行上。 n: 向后查找下一个。 N: 向前查找下一个。 可以用grep或vimgrep查找一个模式都在哪些地方出现过，\n其中:grep是调用外部的grep程序，而:vimgrep是vim自己的查找算法。\n用法为： :vim[grep]/pattern/[g] [j] files\ng的含义是如果一个模式在一行中多次出现，则这一行也在结果中多次出现。\nj的含义是grep结束后，结果停在第j项，默认是停在第一项。\nvimgrep前面可以加数字限定搜索结果的上限，如\n:1vim/pattern/ % 只查找那个模式在本文件中的第一个出现。\n其实vimgrep在读纯文本电子书时特别有用，可以生成导航的目录。\n比如电子书中每一节的标题形式为：n. xxxx。你就可以这样：\n:vim/^d{1,}./ %\n然后用:cw或:copen查看结果，可以用C-w H把quickfix窗口移到左侧，\n就更像个目录了。\n7.2 替换 :s/old/new - 用new替换当前行第一个old。 :s/old/new/g - 用new替换当前行所有的old。 :n1,n2s/old/new/g - 用new替换文件n1行到n2行所有的old。 :%s/old/new/g - 用new替换文件中所有的old。 :%s/^/xxx/g - 在每一行的行首插入xxx，^表示行首。 :%s/$/xxx/g - 在每一行的行尾插入xxx，$表示行尾。 所有替换命令末尾加上c，每个替换都将需要用户确认。 如：%s/old/new/gc，加上i则忽略大小写(ignore)。 还有一种比替换更灵活的方式，它是匹配到某个模式后执行某种命令，\n语法为 :[range]g/pattern/command\n例如 :%g/^ xyz/normal dd。\n表示对于以一个空格和xyz开头的行执行normal模式下的dd命令。\n关于range的规定为：\n如果不指定range，则表示当前行。 m,n: 从m行到n行。 0: 最开始一行（可能是这样）。 $: 最后一行 .: 当前行 %: 所有行 7.3 正则表达式 高级的查找替换就要用到正则表达式。\n\\d: 表示十进制数（我猜的） \\s: 表示空格 \\S: 非空字符 \\a: 英文字母 |: 表示 或 .: 表示. {m,n}: 表示m到n个字符。这要和 \\s与\\a等连用，如 \\a{m,n} 表示m 到n个英文字母。 {m,}: 表示m到无限多个字符。 **: 当前目录下的所有子目录。 :help pattern得到更多帮助。\n8. 排版 8.1 基本排版 \u0026laquo; 向左缩进一个shiftwidth \u0026gt;\u0026gt; 向右缩进一个shiftwidth :ce(nter) 本行文字居中 :le(ft) 本行文字靠左 :ri(ght) 本行文字靠右 gq 对选中的文字重排，即对过长的文字进行断行 gqq 重排当前行 gqnq 重排n行 gqap 重排当前段 gqnap 重排n段 gqnj 重排当前行和下面n行 gqQ 重排当前段对文章末尾 J 拼接当前行和下一行 gJ 同 J ，不过合并后不留空格。 8.2 拼写检查 :set spell－开启拼写检查功能 :set nospell－关闭拼写检查功能 ]s－移到下一个拼写错误的单词 [s－作用与上一命令类似，但它是从相反方向进行搜索 z=－显示一个有关拼写错误单词的列表，可从中选择 zg－告诉拼写检查器该单词是拼写正确的 zw－与上一命令相反，告诉拼写检查器该单词是拼写错误的 8.3 统计字数 g ^g可以统计文档字符数，行数。 将光标放在最后一个字符上，用字符数减去行数可以粗略统计中文文档的字数。 以上对 Mac 或 Unix 的文件格式适用。 如果是 Windows 文件格式（即换行符有两个字节），字数的统计方法为： 字符数 - 行数 * 2。\n9. 编辑多个文件 9.1 一次编辑多个文件 我们可以一次打开多个文件，如\nvi a.txt b.txt c.txt 使用:next(:n)编辑下一个文件。 :2n 编辑下2个文件。 使用:previous或:N编辑上一个文件。 使用:wnext，保存当前文件，并编辑下一个文件。 使用:wprevious，保存当前文件，并编辑上一个文件。 使用:args 显示文件列表。 :n filenames或:args filenames 指定新的文件列表。 vi -o filenames 在水平分割的多个窗口中编辑多个文件。 vi -O filenames 在垂直分割的多个窗口中编辑多个文件。 9.2 多标签编辑 vim -p files: 打开多个文件，每个文件占用一个标签页。 :tabe, tabnew \u0026ndash; 如果加文件名，就在新的标签中打开这个文件， 否则打开一个空缓冲区。 ^w gf \u0026ndash; 在新的标签页里打开光标下路径指定的文件。 :tabn \u0026ndash; 切换到下一个标签。Control + PageDown，也可以。 :tabp \u0026ndash; 切换到上一个标签。Control + PageUp，也可以。 [n] gt \u0026ndash; 切换到下一个标签。如果前面加了 n ， 就切换到第n个标签。第一个标签的序号就是1。 :tab split \u0026ndash; 将当前缓冲区的内容在新页签中打开。 :tabc[lose] \u0026ndash; 关闭当前的标签页。 :tabo[nly] \u0026ndash; 关闭其它的标签页。 :tabs \u0026ndash; 列出所有的标签页和它们包含的窗口。 :tabm[ove] [N] \u0026ndash; 移动标签页，移动到第N个标签页之后。 如 tabm 0 当前标签页，就会变成第一个标签页。 9.3 缓冲区 :buffers或:ls或:files 显示缓冲区列表。 ctrl+^：在最近两个缓冲区间切换。 :bn \u0026ndash; 下一个缓冲区。 :bp \u0026ndash; 上一个缓冲区。 :bl \u0026ndash; 最后一个缓冲区。 :b[n]或:[n]b \u0026ndash; 切换到第n个缓冲区。 :nbw(ipeout) \u0026ndash; 彻底删除第n个缓冲区。 :nbd(elete) \u0026ndash; 删除第n个缓冲区，并未真正删除，还在unlisted列表中。 :ba[ll] \u0026ndash; 把所有的缓冲区在当前页中打开，每个缓冲区占一个窗口。 10. 分屏编辑 vim -o file1 file2:水平分割窗口，同时打开file1和file2 vim -O file1 file2:垂直分割窗口，同时打开file1和file2 10.1 水平分割 :split(:sp) \u0026ndash; 把当前窗水平分割成两个窗口。(CTRL-W s 或 CTRL-W CTRL-S) 注意如果在终端下，CTRL-S可能会冻结终端，请按CTRL-Q继续。 :split filename \u0026ndash; 水平分割窗口，并在新窗口中显示另一个文件。 :nsplit(:nsp) \u0026ndash; 水平分割出一个n行高的窗口。 :[N]new \u0026ndash; 水平分割出一个N行高的窗口，并编辑一个新文件。 (CTRL-W n或 CTRL-W CTRL-N) ctrl+w f \u0026ndash;水平分割出一个窗口，并在新窗口打开名称为光标所在词的文件 。 C-w C-^ \u0026ndash; 水平分割一个窗口，打开刚才编辑的文件。 10.2 垂直分割 :vsplit(:vsp) \u0026ndash; 把当前窗口分割成水平分布的两个窗口。 (CTRL-W v或CTRL CTRL-V) :[N]vne[w] \u0026ndash; 垂直分割出一个新窗口。 :vertical 水平分割的命令： 相应的垂直分割。 10.3 关闭子窗口 :qall \u0026ndash; 关闭所有窗口，退出vim。 :wall \u0026ndash; 保存所有修改过的窗口。 :only \u0026ndash; 只保留当前窗口，关闭其它窗口。(CTRL-W o) :close \u0026ndash; 关闭当前窗口，CTRL-W c能实现同样的功能。 (象 :q :x同样工作 ) 10.4 调整窗口大小 ctrl+w + \u0026ndash;当前窗口增高一行。也可以用n增高n行。 ctrl+w - \u0026ndash;当前窗口减小一行。也可以用n减小n行。 ctrl+w _ \u0026ndash;当前窗口扩展到尽可能的大。也可以用n设定行数。 :resize n \u0026ndash; 当前窗口n行高。 ctrl+w = \u0026ndash; 所有窗口同样高度。 n ctrl+w _ \u0026ndash; 当前窗口的高度设定为n行。 ctrl+w \u0026lt; \u0026ndash;当前窗口减少一列。也可以用n减少n列。 ctrl+w \u0026gt; \u0026ndash;当前窗口增宽一列。也可以用n增宽n列。 ctrl+w | \u0026ndash;当前窗口尽可能的宽。也可以用n设定列数。 10.5 切换和移动窗口 如果支持鼠标，切换和调整子窗口的大小就简单了。\nctrl+w ctrl+w: 切换到下一个窗口。或者是ctrl+w w。 ctrl+w p: 切换到前一个窗口。 ctrl+w h(l,j,k):切换到左（右，下，上）的窗口。 ctrl+w t(b):切换到最上（下）面的窗口。 ctrl+w H(L,K,J): 将当前窗口移动到最左（右、上、下）面。 ctrl+w r：旋转窗口的位置。 ctrl+w T: 将当前的窗口移动到新的标签页上。 11. 快速编辑 11.1 改变大小写 ~: 反转光标所在字符的大小写。 可视模式下的U或u：把选中的文本变为大写或小写。 gu(U)接范围（如$，或G），可以把从光标当前位置到指定位置之间字母全部 转换成小写或大写。如ggguG，就是把开头到最后一行之间的字母全部变为小 写。再如gu5j，把当前行和下面四行全部变成小写。 11.2 替换（normal模式） r: 替换光标处的字符，同样支持汉字。 R: 进入替换模式，按esc回到正常模式。 11.3 撤消与重做（normal模式） [n] u: 取消一(n)个改动。 :undo 5 \u0026ndash; 撤销5个改变。 :undolist \u0026ndash; 你的撤销历史。 ctrl + r: 重做最后的改动。 U: 取消当前行中所有的改动。 :earlier 4m \u0026ndash; 回到4分钟前 :later 55s \u0026ndash; 前进55秒 \u0026gt; 在这篇博客中，我引用了作者详细介绍的 Vim 的使用技巧。更多内容请查看原文：Vim 笔记。\n","permalink":"//localhost:1313/posts/vim%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/","summary":"\u003ch1 id=\"日常技巧\"\u003e日常技巧\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eCTRL + r\u003c/code\u003e 等于 window 下的默认 \u003ccode\u003eCTRL + y\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eCTRL + f   查找\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"1-关于vim\"\u003e1. 关于Vim\u003c/h1\u003e\n\u003ch2 id=\"11-vim的几种模式\"\u003e1.1 Vim的几种模式\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e正常模式：可以使用快捷键命令，或按:输入命令行。\u003c/li\u003e\n\u003cli\u003e插入模式：可以输入文本，在正常模式下，按i、a、o等都可以进入插入模式。\u003c/li\u003e\n\u003cli\u003e可视模式：正常模式下按v可以进入可视模式， 在可视模式下，移动光标可以选择文本。按V进入可视行模式， 总是整行整行的选中。ctrl+v进入可视块模式。\u003c/li\u003e\n\u003cli\u003e替换模式：正常模式下，按R进入。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"2-启动vim\"\u003e2. 启动Vim\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003evim -c cmd file: 在打开文件前，先执行指定的命令；\u003c/li\u003e\n\u003cli\u003evim -r file: 恢复上次异常退出的文件；\u003c/li\u003e\n\u003cli\u003evim -R file: 以只读的方式打开文件，但可以强制保存；\u003c/li\u003e\n\u003cli\u003evim -M file: 以只读的方式打开文件，不可以强制保存；\u003c/li\u003e\n\u003cli\u003evim -y num file: 将编辑窗口的大小设为num行；\u003c/li\u003e\n\u003cli\u003evim + file: 从文件的末尾开始；\u003c/li\u003e\n\u003cli\u003evim +num file: 从第num行开始；\u003c/li\u003e\n\u003cli\u003evim +/string file: 打开file，并将光标停留在第一个找到的string上。\u003c/li\u003e\n\u003cli\u003evim \u0026ndash;remote file: 用已有的vim进程打开指定的文件。 如果你不想启用多个vim会话，这个很有用。但要注意， 如果你用vim，会寻找名叫VIM的服务器；如果你已经有一个gvim在运行了， 你可以用gvim \u0026ndash;remote file在已有的gvim中打开文件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"3-文档操作\"\u003e3. 文档操作\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e:e file \u0026ndash;关闭当前编辑的文件，并开启新的文件。 如果对当前文件的修改未保存，vi会警告。\u003c/li\u003e\n\u003cli\u003e:e! file \u0026ndash;放弃对当前文件的修改，编辑新的文件。\u003c/li\u003e\n\u003cli\u003e:e+file \u0026ndash; 开始新的文件，并从文件尾开始编辑。\u003c/li\u003e\n\u003cli\u003e:e+n file \u0026ndash; 开始新的文件，并从第n行开始编辑。\u003c/li\u003e\n\u003cli\u003e:enew \u0026ndash;编译一个未命名的新文档。(CTRL-W n)\u003c/li\u003e\n\u003cli\u003e:e \u0026ndash; 重新加载当前文档。\u003c/li\u003e\n\u003cli\u003e:e! \u0026ndash; 重新加载当前文档，并丢弃已做的改动。\u003c/li\u003e\n\u003cli\u003e:e#或ctrl+^ \u0026ndash; 回到刚才编辑的文件，很实用。\u003c/li\u003e\n\u003cli\u003e:f或ctrl+g \u0026ndash; 显示文档名，是否修改，和光标位置。\u003c/li\u003e\n\u003cli\u003e:f filename \u0026ndash; 改变编辑的文件名，这时再保存相当于另存为。\u003c/li\u003e\n\u003cli\u003egf \u0026ndash; 打开以光标所在字符串为文件名的文件。\u003c/li\u003e\n\u003cli\u003e:w \u0026ndash; 保存修改。\u003c/li\u003e\n\u003cli\u003e:n1,n2w filename \u0026ndash; 选择性保存从某n1行到另n2行的内容。\u003c/li\u003e\n\u003cli\u003e:wq \u0026ndash; 保存并退出。\u003c/li\u003e\n\u003cli\u003eZZ \u0026ndash; 保存并退出。\u003c/li\u003e\n\u003cli\u003e:x \u0026ndash; 保存并退出。\u003c/li\u003e\n\u003cli\u003e:q[uit] ——退出当前窗口。(CTRL-W q或CTRL-W CTRL-Q)\u003c/li\u003e\n\u003cli\u003e:saveas newfilename \u0026ndash; 另存为\u003c/li\u003e\n\u003cli\u003e:browse e \u0026ndash; 会打开一个文件浏览器让你选择要编辑的文件。 如果是终端中，则会打开netrw的文件浏览窗口； 如果是gvim，则会打开一个图形界面的浏览窗口。 实际上:browse后可以跟任何编辑文档的命令，如sp等。 用browse打开的起始目录可以由browsedir来设置：\n\u003cul\u003e\n\u003cli\u003e:set browsedir=last \u0026ndash; 用上次访问过的目录（默认）；\u003c/li\u003e\n\u003cli\u003e:set browsedir=buffer \u0026ndash; 用当前文件所在目录；\u003c/li\u003e\n\u003cli\u003e:set browsedir=current \u0026ndash; 用当前工作目录；\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e:Sex \u0026ndash; 水平分割一个窗口，浏览文件系统；\u003c/li\u003e\n\u003cli\u003e:Vex \u0026ndash; 垂直分割一个窗口，浏览文件系统；\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"4-光标的移动\"\u003e4. 光标的移动\u003c/h1\u003e\n\u003ch2 id=\"41-基本移动\"\u003e4.1 基本移动\u003c/h2\u003e\n\u003cp\u003e以下移动都是在normal模式下。\u003c/p\u003e","title":"Vim操作手册"},{"content":"目前我的解决办法 在 posts 目录下创建一个名为 img 的文件夹，用于存储照片。该文件夹的路径为 ..\\content\\posts\\img。 将需要使用的照片复制并放入 img 文件夹中。在 Markdown 文档中使用照片时，可以通过相对位置进行引用。例如，引用的路径为 \u0026quot;../img/photo1.jpg\u0026quot;。请注意，使用 \u0026quot;../\u0026quot; 可确保照片在博客页面上正确显示。 若想在本地上查看 Markdown 文档中展示的照片，可以使用 \u0026quot;./\u0026quot; 作为引用路径。例如，引用的路径为 \u0026quot;./img/photo1.jpg\u0026quot;。 注意图片命名，确保照片文件名中不包含空格。 有问题的话, 欢迎在评论区留言, 我会尽快回复！\n","permalink":"//localhost:1313/posts/hugo%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/","summary":"\u003ch1 id=\"目前我的解决办法\"\u003e目前我的解决办法\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e在 \u003ccode\u003eposts\u003c/code\u003e 目录下创建一个名为 \u003ccode\u003eimg\u003c/code\u003e 的文件夹，用于存储照片。该文件夹的路径为 \u003ccode\u003e..\\content\\posts\\img\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e将需要使用的照片复制并放入 \u003ccode\u003eimg\u003c/code\u003e 文件夹中。在 Markdown 文档中使用照片时，可以通过相对位置进行引用。例如，引用的路径为 \u003ccode\u003e\u0026quot;../img/photo1.jpg\u0026quot;\u003c/code\u003e。请注意，使用 \u003ccode\u003e\u0026quot;../\u0026quot;\u003c/code\u003e 可确保照片在博客页面上正确显示。\u003c/li\u003e\n\u003cli\u003e若想在\u003cstrong\u003e本地\u003c/strong\u003e上查看 Markdown 文档中展示的照片，可以使用 \u003ccode\u003e\u0026quot;./\u0026quot;\u003c/code\u003e 作为引用路径。例如，引用的路径为 \u003ccode\u003e\u0026quot;./img/photo1.jpg\u0026quot;\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e注意图片命名，确保照片文件名中\u003cstrong\u003e不包含空格\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e有问题的话, 欢迎在评论区留言, 我会尽快回复！\u003c/p\u003e","title":"Hugo博客的图片上传"},{"content":"常用指令 vim 访问文本 退出文本并保存 :wq 返回到上一个文件夹 cd . . 解压指令 tar -zxvf xxxx.tar.gz vi vim 操作 i o a r 进入vim 按下esc , 输入**:** 然后输入wq 保存并退出 :q退出 :q! 不保存退出 yy 拷贝 5yy dd 删除 5dd 撤销 u 行号打开 :set nu 关机 shutdown -h 关机 shutdown -r 重启 reboot 重启 sync 把内存数据存入磁盘 注销用户和登录 logout\n退出root logout\n压缩/解压指令 tar -zxvf xxxx.tar.gz gzip 文件 压缩 gunzip 解压文件 zip 压缩文件夹 unzip 解压文件夹 -r 递归压缩 zip -r xxxxx.zip /home/ [将home目录及其包含的的文件和子文件夹都压缩] -d \u0026lt;可指定目录\u0026gt; unzip -d /opt/tmp /home/xxxxx.zip tar 万能 tar -c 产生打包文件 -v 显示详细信息 -f 指定压缩后的文件名 -z 打包并同时压缩 -x 解压.tar文件 帮助指令 man ls 列出所有指令\nhelp + 指令\nls -la\nls -la /root\n文件目录指令 pwd 显示出地址 cd ~ 回到家目录 cd .. 上一目录 mkdir 创建目录 mkdir -p /home/\u0026hellip;/\u0026hellip;. 创建指定目录 rmdir 删除空目录 强制删除空目录 rm -rf touch 创建空文件 cp 拷贝 cp hello.txt /bbb cp -r /home/bbb /opt 把目录复制到指定目录下 \\cp -r /home/bbb /opt 强制 rm 删除文件或目录 rm -rf /home/bbb 强制删除 -f 就是强制删除不提醒 mv 移动指令 cat 查看文件 -n 行号 less 分屏查看 echo $HOSTNAME 输出环境变量 head 查看文件的前几行 -\u0026gt; 10 行 head xxxx.c tail 查看末尾文件 tail xxxx.c ln -s /root /home/myroot 快捷指令指向 在myroot创建指向/root的快捷方式, cd myroot 就会直接进入/root 文件管理 使用 mkdir 创建目录。例如，mkdir xxxx 将在当前位置创建一个名为 \u0026ldquo;xxxx\u0026rdquo; 的目录。 要创建多级目录，可以使用 mkdir -p 命令。例如，mkdir -p xxx/yyy 将在 \u0026ldquo;xxx\u0026rdquo; 目录下创建一个名为 \u0026ldquo;yyy\u0026rdquo; 的子目录。 使用 mkdir -m 777 命令创建目录时，可以直接设置权限。数字 \u0026ldquo;777\u0026rdquo; 表示所有权限（读、写和执行）。另外，\u0026ldquo;4\u0026rdquo; 代表读权限，\u0026ldquo;2\u0026rdquo; 代表写权限，\u0026ldquo;1\u0026rdquo; 代表执行权限。 mv 命令用于移动文件或重命名文件。例如，mv xxx.c /home/zzz/targetPlace 将把 \u0026ldquo;xxx.c\u0026rdquo; 文件移动到 \u0026ldquo;/home/zzz/targetPlace\u0026rdquo; 目录。 使用 cp 命令复制文件。例如，cp xxx.c /home/zzz/targetPlace 将把 \u0026ldquo;xxx.c\u0026rdquo; 文件复制到 \u0026ldquo;/home/zzz/targetPlace\u0026rdquo; 目录。 若要复制目录，应使用 cp -r 命令。例如，cp -r /home/bbb /opt 将把 \u0026ldquo;/home/bbb\u0026rdquo; 目录复制到 \u0026ldquo;/opt\u0026rdquo; 目录。 rm 用于删除文件或目录，而 rmdir 仅用于删除空目录。删除文件时，使用 rm 文件名；删除目录（及其内容）时，使用 rm -r 目录名；删除空目录时，使用 rmdir 目录名。 使用 chown 和 chgrp 命令更改文件的所有权。例如，chown -R root /home/zzz/targetPlace/xxx.c 将把 \u0026ldquo;xxx.c\u0026rdquo; 文件的所有权更改为 root 用户。同理，使用 chgrp 命令更改文件的群组所有权。 使用 chmod 命令更改文件或目录的权限。例如，chmod 777 xxxx（目录） 将为名为 \u0026ldquo;xxxx\u0026rdquo; 的目录设置所有权限（读、写和执行）。 ln 命令用于创建链接，类似于快捷方式。例如，ln 路径/xxx.c newxxx.c 将在当前位置创建一个指向 \u0026ldquo;xxx.c\u0026rdquo; 的新链接 \u0026ldquo;newxxx.c\u0026rdquo;。若要删除快捷方式，可以使用 rm -rf 命令。 输入/输出重定向是一种将命令的输出发送到文件而不是屏幕的技术。例如，date \u0026gt; xx.txt 将当前日期和时间写入 \u0026ldquo;xx.txt\u0026rdquo; 文件。而 date \u0026gt;\u0026gt; xx.txt 会将日期和时间追加到文件的末尾，常用于日志、脚本和文件中。 cat命令 使用 cat \u0026gt; xxxx.c 创建一个新文件 \u0026ldquo;xxxx.c\u0026rdquo;。此命令进入文本输入模式，可以直接输入内容，输入完成后按 Ctrl+D 保存并退出。\n合并文件可以使用 cat 命令。例如，cat tx1.c tx2.c \u0026gt; tx3.c 将分别将 \u0026ldquo;tx1.c\u0026rdquo; 和 \u0026ldquo;tx2.c\u0026rdquo; 的内容合并并输出到 \u0026ldquo;tx3.c\u0026rdquo; 文件中。\n要向文件末尾添加内容，使用 cat \u0026gt;\u0026gt; tx.c。此命令进入文本输入模式，输入完内容后，同样按 Ctrl+D 保存并退出。\nmore命令 使用 more 命令可以逐屏查看大型文件。例如，more -3 tx 将从文件 \u0026ldquo;tx\u0026rdquo; 的第三行开始显示内容。使用方向键或空格键可以向下滚动，按 q 退出查看。 grep命令 使用 grep -i \u0026quot;abc.....\u0026quot; xxxx.c 查找文件 \u0026ldquo;xxxx.c\u0026rdquo; 中的内容，-i 选项使搜索不区分大小写。 使用 grep -n -i \u0026quot;abc.....\u0026quot; xxxx.c 查找文件 \u0026ldquo;xxxx.c\u0026rdquo; 中的内容，-n 选项会显示匹配行的行号，且同样不区分大小写。 find命令 使用 find -name 'tex*' 查找当前目录及子目录中以 \u0026ldquo;tex\u0026rdquo; 开头的文件，支持模糊查找。 使用 find -name 'te??.c' 查找当前目录及子目录中以 \u0026ldquo;te\u0026rdquo; 开头，后跟任意两个字符且以 \u0026ldquo;.c\u0026rdquo; 结尾的文件。 使用 find -name '[a-z]*.c' 查找当前目录及子目录中以小写字母开头且以 \u0026ldquo;.c\u0026rdquo; 结尾的文件。 locate 命令 要快速定位文件，可以使用 locate xxxx 命令。此命令通过查询系统中的文件数据库，迅速找出包含 \u0026ldquo;xxxx\u0026rdquo; 的文件路径。请确保在使用前更新数据库，通常可以通过 updatedb 命令实现。 who 命令 使用 who 查看当前登录的用户。 使用 who -a 查看详细的用户信息，包括登录时间和终端等。 使用 whoami 查看当前用户的用户名。 使用 uname 命令查看主机信息，uname -a 则显示所有相关信息，包括主机名、内核版本、硬件架构等。常用选项包括： -n: 显示主机名 -r: 显示内核版本 -v: 显示内核版本号 -m: 显示机器硬件名称 -p: 显示处理器架构 -i: 显示硬件平台 -o: 显示操作系统名称 man命令 要查看命令手册，可以使用 man 命令。具体示例：\n使用 man ls 查看 ls 命令的说明书。这将打开 ls 命令的手册页，其中包括用法、选项和示例等详细信息。 要退出手册页，可以按 q。\n软件包管理 apt-get 命令 下载/卸载/管理 软件包\nwhich 命令查找位置\n使用 apt-get 命令下载、卸载和管理软件包。例如：\napt-get install package_name 安装软件包。 apt-get remove package_name 卸载软件包。 使用 which 命令查找可执行文件的位置。例如，which command_name 将显示该命令的完整路径。\n不同系统管理 Debian/Ubuntu 系统 下载软件包: apt-get install package_name 卸载软件包: apt-get remove package_name 更新软件包列表: apt-get update 升级软件包: apt-get upgrade Red Hat/CentOS 系统 下载软件包: yum install package_name 卸载软件包: yum remove package_name 更新软件包列表: yum check-update 升级软件包: yum update Arch Linux 系统 下载软件包: pacman -S package_name 卸载软件包: pacman -R package_name 更新软件包列表和升级: pacman -Syu macOS (使用 Homebrew) 下载软件包: brew install package_name 卸载软件包: brew uninstall package_name 更新软件包列表: brew update 升级软件包: brew upgrade Windows (使用 Chocolatey) 下载软件包: choco install package_name 卸载软件包: choco uninstall package_name 更新软件包: choco upgrade all 文件系统类型 查看swap信息并更改单位显示：free -h。 挂载文件系统：使用 sudo mount 命令挂载文件系统到指定目标点，例如 sudo mount /dev/xxx/yyy target。其中，target 是挂载点。 卸载已挂载的文件系统：使用 umount 命令卸载挂载点，例如 umount target。 查询磁盘使用情况：使用 df -h 命令查看磁盘的可用空间等信息。 检查或修改文件系统：使用 fsck 命令进行磁盘检查和修复。可以使用 -C 和 -t $type $路径 参数来指定检查的类型和路径。具体语法可查看 fsck --help 获取更多信息。 在磁盘上创建文件系统：使用 mkfs 命令。具体文件系统类型可以通过查看系统支持的选项来确定。例如，创建ext4文件系统可以使用 mkfs.ext4 命令。 查看分区表：使用 fdisk -l $路径 命令来查看指定设备的分区表信息。如果只是想列出当前系统所有设备，可以省略 $路径 参数。 使用gzip压缩工具：压缩文件使用 gzip xxxx.c，压缩目录使用 gzip -r /home，解压使用 gzip -d xxxx.c.gz。注意，gzip 会替换原始文件为 .gz 格式。 使用tar命令进行压缩和解压：查看tar的帮助信息可以使用 tar --help。压缩文件可以使用 tar -cvf xxx.tar yyy.c ...，解压可以使用 tar -xf xxx.tar -C $解压放置的位置。 使用bzip压缩和解压缩工具：压缩时使用 bzip2 filename 生成 .bz2 文件，解压缩时使用 bzip2 -d filename.bz2 或 bunzip2 filename.bz2。 使用zip命令创建和解压ZIP文件：压缩时使用 zip archive.zip file1 file2 创建ZIP文件，解压时使用 unzip archive.zip 解压ZIP文件。 用户管理 查看用户信息，可以使用 cat /etc/passwd 命令。 添加用户可以使用 useradd 命令。例如，useradd xxxx 将创建一个名为 \u0026ldquo;xxxx\u0026rdquo; 的新用户。 创建用户组使用 groupadd 命令。例如，groupadd xxxxgroup 将创建一个名为 \u0026ldquo;xxxxgroup\u0026rdquo; 的新用户组。查看所有用户组信息可以使用 cat /etc/group。 要查看用户执行过的命令记录，可以使用 history 命令。 使用 passwd 命令更改密码。执行此命令后，系统会提示输入当前用户的旧密码以及新密码。 删除用户可以使用 userdel 命令。例如，userdel xxxuser 将删除名为 \u0026ldquo;xxxuser\u0026rdquo; 的用户。 管理用户账号，包括修改用户名，可以使用 usermod 命令。例如，usermod -l new_name old_name 将把 \u0026ldquo;old_name\u0026rdquo; 的用户名更改为 \u0026ldquo;new_name\u0026rdquo;。 查看用户信息，可以使用 id xxxname 命令，这将显示名为 \u0026ldquo;xxxname\u0026rdquo; 的用户的详细信息。 用户切换可以使用 su 命令。例如，su root 将切换到 root 用户，而 su xxxname 将切换到名为 \u0026ldquo;xxxname\u0026rdquo; 的用户。 使用 sudo 命令可以以管理员权限执行命令。在执行需要特权的命令前，输入 sudo 和该命令，然后输入管理员密码即可。 进程管理 监视进程： 使用 ps 命令查看当前进程。 查看 ps 手册：man ps。 常用选项： 显示所有进程：ps -e 显示不带终端的所有进程：ps -au 显示特定用户的进程：ps -u root 或 ps -u xxxname 显示详细信息：ps -l 跟踪进程： 使用 top 命令监控进程。 自动更新 4 次后退出：top -n 4 设置刷新时间为 5 秒：top -d 5 仅监控特定进程 ID（如 1810）：top -p 1810 htop 命令： htop 是 top 的升级版，提供更友好的用户界面和交互功能。 终止进程： 使用 kill 命令终止进程。例如，kill 1201 将关闭进程 ID 为 1201 的进程。 设置进程优先级： 查看进程 nice 值并按降序排列：ps axo pid,comm,nice --sort=-nice 查看特定进程的 nice 值：ps -p 1201 -o nice 修改进程的 nice 值：renice -n 10 -p 1201 查看进程属性： 使用 pgrep 命令查找进程。 常用命令： 查询特定进程名：pgrep xxxname 模糊查询进程名：pgrep -l ^xxxname 性能监控 显示和配置网络设备 查看网络设备信息： 使用 ifconfig 命令可以查看当前网络配置。 显示所有网络设备及其状态：ifconfig 帮助文档： 查看 ifconfig 的帮助信息：ifconfig --help 常用选项： 启用网络接口：ifconfig eth0 up （将 eth0 替换为实际接口名） 禁用网络接口：ifconfig eth0 down 设置 IP 地址：ifconfig eth0 192.168.1.100 设置子网掩码：ifconfig eth0 netmask 255.255.255.0 查看特定接口信息：ifconfig eth0 现代替代工具 在许多现代 Linux 发行版中，\nifconfig 已被\nip 命令替代，建议使用：\n查看网络设备信息：ip addr 启用接口：ip link set eth0 up 禁用接口：ip link set eth0 down 设置 IP 地址：ip addr add 192.168.1.100/24 dev eth0 CPU 统计数据 iostat 命令\n：\n基本使用：iostat 显示 CPU 和 I/O 统计信息。 输出磁盘利用率：iostat -d sda1 （显示指定磁盘的利用信息）。 输出 CPU 和磁盘利用率：iostat -t （包含时间戳）。 显示 CPU 和磁盘利用率的详细信息：iostat -m （以兆字节为单位显示）。 查看 CPU 使用情况：iostat -c （只显示 CPU 统计数据）。 I/O 监控 iotop 命令\n：\niotop 用于实时监控 I/O 使用情况。 需要 root 权限，可以使用 sudo iotop 来执行该命令。 CPU 统计信息 mpstat 命令\n：\n使用 mpstat 报告 CPU 统计信息。 显示 CPU 中断数：mpstat -I SUM。 虚拟内存统计 vmstat 命令\n：\n查看所有虚拟内存的统计信息：vmstat -a。 输出磁盘统计数据：vmstat -d。 报告虚拟内存统计的详细信息：vmstat -s。 shell 编程基础 shell入门编程实例 Linux C++引用 Linux C++智能指针 unique_ptr shared_ptr weak_ptr 为什么要使用 weak_ptr指针: 为了解决 shared ptr 循环引用问题。\nLinux客户端与服务器 Linux IO 多路复用 ","permalink":"//localhost:1313/posts/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/","summary":"\u003ch1 id=\"常用指令\"\u003e常用指令\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003evim    访问文本\u003c/li\u003e\n\u003cli\u003e退出文本并保存       :wq\u003c/li\u003e\n\u003cli\u003e返回到上一个文件夹    cd . .\u003c/li\u003e\n\u003cli\u003e解压指令         tar  -zxvf   xxxx.tar.gz\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"vi----vim-操作\"\u003evi    vim 操作\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003ei o a r  进入vim\u003c/li\u003e\n\u003cli\u003e按下esc , 输入**:**   然后输入wq  保存并退出            :q退出      :q!  不保存退出\u003c/li\u003e\n\u003cli\u003eyy 拷贝    5yy\u003c/li\u003e\n\u003cli\u003edd 删除   5dd\u003c/li\u003e\n\u003cli\u003e撤销  u\u003c/li\u003e\n\u003cli\u003e行号打开 :set nu\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"关机\"\u003e关机\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003eshutdown -h  关机\u003c/li\u003e\n\u003cli\u003eshutdown -r  重启\u003c/li\u003e\n\u003cli\u003ereboot  重启\u003c/li\u003e\n\u003cli\u003esync  把内存数据存入磁盘\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"注销用户和登录\"\u003e注销用户和登录\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003elogout\u003c/p\u003e","title":"Linux常用指令"},{"content":"信号与槽机制 PyQt的.ui文件转成.py文件 进入 .ui 文件所在的目录，然后在命令行中输入下面的代码示例。\npyuic5 -x xxxx.ui -o yyyyyy.py\nxxxx.ui 目标文件 \u0026mdash;\u0026gt; yyyyy.py 结果\n设置ui禁止编辑 例如\nui -\u0026gt; tableView -\u0026gt; setEditTriggers(QAbstractItemView::NoEditTriggers); ","permalink":"//localhost:1313/posts/qt_study/","summary":"\u003ch1 id=\"信号与槽机制\"\u003e信号与槽机制\u003c/h1\u003e\n\u003ch2 id=\"heading\"\u003e\u003c/h2\u003e\n\u003ch1 id=\"pyqt的ui文件转成py文件\"\u003ePyQt的\u003ccode\u003e.ui\u003c/code\u003e文件转成\u003ccode\u003e.py\u003c/code\u003e文件\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e进入 \u003ccode\u003e.ui\u003c/code\u003e 文件所在的目录，然后在命令行中输入下面的代码示例。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003epyuic5   -x    xxxx.ui   -o   yyyyyy.py\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003exxxx.ui  目标文件  \u0026mdash;\u0026gt;   yyyyy.py 结果\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"设置ui禁止编辑\"\u003e设置ui禁止编辑\u003c/h1\u003e\n\u003cp\u003e例如\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eui\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etableView\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nf\"\u003esetEditTriggers\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eQAbstractItemView\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eNoEditTriggers\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"Qt开发的学习记录"},{"content":"这是用于测试的文档 This is second post of site.\n$$ a^2 + b^2 = c^2 $$\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;unordered_map\u0026gt; // 使用哈希表 #include \u0026lt;unordered_set\u0026gt; #include \u0026lt;stack\u0026gt; // 使用栈 #include \u0026lt;string\u0026gt; // 使用字符串 #include \u0026lt;utility\u0026gt; #include \u0026lt;cstring\u0026gt; // 有memset将一块内存区域设置为特定的值。 strcpy：复制一个字符串。strcat：连接两个字符串。strlen：获取字符串的长度。strcmp：比较两个字符串。 #include \u0026lt;functional\u0026gt; #include \u0026lt;numeric\u0026gt; using namespace std; typedef long long ll; // 定义long long类型的简写为ll typedef long double ld; // 定义long double类型的简写为ld typedef pair\u0026lt;int, int\u0026gt; pii; // 定义pair\u0026lt;int, int\u0026gt;类型的简写为pii typedef pair\u0026lt;ll, ll\u0026gt; pll; // 定义pair\u0026lt;ll, ll\u0026gt;类型的简写为pll typedef vector\u0026lt;int\u0026gt; vi; // 定义vector\u0026lt;int\u0026gt;类型的简写为vi //--------------------------------模板--------------------------------// class Solution { public: }; int main() { std::vector\u0026lt;int\u0026gt; arr = {5, 3, 8, 1, 2}; std::sort(arr.begin(), arr.end(), std::greater\u0026lt;int\u0026gt;()); for (int num : arr) { std::cout \u0026lt;\u0026lt; num \u0026lt;\u0026lt; \u0026#34; \u0026#34;\u0026lt;\u0026lt;endl; } return 0; } // imgs 11111\n22222\n3333\n","permalink":"//localhost:1313/posts/second-post/","summary":"\u003ch1 id=\"这是用于测试的文档\"\u003e这是用于测试的文档\u003c/h1\u003e\n\u003cp\u003eThis is second post of site.\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003e$$\na^2 + b^2 = c^2\n$$\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;algorithm\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unordered_map\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 使用哈希表\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;unordered_set\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stack\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e  \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 使用栈\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 使用字符串\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;utility\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cstring\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 有memset将一块内存区域设置为特定的值。 strcpy：复制一个字符串。strcat：连接两个字符串。strlen：获取字符串的长度。strcmp：比较两个字符串。\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;functional\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;numeric\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e       \u003cspan class=\"c1\"\u003e// 定义long long类型的简写为ll\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eld\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// 定义long double类型的简写为ld\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epii\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 定义pair\u0026lt;int, int\u0026gt;类型的简写为pii\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ell\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epll\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 定义pair\u0026lt;ll, ll\u0026gt;类型的简写为pll\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003evi\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// 定义vector\u0026lt;int\u0026gt;类型的简写为vi\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//--------------------------------模板--------------------------------//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSolution\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003egreater\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nl\"\u003enum\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"imgs\"\u003eimgs\u003c/h1\u003e\n\u003cp\u003e11111\u003c/p\u003e","title":"Second Post"},{"content":"第一篇博客 感谢 B 站 UP 主 SonnyCalcr 的大力支持，让我得以学习并成功搭建这个个人博客网站。非常感谢他的支持与指导！\n这是这位up主的网站（支持up）：bilibili: SonnyCalcr\n","permalink":"//localhost:1313/posts/firstpost/","summary":"\u003ch1 id=\"第一篇博客\"\u003e第一篇博客\u003c/h1\u003e\n\u003cp\u003e感谢 B 站 UP 主 SonnyCalcr 的大力支持，让我得以学习并成功搭建这个个人博客网站。非常感谢他的支持与指导！\u003c/p\u003e\n\u003cp\u003e这是这位up主的网站（支持up）：\u003ca href=\"https://space.bilibili.com/3493138859559908\"\u003ebilibili: SonnyCalcr\u003c/a\u003e\u003c/p\u003e","title":"FirstPost"},{"content":"Love and share !🗽\nNever say never !!!\n","permalink":"//localhost:1313/about/","summary":"about","title":"关于"}]